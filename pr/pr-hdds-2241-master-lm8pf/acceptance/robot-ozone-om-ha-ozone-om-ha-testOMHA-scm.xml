<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 21:22:36.447" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 21:22:36.677" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 21:22:39.158" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 21:22:39.158" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 21:22:39.159" starttime="20191115 21:22:36.674"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 21:22:39.160" level="INFO"></msg>
<status status="PASS" endtime="20191115 21:22:39.160" starttime="20191115 21:22:39.159"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 21:22:39.160" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 21:22:39.160" starttime="20191115 21:22:39.160"></status>
</kw>
<status status="PASS" endtime="20191115 21:22:39.161" starttime="20191115 21:22:36.673"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 21:22:39.166" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 21:22:41.340" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 21:22:41.340" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 21:22:41.340" starttime="20191115 21:22:39.165"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 21:22:41.341" level="INFO"></msg>
<status status="PASS" endtime="20191115 21:22:41.341" starttime="20191115 21:22:41.340"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 21:22:41.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 21:22:41.342" starttime="20191115 21:22:41.341"></status>
</kw>
<status status="PASS" endtime="20191115 21:22:41.342" starttime="20191115 21:22:39.161"></status>
</kw>
<status status="PASS" endtime="20191115 21:22:41.342" starttime="20191115 21:22:36.672"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 21:22:41.343" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191115 21:22:41.343" starttime="20191115 21:22:41.343"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 21:22:41.344" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191115 21:22:41.344" starttime="20191115 21:22:41.344"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 21:22:41.345" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191115 21:22:41.345" starttime="20191115 21:22:41.344"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 21:22:41.592" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 21:22:41.592" starttime="20191115 21:22:41.345"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 21:22:41.596" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 21:22:46.338" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 21:22:46.338" level="INFO">${output} = 2019-11-15 21:22:44 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 21:22:44 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 21:22:46.338" starttime="20191115 21:22:41.594"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 21:22:46.339" level="INFO">2019-11-15 21:22:44 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 21:22:44 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 21:22:44 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 21:22:46.340" starttime="20191115 21:22:46.338"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 21:22:46.340" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 21:22:46.340" starttime="20191115 21:22:46.340"></status>
</kw>
<status status="PASS" endtime="20191115 21:22:46.341" starttime="20191115 21:22:41.593"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 21:22:46.344" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 21:22:48.703" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 21:22:48.703" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191115 21:22:48.703" starttime="20191115 21:22:46.342"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 21:22:48.704" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191115 21:22:48.704" starttime="20191115 21:22:48.704"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 21:22:48.705" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 21:22:48.705" starttime="20191115 21:22:48.705"></status>
</kw>
<msg timestamp="20191115 21:22:48.705" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191115 21:22:48.706" starttime="20191115 21:22:46.341"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 21:22:48.706" starttime="20191115 21:22:48.706"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 21:22:48.707" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 21:22:48.707" starttime="20191115 21:22:48.706"></status>
</kw>
<status status="PASS" endtime="20191115 21:22:48.707" starttime="20191115 21:22:41.342"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 21:22:48.710" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 21:22:50.611" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 21:22:50.611" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:50.611" starttime="20191115 21:22:48.708"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 21:22:50.612" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:50.612" starttime="20191115 21:22:50.612"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 21:22:50.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 21:22:50.613" starttime="20191115 21:22:50.613"></status>
</kw>
<msg timestamp="20191115 21:22:50.613" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:50.614" starttime="20191115 21:22:48.707"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 21:22:50.614" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:50.614" starttime="20191115 21:22:50.614"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 21:22:50.615" starttime="20191115 21:22:50.614"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 21:22:50.616" starttime="20191115 21:22:50.615"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 21:22:50.616" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 21:22:50.616" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:50.616" starttime="20191115 21:22:50.616"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 21:22:50.617" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 21:22:50.617" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 21:22:50.617" starttime="20191115 21:22:50.616"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 21:22:50.617" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 21:22:50.618" starttime="20191115 21:22:50.617"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 21:22:50.618" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 21:22:50.618" starttime="20191115 21:22:50.618"></status>
</kw>
<msg timestamp="20191115 21:22:50.618" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 21:22:50.618" starttime="20191115 21:22:48.707"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 21:22:50.620" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 21:22:50.620" starttime="20191115 21:22:50.619"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 21:22:50.621" starttime="20191115 21:22:50.620"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 21:22:50.621" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 21:22:51.934" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 21:22:51.934" starttime="20191115 21:22:50.621"></status>
</kw>
<status status="PASS" endtime="20191115 21:22:51.935" starttime="20191115 21:22:50.620"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 21:22:51.935" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 21:22:51.950" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 21:22:51.950" starttime="20191115 21:22:51.935"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 21:22:51.950" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 21:22:52.027" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 21:22:52.027" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 21:22:52.027" starttime="20191115 21:22:51.950"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 21:22:52.142" starttime="20191115 21:22:52.028"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 21:22:52.143" starttime="20191115 21:22:52.143"></status>
</kw>
<msg timestamp="20191115 21:22:52.143" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 21:22:52.144" starttime="20191115 21:22:50.619"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 21:22:52.147" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 21:22:54.131" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 21:22:54.131" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:54.131" starttime="20191115 21:22:52.145"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 21:22:54.132" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:54.132" starttime="20191115 21:22:54.132"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 21:22:54.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 21:22:54.133" starttime="20191115 21:22:54.133"></status>
</kw>
<msg timestamp="20191115 21:22:54.133" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:54.133" starttime="20191115 21:22:52.144"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 21:22:54.134" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:54.134" starttime="20191115 21:22:54.134"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 21:22:54.135" starttime="20191115 21:22:54.134"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 21:22:54.135" starttime="20191115 21:22:54.135"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 21:22:54.136" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 21:22:54.136" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:54.136" starttime="20191115 21:22:54.135"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 21:22:54.136" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 21:22:54.136" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 21:22:54.137" starttime="20191115 21:22:54.136"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 21:22:54.137" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 21:22:54.137" starttime="20191115 21:22:54.137"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 21:22:54.138" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 21:22:54.138" starttime="20191115 21:22:54.137"></status>
</kw>
<msg timestamp="20191115 21:22:54.138" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 21:22:54.138" starttime="20191115 21:22:52.144"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 21:22:54.139" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 21:22:54.139" starttime="20191115 21:22:54.138"></status>
</kw>
<status status="FAIL" endtime="20191115 21:22:54.139" critical="yes" starttime="20191115 21:22:36.671">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 21:22:54.142" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 21:22:54.142" starttime="20191115 21:22:54.140"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 21:22:54.143" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 21:22:54.143" starttime="20191115 21:22:54.142"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 21:22:54.144" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 21:22:54.144" starttime="20191115 21:22:54.144"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 21:22:54.146" starttime="20191115 21:22:54.145"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 21:22:54.146" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 21:22:55.483" level="INFO">Read output:</msg>
<status status="PASS" endtime="20191115 21:22:55.483" starttime="20191115 21:22:54.146"></status>
</kw>
<status status="PASS" endtime="20191115 21:22:55.484" starttime="20191115 21:22:54.145"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 21:22:55.485" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 21:22:55.499" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 21:22:55.500" starttime="20191115 21:22:55.484"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 21:22:55.500" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 21:22:55.577" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 21:22:55.578" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 21:22:55.578" starttime="20191115 21:22:55.500"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 21:22:55.693" starttime="20191115 21:22:55.578"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 21:22:55.694" starttime="20191115 21:22:55.693"></status>
</kw>
<status status="PASS" endtime="20191115 21:22:55.694" starttime="20191115 21:22:54.143"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 21:22:55.695" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 21:22:55.695" starttime="20191115 21:22:55.695"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 21:22:55.696" starttime="20191115 21:22:55.696"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 21:22:55.697" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 21:22:56.902" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 21:22:56.902" starttime="20191115 21:22:55.697"></status>
</kw>
<status status="PASS" endtime="20191115 21:22:56.903" starttime="20191115 21:22:55.696"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 21:22:56.904" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 21:22:56.919" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 21:22:56.919" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191115 21:22:56.919" starttime="20191115 21:22:56.903"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 21:22:56.920" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191115 21:22:56.920" starttime="20191115 21:22:56.920"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 21:22:56.921" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191115 21:22:56.921" starttime="20191115 21:22:56.921"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 21:22:56.964" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191115 21:22:56.964" starttime="20191115 21:22:56.922"></status>
</kw>
<status status="FAIL" endtime="20191115 21:22:56.965" starttime="20191115 21:22:55.694"></status>
</kw>
<status status="FAIL" endtime="20191115 21:22:56.965" critical="yes" starttime="20191115 21:22:54.140">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 21:22:56.970" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 21:22:58.834" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 21:22:58.834" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:58.834" starttime="20191115 21:22:56.968"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 21:22:58.835" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:58.835" starttime="20191115 21:22:58.835"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 21:22:58.836" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 21:22:58.836" starttime="20191115 21:22:58.835"></status>
</kw>
<msg timestamp="20191115 21:22:58.837" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:58.837" starttime="20191115 21:22:56.967"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 21:22:58.837" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:58.838" starttime="20191115 21:22:58.837"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 21:22:58.838" starttime="20191115 21:22:58.838"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 21:22:58.839" starttime="20191115 21:22:58.838"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 21:22:58.839" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 21:22:58.839" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:22:58.839" starttime="20191115 21:22:58.839"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 21:22:58.840" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 21:22:58.840" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 21:22:58.840" starttime="20191115 21:22:58.840"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 21:22:58.841" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 21:22:58.841" starttime="20191115 21:22:58.840"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 21:22:58.841" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 21:22:58.841" starttime="20191115 21:22:58.841"></status>
</kw>
<msg timestamp="20191115 21:22:58.842" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 21:22:58.842" starttime="20191115 21:22:56.967"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 21:22:58.843" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 21:22:58.843" starttime="20191115 21:22:58.842"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 21:22:58.844" starttime="20191115 21:22:58.844"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 21:22:58.845" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 21:23:00.042" level="INFO">Read output: Last login: Fri Nov 15 21:22:50 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 21:23:00.043" starttime="20191115 21:22:58.844"></status>
</kw>
<status status="PASS" endtime="20191115 21:23:00.043" starttime="20191115 21:22:58.843"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 21:23:00.044" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 21:23:00.058" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 21:23:00.058" starttime="20191115 21:23:00.043"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 21:23:00.059" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 21:23:00.137" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 21:23:00.137" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 21:23:00.137" starttime="20191115 21:23:00.058"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 21:23:00.252" starttime="20191115 21:23:00.137"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 21:23:00.253" starttime="20191115 21:23:00.252"></status>
</kw>
<msg timestamp="20191115 21:23:00.253" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 21:23:00.253" starttime="20191115 21:22:58.842"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 21:23:00.256" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 21:23:03.294" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 21:23:03.294" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:23:03.294" starttime="20191115 21:23:00.254"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 21:23:03.295" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:23:03.295" starttime="20191115 21:23:03.294"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 21:23:03.296" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 21:23:03.296" starttime="20191115 21:23:03.295"></status>
</kw>
<msg timestamp="20191115 21:23:03.296" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:23:03.296" starttime="20191115 21:23:00.254"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 21:23:03.297" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:23:03.297" starttime="20191115 21:23:03.296"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 21:23:03.297" starttime="20191115 21:23:03.297"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 21:23:03.298" starttime="20191115 21:23:03.297"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 21:23:03.298" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 21:23:03.298" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 21:23:03.298" starttime="20191115 21:23:03.298"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 21:23:03.299" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 21:23:03.299" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 21:23:03.299" starttime="20191115 21:23:03.299"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 21:23:03.300" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 21:23:03.300" starttime="20191115 21:23:03.299"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 21:23:03.300" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 21:23:03.300" starttime="20191115 21:23:03.300"></status>
</kw>
<msg timestamp="20191115 21:23:03.300" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 21:23:03.300" starttime="20191115 21:23:00.253"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 21:23:03.302" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 21:23:03.302" starttime="20191115 21:23:03.301"></status>
</kw>
<status status="FAIL" endtime="20191115 21:23:03.302" starttime="20191115 21:22:56.967"></status>
</kw>
<status status="FAIL" endtime="20191115 21:23:03.302" starttime="20191115 21:22:56.966"></status>
</kw>
<status status="FAIL" endtime="20191115 21:23:03.302" critical="yes" starttime="20191115 21:22:56.966">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191115 21:23:03.303" starttime="20191115 21:22:36.448"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
