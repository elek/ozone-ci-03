<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191105 22:40:44.245" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:40:44.484" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:40:57.501" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:40:57.501" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191105 22:40:57.501" starttime="20191105 22:40:44.481"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:40:57.503" level="INFO"></msg>
<status status="PASS" endtime="20191105 22:40:57.503" starttime="20191105 22:40:57.502"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:40:57.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:40:57.504" starttime="20191105 22:40:57.503"></status>
</kw>
<status status="PASS" endtime="20191105 22:40:57.504" starttime="20191105 22:40:44.479"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:40:57.512" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:41:02.502" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:41:02.502" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191105 22:41:02.503" starttime="20191105 22:40:57.510"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:41:02.504" level="INFO"></msg>
<status status="PASS" endtime="20191105 22:41:02.504" starttime="20191105 22:41:02.503"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:41:02.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:41:02.505" starttime="20191105 22:41:02.504"></status>
</kw>
<status status="PASS" endtime="20191105 22:41:02.505" starttime="20191105 22:40:57.504"></status>
</kw>
<status status="PASS" endtime="20191105 22:41:02.506" starttime="20191105 22:40:44.478"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191105 22:41:02.507" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191105 22:41:02.507" starttime="20191105 22:41:02.506"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191105 22:41:02.508" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191105 22:41:02.508" starttime="20191105 22:41:02.508"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191105 22:41:02.509" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191105 22:41:02.509" starttime="20191105 22:41:02.509"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 22:41:02.512" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 22:41:02.512" starttime="20191105 22:41:02.509"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:41:02.515" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:41:13.197" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:41:13.197" level="INFO">${output} = 2019-11-05 22:41:08 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 22:41:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191105 22:41:13.197" starttime="20191105 22:41:02.513"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:41:13.198" level="INFO">2019-11-05 22:41:08 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 22:41:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-05 22:41:08 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 22:41:13.199" starttime="20191105 22:41:13.198"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:41:13.200" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:41:13.200" starttime="20191105 22:41:13.199"></status>
</kw>
<status status="PASS" endtime="20191105 22:41:13.200" starttime="20191105 22:41:02.512"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:41:13.204" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:41:18.481" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:41:18.481" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191105 22:41:18.481" starttime="20191105 22:41:13.202"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:41:18.483" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191105 22:41:18.483" starttime="20191105 22:41:18.482"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:41:18.484" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:41:18.484" starttime="20191105 22:41:18.483"></status>
</kw>
<msg timestamp="20191105 22:41:18.484" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191105 22:41:18.484" starttime="20191105 22:41:13.200"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:18.485" starttime="20191105 22:41:18.485"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 22:41:18.486" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 22:41:18.487" starttime="20191105 22:41:18.486"></status>
</kw>
<status status="PASS" endtime="20191105 22:41:18.487" starttime="20191105 22:41:02.506"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:41:18.491" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:41:21.662" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:41:21.662" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:21.662" starttime="20191105 22:41:18.488"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:41:21.664" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:21.664" starttime="20191105 22:41:21.663"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:41:21.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:41:21.665" starttime="20191105 22:41:21.664"></status>
</kw>
<msg timestamp="20191105 22:41:21.665" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:21.665" starttime="20191105 22:41:18.488"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 22:41:21.666" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:21.666" starttime="20191105 22:41:21.666"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:21.667" starttime="20191105 22:41:21.666"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:21.668" starttime="20191105 22:41:21.668"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 22:41:21.674" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 22:41:21.675" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:21.675" starttime="20191105 22:41:21.668"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 22:41:21.676" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 22:41:21.676" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 22:41:21.676" starttime="20191105 22:41:21.675"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 22:41:21.676" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:41:21.677" starttime="20191105 22:41:21.676"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 22:41:21.677" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 22:41:21.677" starttime="20191105 22:41:21.677"></status>
</kw>
<msg timestamp="20191105 22:41:21.678" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:41:21.678" starttime="20191105 22:41:18.487"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 22:41:21.679" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191105 22:41:21.680" starttime="20191105 22:41:21.679"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:21.696" starttime="20191105 22:41:21.695"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 22:41:21.696" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191105 22:41:22.924" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 22:41:22.925" starttime="20191105 22:41:21.696"></status>
</kw>
<status status="PASS" endtime="20191105 22:41:22.925" starttime="20191105 22:41:21.680"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 22:41:22.926" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 22:41:22.941" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 22:41:22.942" starttime="20191105 22:41:22.925"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 22:41:22.943" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 22:41:23.021" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 22:41:23.021" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 22:41:23.021" starttime="20191105 22:41:22.942"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 22:41:23.136" starttime="20191105 22:41:23.022"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:23.137" starttime="20191105 22:41:23.137"></status>
</kw>
<msg timestamp="20191105 22:41:23.138" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191105 22:41:23.138" starttime="20191105 22:41:21.678"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:41:23.140" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:41:30.378" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:41:30.378" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:30.378" starttime="20191105 22:41:23.139"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:41:30.380" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:30.380" starttime="20191105 22:41:30.379"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:41:30.381" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:41:30.381" starttime="20191105 22:41:30.380"></status>
</kw>
<msg timestamp="20191105 22:41:30.382" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:30.382" starttime="20191105 22:41:23.138"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 22:41:30.383" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:30.383" starttime="20191105 22:41:30.382"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:30.384" starttime="20191105 22:41:30.383"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:30.385" starttime="20191105 22:41:30.384"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 22:41:30.386" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 22:41:30.386" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:30.386" starttime="20191105 22:41:30.385"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 22:41:30.387" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 22:41:30.387" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 22:41:30.388" starttime="20191105 22:41:30.387"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 22:41:30.389" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:41:30.389" starttime="20191105 22:41:30.388"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 22:41:30.390" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 22:41:30.390" starttime="20191105 22:41:30.389"></status>
</kw>
<msg timestamp="20191105 22:41:30.390" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:41:30.390" starttime="20191105 22:41:23.138"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191105 22:41:30.392" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191105 22:41:30.392" starttime="20191105 22:41:30.391"></status>
</kw>
<status status="FAIL" endtime="20191105 22:41:30.393" critical="yes" starttime="20191105 22:40:44.477">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191105 22:41:30.401" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191105 22:41:30.401" starttime="20191105 22:41:30.398"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191105 22:41:30.404" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191105 22:41:30.404" starttime="20191105 22:41:30.402"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 22:41:30.446" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 22:41:30.446" starttime="20191105 22:41:30.445"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:30.449" starttime="20191105 22:41:30.447"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 22:41:30.450" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 22:41:31.450" level="INFO">Read output:</msg>
<status status="PASS" endtime="20191105 22:41:31.451" starttime="20191105 22:41:30.449"></status>
</kw>
<status status="PASS" endtime="20191105 22:41:31.451" starttime="20191105 22:41:30.446"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 22:41:31.452" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 22:41:31.466" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 22:41:31.466" starttime="20191105 22:41:31.451"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 22:41:31.467" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 22:41:31.544" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 22:41:31.545" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 22:41:31.545" starttime="20191105 22:41:31.466"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 22:41:31.660" starttime="20191105 22:41:31.545"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:31.662" starttime="20191105 22:41:31.661"></status>
</kw>
<status status="PASS" endtime="20191105 22:41:31.662" starttime="20191105 22:41:30.444"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 22:41:31.663" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 22:41:31.664" starttime="20191105 22:41:31.663"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:31.665" starttime="20191105 22:41:31.664"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 22:41:31.666" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 22:41:33.149" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 22:41:33.149" starttime="20191105 22:41:31.665"></status>
</kw>
<status status="PASS" endtime="20191105 22:41:33.149" starttime="20191105 22:41:31.664"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191105 22:41:33.150" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191105 22:41:33.166" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 22:41:33.166" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191105 22:41:33.166" starttime="20191105 22:41:33.150"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191105 22:41:33.167" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191105 22:41:33.167" starttime="20191105 22:41:33.166"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191105 22:41:33.168" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191105 22:41:33.168" starttime="20191105 22:41:33.167"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191105 22:41:33.212" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191105 22:41:33.212" starttime="20191105 22:41:33.168"></status>
</kw>
<status status="FAIL" endtime="20191105 22:41:33.213" starttime="20191105 22:41:31.662"></status>
</kw>
<status status="FAIL" endtime="20191105 22:41:33.213" critical="yes" starttime="20191105 22:41:30.395">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:41:33.223" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:41:36.919" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:41:36.919" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:36.919" starttime="20191105 22:41:33.221"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:41:36.921" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:36.921" starttime="20191105 22:41:36.920"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:41:36.922" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:41:36.922" starttime="20191105 22:41:36.921"></status>
</kw>
<msg timestamp="20191105 22:41:36.923" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:36.923" starttime="20191105 22:41:33.220"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 22:41:36.924" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:36.924" starttime="20191105 22:41:36.923"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:36.925" starttime="20191105 22:41:36.924"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:36.925" starttime="20191105 22:41:36.925"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 22:41:36.926" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 22:41:36.926" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:36.926" starttime="20191105 22:41:36.926"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 22:41:36.927" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 22:41:36.927" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 22:41:36.928" starttime="20191105 22:41:36.927"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 22:41:36.928" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:41:36.928" starttime="20191105 22:41:36.928"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 22:41:36.929" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 22:41:36.929" starttime="20191105 22:41:36.929"></status>
</kw>
<msg timestamp="20191105 22:41:36.930" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:41:36.930" starttime="20191105 22:41:33.220"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 22:41:36.932" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191105 22:41:36.932" starttime="20191105 22:41:36.931"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:36.934" starttime="20191105 22:41:36.933"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 22:41:36.935" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191105 22:41:38.146" level="INFO">Read output: Last login: Tue Nov  5 22:41:21 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 22:41:38.146" starttime="20191105 22:41:36.934"></status>
</kw>
<status status="PASS" endtime="20191105 22:41:38.146" starttime="20191105 22:41:36.932"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 22:41:38.147" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 22:41:38.156" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 22:41:38.156" starttime="20191105 22:41:38.147"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 22:41:38.157" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 22:41:38.234" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 22:41:38.235" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 22:41:38.235" starttime="20191105 22:41:38.157"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 22:41:38.350" starttime="20191105 22:41:38.235"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:38.351" starttime="20191105 22:41:38.351"></status>
</kw>
<msg timestamp="20191105 22:41:38.352" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191105 22:41:38.352" starttime="20191105 22:41:36.930"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:41:38.355" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:41:42.041" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:41:42.041" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:42.041" starttime="20191105 22:41:38.353"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:41:42.042" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:42.042" starttime="20191105 22:41:42.041"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:41:42.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:41:42.043" starttime="20191105 22:41:42.042"></status>
</kw>
<msg timestamp="20191105 22:41:42.043" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:42.043" starttime="20191105 22:41:38.352"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 22:41:42.044" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:42.044" starttime="20191105 22:41:42.044"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:42.044" starttime="20191105 22:41:42.044"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 22:41:42.045" starttime="20191105 22:41:42.045"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 22:41:42.045" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 22:41:42.045" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:41:42.046" starttime="20191105 22:41:42.045"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 22:41:42.046" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 22:41:42.046" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 22:41:42.046" starttime="20191105 22:41:42.046"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 22:41:42.047" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:41:42.047" starttime="20191105 22:41:42.046"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 22:41:42.047" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 22:41:42.047" starttime="20191105 22:41:42.047"></status>
</kw>
<msg timestamp="20191105 22:41:42.048" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:41:42.048" starttime="20191105 22:41:38.352"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191105 22:41:42.049" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191105 22:41:42.049" starttime="20191105 22:41:42.048"></status>
</kw>
<status status="FAIL" endtime="20191105 22:41:42.049" starttime="20191105 22:41:33.219"></status>
</kw>
<status status="FAIL" endtime="20191105 22:41:42.049" starttime="20191105 22:41:33.219"></status>
</kw>
<status status="FAIL" endtime="20191105 22:41:42.049" critical="yes" starttime="20191105 22:41:33.217">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191105 22:41:42.050" starttime="20191105 22:40:44.246"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
