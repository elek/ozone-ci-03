<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 23:06:32.822" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:06:32.971" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:06:35.606" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:06:35.606" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 23:06:35.606" starttime="20191115 23:06:32.970"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:06:35.608" level="INFO"></msg>
<status status="PASS" endtime="20191115 23:06:35.608" starttime="20191115 23:06:35.607"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:06:35.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:06:35.609" starttime="20191115 23:06:35.608"></status>
</kw>
<status status="PASS" endtime="20191115 23:06:35.610" starttime="20191115 23:06:32.969"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:06:35.618" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:06:37.699" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:06:37.699" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 23:06:37.699" starttime="20191115 23:06:35.615"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:06:37.700" level="INFO"></msg>
<status status="PASS" endtime="20191115 23:06:37.700" starttime="20191115 23:06:37.700"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:06:37.701" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:06:37.701" starttime="20191115 23:06:37.700"></status>
</kw>
<status status="PASS" endtime="20191115 23:06:37.701" starttime="20191115 23:06:35.610"></status>
</kw>
<status status="PASS" endtime="20191115 23:06:37.701" starttime="20191115 23:06:32.969"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:06:37.703" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191115 23:06:37.703" starttime="20191115 23:06:37.702"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:06:37.703" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191115 23:06:37.704" starttime="20191115 23:06:37.703"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:06:37.704" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191115 23:06:37.704" starttime="20191115 23:06:37.704"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:06:37.706" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:06:37.706" starttime="20191115 23:06:37.704"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:06:37.709" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:06:42.453" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:06:42.454" level="INFO">${output} = 2019-11-15 23:06:40 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:06:40 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 23:06:42.454" starttime="20191115 23:06:37.707"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:06:42.456" level="INFO">2019-11-15 23:06:40 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:06:40 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:06:40 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:06:42.456" starttime="20191115 23:06:42.455"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:06:42.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:06:42.457" starttime="20191115 23:06:42.456"></status>
</kw>
<status status="PASS" endtime="20191115 23:06:42.457" starttime="20191115 23:06:37.706"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:06:42.462" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:06:44.596" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:06:44.596" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191115 23:06:44.596" starttime="20191115 23:06:42.459"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:06:44.597" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191115 23:06:44.598" starttime="20191115 23:06:44.597"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:06:44.598" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:06:44.598" starttime="20191115 23:06:44.598"></status>
</kw>
<msg timestamp="20191115 23:06:44.599" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191115 23:06:44.599" starttime="20191115 23:06:42.458"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:06:44.599" starttime="20191115 23:06:44.599"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:06:44.600" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:06:44.600" starttime="20191115 23:06:44.599"></status>
</kw>
<status status="PASS" endtime="20191115 23:06:44.600" starttime="20191115 23:06:37.702"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:06:44.603" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:06:46.541" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:06:46.541" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:06:46.541" starttime="20191115 23:06:44.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:06:46.543" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:06:46.543" starttime="20191115 23:06:46.542"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:06:46.543" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:06:46.544" starttime="20191115 23:06:46.543"></status>
</kw>
<msg timestamp="20191115 23:06:46.544" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:06:46.544" starttime="20191115 23:06:44.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:06:46.545" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:06:46.545" starttime="20191115 23:06:46.544"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:06:46.546" starttime="20191115 23:06:46.545"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:06:46.546" starttime="20191115 23:06:46.546"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:06:46.547" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:06:46.547" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:06:46.547" starttime="20191115 23:06:46.546"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:06:46.548" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 23:06:46.548" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:06:46.548" starttime="20191115 23:06:46.547"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:06:46.548" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:06:46.548" starttime="20191115 23:06:46.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:06:46.549" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 23:06:46.549" starttime="20191115 23:06:46.548"></status>
</kw>
<msg timestamp="20191115 23:06:46.549" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:06:46.549" starttime="20191115 23:06:44.600"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:06:46.551" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 23:06:46.551" starttime="20191115 23:06:46.550"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:06:46.552" starttime="20191115 23:06:46.551"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:06:46.552" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:06:47.796" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:06:47.797" starttime="20191115 23:06:46.552"></status>
</kw>
<status status="PASS" endtime="20191115 23:06:47.797" starttime="20191115 23:06:46.551"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:06:47.798" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:06:57.959" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:06:57.959" starttime="20191115 23:06:47.797"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:06:57.961" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:06:58.069" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:06:58.069" level="INFO">${shutdownMsg} = hadoop     456  0.0  0.0   9556  1164 ?        Ss   23:06   0:00 bash -c sudo ps aux | grep om
hadoop     458  0.0  0.0   9088   668 ?        S    23:06   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:06:58.069" starttime="20191115 23:06:57.960"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:06:58.102" starttime="20191115 23:06:58.070"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:06:58.103" starttime="20191115 23:06:58.103"></status>
</kw>
<msg timestamp="20191115 23:06:58.104" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 23:06:58.104" starttime="20191115 23:06:46.549"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:06:58.108" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:07:10.360" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:07:10.360" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:07:10.360" starttime="20191115 23:06:58.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:07:10.362" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:07:10.362" starttime="20191115 23:07:10.361"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:07:10.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:07:10.363" starttime="20191115 23:07:10.363"></status>
</kw>
<msg timestamp="20191115 23:07:10.364" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:07:10.364" starttime="20191115 23:06:58.105"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:07:10.365" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:07:10.365" starttime="20191115 23:07:10.364"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:07:10.366" starttime="20191115 23:07:10.365"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:07:10.367" starttime="20191115 23:07:10.366"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:07:10.368" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:07:10.368" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:07:10.368" starttime="20191115 23:07:10.367"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:07:10.369" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191115 23:07:10.369" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:07:10.369" starttime="20191115 23:07:10.368"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:07:10.370" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:07:10.370" starttime="20191115 23:07:10.369"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:07:10.371" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191115 23:07:10.371" starttime="20191115 23:07:10.370"></status>
</kw>
<msg timestamp="20191115 23:07:10.372" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:07:10.372" starttime="20191115 23:06:58.104"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 23:07:10.373" starttime="20191115 23:07:10.372"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:07:10.374" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191115 23:07:10.374" starttime="20191115 23:07:10.374"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:07:10.376" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191115 23:07:10.376" starttime="20191115 23:07:10.375"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:07:10.377" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191115 23:07:10.377" starttime="20191115 23:07:10.376"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:07:10.379" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:07:10.379" starttime="20191115 23:07:10.377"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:07:10.383" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:07:24.945" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:07:24.945" level="INFO">${output} = 2019-11-15 23:07:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191115 23:07:24.946" starttime="20191115 23:07:10.380"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:07:24.948" level="INFO">2019-11-15 23:07:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:07:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:07:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:07:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:07:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:07:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:07:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:07:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:07:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:07:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:07:22 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-15 23:07:23 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:07:23 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:07:23 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:07:24.948" starttime="20191115 23:07:24.946"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:07:24.949" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:07:24.950" starttime="20191115 23:07:24.948"></status>
</kw>
<status status="PASS" endtime="20191115 23:07:24.951" starttime="20191115 23:07:10.379"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:07:24.955" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:07:37.281" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:07:37.281" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191115 23:07:37.281" starttime="20191115 23:07:24.952"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:07:37.283" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191115 23:07:37.284" starttime="20191115 23:07:37.282"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:07:37.284" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:07:37.285" starttime="20191115 23:07:37.284"></status>
</kw>
<msg timestamp="20191115 23:07:37.285" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191115 23:07:37.285" starttime="20191115 23:07:24.951"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:07:37.286" starttime="20191115 23:07:37.286"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:07:37.288" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:07:37.288" starttime="20191115 23:07:37.287"></status>
</kw>
<status status="PASS" endtime="20191115 23:07:37.288" starttime="20191115 23:07:10.373"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:07:37.290" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 23:07:37.290" starttime="20191115 23:07:37.289"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:07:37.292" starttime="20191115 23:07:37.291"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:07:37.293" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:07:38.492" level="INFO">Read output: Last login: Fri Nov 15 23:06:46 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:07:38.493" starttime="20191115 23:07:37.293"></status>
</kw>
<status status="PASS" endtime="20191115 23:07:38.493" starttime="20191115 23:07:37.291"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:07:38.493" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:07:40.612" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:07:40.612" starttime="20191115 23:07:38.493"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:07:40.613" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:07:40.700" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:07:40.700" level="INFO">${startupMsg} = hadoop     509  328  0.0 34487172 260884 ?     Sl   23:07   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:07:40.700" starttime="20191115 23:07:40.612"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:07:40.765" starttime="20191115 23:07:40.700"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:07:40.766" starttime="20191115 23:07:40.765"></status>
</kw>
<status status="PASS" endtime="20191115 23:07:40.766" starttime="20191115 23:07:37.288"></status>
</kw>
<status status="PASS" endtime="20191115 23:07:40.766" critical="yes" starttime="20191115 23:06:32.968"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 23:07:40.772" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:07:40.772" starttime="20191115 23:07:40.769"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 23:07:40.774" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 23:07:40.774" starttime="20191115 23:07:40.773"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:07:40.776" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:07:40.776" starttime="20191115 23:07:40.775"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:07:40.778" starttime="20191115 23:07:40.777"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:07:40.778" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:07:41.977" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:07:41.977" starttime="20191115 23:07:40.778"></status>
</kw>
<status status="PASS" endtime="20191115 23:07:41.978" starttime="20191115 23:07:40.776"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:07:41.979" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:07:52.108" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:07:52.109" starttime="20191115 23:07:41.978"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:07:52.110" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:07:52.176" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:07:52.176" level="INFO">${shutdownMsg} = hadoop     435  0.0  0.0   9556  1164 ?        Ss   23:07   0:00 bash -c sudo ps aux | grep om
hadoop     437  0.0  0.0   9088   668 ?        S    23:07   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:07:52.176" starttime="20191115 23:07:52.109"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:07:52.242" starttime="20191115 23:07:52.177"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:07:52.243" starttime="20191115 23:07:52.242"></status>
</kw>
<status status="PASS" endtime="20191115 23:07:52.243" starttime="20191115 23:07:40.775"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:07:52.245" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:07:52.245" starttime="20191115 23:07:52.244"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:07:52.247" starttime="20191115 23:07:52.246"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:07:52.248" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:07:53.452" level="INFO">Read output: Last login: Fri Nov 15 23:07:40 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:07:53.452" starttime="20191115 23:07:52.247"></status>
</kw>
<status status="PASS" endtime="20191115 23:07:53.453" starttime="20191115 23:07:52.245"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 23:07:53.453" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 23:07:53.528" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:07:53.529" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:07:53.529" starttime="20191115 23:07:53.453"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 23:07:53.530" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:07:53.530" starttime="20191115 23:07:53.529"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 23:07:53.531" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 23:07:53.531" starttime="20191115 23:07:53.530"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 23:07:53.580" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 23:07:53.596" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191115 23:07:53.597" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191115 23:07:53.597" starttime="20191115 23:07:53.532"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 23:07:53.600" level="INFO">Length is 2</msg>
<msg timestamp="20191115 23:07:53.600" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191115 23:07:53.600" starttime="20191115 23:07:53.598"></status>
</kw>
<msg timestamp="20191115 23:07:53.601" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191115 23:07:53.601" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191115 23:07:53.601" starttime="20191115 23:07:52.243"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:07:53.606" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:07:55.689" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:07:55.689" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:07:55.689" starttime="20191115 23:07:53.603"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:07:55.691" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:07:55.691" starttime="20191115 23:07:55.690"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:07:55.692" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:07:55.693" starttime="20191115 23:07:55.692"></status>
</kw>
<msg timestamp="20191115 23:07:55.693" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:07:55.693" starttime="20191115 23:07:53.602"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:07:55.694" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:07:55.694" starttime="20191115 23:07:55.694"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:07:55.695" starttime="20191115 23:07:55.695"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:07:55.696" starttime="20191115 23:07:55.696"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:07:55.697" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:07:55.698" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:07:55.698" starttime="20191115 23:07:55.697"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:07:55.699" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191115 23:07:55.699" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:07:55.699" starttime="20191115 23:07:55.698"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:07:55.700" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:07:55.700" starttime="20191115 23:07:55.699"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:07:55.701" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191115 23:07:55.701" starttime="20191115 23:07:55.700"></status>
</kw>
<msg timestamp="20191115 23:07:55.702" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:07:55.702" starttime="20191115 23:07:53.601"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191115 23:07:55.707" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191115 23:07:55.707" starttime="20191115 23:07:55.703"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:07:55.710" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191115 23:07:55.710" starttime="20191115 23:07:55.709"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:07:55.710" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191115 23:07:55.711" starttime="20191115 23:07:55.710"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:07:55.716" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:00.344" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:00.345" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:08:00.345" starttime="20191115 23:07:55.713"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:00.346" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:08:00.347" starttime="20191115 23:08:00.346"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:00.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:00.348" starttime="20191115 23:08:00.347"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:00.348" starttime="20191115 23:07:55.712"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:00.353" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:02.709" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:02.709" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573859277828,
  "modificationTime": 1573859279924,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:02.710" starttime="20191115 23:08:00.351"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:02.712" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573859277828,
  "modificationTime": 1573859279924,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103144441631670270,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:08:02.712" starttime="20191115 23:08:02.711"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:02.713" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:02.713" starttime="20191115 23:08:02.712"></status>
</kw>
<msg timestamp="20191115 23:08:02.714" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573859277828,
  "modificationTime": 1573859279924,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:02.714" starttime="20191115 23:08:00.348"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:08:02.715" starttime="20191115 23:08:02.714"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:02.715" starttime="20191115 23:07:55.711"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:02.715" starttime="20191115 23:07:55.709"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:08:02.717" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191115 23:08:02.717" starttime="20191115 23:08:02.716"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:08:02.718" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191115 23:08:02.718" starttime="20191115 23:08:02.717"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:02.724" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:07.429" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:07.430" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:08:07.430" starttime="20191115 23:08:02.721"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:07.431" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:08:07.431" starttime="20191115 23:08:07.430"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:07.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:07.432" starttime="20191115 23:08:07.431"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:07.433" starttime="20191115 23:08:02.719"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:07.437" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:09.784" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:09.784" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573859284822,
  "modificationTime": 1573859286991,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:09.784" starttime="20191115 23:08:07.435"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:09.786" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573859284822,
  "modificationTime": 1573859286991,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103144442090029060,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:08:09.786" starttime="20191115 23:08:09.785"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:09.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:09.788" starttime="20191115 23:08:09.787"></status>
</kw>
<msg timestamp="20191115 23:08:09.788" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573859284822,
  "modificationTime": 1573859286991,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:09.788" starttime="20191115 23:08:07.433"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:08:09.789" starttime="20191115 23:08:09.789"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:09.790" starttime="20191115 23:08:02.718"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:09.790" starttime="20191115 23:08:02.716"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:08:09.791" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191115 23:08:09.791" starttime="20191115 23:08:09.790"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:08:09.792" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191115 23:08:09.793" starttime="20191115 23:08:09.792"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:09.798" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:14.384" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:14.384" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:08:14.384" starttime="20191115 23:08:09.795"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:14.386" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:08:14.386" starttime="20191115 23:08:14.385"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:14.387" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:14.388" starttime="20191115 23:08:14.387"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:14.388" starttime="20191115 23:08:09.794"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:14.394" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:16.755" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:16.756" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573859291942,
  "modificationTime": 1573859293967,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:16.756" starttime="20191115 23:08:14.391"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:16.758" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573859291942,
  "modificationTime": 1573859293967,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103144442556579840,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:08:16.758" starttime="20191115 23:08:16.757"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:16.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:16.760" starttime="20191115 23:08:16.759"></status>
</kw>
<msg timestamp="20191115 23:08:16.761" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573859291942,
  "modificationTime": 1573859293967,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:16.761" starttime="20191115 23:08:14.388"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:08:16.762" starttime="20191115 23:08:16.761"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:16.762" starttime="20191115 23:08:09.793"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:16.762" starttime="20191115 23:08:09.790"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:08:16.764" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191115 23:08:16.764" starttime="20191115 23:08:16.763"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:08:16.765" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191115 23:08:16.766" starttime="20191115 23:08:16.765"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:16.771" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:21.376" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:21.376" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:08:21.377" starttime="20191115 23:08:16.769"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:21.379" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:08:21.379" starttime="20191115 23:08:21.377"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:21.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:21.380" starttime="20191115 23:08:21.379"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:21.381" starttime="20191115 23:08:16.767"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:21.385" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:23.700" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:23.700" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573859299004,
  "modificationTime": 1573859300958,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:23.701" starttime="20191115 23:08:21.383"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:23.702" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573859299004,
  "modificationTime": 1573859300958,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103144443019460600,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:08:23.702" starttime="20191115 23:08:23.701"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:23.702" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:23.703" starttime="20191115 23:08:23.702"></status>
</kw>
<msg timestamp="20191115 23:08:23.703" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573859299004,
  "modificationTime": 1573859300958,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:23.703" starttime="20191115 23:08:21.381"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:08:23.704" starttime="20191115 23:08:23.703"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:23.704" starttime="20191115 23:08:16.766"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:23.704" starttime="20191115 23:08:16.763"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:08:23.705" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:08:23.705" starttime="20191115 23:08:23.704"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:08:23.705" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:08:23.705" starttime="20191115 23:08:23.705"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:23.709" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:28.032" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:28.032" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:08:28.033" starttime="20191115 23:08:23.707"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:28.034" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:08:28.034" starttime="20191115 23:08:28.033"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:28.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:28.035" starttime="20191115 23:08:28.035"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:28.036" starttime="20191115 23:08:23.706"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:28.041" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:30.604" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:30.604" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573859305828,
  "modificationTime": 1573859307607,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:30.605" starttime="20191115 23:08:28.038"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:30.607" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573859305828,
  "modificationTime": 1573859307607,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103144443466678270,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:08:30.607" starttime="20191115 23:08:30.605"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:30.608" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:30.608" starttime="20191115 23:08:30.607"></status>
</kw>
<msg timestamp="20191115 23:08:30.609" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573859305828,
  "modificationTime": 1573859307607,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:30.609" starttime="20191115 23:08:28.036"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:08:30.610" starttime="20191115 23:08:30.609"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:30.610" starttime="20191115 23:08:23.705"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:30.610" starttime="20191115 23:08:23.704"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:30.610" starttime="20191115 23:07:55.708"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:30.610" starttime="20191115 23:07:55.707"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:08:30.613" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 23:08:30.613" starttime="20191115 23:08:30.612"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:08:30.615" starttime="20191115 23:08:30.614"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:08:30.616" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:08:31.852" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:08:31.853" starttime="20191115 23:08:30.615"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:31.853" starttime="20191115 23:08:30.613"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 23:08:31.855" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 23:08:31.871" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:08:31.872" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:08:31.872" starttime="20191115 23:08:31.854"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 23:08:31.872" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:08:31.872" starttime="20191115 23:08:31.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 23:08:31.873" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 23:08:31.873" starttime="20191115 23:08:31.873"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 23:08:31.953" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 23:08:31.965" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191115 23:08:31.966" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191115 23:08:31.966" starttime="20191115 23:08:31.874"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 23:08:31.967" level="INFO">Length is 2</msg>
<msg timestamp="20191115 23:08:31.967" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191115 23:08:31.968" starttime="20191115 23:08:31.967"></status>
</kw>
<msg timestamp="20191115 23:08:31.968" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191115 23:08:31.968" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191115 23:08:31.968" starttime="20191115 23:08:30.611"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:08:31.970" starttime="20191115 23:08:31.969"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:31.970" starttime="20191115 23:07:55.703"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191115 23:08:31.971" level="INFO">${keyPrefix} = testOMRestart_1</msg>
<status status="PASS" endtime="20191115 23:08:31.971" starttime="20191115 23:08:31.970"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:08:31.975" level="INFO">${tmpKey} = testOMRestart_1_0</msg>
<status status="PASS" endtime="20191115 23:08:31.975" starttime="20191115 23:08:31.974"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:08:31.976" level="INFO">testOMRestart_1_0</msg>
<status status="PASS" endtime="20191115 23:08:31.976" starttime="20191115 23:08:31.976"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:31.982" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:36.484" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:36.485" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:08:36.485" starttime="20191115 23:08:31.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:36.487" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:08:36.487" starttime="20191115 23:08:36.486"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:36.488" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:36.488" starttime="20191115 23:08:36.487"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:36.488" starttime="20191115 23:08:31.977"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:36.493" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:39.037" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:39.037" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573859314135,
  "modificationTime": 1573859316050,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:39.037" starttime="20191115 23:08:36.491"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:39.038" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573859314135,
  "modificationTime": 1573859316050,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 8,
      "localID": 103144444011020290,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:08:39.038" starttime="20191115 23:08:39.038"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:39.039" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:39.039" starttime="20191115 23:08:39.039"></status>
</kw>
<msg timestamp="20191115 23:08:39.040" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573859314135,
  "modificationTime": 1573859316050,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:39.040" starttime="20191115 23:08:36.489"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:08:39.040" starttime="20191115 23:08:39.040"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:39.040" starttime="20191115 23:08:31.977"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:39.040" starttime="20191115 23:08:31.973"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:08:39.041" level="INFO">${tmpKey} = testOMRestart_1_1</msg>
<status status="PASS" endtime="20191115 23:08:39.041" starttime="20191115 23:08:39.041"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:08:39.042" level="INFO">testOMRestart_1_1</msg>
<status status="PASS" endtime="20191115 23:08:39.042" starttime="20191115 23:08:39.042"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:39.046" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:43.336" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:43.336" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:08:43.336" starttime="20191115 23:08:39.044"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:43.338" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:08:43.338" starttime="20191115 23:08:43.337"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:43.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:43.340" starttime="20191115 23:08:43.339"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:43.340" starttime="20191115 23:08:39.043"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:43.345" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:45.631" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:45.631" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573859321230,
  "modificationTime": 1573859322921,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:45.631" starttime="20191115 23:08:43.342"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:45.633" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573859321230,
  "modificationTime": 1573859322921,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103144444475998200,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:08:45.633" starttime="20191115 23:08:45.632"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:45.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:45.634" starttime="20191115 23:08:45.633"></status>
</kw>
<msg timestamp="20191115 23:08:45.634" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573859321230,
  "modificationTime": 1573859322921,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:45.634" starttime="20191115 23:08:43.340"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:08:45.636" starttime="20191115 23:08:45.635"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:45.636" starttime="20191115 23:08:39.042"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:45.636" starttime="20191115 23:08:39.041"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:08:45.637" level="INFO">${tmpKey} = testOMRestart_1_2</msg>
<status status="PASS" endtime="20191115 23:08:45.637" starttime="20191115 23:08:45.636"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:08:45.638" level="INFO">testOMRestart_1_2</msg>
<status status="PASS" endtime="20191115 23:08:45.638" starttime="20191115 23:08:45.637"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:45.642" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:50.147" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:50.148" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:08:50.148" starttime="20191115 23:08:45.639"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:50.150" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:08:50.150" starttime="20191115 23:08:50.149"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:50.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:50.151" starttime="20191115 23:08:50.150"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:50.152" starttime="20191115 23:08:45.639"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:50.157" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:52.613" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:52.613" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573859327897,
  "modificationTime": 1573859329727,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:52.613" starttime="20191115 23:08:50.154"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:52.614" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573859327897,
  "modificationTime": 1573859329727,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 9,
      "localID": 103144444912992270,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:08:52.615" starttime="20191115 23:08:52.614"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:52.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:52.615" starttime="20191115 23:08:52.615"></status>
</kw>
<msg timestamp="20191115 23:08:52.616" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573859327897,
  "modificationTime": 1573859329727,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:52.616" starttime="20191115 23:08:50.152"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:08:52.617" starttime="20191115 23:08:52.616"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:52.617" starttime="20191115 23:08:45.638"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:52.617" starttime="20191115 23:08:45.636"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:08:52.618" level="INFO">${tmpKey} = testOMRestart_1_3</msg>
<status status="PASS" endtime="20191115 23:08:52.618" starttime="20191115 23:08:52.617"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:08:52.619" level="INFO">testOMRestart_1_3</msg>
<status status="PASS" endtime="20191115 23:08:52.619" starttime="20191115 23:08:52.618"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:52.622" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:56.947" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:56.947" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:08:56.947" starttime="20191115 23:08:52.620"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:56.949" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:08:56.949" starttime="20191115 23:08:56.948"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:56.950" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:56.950" starttime="20191115 23:08:56.949"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:56.951" starttime="20191115 23:08:52.619"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:56.955" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:08:59.588" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:08:59.589" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573859334824,
  "modificationTime": 1573859336531,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:59.589" starttime="20191115 23:08:56.952"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:08:59.591" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573859334824,
  "modificationTime": 1573859336531,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 2,
      "localID": 103144445366960140,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:08:59.591" starttime="20191115 23:08:59.590"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:08:59.593" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:08:59.593" starttime="20191115 23:08:59.591"></status>
</kw>
<msg timestamp="20191115 23:08:59.594" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573859334824,
  "modificationTime": 1573859336531,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:08:59.594" starttime="20191115 23:08:56.951"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:08:59.595" starttime="20191115 23:08:59.594"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:59.595" starttime="20191115 23:08:52.619"></status>
</kw>
<status status="PASS" endtime="20191115 23:08:59.595" starttime="20191115 23:08:52.617"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:08:59.597" level="INFO">${tmpKey} = testOMRestart_1_4</msg>
<status status="PASS" endtime="20191115 23:08:59.597" starttime="20191115 23:08:59.596"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:08:59.598" level="INFO">testOMRestart_1_4</msg>
<status status="PASS" endtime="20191115 23:08:59.598" starttime="20191115 23:08:59.597"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:08:59.603" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:09:04.209" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:09:04.209" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:09:04.209" starttime="20191115 23:08:59.600"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:09:04.211" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:09:04.211" starttime="20191115 23:09:04.210"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:09:04.212" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:09:04.212" starttime="20191115 23:09:04.211"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:04.212" starttime="20191115 23:08:59.599"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:09:04.216" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:09:06.708" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:09:06.708" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573859341859,
  "modificationTime": 1573859343784,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:09:06.708" starttime="20191115 23:09:04.214"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:09:06.710" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573859341859,
  "modificationTime": 1573859343784,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 10,
      "localID": 103144445828005900,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:09:06.710" starttime="20191115 23:09:06.709"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:09:06.711" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:09:06.711" starttime="20191115 23:09:06.711"></status>
</kw>
<msg timestamp="20191115 23:09:06.712" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573859341859,
  "modificationTime": 1573859343784,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:09:06.712" starttime="20191115 23:09:04.212"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:06.713" starttime="20191115 23:09:06.712"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:06.713" starttime="20191115 23:08:59.598"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:06.713" starttime="20191115 23:08:59.596"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:06.714" starttime="20191115 23:08:31.973"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:06.714" starttime="20191115 23:08:31.972"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:09:06.716" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 23:09:06.716" starttime="20191115 23:09:06.715"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:06.718" starttime="20191115 23:09:06.717"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:09:06.719" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:09:07.922" level="INFO">Read output: Last login: Fri Nov 15 23:08:30 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:09:07.922" starttime="20191115 23:09:06.719"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:07.923" starttime="20191115 23:09:06.717"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 23:09:07.924" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 23:09:07.940" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:09:07.940" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:09:07.940" starttime="20191115 23:09:07.923"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 23:09:07.942" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:09:07.942" starttime="20191115 23:09:07.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 23:09:07.944" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 23:09:07.944" starttime="20191115 23:09:07.943"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 23:09:08.026" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 23:09:08.039" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191115 23:09:08.039" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191115 23:09:08.039" starttime="20191115 23:09:07.944"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 23:09:08.040" level="INFO">Length is 2</msg>
<msg timestamp="20191115 23:09:08.040" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191115 23:09:08.040" starttime="20191115 23:09:08.040"></status>
</kw>
<msg timestamp="20191115 23:09:08.041" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191115 23:09:08.041" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191115 23:09:08.041" starttime="20191115 23:09:06.714"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:08.043" starttime="20191115 23:09:08.042"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:08.043" starttime="20191115 23:08:31.970"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191115 23:09:08.044" level="INFO">${keyPrefix} = testOMRestart_2</msg>
<status status="PASS" endtime="20191115 23:09:08.044" starttime="20191115 23:09:08.043"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:09:08.047" level="INFO">${tmpKey} = testOMRestart_2_0</msg>
<status status="PASS" endtime="20191115 23:09:08.048" starttime="20191115 23:09:08.047"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:09:08.048" level="INFO">testOMRestart_2_0</msg>
<status status="PASS" endtime="20191115 23:09:08.049" starttime="20191115 23:09:08.048"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:09:08.054" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:09:12.317" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:09:12.317" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:09:12.317" starttime="20191115 23:09:08.051"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:09:12.319" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:09:12.319" starttime="20191115 23:09:12.318"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:09:12.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:09:12.320" starttime="20191115 23:09:12.319"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:12.321" starttime="20191115 23:09:08.050"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:09:12.326" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:09:14.716" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:09:14.716" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573859350222,
  "modificationTime": 1573859351902,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:09:14.716" starttime="20191115 23:09:12.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:09:14.718" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573859350222,
  "modificationTime": 1573859351902,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 8,
      "localID": 103144446376083470,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:09:14.723" starttime="20191115 23:09:14.717"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:09:14.728" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:09:14.729" starttime="20191115 23:09:14.725"></status>
</kw>
<msg timestamp="20191115 23:09:14.730" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573859350222,
  "modificationTime": 1573859351902,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:09:14.730" starttime="20191115 23:09:12.321"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:14.731" starttime="20191115 23:09:14.730"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:14.731" starttime="20191115 23:09:08.049"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:14.732" starttime="20191115 23:09:08.046"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:09:14.733" level="INFO">${tmpKey} = testOMRestart_2_1</msg>
<status status="PASS" endtime="20191115 23:09:14.733" starttime="20191115 23:09:14.732"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:09:14.734" level="INFO">testOMRestart_2_1</msg>
<status status="PASS" endtime="20191115 23:09:14.735" starttime="20191115 23:09:14.734"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:09:14.741" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:09:19.225" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:09:19.225" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:09:19.225" starttime="20191115 23:09:14.738"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:09:19.227" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:09:19.227" starttime="20191115 23:09:19.226"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:09:19.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:09:19.228" starttime="20191115 23:09:19.227"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:19.228" starttime="20191115 23:09:14.737"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:09:19.234" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:09:21.651" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:09:21.651" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573859357063,
  "modificationTime": 1573859358812,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:09:21.652" starttime="20191115 23:09:19.231"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:09:21.653" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573859357063,
  "modificationTime": 1573859358812,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103144446824349710,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:09:21.653" starttime="20191115 23:09:21.652"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:09:21.653" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:09:21.653" starttime="20191115 23:09:21.653"></status>
</kw>
<msg timestamp="20191115 23:09:21.654" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573859357063,
  "modificationTime": 1573859358812,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:09:21.654" starttime="20191115 23:09:19.229"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:21.654" starttime="20191115 23:09:21.654"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:21.655" starttime="20191115 23:09:14.735"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:21.655" starttime="20191115 23:09:14.732"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:09:21.655" level="INFO">${tmpKey} = testOMRestart_2_2</msg>
<status status="PASS" endtime="20191115 23:09:21.655" starttime="20191115 23:09:21.655"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:09:21.656" level="INFO">testOMRestart_2_2</msg>
<status status="PASS" endtime="20191115 23:09:21.656" starttime="20191115 23:09:21.656"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:09:21.659" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:09:25.961" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:09:25.961" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:09:25.961" starttime="20191115 23:09:21.657"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:09:25.962" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:09:25.963" starttime="20191115 23:09:25.962"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:09:25.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:09:25.963" starttime="20191115 23:09:25.963"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:25.964" starttime="20191115 23:09:21.657"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:09:25.968" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:09:28.172" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:09:28.172" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573859363908,
  "modificationTime": 1573859365550,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:09:28.173" starttime="20191115 23:09:25.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:09:28.174" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573859363908,
  "modificationTime": 1573859365550,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103144447272943630,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:09:28.174" starttime="20191115 23:09:28.173"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:09:28.175" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:09:28.175" starttime="20191115 23:09:28.174"></status>
</kw>
<msg timestamp="20191115 23:09:28.175" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573859363908,
  "modificationTime": 1573859365550,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:09:28.175" starttime="20191115 23:09:25.964"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:28.176" starttime="20191115 23:09:28.175"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:28.176" starttime="20191115 23:09:21.656"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:28.176" starttime="20191115 23:09:21.655"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:09:28.177" level="INFO">${tmpKey} = testOMRestart_2_3</msg>
<status status="PASS" endtime="20191115 23:09:28.177" starttime="20191115 23:09:28.176"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:09:28.178" level="INFO">testOMRestart_2_3</msg>
<status status="PASS" endtime="20191115 23:09:28.178" starttime="20191115 23:09:28.177"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:09:28.182" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:09:32.116" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:09:32.116" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:09:32.117" starttime="20191115 23:09:28.180"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:09:32.118" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:09:32.119" starttime="20191115 23:09:32.117"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:09:32.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:09:32.120" starttime="20191115 23:09:32.119"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:32.120" starttime="20191115 23:09:28.179"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:09:32.125" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:09:34.487" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:09:34.487" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573859370083,
  "modificationTime": 1573859371695,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:09:34.487" starttime="20191115 23:09:32.122"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:09:34.489" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573859370083,
  "modificationTime": 1573859371695,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 9,
      "localID": 103144447677693970,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:09:34.489" starttime="20191115 23:09:34.488"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:09:34.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:09:34.490" starttime="20191115 23:09:34.489"></status>
</kw>
<msg timestamp="20191115 23:09:34.491" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573859370083,
  "modificationTime": 1573859371695,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:09:34.491" starttime="20191115 23:09:32.121"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:34.492" starttime="20191115 23:09:34.491"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:34.492" starttime="20191115 23:09:28.178"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:34.492" starttime="20191115 23:09:28.176"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:09:34.494" level="INFO">${tmpKey} = testOMRestart_2_4</msg>
<status status="PASS" endtime="20191115 23:09:34.494" starttime="20191115 23:09:34.493"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:09:34.494" level="INFO">testOMRestart_2_4</msg>
<status status="PASS" endtime="20191115 23:09:34.495" starttime="20191115 23:09:34.494"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:09:34.501" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:09:38.819" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:09:38.819" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:09:38.819" starttime="20191115 23:09:34.498"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:09:38.821" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:09:38.822" starttime="20191115 23:09:38.820"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:09:38.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:09:38.823" starttime="20191115 23:09:38.822"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:38.823" starttime="20191115 23:09:34.496"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:09:38.829" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:09:41.184" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:09:41.184" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573859376614,
  "modificationTime": 1573859378390,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:09:41.185" starttime="20191115 23:09:38.826"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:09:41.186" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573859376614,
  "modificationTime": 1573859378390,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 2,
      "localID": 103144448105709580,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:09:41.186" starttime="20191115 23:09:41.185"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:09:41.186" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:09:41.186" starttime="20191115 23:09:41.186"></status>
</kw>
<msg timestamp="20191115 23:09:41.187" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573859376614,
  "modificationTime": 1573859378390,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:09:41.187" starttime="20191115 23:09:38.824"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:41.187" starttime="20191115 23:09:41.187"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:41.188" starttime="20191115 23:09:34.495"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:41.188" starttime="20191115 23:09:34.492"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:41.188" starttime="20191115 23:09:08.046"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:41.188" starttime="20191115 23:09:08.045"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:09:41.190" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 23:09:41.190" starttime="20191115 23:09:41.189"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:41.192" starttime="20191115 23:09:41.190"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:09:41.192" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:09:42.401" level="INFO">Read output: Last login: Fri Nov 15 23:09:06 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:09:42.401" starttime="20191115 23:09:41.192"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:42.401" starttime="20191115 23:09:41.190"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 23:09:42.403" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 23:09:42.418" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:09:42.418" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:09:42.418" starttime="20191115 23:09:42.402"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 23:09:42.419" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:09:42.420" starttime="20191115 23:09:42.419"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 23:09:42.421" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 23:09:42.421" starttime="20191115 23:09:42.420"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 23:09:42.498" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 23:09:42.509" level="INFO">3 files:
log_0-10
log_11-70
log_inprogress_71</msg>
<msg timestamp="20191115 23:09:42.509" level="INFO">@{logs} = [ log_0-10 | log_11-70 | log_inprogress_71 ]</msg>
<status status="PASS" endtime="20191115 23:09:42.509" starttime="20191115 23:09:42.421"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 23:09:42.510" level="INFO">Length is 3</msg>
<msg timestamp="20191115 23:09:42.510" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191115 23:09:42.510" starttime="20191115 23:09:42.510"></status>
</kw>
<msg timestamp="20191115 23:09:42.511" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191115 23:09:42.512" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-70', u'log_inprogress_71'] ]</msg>
<status status="PASS" endtime="20191115 23:09:42.512" starttime="20191115 23:09:41.188"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191115 23:09:42.513" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191115 23:09:42.514" starttime="20191115 23:09:42.512"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:42.514" starttime="20191115 23:09:08.043"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:42.514" starttime="20191115 23:07:55.702"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:42.515" starttime="20191115 23:09:42.514"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:09:42.518" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:09:42.518" starttime="20191115 23:09:42.517"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:42.520" starttime="20191115 23:09:42.519"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:09:42.520" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:09:43.708" level="INFO">Read output: Last login: Fri Nov 15 23:07:52 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:09:43.708" starttime="20191115 23:09:42.520"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:43.709" starttime="20191115 23:09:42.518"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:09:43.710" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:09:45.920" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:09:45.921" starttime="20191115 23:09:43.709"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:09:45.922" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:09:45.987" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:09:45.988" level="INFO">${startupMsg} = hadoop     510  354  0.0 34478752 225564 ?     Sl   23:09   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:09:45.988" starttime="20191115 23:09:45.921"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:09:46.055" starttime="20191115 23:09:45.989"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:46.057" starttime="20191115 23:09:46.056"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:46.057" starttime="20191115 23:09:42.516"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:09:46.060" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:09:46.060" starttime="20191115 23:09:46.059"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:46.062" starttime="20191115 23:09:46.061"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:09:46.063" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:09:47.268" level="INFO">Read output: Last login: Fri Nov 15 23:09:42 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:09:47.269" starttime="20191115 23:09:46.063"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:47.269" starttime="20191115 23:09:46.061"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 23:09:47.270" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 23:09:47.285" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:09:47.286" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:09:47.286" starttime="20191115 23:09:47.269"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 23:09:47.287" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:09:47.287" starttime="20191115 23:09:47.286"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 23:09:47.288" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 23:09:47.288" starttime="20191115 23:09:47.287"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 23:09:47.369" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 23:09:47.379" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191115 23:09:47.380" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191115 23:09:47.380" starttime="20191115 23:09:47.289"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 23:09:47.381" level="INFO">Length is 2</msg>
<msg timestamp="20191115 23:09:47.381" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191115 23:09:47.381" starttime="20191115 23:09:47.380"></status>
</kw>
<msg timestamp="20191115 23:09:47.382" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191115 23:09:47.382" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191115 23:09:47.382" starttime="20191115 23:09:46.058"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:47.383" starttime="20191115 23:09:47.382"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191115 23:09:48.384" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191115 23:09:48.385" starttime="20191115 23:09:47.383"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:48.385" starttime="20191115 23:09:46.058"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:09:48.389" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:09:48.389" starttime="20191115 23:09:48.388"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:48.393" starttime="20191115 23:09:48.391"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:09:48.395" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:09:49.595" level="INFO">Read output: Last login: Fri Nov 15 23:09:46 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:09:49.595" starttime="20191115 23:09:48.394"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:49.596" starttime="20191115 23:09:48.390"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 23:09:49.597" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 23:09:49.613" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:09:49.614" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:09:49.614" starttime="20191115 23:09:49.596"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 23:09:49.615" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:09:49.616" starttime="20191115 23:09:49.614"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 23:09:49.617" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 23:09:49.617" starttime="20191115 23:09:49.616"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 23:09:49.699" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 23:09:49.710" level="INFO">3 files:
log_0-10
log_11-70
log_inprogress_71</msg>
<msg timestamp="20191115 23:09:49.710" level="INFO">@{logs} = [ log_0-10 | log_11-70 | log_inprogress_71 ]</msg>
<status status="PASS" endtime="20191115 23:09:49.711" starttime="20191115 23:09:49.618"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 23:09:49.712" level="INFO">Length is 3</msg>
<msg timestamp="20191115 23:09:49.712" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191115 23:09:49.712" starttime="20191115 23:09:49.711"></status>
</kw>
<msg timestamp="20191115 23:09:49.712" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191115 23:09:49.713" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-70', u'log_inprogress_71'] ]</msg>
<status status="PASS" endtime="20191115 23:09:49.713" starttime="20191115 23:09:48.386"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191115 23:09:49.714" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191115 23:09:49.714" starttime="20191115 23:09:49.713"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:49.714" starttime="20191115 23:09:48.385"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:49.714" starttime="20191115 23:09:46.057"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:49.716" starttime="20191115 23:09:49.715"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:49.717" starttime="20191115 23:09:49.716"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:49.717" critical="yes" starttime="20191115 23:07:40.768"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:09:49.724" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:09:51.796" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:09:51.796" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:09:51.796" starttime="20191115 23:09:49.721"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:09:51.797" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:09:51.798" starttime="20191115 23:09:51.797"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:09:51.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:09:51.798" starttime="20191115 23:09:51.798"></status>
</kw>
<msg timestamp="20191115 23:09:51.799" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:09:51.799" starttime="20191115 23:09:49.720"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:09:51.799" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:09:51.800" starttime="20191115 23:09:51.799"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:51.800" starttime="20191115 23:09:51.800"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:51.801" starttime="20191115 23:09:51.800"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:09:51.802" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:09:51.802" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:09:51.802" starttime="20191115 23:09:51.802"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:09:51.803" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191115 23:09:51.803" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:09:51.803" starttime="20191115 23:09:51.803"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:09:51.804" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:09:51.804" starttime="20191115 23:09:51.803"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:09:51.804" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191115 23:09:51.805" starttime="20191115 23:09:51.804"></status>
</kw>
<msg timestamp="20191115 23:09:51.805" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:09:51.805" starttime="20191115 23:09:49.719"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:09:51.806" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 23:09:51.807" starttime="20191115 23:09:51.806"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:09:51.808" starttime="20191115 23:09:51.807"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:09:51.808" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:09:53.013" level="INFO">Read output: Last login: Fri Nov 15 23:09:41 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:09:53.014" starttime="20191115 23:09:51.808"></status>
</kw>
<status status="PASS" endtime="20191115 23:09:53.014" starttime="20191115 23:09:51.807"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:09:53.016" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:10:03.206" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:10:03.206" starttime="20191115 23:09:53.015"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:10:03.208" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:10:03.317" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:10:03.317" level="INFO">${shutdownMsg} = hadoop     587  0.0  0.0   9556  1168 ?        Ss   23:10   0:00 bash -c sudo ps aux | grep om
hadoop     589  0.0  0.0   9088   668 ?        S    23:10   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:10:03.317" starttime="20191115 23:10:03.207"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:10:03.382" starttime="20191115 23:10:03.318"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:03.384" starttime="20191115 23:10:03.383"></status>
</kw>
<msg timestamp="20191115 23:10:03.384" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 23:10:03.384" starttime="20191115 23:09:51.805"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:10:03.390" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:10:05.626" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:10:05.626" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:05.626" starttime="20191115 23:10:03.387"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:10:05.627" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:05.627" starttime="20191115 23:10:05.627"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:10:05.628" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:10:05.628" starttime="20191115 23:10:05.628"></status>
</kw>
<msg timestamp="20191115 23:10:05.628" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:05.628" starttime="20191115 23:10:03.385"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:10:05.629" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:05.629" starttime="20191115 23:10:05.629"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:05.630" starttime="20191115 23:10:05.629"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:05.630" starttime="20191115 23:10:05.630"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:10:05.631" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:10:05.631" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:05.631" starttime="20191115 23:10:05.630"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:10:05.631" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 23:10:05.631" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:10:05.632" starttime="20191115 23:10:05.631"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:10:05.633" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:10:05.633" starttime="20191115 23:10:05.632"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:10:05.633" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 23:10:05.633" starttime="20191115 23:10:05.633"></status>
</kw>
<msg timestamp="20191115 23:10:05.633" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:10:05.633" starttime="20191115 23:10:03.385"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:05.634" starttime="20191115 23:10:05.634"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:10:05.635" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191115 23:10:05.635" starttime="20191115 23:10:05.635"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:10:05.636" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191115 23:10:05.636" starttime="20191115 23:10:05.636"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:10:05.637" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191115 23:10:05.637" starttime="20191115 23:10:05.636"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:10:05.639" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:10:05.640" starttime="20191115 23:10:05.637"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:10:05.645" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:10:10.048" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:10:10.048" level="INFO">${output} = 2019-11-15 23:10:08 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:10:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 23:10:10.048" starttime="20191115 23:10:05.642"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:10:10.050" level="INFO">2019-11-15 23:10:08 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:10:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:10:08 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:10:10.050" starttime="20191115 23:10:10.049"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:10:10.051" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:10:10.052" starttime="20191115 23:10:10.051"></status>
</kw>
<status status="PASS" endtime="20191115 23:10:10.052" starttime="20191115 23:10:05.640"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:10:10.057" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:10:12.508" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:10:12.509" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
test...</msg>
<status status="PASS" endtime="20191115 23:10:12.509" starttime="20191115 23:10:10.054"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:10:12.511" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191115 23:10:12.511" starttime="20191115 23:10:12.510"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:10:12.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:10:12.512" starttime="20191115 23:10:12.511"></status>
</kw>
<msg timestamp="20191115 23:10:12.513" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
test...</msg>
<status status="PASS" endtime="20191115 23:10:12.513" starttime="20191115 23:10:10.052"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:12.514" starttime="20191115 23:10:12.513"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:10:12.515" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:10:12.515" starttime="20191115 23:10:12.514"></status>
</kw>
<status status="PASS" endtime="20191115 23:10:12.516" starttime="20191115 23:10:05.634"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:10:12.518" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 23:10:12.518" starttime="20191115 23:10:12.517"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:12.520" starttime="20191115 23:10:12.519"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:10:12.521" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:10:13.728" level="INFO">Read output: Last login: Fri Nov 15 23:09:52 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:10:13.729" starttime="20191115 23:10:12.521"></status>
</kw>
<status status="PASS" endtime="20191115 23:10:13.729" starttime="20191115 23:10:12.518"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:10:13.730" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:10:15.911" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:10:15.911" starttime="20191115 23:10:13.730"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:10:15.912" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:10:16.010" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:10:16.011" level="INFO">${startupMsg} = hadoop     640  357  0.0 34482564 221016 ?     Sl   23:10   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:10:16.011" starttime="20191115 23:10:15.912"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:10:16.076" starttime="20191115 23:10:16.011"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:16.077" starttime="20191115 23:10:16.076"></status>
</kw>
<status status="PASS" endtime="20191115 23:10:16.078" starttime="20191115 23:10:12.516"></status>
</kw>
<status status="PASS" endtime="20191115 23:10:16.078" starttime="20191115 23:09:49.719"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:10:16.084" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:10:17.989" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:10:17.989" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:17.989" starttime="20191115 23:10:16.080"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:10:17.990" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:17.990" starttime="20191115 23:10:17.989"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:10:17.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:10:17.991" starttime="20191115 23:10:17.991"></status>
</kw>
<msg timestamp="20191115 23:10:17.991" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:17.991" starttime="20191115 23:10:16.079"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:10:17.992" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:17.992" starttime="20191115 23:10:17.992"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:17.993" starttime="20191115 23:10:17.992"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:17.993" starttime="20191115 23:10:17.993"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:10:17.994" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:10:17.994" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:17.994" starttime="20191115 23:10:17.993"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:10:17.994" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 23:10:17.995" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:10:17.995" starttime="20191115 23:10:17.994"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:10:17.995" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:10:17.995" starttime="20191115 23:10:17.995"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:10:17.996" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 23:10:17.996" starttime="20191115 23:10:17.995"></status>
</kw>
<msg timestamp="20191115 23:10:17.996" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:10:17.996" starttime="20191115 23:10:16.078"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:10:17.997" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 23:10:17.997" starttime="20191115 23:10:17.997"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:17.998" starttime="20191115 23:10:17.998"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:10:17.999" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:10:19.187" level="INFO">Read output: Last login: Fri Nov 15 23:07:37 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:10:19.188" starttime="20191115 23:10:17.999"></status>
</kw>
<status status="PASS" endtime="20191115 23:10:19.188" starttime="20191115 23:10:17.998"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:10:19.189" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:10:20.351" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:10:20.351" starttime="20191115 23:10:19.188"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:10:20.352" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:10:20.460" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:10:20.461" level="INFO">${shutdownMsg} = hadoop    1039  0.0  0.0   9556  1168 ?        Ss   23:10   0:00 bash -c sudo ps aux | grep om
hadoop    1041  0.0  0.0   9088   672 ?        S    23:10   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:10:20.461" starttime="20191115 23:10:20.352"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:10:20.494" starttime="20191115 23:10:20.461"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:20.496" starttime="20191115 23:10:20.495"></status>
</kw>
<msg timestamp="20191115 23:10:20.496" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 23:10:20.496" starttime="20191115 23:10:17.996"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:10:20.500" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:10:32.782" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:10:32.782" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:32.782" starttime="20191115 23:10:20.498"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:10:32.784" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:32.784" starttime="20191115 23:10:32.783"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:10:32.784" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:10:32.785" starttime="20191115 23:10:32.784"></status>
</kw>
<msg timestamp="20191115 23:10:32.785" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:32.785" starttime="20191115 23:10:20.497"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:10:32.786" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:32.786" starttime="20191115 23:10:32.785"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:32.786" starttime="20191115 23:10:32.786"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:32.787" starttime="20191115 23:10:32.786"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:10:32.788" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:10:32.788" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:10:32.788" starttime="20191115 23:10:32.787"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:10:32.788" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191115 23:10:32.789" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:10:32.789" starttime="20191115 23:10:32.788"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:10:32.789" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:10:32.789" starttime="20191115 23:10:32.789"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:10:32.790" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191115 23:10:32.790" starttime="20191115 23:10:32.789"></status>
</kw>
<msg timestamp="20191115 23:10:32.790" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:10:32.790" starttime="20191115 23:10:20.496"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:32.791" starttime="20191115 23:10:32.790"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:10:32.792" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191115 23:10:32.792" starttime="20191115 23:10:32.792"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:10:32.793" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191115 23:10:32.793" starttime="20191115 23:10:32.793"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:10:32.794" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191115 23:10:32.794" starttime="20191115 23:10:32.794"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:10:32.796" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:10:32.796" starttime="20191115 23:10:32.794"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:10:32.799" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:10:47.342" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:10:47.342" level="INFO">${output} = 2019-11-15 23:10:35 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191115 23:10:47.342" starttime="20191115 23:10:32.797"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:10:47.344" level="INFO">2019-11-15 23:10:35 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:10:36 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:10:37 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:10:38 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:10:39 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:10:40 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:10:41 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:10:42 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:10:43 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:10:44 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:10:44 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-15 23:10:45 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:10:45 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:10:45 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:10:47.345" starttime="20191115 23:10:47.343"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:10:47.346" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:10:47.346" starttime="20191115 23:10:47.345"></status>
</kw>
<status status="PASS" endtime="20191115 23:10:47.347" starttime="20191115 23:10:32.796"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:10:47.352" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:10:59.852" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:10:59.852" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
...</msg>
<status status="PASS" endtime="20191115 23:10:59.852" starttime="20191115 23:10:47.348"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:10:59.854" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191115 23:10:59.855" starttime="20191115 23:10:59.853"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:10:59.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:10:59.857" starttime="20191115 23:10:59.855"></status>
</kw>
<msg timestamp="20191115 23:10:59.857" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
...</msg>
<status status="PASS" endtime="20191115 23:10:59.857" starttime="20191115 23:10:47.347"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:59.859" starttime="20191115 23:10:59.858"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:10:59.861" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:10:59.861" starttime="20191115 23:10:59.859"></status>
</kw>
<status status="PASS" endtime="20191115 23:10:59.861" starttime="20191115 23:10:32.791"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:10:59.863" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 23:10:59.863" starttime="20191115 23:10:59.863"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:10:59.865" starttime="20191115 23:10:59.864"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:10:59.866" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:11:01.072" level="INFO">Read output: Last login: Fri Nov 15 23:10:18 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:11:01.072" starttime="20191115 23:10:59.866"></status>
</kw>
<status status="PASS" endtime="20191115 23:11:01.073" starttime="20191115 23:10:59.864"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:11:01.074" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:11:03.253" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:11:03.254" starttime="20191115 23:11:01.073"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:11:03.255" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:11:03.363" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:11:03.363" level="INFO">${startupMsg} = hadoop    1090  353  0.0 34480068 209372 ?     Sl   23:11   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:11:03.363" starttime="20191115 23:11:03.254"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:11:03.428" starttime="20191115 23:11:03.364"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:03.429" starttime="20191115 23:11:03.429"></status>
</kw>
<status status="PASS" endtime="20191115 23:11:03.429" starttime="20191115 23:10:59.862"></status>
</kw>
<status status="PASS" endtime="20191115 23:11:03.430" starttime="20191115 23:10:16.078"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:11:03.433" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:11:05.894" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:11:05.894" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:05.894" starttime="20191115 23:11:03.431"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:11:05.895" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:05.895" starttime="20191115 23:11:05.895"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:11:05.896" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:11:05.896" starttime="20191115 23:11:05.895"></status>
</kw>
<msg timestamp="20191115 23:11:05.896" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:05.896" starttime="20191115 23:11:03.430"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:11:05.897" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:05.897" starttime="20191115 23:11:05.897"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:05.898" starttime="20191115 23:11:05.897"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:05.898" starttime="20191115 23:11:05.898"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:11:05.899" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:11:05.899" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:05.899" starttime="20191115 23:11:05.898"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:11:05.899" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191115 23:11:05.899" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:11:05.900" starttime="20191115 23:11:05.899"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:11:05.900" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:11:05.900" starttime="20191115 23:11:05.900"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:11:05.901" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191115 23:11:05.901" starttime="20191115 23:11:05.900"></status>
</kw>
<msg timestamp="20191115 23:11:05.901" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:11:05.901" starttime="20191115 23:11:03.430"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:11:05.902" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 23:11:05.902" starttime="20191115 23:11:05.902"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:05.904" starttime="20191115 23:11:05.903"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:11:05.904" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:11:07.093" level="INFO">Read output: Last login: Fri Nov 15 23:10:12 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:11:07.094" starttime="20191115 23:11:05.904"></status>
</kw>
<status status="PASS" endtime="20191115 23:11:07.094" starttime="20191115 23:11:05.902"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:11:07.095" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:11:08.265" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:11:08.266" starttime="20191115 23:11:07.095"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:11:08.267" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:11:08.375" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:11:08.375" level="INFO">${shutdownMsg} = hadoop    1138  0.0  0.0   9556  1168 ?        Ss   23:11   0:00 bash -c sudo ps aux | grep om
hadoop    1140  0.0  0.0   9088   668 ?        S    23:11   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:11:08.376" starttime="20191115 23:11:08.266"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:11:08.441" starttime="20191115 23:11:08.376"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:08.443" starttime="20191115 23:11:08.442"></status>
</kw>
<msg timestamp="20191115 23:11:08.443" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 23:11:08.443" starttime="20191115 23:11:05.901"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:11:08.447" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:11:10.618" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:11:10.618" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:10.618" starttime="20191115 23:11:08.444"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:11:10.620" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:10.620" starttime="20191115 23:11:10.619"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:11:10.621" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:11:10.621" starttime="20191115 23:11:10.620"></status>
</kw>
<msg timestamp="20191115 23:11:10.621" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:10.621" starttime="20191115 23:11:08.444"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:11:10.622" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:10.622" starttime="20191115 23:11:10.621"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:10.623" starttime="20191115 23:11:10.622"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:10.623" starttime="20191115 23:11:10.623"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:11:10.624" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:11:10.624" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:10.625" starttime="20191115 23:11:10.624"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:11:10.625" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 23:11:10.625" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:11:10.625" starttime="20191115 23:11:10.625"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:11:10.626" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:11:10.626" starttime="20191115 23:11:10.626"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:11:10.627" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 23:11:10.627" starttime="20191115 23:11:10.626"></status>
</kw>
<msg timestamp="20191115 23:11:10.627" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:11:10.627" starttime="20191115 23:11:08.443"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:10.628" starttime="20191115 23:11:10.628"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:11:10.630" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191115 23:11:10.630" starttime="20191115 23:11:10.629"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:11:10.631" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191115 23:11:10.631" starttime="20191115 23:11:10.630"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:11:10.632" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191115 23:11:10.632" starttime="20191115 23:11:10.631"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:11:10.633" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:11:10.634" starttime="20191115 23:11:10.632"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:11:10.637" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:11:15.425" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:11:15.425" level="INFO">${output} = 2019-11-15 23:11:13 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:11:13 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 23:11:15.425" starttime="20191115 23:11:10.635"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:11:15.427" level="INFO">2019-11-15 23:11:13 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:11:13 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:11:13 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:11:15.427" starttime="20191115 23:11:15.426"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:11:15.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:11:15.428" starttime="20191115 23:11:15.427"></status>
</kw>
<status status="PASS" endtime="20191115 23:11:15.428" starttime="20191115 23:11:10.634"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:11:15.431" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:11:17.797" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:11:17.797" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_...</msg>
<status status="PASS" endtime="20191115 23:11:17.797" starttime="20191115 23:11:15.429"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:11:17.799" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191115 23:11:17.800" starttime="20191115 23:11:17.798"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:11:17.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:11:17.801" starttime="20191115 23:11:17.800"></status>
</kw>
<msg timestamp="20191115 23:11:17.802" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_...</msg>
<status status="PASS" endtime="20191115 23:11:17.802" starttime="20191115 23:11:15.428"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:17.803" starttime="20191115 23:11:17.802"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:11:17.805" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:11:17.805" starttime="20191115 23:11:17.804"></status>
</kw>
<status status="PASS" endtime="20191115 23:11:17.805" starttime="20191115 23:11:10.628"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:11:17.807" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 23:11:17.807" starttime="20191115 23:11:17.806"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:17.810" starttime="20191115 23:11:17.809"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:11:17.811" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:11:19.017" level="INFO">Read output: Last login: Fri Nov 15 23:11:06 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:11:19.018" starttime="20191115 23:11:17.810"></status>
</kw>
<status status="PASS" endtime="20191115 23:11:19.018" starttime="20191115 23:11:17.808"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:11:19.020" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:11:21.200" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:11:21.200" starttime="20191115 23:11:19.019"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:11:21.201" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:11:21.299" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:11:21.299" level="INFO">${startupMsg} = hadoop    1189  378  0.0 34483160 232484 ?     Sl   23:11   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:11:21.300" starttime="20191115 23:11:21.201"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:11:21.365" starttime="20191115 23:11:21.300"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:21.366" starttime="20191115 23:11:21.365"></status>
</kw>
<status status="PASS" endtime="20191115 23:11:21.366" starttime="20191115 23:11:17.805"></status>
</kw>
<status status="PASS" endtime="20191115 23:11:21.366" starttime="20191115 23:11:03.430"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:11:21.371" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:11:23.319" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:11:23.319" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:23.319" starttime="20191115 23:11:21.368"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:11:23.320" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:23.320" starttime="20191115 23:11:23.320"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:11:23.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:11:23.321" starttime="20191115 23:11:23.321"></status>
</kw>
<msg timestamp="20191115 23:11:23.321" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:23.322" starttime="20191115 23:11:21.367"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:11:23.322" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:23.322" starttime="20191115 23:11:23.322"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:23.323" starttime="20191115 23:11:23.323"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:23.324" starttime="20191115 23:11:23.323"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:11:23.325" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:11:23.325" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:23.325" starttime="20191115 23:11:23.324"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:11:23.326" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 23:11:23.326" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:11:23.326" starttime="20191115 23:11:23.326"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:11:23.327" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:11:23.327" starttime="20191115 23:11:23.326"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:11:23.327" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 23:11:23.327" starttime="20191115 23:11:23.327"></status>
</kw>
<msg timestamp="20191115 23:11:23.328" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:11:23.328" starttime="20191115 23:11:21.367"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:11:23.329" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 23:11:23.329" starttime="20191115 23:11:23.328"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:23.330" starttime="20191115 23:11:23.329"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:11:23.330" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:11:24.529" level="INFO">Read output: Last login: Fri Nov 15 23:11:00 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:11:24.529" starttime="20191115 23:11:23.330"></status>
</kw>
<status status="PASS" endtime="20191115 23:11:24.529" starttime="20191115 23:11:23.329"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:11:24.531" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:11:25.691" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:11:25.691" starttime="20191115 23:11:24.530"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:11:25.693" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:11:25.801" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:11:25.801" level="INFO">${shutdownMsg} = hadoop    1587  0.0  0.0   9556  1164 ?        Ss   23:11   0:00 bash -c sudo ps aux | grep om
hadoop    1589  0.0  0.0   9088   668 ?        S    23:11   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:11:25.802" starttime="20191115 23:11:25.692"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:11:25.867" starttime="20191115 23:11:25.802"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:25.868" starttime="20191115 23:11:25.867"></status>
</kw>
<msg timestamp="20191115 23:11:25.868" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 23:11:25.869" starttime="20191115 23:11:23.328"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:11:25.874" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:11:38.095" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:11:38.096" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:38.096" starttime="20191115 23:11:25.870"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:11:38.097" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:38.097" starttime="20191115 23:11:38.096"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:11:38.098" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:11:38.098" starttime="20191115 23:11:38.097"></status>
</kw>
<msg timestamp="20191115 23:11:38.098" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:38.098" starttime="20191115 23:11:25.870"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:11:38.099" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:38.099" starttime="20191115 23:11:38.099"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:38.100" starttime="20191115 23:11:38.099"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:38.100" starttime="20191115 23:11:38.100"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:11:38.101" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:11:38.101" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:11:38.101" starttime="20191115 23:11:38.101"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:11:38.102" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191115 23:11:38.102" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:11:38.102" starttime="20191115 23:11:38.101"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:11:38.103" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:11:38.103" starttime="20191115 23:11:38.102"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:11:38.103" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191115 23:11:38.103" starttime="20191115 23:11:38.103"></status>
</kw>
<msg timestamp="20191115 23:11:38.104" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:11:38.104" starttime="20191115 23:11:25.869"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 23:11:38.104" starttime="20191115 23:11:38.104"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:11:38.106" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191115 23:11:38.106" starttime="20191115 23:11:38.106"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:11:38.107" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191115 23:11:38.107" starttime="20191115 23:11:38.106"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:11:38.108" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191115 23:11:38.108" starttime="20191115 23:11:38.107"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:11:38.109" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:11:38.110" starttime="20191115 23:11:38.108"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:11:38.113" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:11:52.664" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:11:52.664" level="INFO">${output} = 2019-11-15 23:11:41 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191115 23:11:52.664" starttime="20191115 23:11:38.110"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:11:52.666" level="INFO">2019-11-15 23:11:41 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:11:42 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:11:43 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:11:44 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:11:45 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:11:46 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:11:47 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:11:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:11:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:11:50 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:11:50 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:11:51 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:11:51 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:11:52.667" starttime="20191115 23:11:52.665"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:11:52.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:11:52.668" starttime="20191115 23:11:52.667"></status>
</kw>
<status status="PASS" endtime="20191115 23:11:52.669" starttime="20191115 23:11:38.110"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:11:52.674" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:12:05.205" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:12:05.205" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOM...</msg>
<status status="PASS" endtime="20191115 23:12:05.205" starttime="20191115 23:11:52.671"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:12:05.207" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191115 23:12:05.207" starttime="20191115 23:12:05.206"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:12:05.208" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:12:05.208" starttime="20191115 23:12:05.207"></status>
</kw>
<msg timestamp="20191115 23:12:05.208" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOM...</msg>
<status status="PASS" endtime="20191115 23:12:05.208" starttime="20191115 23:11:52.669"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:12:05.209" starttime="20191115 23:12:05.209"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:12:05.210" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:12:05.210" starttime="20191115 23:12:05.209"></status>
</kw>
<status status="PASS" endtime="20191115 23:12:05.210" starttime="20191115 23:11:38.105"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:12:05.212" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 23:12:05.212" starttime="20191115 23:12:05.211"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:12:05.213" starttime="20191115 23:12:05.212"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:12:05.213" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:12:06.418" level="INFO">Read output: Last login: Fri Nov 15 23:11:23 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:12:06.419" starttime="20191115 23:12:05.213"></status>
</kw>
<status status="PASS" endtime="20191115 23:12:06.419" starttime="20191115 23:12:05.212"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:12:06.420" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:12:08.590" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:12:08.590" starttime="20191115 23:12:06.420"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:12:08.591" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:12:08.688" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:12:08.689" level="INFO">${startupMsg} = hadoop    1639  371  0.0 34483308 222092 ?     Sl   23:12   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:12:08.689" starttime="20191115 23:12:08.591"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:12:08.754" starttime="20191115 23:12:08.689"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:12:08.755" starttime="20191115 23:12:08.754"></status>
</kw>
<status status="PASS" endtime="20191115 23:12:08.755" starttime="20191115 23:12:05.210"></status>
</kw>
<status status="PASS" endtime="20191115 23:12:08.755" starttime="20191115 23:11:21.366"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:12:08.758" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:12:11.229" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:12:11.229" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:12:11.229" starttime="20191115 23:12:08.756"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:12:11.230" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:12:11.231" starttime="20191115 23:12:11.230"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:12:11.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:12:11.231" starttime="20191115 23:12:11.231"></status>
</kw>
<msg timestamp="20191115 23:12:11.232" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:12:11.232" starttime="20191115 23:12:08.756"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:12:11.232" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:12:11.233" starttime="20191115 23:12:11.232"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:12:11.233" starttime="20191115 23:12:11.233"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:12:11.234" starttime="20191115 23:12:11.234"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:12:11.235" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:12:11.235" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:12:11.235" starttime="20191115 23:12:11.234"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:12:11.236" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191115 23:12:11.236" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:12:11.236" starttime="20191115 23:12:11.235"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:12:11.236" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:12:11.237" starttime="20191115 23:12:11.236"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:12:11.237" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191115 23:12:11.237" starttime="20191115 23:12:11.237"></status>
</kw>
<msg timestamp="20191115 23:12:11.238" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:12:11.238" starttime="20191115 23:12:08.755"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:12:11.239" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:12:11.239" starttime="20191115 23:12:11.239"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:12:11.241" starttime="20191115 23:12:11.240"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:12:11.241" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:12:12.430" level="INFO">Read output: Last login: Fri Nov 15 23:09:48 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:12:12.430" starttime="20191115 23:12:11.241"></status>
</kw>
<status status="PASS" endtime="20191115 23:12:12.431" starttime="20191115 23:12:11.239"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:12:12.432" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:12:13.601" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:12:13.602" starttime="20191115 23:12:12.431"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:12:13.603" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:12:13.713" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:12:13.713" level="INFO">${shutdownMsg} = hadoop    1093  0.0  0.0   9556  1168 ?        Ss   23:12   0:00 bash -c sudo ps aux | grep om
hadoop    1095  0.0  0.0   9088   668 ?        S    23:12   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:12:13.713" starttime="20191115 23:12:13.602"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:12:13.778" starttime="20191115 23:12:13.713"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:12:13.780" starttime="20191115 23:12:13.779"></status>
</kw>
<msg timestamp="20191115 23:12:13.780" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 23:12:13.780" starttime="20191115 23:12:11.238"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:12:13.785" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:12:15.952" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:12:15.952" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:12:15.952" starttime="20191115 23:12:13.782"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:12:15.953" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:12:15.954" starttime="20191115 23:12:15.953"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:12:15.954" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:12:15.954" starttime="20191115 23:12:15.954"></status>
</kw>
<msg timestamp="20191115 23:12:15.955" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:12:15.955" starttime="20191115 23:12:13.781"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:12:15.955" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:12:15.956" starttime="20191115 23:12:15.955"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:12:15.957" starttime="20191115 23:12:15.956"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:12:15.957" starttime="20191115 23:12:15.957"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:12:15.958" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:12:15.959" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:12:15.959" starttime="20191115 23:12:15.958"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:12:15.960" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 23:12:15.960" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:12:15.960" starttime="20191115 23:12:15.959"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:12:15.961" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:12:15.961" starttime="20191115 23:12:15.960"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:12:15.962" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 23:12:15.962" starttime="20191115 23:12:15.961"></status>
</kw>
<msg timestamp="20191115 23:12:15.962" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:12:15.963" starttime="20191115 23:12:13.780"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 23:12:15.964" starttime="20191115 23:12:15.963"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:12:15.965" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191115 23:12:15.965" starttime="20191115 23:12:15.965"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:12:15.967" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191115 23:12:15.967" starttime="20191115 23:12:15.966"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:12:15.968" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191115 23:12:15.968" starttime="20191115 23:12:15.967"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:12:15.970" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:12:15.970" starttime="20191115 23:12:15.968"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:12:15.973" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:12:20.416" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:12:20.416" level="INFO">${output} = 2019-11-15 23:12:18 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:12:18 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 23:12:20.417" starttime="20191115 23:12:15.971"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:12:20.418" level="INFO">2019-11-15 23:12:18 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:12:18 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:12:18 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:12:20.418" starttime="20191115 23:12:20.417"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:12:20.419" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:12:20.420" starttime="20191115 23:12:20.419"></status>
</kw>
<status status="PASS" endtime="20191115 23:12:20.420" starttime="20191115 23:12:15.970"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:12:20.424" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:12:22.728" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:12:22.728" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191115 23:12:22.729" starttime="20191115 23:12:20.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:12:22.731" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191115 23:12:22.731" starttime="20191115 23:12:22.729"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:12:22.732" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:12:22.732" starttime="20191115 23:12:22.731"></status>
</kw>
<msg timestamp="20191115 23:12:22.733" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191115 23:12:22.733" starttime="20191115 23:12:20.420"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:12:22.735" starttime="20191115 23:12:22.734"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:12:22.737" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:12:22.738" starttime="20191115 23:12:22.735"></status>
</kw>
<status status="PASS" endtime="20191115 23:12:22.738" starttime="20191115 23:12:15.964"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:12:22.740" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:12:22.740" starttime="20191115 23:12:22.739"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:12:22.742" starttime="20191115 23:12:22.741"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:12:22.743" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:12:23.949" level="INFO">Read output: Last login: Fri Nov 15 23:12:11 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:12:23.949" starttime="20191115 23:12:22.742"></status>
</kw>
<status status="PASS" endtime="20191115 23:12:23.950" starttime="20191115 23:12:22.740"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:12:23.951" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:12:26.133" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:12:26.133" starttime="20191115 23:12:23.950"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:12:26.134" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:12:26.200" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:12:26.200" level="INFO">${startupMsg} = hadoop    1144  384  0.0 34483492 238668 ?     Sl   23:12   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:12:26.200" starttime="20191115 23:12:26.134"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:12:26.233" starttime="20191115 23:12:26.200"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:12:26.234" starttime="20191115 23:12:26.233"></status>
</kw>
<status status="PASS" endtime="20191115 23:12:26.234" starttime="20191115 23:12:22.738"></status>
</kw>
<status status="PASS" endtime="20191115 23:12:26.234" starttime="20191115 23:12:08.755"></status>
</kw>
<status status="PASS" endtime="20191115 23:12:26.234" starttime="20191115 23:09:49.719"></status>
</kw>
<status status="PASS" endtime="20191115 23:12:26.234" critical="yes" starttime="20191115 23:09:49.718"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191115 23:12:26.235" starttime="20191115 23:06:32.822"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
