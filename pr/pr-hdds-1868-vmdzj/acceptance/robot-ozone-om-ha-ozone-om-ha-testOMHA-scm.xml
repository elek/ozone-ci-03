<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191106 20:19:26.005" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:19:26.154" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:19:28.992" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:19:28.992" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191106 20:19:28.992" starttime="20191106 20:19:26.152"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:19:28.993" level="INFO"></msg>
<status status="PASS" endtime="20191106 20:19:28.993" starttime="20191106 20:19:28.992"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:19:28.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:19:28.994" starttime="20191106 20:19:28.993"></status>
</kw>
<status status="PASS" endtime="20191106 20:19:28.994" starttime="20191106 20:19:26.151"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:19:29.000" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:19:31.105" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:19:31.105" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191106 20:19:31.106" starttime="20191106 20:19:28.998"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:19:31.107" level="INFO"></msg>
<status status="PASS" endtime="20191106 20:19:31.107" starttime="20191106 20:19:31.106"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:19:31.108" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:19:31.108" starttime="20191106 20:19:31.107"></status>
</kw>
<status status="PASS" endtime="20191106 20:19:31.108" starttime="20191106 20:19:28.994"></status>
</kw>
<status status="PASS" endtime="20191106 20:19:31.109" starttime="20191106 20:19:26.151"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 20:19:31.110" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191106 20:19:31.110" starttime="20191106 20:19:31.109"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 20:19:31.111" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191106 20:19:31.111" starttime="20191106 20:19:31.110"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 20:19:31.112" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191106 20:19:31.112" starttime="20191106 20:19:31.111"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:19:31.124" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:19:31.124" starttime="20191106 20:19:31.112"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:19:31.127" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:19:35.932" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:19:35.932" level="INFO">${output} = 2019-11-06 20:19:33 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 20:19:34 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 20:19:35.932" starttime="20191106 20:19:31.125"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:19:35.933" level="INFO">2019-11-06 20:19:33 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 20:19:34 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 20:19:34 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 20:19:35.934" starttime="20191106 20:19:35.933"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:19:35.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:19:35.934" starttime="20191106 20:19:35.934"></status>
</kw>
<status status="PASS" endtime="20191106 20:19:35.935" starttime="20191106 20:19:31.124"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:19:35.937" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:19:38.160" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:19:38.160" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191106 20:19:38.161" starttime="20191106 20:19:35.936"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:19:38.162" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191106 20:19:38.163" starttime="20191106 20:19:38.161"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:19:38.164" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:19:38.164" starttime="20191106 20:19:38.163"></status>
</kw>
<msg timestamp="20191106 20:19:38.164" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191106 20:19:38.165" starttime="20191106 20:19:35.935"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:19:38.166" starttime="20191106 20:19:38.165"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:19:38.167" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:19:38.167" starttime="20191106 20:19:38.166"></status>
</kw>
<status status="PASS" endtime="20191106 20:19:38.167" starttime="20191106 20:19:31.109"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:19:38.171" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:19:40.179" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:19:40.179" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:19:40.179" starttime="20191106 20:19:38.169"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:19:40.181" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:19:40.181" starttime="20191106 20:19:40.180"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:19:40.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:19:40.183" starttime="20191106 20:19:40.182"></status>
</kw>
<msg timestamp="20191106 20:19:40.183" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:19:40.183" starttime="20191106 20:19:38.168"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 20:19:40.184" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:19:40.184" starttime="20191106 20:19:40.184"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 20:19:40.186" starttime="20191106 20:19:40.185"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 20:19:40.187" starttime="20191106 20:19:40.186"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 20:19:40.188" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 20:19:40.188" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:19:40.188" starttime="20191106 20:19:40.187"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 20:19:40.189" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 20:19:40.189" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 20:19:40.189" starttime="20191106 20:19:40.188"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 20:19:40.190" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 20:19:40.190" starttime="20191106 20:19:40.190"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 20:19:40.191" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 20:19:40.191" starttime="20191106 20:19:40.191"></status>
</kw>
<msg timestamp="20191106 20:19:40.192" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 20:19:40.192" starttime="20191106 20:19:38.168"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:19:40.194" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 20:19:40.194" starttime="20191106 20:19:40.193"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:19:40.196" starttime="20191106 20:19:40.195"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:19:40.197" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:19:41.407" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:19:41.407" starttime="20191106 20:19:40.196"></status>
</kw>
<status status="PASS" endtime="20191106 20:19:41.407" starttime="20191106 20:19:40.194"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 20:19:41.409" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 20:19:51.582" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:19:51.582" starttime="20191106 20:19:41.408"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 20:19:51.583" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:19:51.692" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:19:51.692" level="INFO">${shutdownMsg} = hadoop     461  0.0  0.0   9556  1168 ?        Ss   20:19   0:00 bash -c sudo ps aux | grep om
hadoop     463  0.0  0.0   9088   668 ?        S    20:19   0:00 grep om</msg>
<status status="PASS" endtime="20191106 20:19:51.692" starttime="20191106 20:19:51.583"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:19:51.757" starttime="20191106 20:19:51.692"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:19:51.759" starttime="20191106 20:19:51.758"></status>
</kw>
<msg timestamp="20191106 20:19:51.759" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 20:19:51.759" starttime="20191106 20:19:40.192"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:19:51.764" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:20:03.928" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:20:03.928" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:20:03.928" starttime="20191106 20:19:51.761"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:20:03.930" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:20:03.930" starttime="20191106 20:20:03.929"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:20:03.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:20:03.931" starttime="20191106 20:20:03.930"></status>
</kw>
<msg timestamp="20191106 20:20:03.931" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:20:03.931" starttime="20191106 20:19:51.760"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 20:20:03.932" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:20:03.932" starttime="20191106 20:20:03.932"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 20:20:03.933" starttime="20191106 20:20:03.933"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 20:20:03.934" starttime="20191106 20:20:03.933"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 20:20:03.935" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 20:20:03.935" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:20:03.935" starttime="20191106 20:20:03.934"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 20:20:03.936" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 20:20:03.936" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 20:20:03.936" starttime="20191106 20:20:03.935"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 20:20:03.936" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 20:20:03.937" starttime="20191106 20:20:03.936"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 20:20:03.937" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 20:20:03.937" starttime="20191106 20:20:03.937"></status>
</kw>
<msg timestamp="20191106 20:20:03.938" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191106 20:20:03.938" starttime="20191106 20:19:51.759"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 20:20:03.939" starttime="20191106 20:20:03.938"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 20:20:03.940" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191106 20:20:03.940" starttime="20191106 20:20:03.939"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 20:20:03.941" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191106 20:20:03.941" starttime="20191106 20:20:03.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 20:20:03.942" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191106 20:20:03.942" starttime="20191106 20:20:03.942"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:20:03.944" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:20:03.944" starttime="20191106 20:20:03.942"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:20:03.947" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:20:18.775" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:20:18.775" level="INFO">${output} = 2019-11-06 20:20:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191106 20:20:18.775" starttime="20191106 20:20:03.945"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:20:18.777" level="INFO">2019-11-06 20:20:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:20:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:20:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:20:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:20:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:20:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:20:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:20:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:20:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:20:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:20:16 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 20:20:16 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 20:20:16 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 20:20:18.777" starttime="20191106 20:20:18.776"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:20:18.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:20:18.778" starttime="20191106 20:20:18.777"></status>
</kw>
<status status="PASS" endtime="20191106 20:20:18.779" starttime="20191106 20:20:03.944"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:20:18.782" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:20:30.952" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:20:30.952" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191106 20:20:30.952" starttime="20191106 20:20:18.780"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:20:30.953" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191106 20:20:30.954" starttime="20191106 20:20:30.953"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:20:30.954" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:20:30.954" starttime="20191106 20:20:30.954"></status>
</kw>
<msg timestamp="20191106 20:20:30.955" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191106 20:20:30.955" starttime="20191106 20:20:18.779"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:20:30.956" starttime="20191106 20:20:30.955"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:20:30.957" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:20:30.957" starttime="20191106 20:20:30.956"></status>
</kw>
<status status="PASS" endtime="20191106 20:20:30.957" starttime="20191106 20:20:03.939"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:20:30.959" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 20:20:30.959" starttime="20191106 20:20:30.958"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:20:30.961" starttime="20191106 20:20:30.960"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:20:30.961" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:20:32.167" level="INFO">Read output: Last login: Wed Nov  6 20:19:40 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:20:32.168" starttime="20191106 20:20:30.961"></status>
</kw>
<status status="PASS" endtime="20191106 20:20:32.168" starttime="20191106 20:20:30.959"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 20:20:32.169" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 20:20:34.360" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:20:34.360" starttime="20191106 20:20:32.169"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 20:20:34.361" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:20:34.459" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:20:34.460" level="INFO">${startupMsg} = hadoop     514  321  0.0 34474440 206812 ?     Sl   20:20   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 20:20:34.460" starttime="20191106 20:20:34.361"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:20:34.525" starttime="20191106 20:20:34.460"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:20:34.526" starttime="20191106 20:20:34.525"></status>
</kw>
<status status="PASS" endtime="20191106 20:20:34.526" starttime="20191106 20:20:30.958"></status>
</kw>
<status status="PASS" endtime="20191106 20:20:34.527" critical="yes" starttime="20191106 20:19:26.150"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191106 20:20:34.531" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191106 20:20:34.531" starttime="20191106 20:20:34.529"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191106 20:20:34.533" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191106 20:20:34.533" starttime="20191106 20:20:34.531"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:20:34.535" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 20:20:34.535" starttime="20191106 20:20:34.534"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:20:34.537" starttime="20191106 20:20:34.536"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:20:34.538" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:20:35.742" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:20:35.743" starttime="20191106 20:20:34.538"></status>
</kw>
<status status="PASS" endtime="20191106 20:20:35.743" starttime="20191106 20:20:34.535"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 20:20:35.744" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 20:20:45.905" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:20:45.905" starttime="20191106 20:20:35.744"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 20:20:45.907" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:20:46.015" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:20:46.015" level="INFO">${shutdownMsg} = hadoop     495  0.0  0.0   9556  1168 ?        Ss   20:20   0:00 bash -c sudo ps aux | grep om
hadoop     497  0.0  0.0   9088   668 ?        S    20:20   0:00 grep om</msg>
<status status="PASS" endtime="20191106 20:20:46.015" starttime="20191106 20:20:45.906"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:20:46.081" starttime="20191106 20:20:46.016"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:20:46.082" starttime="20191106 20:20:46.081"></status>
</kw>
<status status="PASS" endtime="20191106 20:20:46.082" starttime="20191106 20:20:34.534"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:20:46.084" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 20:20:46.084" starttime="20191106 20:20:46.083"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:20:46.085" starttime="20191106 20:20:46.085"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:20:46.086" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:20:47.291" level="INFO">Read output: Last login: Wed Nov  6 20:20:34 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:20:47.291" starttime="20191106 20:20:46.086"></status>
</kw>
<status status="PASS" endtime="20191106 20:20:47.292" starttime="20191106 20:20:46.084"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 20:20:47.293" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 20:20:47.308" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:20:47.308" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 20:20:47.308" starttime="20191106 20:20:47.292"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 20:20:47.309" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 20:20:47.309" starttime="20191106 20:20:47.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 20:20:47.311" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191106 20:20:47.311" starttime="20191106 20:20:47.310"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 20:20:47.390" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191106 20:20:47.402" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191106 20:20:47.403" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191106 20:20:47.403" starttime="20191106 20:20:47.311"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191106 20:20:47.404" level="INFO">Length is 2</msg>
<msg timestamp="20191106 20:20:47.405" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191106 20:20:47.405" starttime="20191106 20:20:47.403"></status>
</kw>
<msg timestamp="20191106 20:20:47.405" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191106 20:20:47.406" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191106 20:20:47.406" starttime="20191106 20:20:46.082"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:20:47.410" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:20:49.587" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:20:49.587" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:20:49.587" starttime="20191106 20:20:47.408"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:20:49.589" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:20:49.589" starttime="20191106 20:20:49.588"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:20:49.590" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:20:49.590" starttime="20191106 20:20:49.589"></status>
</kw>
<msg timestamp="20191106 20:20:49.591" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:20:49.591" starttime="20191106 20:20:47.407"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 20:20:49.592" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:20:49.592" starttime="20191106 20:20:49.591"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 20:20:49.593" starttime="20191106 20:20:49.592"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 20:20:49.594" starttime="20191106 20:20:49.593"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 20:20:49.595" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 20:20:49.595" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:20:49.595" starttime="20191106 20:20:49.594"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 20:20:49.596" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191106 20:20:49.596" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 20:20:49.596" starttime="20191106 20:20:49.595"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 20:20:49.597" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 20:20:49.597" starttime="20191106 20:20:49.597"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 20:20:49.598" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191106 20:20:49.598" starttime="20191106 20:20:49.598"></status>
</kw>
<msg timestamp="20191106 20:20:49.599" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 20:20:49.599" starttime="20191106 20:20:47.406"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191106 20:20:49.602" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191106 20:20:49.603" starttime="20191106 20:20:49.600"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 20:20:49.605" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191106 20:20:49.605" starttime="20191106 20:20:49.604"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 20:20:49.606" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191106 20:20:49.606" starttime="20191106 20:20:49.606"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:20:49.611" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:20:54.032" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:20:54.032" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 20:20:54.032" starttime="20191106 20:20:49.609"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:20:54.034" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 20:20:54.034" starttime="20191106 20:20:54.033"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:20:54.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:20:54.035" starttime="20191106 20:20:54.035"></status>
</kw>
<status status="PASS" endtime="20191106 20:20:54.036" starttime="20191106 20:20:49.607"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:20:54.042" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:20:56.579" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:20:56.579" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573071651807,
  "modificationTime": 1573071653618,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 20:20:56.580" starttime="20191106 20:20:54.039"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:20:56.581" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573071651807,
  "modificationTime": 1573071653618,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103092823772102660,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 20:20:56.582" starttime="20191106 20:20:56.580"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:20:56.582" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:20:56.583" starttime="20191106 20:20:56.582"></status>
</kw>
<msg timestamp="20191106 20:20:56.583" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573071651807,
  "modificationTime": 1573071653618,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 20:20:56.583" starttime="20191106 20:20:54.036"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 20:20:56.584" starttime="20191106 20:20:56.584"></status>
</kw>
<status status="PASS" endtime="20191106 20:20:56.584" starttime="20191106 20:20:49.606"></status>
</kw>
<status status="PASS" endtime="20191106 20:20:56.585" starttime="20191106 20:20:49.604"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 20:20:56.586" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191106 20:20:56.586" starttime="20191106 20:20:56.585"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 20:20:56.587" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191106 20:20:56.587" starttime="20191106 20:20:56.586"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:20:56.593" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:21:01.052" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:21:01.052" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 20:21:01.052" starttime="20191106 20:20:56.590"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:21:01.053" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 20:21:01.054" starttime="20191106 20:21:01.053"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:21:01.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:21:01.054" starttime="20191106 20:21:01.054"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:01.055" starttime="20191106 20:20:56.588"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:21:01.059" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:21:03.414" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:21:03.414" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573071658701,
  "modificationTime": 1573071660619,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 20:21:03.415" starttime="20191106 20:21:01.056"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:21:03.416" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573071658701,
  "modificationTime": 1573071660619,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103092824224563200,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 20:21:03.416" starttime="20191106 20:21:03.415"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:21:03.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:21:03.417" starttime="20191106 20:21:03.417"></status>
</kw>
<msg timestamp="20191106 20:21:03.418" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573071658701,
  "modificationTime": 1573071660619,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 20:21:03.418" starttime="20191106 20:21:01.055"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:03.419" starttime="20191106 20:21:03.418"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:03.419" starttime="20191106 20:20:56.587"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:03.419" starttime="20191106 20:20:56.585"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 20:21:03.420" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191106 20:21:03.420" starttime="20191106 20:21:03.419"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 20:21:03.421" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191106 20:21:03.421" starttime="20191106 20:21:03.420"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:21:03.425" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:21:07.808" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:21:07.808" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 20:21:07.808" starttime="20191106 20:21:03.423"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:21:07.810" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 20:21:07.810" starttime="20191106 20:21:07.809"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:21:07.811" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:21:07.811" starttime="20191106 20:21:07.810"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:07.811" starttime="20191106 20:21:03.422"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:21:07.816" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:21:10.254" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:21:10.254" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573071665551,
  "modificationTime": 1573071667383,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 20:21:10.254" starttime="20191106 20:21:07.814"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:21:10.256" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573071665551,
  "modificationTime": 1573071667383,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103092824673484800,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 20:21:10.256" starttime="20191106 20:21:10.255"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:21:10.258" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:21:10.258" starttime="20191106 20:21:10.257"></status>
</kw>
<msg timestamp="20191106 20:21:10.258" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573071665551,
  "modificationTime": 1573071667383,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 20:21:10.258" starttime="20191106 20:21:07.812"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:10.259" starttime="20191106 20:21:10.259"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:10.259" starttime="20191106 20:21:03.421"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:10.259" starttime="20191106 20:21:03.419"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 20:21:10.261" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191106 20:21:10.261" starttime="20191106 20:21:10.260"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 20:21:10.261" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191106 20:21:10.261" starttime="20191106 20:21:10.261"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:21:10.265" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:21:14.634" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:21:14.634" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 20:21:14.634" starttime="20191106 20:21:10.264"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:21:14.636" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 20:21:14.636" starttime="20191106 20:21:14.635"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:21:14.637" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:21:14.637" starttime="20191106 20:21:14.636"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:14.637" starttime="20191106 20:21:10.262"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:21:14.642" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:21:16.909" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:21:16.909" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573071672476,
  "modificationTime": 1573071674218,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 20:21:16.909" starttime="20191106 20:21:14.639"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:21:16.911" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573071672476,
  "modificationTime": 1573071674218,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103092825127321600,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 20:21:16.912" starttime="20191106 20:21:16.910"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:21:16.913" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:21:16.913" starttime="20191106 20:21:16.912"></status>
</kw>
<msg timestamp="20191106 20:21:16.913" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573071672476,
  "modificationTime": 1573071674218,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 20:21:16.914" starttime="20191106 20:21:14.638"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:16.915" starttime="20191106 20:21:16.914"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:16.915" starttime="20191106 20:21:10.262"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:16.915" starttime="20191106 20:21:10.260"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 20:21:16.916" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:21:16.917" starttime="20191106 20:21:16.916"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 20:21:16.917" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:21:16.918" starttime="20191106 20:21:16.917"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:21:16.923" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:21:21.320" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:21:21.321" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 20:21:21.321" starttime="20191106 20:21:16.920"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:21:21.322" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 20:21:21.322" starttime="20191106 20:21:21.321"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:21:21.323" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:21:21.323" starttime="20191106 20:21:21.322"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:21.323" starttime="20191106 20:21:16.919"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:21:21.327" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:21:23.769" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:21:23.769" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573071679120,
  "modificationTime": 1573071680905,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 20:21:23.769" starttime="20191106 20:21:21.325"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:21:23.771" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573071679120,
  "modificationTime": 1573071680905,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103092825562677250,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 20:21:23.771" starttime="20191106 20:21:23.770"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:21:23.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:21:23.772" starttime="20191106 20:21:23.772"></status>
</kw>
<msg timestamp="20191106 20:21:23.773" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573071679120,
  "modificationTime": 1573071680905,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 20:21:23.773" starttime="20191106 20:21:21.324"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:23.774" starttime="20191106 20:21:23.773"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:23.775" starttime="20191106 20:21:16.918"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:23.775" starttime="20191106 20:21:16.915"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:23.775" starttime="20191106 20:20:49.604"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:23.775" starttime="20191106 20:20:49.603"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:21:23.777" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 20:21:23.777" starttime="20191106 20:21:23.776"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:23.779" starttime="20191106 20:21:23.778"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:21:23.780" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:21:24.969" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:21:24.969" starttime="20191106 20:21:23.780"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:24.970" starttime="20191106 20:21:23.778"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 20:21:24.971" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 20:21:24.986" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:21:24.986" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 20:21:24.986" starttime="20191106 20:21:24.970"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 20:21:24.987" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 20:21:24.987" starttime="20191106 20:21:24.987"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 20:21:24.988" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191106 20:21:24.989" starttime="20191106 20:21:24.988"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 20:21:25.070" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191106 20:21:25.080" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191106 20:21:25.080" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191106 20:21:25.080" starttime="20191106 20:21:24.989"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191106 20:21:25.081" level="INFO">Length is 3</msg>
<msg timestamp="20191106 20:21:25.081" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191106 20:21:25.081" starttime="20191106 20:21:25.081"></status>
</kw>
<msg timestamp="20191106 20:21:25.082" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191106 20:21:25.082" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191106 20:21:25.082" starttime="20191106 20:21:23.775"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191106 20:21:25.083" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191106 20:21:25.083" starttime="20191106 20:21:25.082"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:25.083" starttime="20191106 20:20:49.600"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:25.083" starttime="20191106 20:20:49.599"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:25.084" starttime="20191106 20:21:25.083"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:21:25.085" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 20:21:25.085" starttime="20191106 20:21:25.085"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:25.087" starttime="20191106 20:21:25.087"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:21:25.088" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:21:26.292" level="INFO">Read output: Last login: Wed Nov  6 20:20:46 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:21:26.292" starttime="20191106 20:21:25.087"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:26.293" starttime="20191106 20:21:25.086"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 20:21:26.294" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 20:21:28.464" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:21:28.465" starttime="20191106 20:21:26.293"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 20:21:28.466" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:21:28.574" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:21:28.574" level="INFO">${startupMsg} = hadoop     570  362  0.0 34477316 208464 ?     Sl   20:21   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 20:21:28.574" starttime="20191106 20:21:28.465"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:21:28.608" starttime="20191106 20:21:28.575"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:28.609" starttime="20191106 20:21:28.608"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:28.609" starttime="20191106 20:21:25.084"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:21:28.612" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 20:21:28.612" starttime="20191106 20:21:28.611"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:28.613" starttime="20191106 20:21:28.613"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:21:28.614" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:21:29.813" level="INFO">Read output: Last login: Wed Nov  6 20:21:25 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:21:29.813" starttime="20191106 20:21:28.614"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:29.814" starttime="20191106 20:21:28.612"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 20:21:29.815" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 20:21:29.831" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:21:29.831" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 20:21:29.831" starttime="20191106 20:21:29.814"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 20:21:29.832" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 20:21:29.832" starttime="20191106 20:21:29.831"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 20:21:29.833" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191106 20:21:29.833" starttime="20191106 20:21:29.832"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 20:21:29.913" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191106 20:21:29.923" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191106 20:21:29.923" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191106 20:21:29.923" starttime="20191106 20:21:29.834"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191106 20:21:29.924" level="INFO">Length is 2</msg>
<msg timestamp="20191106 20:21:29.924" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191106 20:21:29.924" starttime="20191106 20:21:29.924"></status>
</kw>
<msg timestamp="20191106 20:21:29.925" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191106 20:21:29.925" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191106 20:21:29.925" starttime="20191106 20:21:28.610"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:29.926" starttime="20191106 20:21:29.926"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191106 20:21:30.927" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191106 20:21:30.928" starttime="20191106 20:21:29.927"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:30.928" starttime="20191106 20:21:28.610"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:21:30.930" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 20:21:30.931" starttime="20191106 20:21:30.930"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:30.932" starttime="20191106 20:21:30.932"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:21:30.933" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:21:32.132" level="INFO">Read output: Last login: Wed Nov  6 20:21:28 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:21:32.133" starttime="20191106 20:21:30.933"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:32.133" starttime="20191106 20:21:30.931"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 20:21:32.134" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 20:21:32.150" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:21:32.150" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 20:21:32.150" starttime="20191106 20:21:32.134"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 20:21:32.151" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 20:21:32.151" starttime="20191106 20:21:32.150"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 20:21:32.152" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191106 20:21:32.152" starttime="20191106 20:21:32.151"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 20:21:32.231" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191106 20:21:32.242" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191106 20:21:32.243" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191106 20:21:32.243" starttime="20191106 20:21:32.153"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191106 20:21:32.244" level="INFO">Length is 3</msg>
<msg timestamp="20191106 20:21:32.244" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191106 20:21:32.244" starttime="20191106 20:21:32.243"></status>
</kw>
<msg timestamp="20191106 20:21:32.245" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191106 20:21:32.245" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191106 20:21:32.245" starttime="20191106 20:21:30.929"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191106 20:21:32.246" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191106 20:21:32.246" starttime="20191106 20:21:32.245"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:32.247" starttime="20191106 20:21:30.928"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:32.247" starttime="20191106 20:21:28.609"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:32.248" starttime="20191106 20:21:32.247"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:32.249" starttime="20191106 20:21:32.248"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:32.249" critical="yes" starttime="20191106 20:20:34.527"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:21:32.256" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:21:34.318" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:21:34.318" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:21:34.318" starttime="20191106 20:21:32.253"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:21:34.319" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:21:34.320" starttime="20191106 20:21:34.319"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:21:34.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:21:34.320" starttime="20191106 20:21:34.320"></status>
</kw>
<msg timestamp="20191106 20:21:34.321" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:21:34.321" starttime="20191106 20:21:32.253"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 20:21:34.321" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:21:34.321" starttime="20191106 20:21:34.321"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:34.322" starttime="20191106 20:21:34.321"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:34.322" starttime="20191106 20:21:34.322"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 20:21:34.323" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 20:21:34.323" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:21:34.323" starttime="20191106 20:21:34.323"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 20:21:34.324" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191106 20:21:34.324" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 20:21:34.324" starttime="20191106 20:21:34.323"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 20:21:34.324" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 20:21:34.324" starttime="20191106 20:21:34.324"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 20:21:34.325" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191106 20:21:34.325" starttime="20191106 20:21:34.325"></status>
</kw>
<msg timestamp="20191106 20:21:34.325" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 20:21:34.325" starttime="20191106 20:21:32.252"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:21:34.327" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 20:21:34.327" starttime="20191106 20:21:34.326"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:34.328" starttime="20191106 20:21:34.327"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:21:34.328" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:21:35.518" level="INFO">Read output: Last login: Wed Nov  6 20:21:23 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:21:35.520" starttime="20191106 20:21:34.328"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:35.520" starttime="20191106 20:21:34.327"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 20:21:35.521" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 20:21:45.698" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:21:45.700" starttime="20191106 20:21:35.521"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 20:21:45.704" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:21:45.780" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:21:45.781" level="INFO">${shutdownMsg} = hadoop     527  0.0  0.0   9556  1168 ?        Ss   20:21   0:00 bash -c sudo ps aux | grep om
hadoop     529  0.0  0.0   9088   672 ?        S    20:21   0:00 grep om</msg>
<status status="PASS" endtime="20191106 20:21:45.781" starttime="20191106 20:21:45.702"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:21:45.814" starttime="20191106 20:21:45.781"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:45.815" starttime="20191106 20:21:45.815"></status>
</kw>
<msg timestamp="20191106 20:21:45.816" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 20:21:45.816" starttime="20191106 20:21:34.326"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:21:45.820" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:21:47.967" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:21:47.967" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:21:47.967" starttime="20191106 20:21:45.818"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:21:47.968" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:21:47.968" starttime="20191106 20:21:47.968"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:21:47.969" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:21:47.969" starttime="20191106 20:21:47.969"></status>
</kw>
<msg timestamp="20191106 20:21:47.970" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:21:47.970" starttime="20191106 20:21:45.817"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 20:21:47.970" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:21:47.970" starttime="20191106 20:21:47.970"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:47.971" starttime="20191106 20:21:47.970"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:47.971" starttime="20191106 20:21:47.971"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 20:21:47.972" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 20:21:47.972" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:21:47.972" starttime="20191106 20:21:47.972"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 20:21:47.973" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 20:21:47.973" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 20:21:47.973" starttime="20191106 20:21:47.972"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 20:21:47.974" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 20:21:47.974" starttime="20191106 20:21:47.974"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 20:21:47.975" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 20:21:47.975" starttime="20191106 20:21:47.974"></status>
</kw>
<msg timestamp="20191106 20:21:47.975" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191106 20:21:47.975" starttime="20191106 20:21:45.816"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:47.976" starttime="20191106 20:21:47.975"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 20:21:47.977" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191106 20:21:47.977" starttime="20191106 20:21:47.976"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 20:21:47.978" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191106 20:21:47.978" starttime="20191106 20:21:47.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 20:21:47.979" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191106 20:21:47.979" starttime="20191106 20:21:47.978"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:21:47.980" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:21:47.981" starttime="20191106 20:21:47.979"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:21:47.983" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:21:52.910" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:21:52.911" level="INFO">${output} = 2019-11-06 20:21:50 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 20:21:50 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 20:21:52.911" starttime="20191106 20:21:47.981"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:21:52.912" level="INFO">2019-11-06 20:21:50 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 20:21:50 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 20:21:50 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 20:21:52.912" starttime="20191106 20:21:52.911"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:21:52.913" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:21:52.913" starttime="20191106 20:21:52.913"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:52.914" starttime="20191106 20:21:47.981"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:21:52.917" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:21:55.090" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:21:55.090" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:21:55.090" starttime="20191106 20:21:52.915"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:21:55.092" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:21:55.093" starttime="20191106 20:21:55.091"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:21:55.094" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:21:55.094" starttime="20191106 20:21:55.093"></status>
</kw>
<msg timestamp="20191106 20:21:55.095" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:21:55.095" starttime="20191106 20:21:52.914"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:55.096" starttime="20191106 20:21:55.095"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:21:55.098" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:21:55.098" starttime="20191106 20:21:55.096"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:55.098" starttime="20191106 20:21:47.976"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:21:55.100" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 20:21:55.100" starttime="20191106 20:21:55.099"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:55.101" starttime="20191106 20:21:55.101"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:21:55.102" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:21:56.308" level="INFO">Read output: Last login: Wed Nov  6 20:21:34 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:21:56.308" starttime="20191106 20:21:55.102"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:56.309" starttime="20191106 20:21:55.100"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 20:21:56.310" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 20:21:58.490" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:21:58.490" starttime="20191106 20:21:56.309"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 20:21:58.491" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:21:58.599" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:21:58.600" level="INFO">${startupMsg} = hadoop     580  343  0.0 34475640 209452 ?     Sl   20:21   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 20:21:58.600" starttime="20191106 20:21:58.491"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:21:58.633" starttime="20191106 20:21:58.600"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:21:58.634" starttime="20191106 20:21:58.633"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:58.635" starttime="20191106 20:21:55.099"></status>
</kw>
<status status="PASS" endtime="20191106 20:21:58.635" starttime="20191106 20:21:32.252"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:21:58.639" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:22:00.550" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:22:00.550" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:00.550" starttime="20191106 20:21:58.637"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:22:00.551" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:00.551" starttime="20191106 20:22:00.550"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:22:00.552" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:22:00.552" starttime="20191106 20:22:00.551"></status>
</kw>
<msg timestamp="20191106 20:22:00.552" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:00.552" starttime="20191106 20:21:58.636"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 20:22:00.553" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:00.553" starttime="20191106 20:22:00.552"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:00.553" starttime="20191106 20:22:00.553"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:00.554" starttime="20191106 20:22:00.554"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 20:22:00.555" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 20:22:00.555" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:00.555" starttime="20191106 20:22:00.554"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 20:22:00.556" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 20:22:00.556" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 20:22:00.556" starttime="20191106 20:22:00.555"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 20:22:00.556" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 20:22:00.556" starttime="20191106 20:22:00.556"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 20:22:00.557" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 20:22:00.557" starttime="20191106 20:22:00.557"></status>
</kw>
<msg timestamp="20191106 20:22:00.557" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 20:22:00.557" starttime="20191106 20:21:58.635"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:22:00.559" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 20:22:00.559" starttime="20191106 20:22:00.558"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:00.560" starttime="20191106 20:22:00.560"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:22:00.561" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:22:01.759" level="INFO">Read output: Last login: Wed Nov  6 20:21:31 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:22:01.759" starttime="20191106 20:22:00.561"></status>
</kw>
<status status="PASS" endtime="20191106 20:22:01.759" starttime="20191106 20:22:00.559"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 20:22:01.760" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 20:22:02.920" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:22:02.920" starttime="20191106 20:22:01.760"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 20:22:02.921" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:22:03.019" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:22:03.020" level="INFO">${shutdownMsg} = hadoop    1111  0.0  0.0   9556  1168 ?        Ss   20:22   0:00 bash -c sudo ps aux | grep om
hadoop    1113  0.0  0.0   9088   668 ?        S    20:22   0:00 grep om</msg>
<status status="PASS" endtime="20191106 20:22:03.020" starttime="20191106 20:22:02.921"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:22:03.085" starttime="20191106 20:22:03.020"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:03.086" starttime="20191106 20:22:03.085"></status>
</kw>
<msg timestamp="20191106 20:22:03.086" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 20:22:03.086" starttime="20191106 20:22:00.558"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:22:03.090" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:22:05.108" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:22:05.108" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:05.108" starttime="20191106 20:22:03.088"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:22:05.109" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:05.109" starttime="20191106 20:22:05.108"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:22:05.110" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:22:05.110" starttime="20191106 20:22:05.109"></status>
</kw>
<msg timestamp="20191106 20:22:05.110" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:05.110" starttime="20191106 20:22:03.087"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 20:22:05.111" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:05.111" starttime="20191106 20:22:05.110"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:05.111" starttime="20191106 20:22:05.111"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:05.112" starttime="20191106 20:22:05.112"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 20:22:05.112" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 20:22:05.113" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:05.113" starttime="20191106 20:22:05.112"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 20:22:05.113" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 20:22:05.113" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 20:22:05.113" starttime="20191106 20:22:05.113"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 20:22:05.114" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 20:22:05.114" starttime="20191106 20:22:05.114"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 20:22:05.115" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 20:22:05.115" starttime="20191106 20:22:05.114"></status>
</kw>
<msg timestamp="20191106 20:22:05.115" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191106 20:22:05.115" starttime="20191106 20:22:03.086"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:05.116" starttime="20191106 20:22:05.115"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 20:22:05.117" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191106 20:22:05.117" starttime="20191106 20:22:05.116"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 20:22:05.118" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191106 20:22:05.118" starttime="20191106 20:22:05.117"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 20:22:05.118" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191106 20:22:05.118" starttime="20191106 20:22:05.118"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:22:05.120" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:22:05.120" starttime="20191106 20:22:05.118"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:22:05.122" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:22:09.640" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:22:09.640" level="INFO">${output} = 2019-11-06 20:22:07 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 20:22:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 20:22:09.641" starttime="20191106 20:22:05.121"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:22:09.642" level="INFO">2019-11-06 20:22:07 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 20:22:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 20:22:08 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 20:22:09.642" starttime="20191106 20:22:09.641"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:22:09.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:22:09.643" starttime="20191106 20:22:09.642"></status>
</kw>
<status status="PASS" endtime="20191106 20:22:09.644" starttime="20191106 20:22:05.120"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:22:09.647" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:22:12.041" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:22:12.041" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:22:12.041" starttime="20191106 20:22:09.645"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:22:12.042" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:22:12.042" starttime="20191106 20:22:12.042"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:22:12.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:22:12.043" starttime="20191106 20:22:12.043"></status>
</kw>
<msg timestamp="20191106 20:22:12.044" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:22:12.044" starttime="20191106 20:22:09.644"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:12.044" starttime="20191106 20:22:12.044"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:22:12.045" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:22:12.045" starttime="20191106 20:22:12.044"></status>
</kw>
<status status="PASS" endtime="20191106 20:22:12.045" starttime="20191106 20:22:05.116"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:22:12.047" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 20:22:12.047" starttime="20191106 20:22:12.046"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:12.048" starttime="20191106 20:22:12.047"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:22:12.049" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:22:13.253" level="INFO">Read output: Last login: Wed Nov  6 20:22:00 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:22:13.253" starttime="20191106 20:22:12.048"></status>
</kw>
<status status="PASS" endtime="20191106 20:22:13.253" starttime="20191106 20:22:12.047"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 20:22:13.254" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 20:22:15.393" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:22:15.394" starttime="20191106 20:22:13.254"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 20:22:15.395" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:22:15.503" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:22:15.504" level="INFO">${startupMsg} = hadoop    1162  341  0.0 34479684 228152 ?     Sl   20:22   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 20:22:15.504" starttime="20191106 20:22:15.394"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:22:15.538" starttime="20191106 20:22:15.505"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:15.539" starttime="20191106 20:22:15.538"></status>
</kw>
<status status="PASS" endtime="20191106 20:22:15.539" starttime="20191106 20:22:12.046"></status>
</kw>
<status status="PASS" endtime="20191106 20:22:15.539" starttime="20191106 20:21:58.635"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:22:15.543" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:22:17.382" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:22:17.382" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:17.383" starttime="20191106 20:22:15.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:22:17.384" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:17.384" starttime="20191106 20:22:17.383"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:22:17.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:22:17.385" starttime="20191106 20:22:17.384"></status>
</kw>
<msg timestamp="20191106 20:22:17.385" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:17.385" starttime="20191106 20:22:15.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 20:22:17.386" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:17.386" starttime="20191106 20:22:17.385"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:17.387" starttime="20191106 20:22:17.386"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:17.387" starttime="20191106 20:22:17.387"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 20:22:17.388" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 20:22:17.389" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:17.389" starttime="20191106 20:22:17.387"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 20:22:17.389" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 20:22:17.389" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 20:22:17.389" starttime="20191106 20:22:17.389"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 20:22:17.390" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 20:22:17.390" starttime="20191106 20:22:17.390"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 20:22:17.391" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 20:22:17.391" starttime="20191106 20:22:17.390"></status>
</kw>
<msg timestamp="20191106 20:22:17.391" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 20:22:17.391" starttime="20191106 20:22:15.539"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:22:17.393" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 20:22:17.393" starttime="20191106 20:22:17.392"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:17.394" starttime="20191106 20:22:17.394"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:22:17.395" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:22:18.593" level="INFO">Read output: Last login: Wed Nov  6 20:20:31 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:22:18.594" starttime="20191106 20:22:17.394"></status>
</kw>
<status status="PASS" endtime="20191106 20:22:18.594" starttime="20191106 20:22:17.393"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 20:22:18.596" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 20:22:19.767" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:22:19.767" starttime="20191106 20:22:18.595"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 20:22:19.768" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:22:19.834" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:22:19.834" level="INFO">${shutdownMsg} = hadoop    1024  0.0  0.0   9556  1168 ?        Ss   20:22   0:00 bash -c sudo ps aux | grep om
hadoop    1026  0.0  0.0   9088   672 ?        S    20:22   0:00 grep om</msg>
<status status="PASS" endtime="20191106 20:22:19.834" starttime="20191106 20:22:19.768"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:22:19.899" starttime="20191106 20:22:19.834"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:19.901" starttime="20191106 20:22:19.899"></status>
</kw>
<msg timestamp="20191106 20:22:19.902" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 20:22:19.902" starttime="20191106 20:22:17.391"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:22:19.907" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:22:32.224" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:22:32.224" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:32.224" starttime="20191106 20:22:19.904"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:22:32.226" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:32.226" starttime="20191106 20:22:32.225"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:22:32.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:22:32.228" starttime="20191106 20:22:32.227"></status>
</kw>
<msg timestamp="20191106 20:22:32.229" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:32.229" starttime="20191106 20:22:19.903"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 20:22:32.230" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:32.230" starttime="20191106 20:22:32.229"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:32.231" starttime="20191106 20:22:32.230"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:32.232" starttime="20191106 20:22:32.231"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 20:22:32.233" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 20:22:32.233" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:22:32.233" starttime="20191106 20:22:32.232"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 20:22:32.234" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191106 20:22:32.235" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 20:22:32.235" starttime="20191106 20:22:32.234"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 20:22:32.236" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 20:22:32.236" starttime="20191106 20:22:32.235"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 20:22:32.237" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191106 20:22:32.237" starttime="20191106 20:22:32.236"></status>
</kw>
<msg timestamp="20191106 20:22:32.237" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191106 20:22:32.237" starttime="20191106 20:22:19.902"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:32.238" starttime="20191106 20:22:32.238"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 20:22:32.241" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191106 20:22:32.241" starttime="20191106 20:22:32.240"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 20:22:32.243" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191106 20:22:32.243" starttime="20191106 20:22:32.242"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 20:22:32.244" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191106 20:22:32.244" starttime="20191106 20:22:32.243"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:22:32.246" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:22:32.247" starttime="20191106 20:22:32.244"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:22:32.251" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:22:46.691" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:22:46.691" level="INFO">${output} = 2019-11-06 20:22:35 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191106 20:22:46.691" starttime="20191106 20:22:32.248"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:22:46.693" level="INFO">2019-11-06 20:22:35 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:22:36 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:22:37 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:22:38 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:22:39 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:22:40 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:22:41 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:22:42 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:22:43 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:22:44 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 20:22:44 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-06 20:22:45 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 20:22:45 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 20:22:45 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 20:22:46.693" starttime="20191106 20:22:46.692"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:22:46.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:22:46.694" starttime="20191106 20:22:46.693"></status>
</kw>
<status status="PASS" endtime="20191106 20:22:46.695" starttime="20191106 20:22:32.247"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:22:46.699" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:22:59.277" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:22:59.278" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:22:59.278" starttime="20191106 20:22:46.696"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:22:59.280" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:22:59.280" starttime="20191106 20:22:59.279"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:22:59.281" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:22:59.281" starttime="20191106 20:22:59.280"></status>
</kw>
<msg timestamp="20191106 20:22:59.281" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:22:59.281" starttime="20191106 20:22:46.695"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:59.282" starttime="20191106 20:22:59.282"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:22:59.284" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:22:59.284" starttime="20191106 20:22:59.283"></status>
</kw>
<status status="PASS" endtime="20191106 20:22:59.284" starttime="20191106 20:22:32.239"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:22:59.287" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 20:22:59.287" starttime="20191106 20:22:59.286"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:22:59.289" starttime="20191106 20:22:59.288"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:22:59.290" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:23:00.496" level="INFO">Read output: Last login: Wed Nov  6 20:22:17 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:23:00.496" starttime="20191106 20:22:59.289"></status>
</kw>
<status status="PASS" endtime="20191106 20:23:00.496" starttime="20191106 20:22:59.287"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 20:23:00.498" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 20:23:02.668" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:23:02.669" starttime="20191106 20:23:00.497"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 20:23:02.670" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:23:02.746" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:23:02.746" level="INFO">${startupMsg} = hadoop    1075  330  0.0 34474412 203364 ?     Sl   20:22   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 20:23:02.746" starttime="20191106 20:23:02.669"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:23:02.779" starttime="20191106 20:23:02.746"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:02.780" starttime="20191106 20:23:02.779"></status>
</kw>
<status status="PASS" endtime="20191106 20:23:02.780" starttime="20191106 20:22:59.284"></status>
</kw>
<status status="PASS" endtime="20191106 20:23:02.780" starttime="20191106 20:22:15.539"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:23:02.785" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:23:05.649" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:23:05.649" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:05.649" starttime="20191106 20:23:02.782"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:23:05.650" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:05.650" starttime="20191106 20:23:05.650"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:23:05.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:23:05.651" starttime="20191106 20:23:05.651"></status>
</kw>
<msg timestamp="20191106 20:23:05.651" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:05.652" starttime="20191106 20:23:02.781"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 20:23:05.652" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:05.652" starttime="20191106 20:23:05.652"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:05.653" starttime="20191106 20:23:05.652"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:05.653" starttime="20191106 20:23:05.653"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 20:23:05.654" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 20:23:05.654" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:05.654" starttime="20191106 20:23:05.654"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 20:23:05.655" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191106 20:23:05.655" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 20:23:05.655" starttime="20191106 20:23:05.654"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 20:23:05.656" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 20:23:05.656" starttime="20191106 20:23:05.655"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 20:23:05.656" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191106 20:23:05.656" starttime="20191106 20:23:05.656"></status>
</kw>
<msg timestamp="20191106 20:23:05.657" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 20:23:05.657" starttime="20191106 20:23:02.781"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:23:05.658" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 20:23:05.658" starttime="20191106 20:23:05.657"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:05.659" starttime="20191106 20:23:05.659"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:23:05.660" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:23:06.849" level="INFO">Read output: Last login: Wed Nov  6 20:21:55 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:23:06.850" starttime="20191106 20:23:05.659"></status>
</kw>
<status status="PASS" endtime="20191106 20:23:06.850" starttime="20191106 20:23:05.658"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 20:23:06.852" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 20:23:08.003" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:23:08.004" starttime="20191106 20:23:06.851"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 20:23:08.005" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:23:08.115" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:23:08.115" level="INFO">${shutdownMsg} = hadoop    1089  0.0  0.0   9556  1168 ?        Ss   20:23   0:00 bash -c sudo ps aux | grep om
hadoop    1091  0.0  0.0   9088   672 ?        S    20:23   0:00 grep om</msg>
<status status="PASS" endtime="20191106 20:23:08.115" starttime="20191106 20:23:08.004"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:23:08.148" starttime="20191106 20:23:08.115"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:08.150" starttime="20191106 20:23:08.149"></status>
</kw>
<msg timestamp="20191106 20:23:08.150" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 20:23:08.150" starttime="20191106 20:23:05.657"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:23:08.155" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:23:30.494" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:23:30.494" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:30.494" starttime="20191106 20:23:08.152"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:23:30.496" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:30.496" starttime="20191106 20:23:30.495"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:23:30.497" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:23:30.498" starttime="20191106 20:23:30.497"></status>
</kw>
<msg timestamp="20191106 20:23:30.498" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:30.498" starttime="20191106 20:23:08.151"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 20:23:30.499" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:30.500" starttime="20191106 20:23:30.499"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:30.501" starttime="20191106 20:23:30.500"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:30.502" starttime="20191106 20:23:30.501"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 20:23:30.502" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 20:23:30.503" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:30.503" starttime="20191106 20:23:30.502"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 20:23:30.504" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 20:23:30.504" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 20:23:30.504" starttime="20191106 20:23:30.503"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 20:23:30.505" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 20:23:30.505" starttime="20191106 20:23:30.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 20:23:30.506" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 20:23:30.506" starttime="20191106 20:23:30.505"></status>
</kw>
<msg timestamp="20191106 20:23:30.506" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191106 20:23:30.506" starttime="20191106 20:23:08.150"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:30.507" starttime="20191106 20:23:30.507"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 20:23:30.509" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191106 20:23:30.509" starttime="20191106 20:23:30.508"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 20:23:30.510" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191106 20:23:30.511" starttime="20191106 20:23:30.510"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 20:23:30.512" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191106 20:23:30.512" starttime="20191106 20:23:30.511"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:23:30.514" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:23:30.514" starttime="20191106 20:23:30.512"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:23:30.518" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:23:35.036" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:23:35.036" level="INFO">${output} = 2019-11-06 20:23:33 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 20:23:33 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 20:23:35.036" starttime="20191106 20:23:30.515"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:23:35.038" level="INFO">2019-11-06 20:23:33 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 20:23:33 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 20:23:33 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 20:23:35.039" starttime="20191106 20:23:35.037"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:23:35.040" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:23:35.040" starttime="20191106 20:23:35.039"></status>
</kw>
<status status="PASS" endtime="20191106 20:23:35.040" starttime="20191106 20:23:30.514"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:23:35.045" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:23:37.543" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:23:37.544" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:23:37.544" starttime="20191106 20:23:35.042"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:23:37.545" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:23:37.546" starttime="20191106 20:23:37.545"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:23:37.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:23:37.546" starttime="20191106 20:23:37.546"></status>
</kw>
<msg timestamp="20191106 20:23:37.547" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:23:37.547" starttime="20191106 20:23:35.041"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:37.548" starttime="20191106 20:23:37.547"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:23:37.549" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:23:37.549" starttime="20191106 20:23:37.548"></status>
</kw>
<status status="PASS" endtime="20191106 20:23:37.549" starttime="20191106 20:23:30.508"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:23:37.551" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 20:23:37.551" starttime="20191106 20:23:37.550"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:37.552" starttime="20191106 20:23:37.552"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:23:37.553" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:23:38.758" level="INFO">Read output: Last login: Wed Nov  6 20:23:05 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:23:38.759" starttime="20191106 20:23:37.553"></status>
</kw>
<status status="PASS" endtime="20191106 20:23:38.759" starttime="20191106 20:23:37.551"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 20:23:38.760" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 20:23:40.929" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:23:40.929" starttime="20191106 20:23:38.760"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 20:23:40.930" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:23:41.038" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:23:41.039" level="INFO">${startupMsg} = hadoop    1140  348  0.0 34478324 204484 ?     Sl   20:23   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 20:23:41.039" starttime="20191106 20:23:40.930"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:23:41.104" starttime="20191106 20:23:41.039"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:41.105" starttime="20191106 20:23:41.104"></status>
</kw>
<status status="PASS" endtime="20191106 20:23:41.105" starttime="20191106 20:23:37.550"></status>
</kw>
<status status="PASS" endtime="20191106 20:23:41.105" starttime="20191106 20:23:02.780"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:23:41.108" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:23:43.052" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:23:43.052" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:43.052" starttime="20191106 20:23:41.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:23:43.053" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:43.053" starttime="20191106 20:23:43.053"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:23:43.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:23:43.054" starttime="20191106 20:23:43.053"></status>
</kw>
<msg timestamp="20191106 20:23:43.055" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:43.055" starttime="20191106 20:23:41.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 20:23:43.055" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:43.055" starttime="20191106 20:23:43.055"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:43.056" starttime="20191106 20:23:43.055"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:43.056" starttime="20191106 20:23:43.056"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 20:23:43.057" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 20:23:43.057" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:43.057" starttime="20191106 20:23:43.057"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 20:23:43.058" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 20:23:43.058" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 20:23:43.058" starttime="20191106 20:23:43.057"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 20:23:43.059" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 20:23:43.059" starttime="20191106 20:23:43.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 20:23:43.060" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 20:23:43.060" starttime="20191106 20:23:43.060"></status>
</kw>
<msg timestamp="20191106 20:23:43.061" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 20:23:43.061" starttime="20191106 20:23:41.105"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:23:43.063" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 20:23:43.063" starttime="20191106 20:23:43.062"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:43.066" starttime="20191106 20:23:43.065"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:23:43.067" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:23:44.266" level="INFO">Read output: Last login: Wed Nov  6 20:22:12 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:23:44.267" starttime="20191106 20:23:43.066"></status>
</kw>
<status status="PASS" endtime="20191106 20:23:44.267" starttime="20191106 20:23:43.064"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 20:23:44.268" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 20:23:45.428" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:23:45.429" starttime="20191106 20:23:44.267"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 20:23:45.430" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:23:45.527" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:23:45.528" level="INFO">${shutdownMsg} = hadoop    1729  0.0  0.0   9556  1168 ?        Ss   20:23   0:00 bash -c sudo ps aux | grep om
hadoop    1731  0.0  0.0   9088   672 ?        S    20:23   0:00 grep om</msg>
<status status="PASS" endtime="20191106 20:23:45.528" starttime="20191106 20:23:45.429"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:23:45.593" starttime="20191106 20:23:45.528"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:45.594" starttime="20191106 20:23:45.593"></status>
</kw>
<msg timestamp="20191106 20:23:45.595" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 20:23:45.595" starttime="20191106 20:23:43.061"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:23:45.600" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:23:57.864" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:23:57.864" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:57.864" starttime="20191106 20:23:45.597"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:23:57.865" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:57.865" starttime="20191106 20:23:57.865"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:23:57.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:23:57.866" starttime="20191106 20:23:57.866"></status>
</kw>
<msg timestamp="20191106 20:23:57.867" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:57.867" starttime="20191106 20:23:45.596"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 20:23:57.867" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:57.867" starttime="20191106 20:23:57.867"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:57.868" starttime="20191106 20:23:57.868"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:57.869" starttime="20191106 20:23:57.868"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 20:23:57.870" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 20:23:57.870" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 20:23:57.870" starttime="20191106 20:23:57.869"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 20:23:57.871" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 20:23:57.871" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 20:23:57.871" starttime="20191106 20:23:57.870"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 20:23:57.871" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 20:23:57.872" starttime="20191106 20:23:57.871"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 20:23:57.872" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 20:23:57.872" starttime="20191106 20:23:57.872"></status>
</kw>
<msg timestamp="20191106 20:23:57.873" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191106 20:23:57.873" starttime="20191106 20:23:45.595"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 20:23:57.873" starttime="20191106 20:23:57.873"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 20:23:57.875" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191106 20:23:57.875" starttime="20191106 20:23:57.874"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 20:23:57.876" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191106 20:23:57.876" starttime="20191106 20:23:57.875"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 20:23:57.876" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191106 20:23:57.877" starttime="20191106 20:23:57.876"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:23:57.878" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:23:57.878" starttime="20191106 20:23:57.877"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:23:57.881" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:24:02.414" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:24:02.414" level="INFO">${output} = 2019-11-06 20:24:00 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 20:24:00 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 20:24:02.414" starttime="20191106 20:23:57.879"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:24:02.417" level="INFO">2019-11-06 20:24:00 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 20:24:00 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 20:24:00 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 20:24:02.417" starttime="20191106 20:24:02.415"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:24:02.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:24:02.418" starttime="20191106 20:24:02.417"></status>
</kw>
<status status="PASS" endtime="20191106 20:24:02.419" starttime="20191106 20:23:57.878"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 20:24:02.424" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 20:24:04.805" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 20:24:04.806" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:24:04.806" starttime="20191106 20:24:02.420"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 20:24:04.808" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:24:04.808" starttime="20191106 20:24:04.807"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 20:24:04.809" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 20:24:04.810" starttime="20191106 20:24:04.809"></status>
</kw>
<msg timestamp="20191106 20:24:04.810" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 20:24:04.810" starttime="20191106 20:24:02.419"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:24:04.811" starttime="20191106 20:24:04.811"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 20:24:04.813" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 20:24:04.813" starttime="20191106 20:24:04.812"></status>
</kw>
<status status="PASS" endtime="20191106 20:24:04.813" starttime="20191106 20:23:57.874"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 20:24:04.815" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 20:24:04.815" starttime="20191106 20:24:04.814"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 20:24:04.816" starttime="20191106 20:24:04.815"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 20:24:04.817" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 20:24:06.021" level="INFO">Read output: Last login: Wed Nov  6 20:23:43 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 20:24:06.022" starttime="20191106 20:24:04.816"></status>
</kw>
<status status="PASS" endtime="20191106 20:24:06.022" starttime="20191106 20:24:04.815"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 20:24:06.024" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 20:24:08.205" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 20:24:08.206" starttime="20191106 20:24:06.023"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 20:24:08.207" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 20:24:08.305" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 20:24:08.305" level="INFO">${startupMsg} = hadoop    1781  366  0.0 34473692 203708 ?     Sl   20:24   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 20:24:08.306" starttime="20191106 20:24:08.206"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 20:24:08.371" starttime="20191106 20:24:08.306"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 20:24:08.372" starttime="20191106 20:24:08.371"></status>
</kw>
<status status="PASS" endtime="20191106 20:24:08.372" starttime="20191106 20:24:04.813"></status>
</kw>
<status status="PASS" endtime="20191106 20:24:08.372" starttime="20191106 20:23:41.105"></status>
</kw>
<status status="PASS" endtime="20191106 20:24:08.372" starttime="20191106 20:21:32.251"></status>
</kw>
<status status="PASS" endtime="20191106 20:24:08.373" critical="yes" starttime="20191106 20:21:32.250"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191106 20:24:08.375" starttime="20191106 20:19:26.006"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
