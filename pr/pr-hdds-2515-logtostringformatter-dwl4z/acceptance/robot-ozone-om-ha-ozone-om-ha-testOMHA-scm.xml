<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 20:14:42.363" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:14:42.549" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:14:44.859" level="INFO">${rc} = 255</msg>
<msg timestamp="20191115 20:14:44.859" level="INFO">${output} = Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191115 20:14:44.860" starttime="20191115 20:14:42.546"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:14:44.861" level="INFO">Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191115 20:14:44.861" starttime="20191115 20:14:44.860"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:14:44.861" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191115 20:14:44.862" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191115 20:14:44.865" starttime="20191115 20:14:44.861"></status>
</kw>
<status status="FAIL" endtime="20191115 20:14:44.865" starttime="20191115 20:14:42.545"></status>
</kw>
<status status="FAIL" endtime="20191115 20:14:44.865" starttime="20191115 20:14:42.545"></status>
</kw>
<status status="FAIL" endtime="20191115 20:14:44.865" critical="yes" starttime="20191115 20:14:42.544">255 != 0</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 20:14:44.868" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:14:44.868" starttime="20191115 20:14:44.866"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 20:14:44.869" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 20:14:44.869" starttime="20191115 20:14:44.868"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:14:44.870" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:14:44.870" starttime="20191115 20:14:44.870"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:14:44.871" starttime="20191115 20:14:44.871"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:14:44.872" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:14:46.116" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:14:46.116" starttime="20191115 20:14:44.872"></status>
</kw>
<status status="PASS" endtime="20191115 20:14:46.116" starttime="20191115 20:14:44.871"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:14:46.117" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:14:46.131" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:14:46.131" starttime="20191115 20:14:46.116"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:14:46.132" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:14:46.208" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:14:46.208" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:14:46.208" starttime="20191115 20:14:46.131"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:14:46.323" starttime="20191115 20:14:46.208"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:14:46.324" starttime="20191115 20:14:46.323"></status>
</kw>
<status status="PASS" endtime="20191115 20:14:46.324" starttime="20191115 20:14:44.869"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:14:46.325" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:14:46.325" starttime="20191115 20:14:46.325"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:14:46.326" starttime="20191115 20:14:46.326"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:14:46.327" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:14:47.525" level="INFO">Read output: Last login: Fri Nov 15 20:14:45 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:14:47.525" starttime="20191115 20:14:46.326"></status>
</kw>
<status status="PASS" endtime="20191115 20:14:47.525" starttime="20191115 20:14:46.325"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 20:14:47.526" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 20:14:47.540" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:14:47.540" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191115 20:14:47.540" starttime="20191115 20:14:47.526"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 20:14:47.541" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191115 20:14:47.542" starttime="20191115 20:14:47.541"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 20:14:47.542" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191115 20:14:47.542" starttime="20191115 20:14:47.542"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 20:14:47.587" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191115 20:14:47.587" starttime="20191115 20:14:47.543"></status>
</kw>
<status status="FAIL" endtime="20191115 20:14:47.588" starttime="20191115 20:14:46.324"></status>
</kw>
<status status="FAIL" endtime="20191115 20:14:47.588" critical="yes" starttime="20191115 20:14:44.866">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:14:47.594" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:14:49.714" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:14:49.714" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:14:49.714" starttime="20191115 20:14:47.592"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:14:49.715" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:14:49.716" starttime="20191115 20:14:49.715"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:14:49.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:14:49.716" starttime="20191115 20:14:49.716"></status>
</kw>
<msg timestamp="20191115 20:14:49.717" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:14:49.717" starttime="20191115 20:14:47.591"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:14:49.717" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:14:49.717" starttime="20191115 20:14:49.717"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:14:49.718" starttime="20191115 20:14:49.717"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:14:49.718" starttime="20191115 20:14:49.718"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:14:49.719" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:14:49.719" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:14:49.719" starttime="20191115 20:14:49.718"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:14:49.720" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:14:49.720" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:14:49.720" starttime="20191115 20:14:49.719"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:14:49.720" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:14:49.720" starttime="20191115 20:14:49.720"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:14:49.721" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:14:49.721" starttime="20191115 20:14:49.720"></status>
</kw>
<msg timestamp="20191115 20:14:49.721" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:14:49.721" starttime="20191115 20:14:47.590"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:14:49.723" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 20:14:49.723" starttime="20191115 20:14:49.722"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:14:49.724" starttime="20191115 20:14:49.723"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:14:49.725" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:14:50.923" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:14:50.923" starttime="20191115 20:14:49.724"></status>
</kw>
<status status="PASS" endtime="20191115 20:14:50.923" starttime="20191115 20:14:49.723"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:14:50.924" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:14:50.938" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:14:50.938" starttime="20191115 20:14:50.924"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:14:50.939" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:14:51.016" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:14:51.016" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:14:51.016" starttime="20191115 20:14:50.938"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:14:51.131" starttime="20191115 20:14:51.017"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:14:51.132" starttime="20191115 20:14:51.131"></status>
</kw>
<msg timestamp="20191115 20:14:51.132" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 20:14:51.132" starttime="20191115 20:14:49.721"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:14:51.135" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:14:53.252" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:14:53.252" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:14:53.252" starttime="20191115 20:14:51.133"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:14:53.254" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:14:53.254" starttime="20191115 20:14:53.253"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:14:53.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:14:53.255" starttime="20191115 20:14:53.254"></status>
</kw>
<msg timestamp="20191115 20:14:53.256" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:14:53.256" starttime="20191115 20:14:51.133"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:14:53.256" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:14:53.257" starttime="20191115 20:14:53.256"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:14:53.257" starttime="20191115 20:14:53.257"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:14:53.258" starttime="20191115 20:14:53.258"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:14:53.259" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:14:53.259" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:14:53.259" starttime="20191115 20:14:53.259"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:14:53.260" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:14:53.260" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:14:53.261" starttime="20191115 20:14:53.260"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:14:53.261" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:14:53.261" starttime="20191115 20:14:53.261"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:14:53.262" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:14:53.262" starttime="20191115 20:14:53.262"></status>
</kw>
<msg timestamp="20191115 20:14:53.263" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:14:53.263" starttime="20191115 20:14:51.132"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 20:14:53.264" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 20:14:53.264" starttime="20191115 20:14:53.263"></status>
</kw>
<status status="FAIL" endtime="20191115 20:14:53.264" starttime="20191115 20:14:47.590"></status>
</kw>
<status status="FAIL" endtime="20191115 20:14:53.265" starttime="20191115 20:14:47.590"></status>
</kw>
<status status="FAIL" endtime="20191115 20:14:53.265" critical="yes" starttime="20191115 20:14:47.589">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191115 20:14:53.266" starttime="20191115 20:14:42.364"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
