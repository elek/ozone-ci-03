<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 03:59:15.308" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 03:59:15.597" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 03:59:20.897" level="INFO">${rc} = 255</msg>
<msg timestamp="20191115 03:59:20.897" level="INFO">${output} = Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191115 03:59:20.897" starttime="20191115 03:59:15.595"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 03:59:20.899" level="INFO">Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191115 03:59:20.899" starttime="20191115 03:59:20.898"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 03:59:20.900" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191115 03:59:20.901" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191115 03:59:20.905" starttime="20191115 03:59:20.900"></status>
</kw>
<status status="FAIL" endtime="20191115 03:59:20.906" starttime="20191115 03:59:15.594"></status>
</kw>
<status status="FAIL" endtime="20191115 03:59:20.906" starttime="20191115 03:59:15.594"></status>
</kw>
<status status="FAIL" endtime="20191115 03:59:20.907" critical="yes" starttime="20191115 03:59:15.593">255 != 0</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 03:59:20.911" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 03:59:20.911" starttime="20191115 03:59:20.908"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 03:59:20.913" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 03:59:20.913" starttime="20191115 03:59:20.911"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 03:59:20.915" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 03:59:20.915" starttime="20191115 03:59:20.915"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 03:59:20.917" starttime="20191115 03:59:20.916"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 03:59:20.918" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 03:59:22.574" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 03:59:22.574" starttime="20191115 03:59:20.918"></status>
</kw>
<status status="PASS" endtime="20191115 03:59:22.574" starttime="20191115 03:59:20.916"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 03:59:22.575" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 03:59:22.590" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 03:59:22.591" starttime="20191115 03:59:22.575"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 03:59:22.591" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 03:59:22.669" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 03:59:22.669" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 03:59:22.669" starttime="20191115 03:59:22.591"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 03:59:22.785" starttime="20191115 03:59:22.670"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 03:59:22.786" starttime="20191115 03:59:22.785"></status>
</kw>
<status status="PASS" endtime="20191115 03:59:22.786" starttime="20191115 03:59:20.914"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 03:59:22.787" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 03:59:22.787" starttime="20191115 03:59:22.786"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 03:59:22.788" starttime="20191115 03:59:22.788"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 03:59:22.789" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 03:59:23.975" level="INFO">Read output: Last login: Fri Nov 15 03:59:21 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 03:59:23.975" starttime="20191115 03:59:22.788"></status>
</kw>
<status status="PASS" endtime="20191115 03:59:23.976" starttime="20191115 03:59:22.787"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 03:59:23.977" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 03:59:23.992" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 03:59:23.992" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191115 03:59:23.992" starttime="20191115 03:59:23.976"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 03:59:23.993" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191115 03:59:23.993" starttime="20191115 03:59:23.993"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 03:59:23.994" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191115 03:59:23.994" starttime="20191115 03:59:23.993"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 03:59:24.036" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191115 03:59:24.036" starttime="20191115 03:59:23.994"></status>
</kw>
<status status="FAIL" endtime="20191115 03:59:24.036" starttime="20191115 03:59:22.786"></status>
</kw>
<status status="FAIL" endtime="20191115 03:59:24.036" critical="yes" starttime="20191115 03:59:20.907">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 03:59:24.041" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 03:59:26.207" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 03:59:26.208" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 03:59:26.208" starttime="20191115 03:59:24.039"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 03:59:26.209" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 03:59:26.209" starttime="20191115 03:59:26.208"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 03:59:26.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 03:59:26.210" starttime="20191115 03:59:26.209"></status>
</kw>
<msg timestamp="20191115 03:59:26.210" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 03:59:26.211" starttime="20191115 03:59:24.038"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 03:59:26.211" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 03:59:26.211" starttime="20191115 03:59:26.211"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 03:59:26.212" starttime="20191115 03:59:26.211"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 03:59:26.213" starttime="20191115 03:59:26.212"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 03:59:26.213" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 03:59:26.214" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 03:59:26.214" starttime="20191115 03:59:26.213"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 03:59:26.214" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 03:59:26.214" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 03:59:26.215" starttime="20191115 03:59:26.214"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 03:59:26.215" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 03:59:26.215" starttime="20191115 03:59:26.215"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 03:59:26.216" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 03:59:26.216" starttime="20191115 03:59:26.215"></status>
</kw>
<msg timestamp="20191115 03:59:26.216" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 03:59:26.216" starttime="20191115 03:59:24.038"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 03:59:26.218" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 03:59:26.218" starttime="20191115 03:59:26.217"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 03:59:26.220" starttime="20191115 03:59:26.219"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 03:59:26.220" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 03:59:27.423" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 03:59:27.423" starttime="20191115 03:59:26.220"></status>
</kw>
<status status="PASS" endtime="20191115 03:59:27.423" starttime="20191115 03:59:26.218"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 03:59:27.424" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 03:59:27.438" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 03:59:27.438" starttime="20191115 03:59:27.424"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 03:59:27.439" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 03:59:27.515" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 03:59:27.516" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 03:59:27.516" starttime="20191115 03:59:27.438"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 03:59:27.631" starttime="20191115 03:59:27.516"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 03:59:27.632" starttime="20191115 03:59:27.631"></status>
</kw>
<msg timestamp="20191115 03:59:27.632" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 03:59:27.632" starttime="20191115 03:59:26.217"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 03:59:27.637" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 03:59:29.495" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 03:59:29.495" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 03:59:29.495" starttime="20191115 03:59:27.634"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 03:59:29.496" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 03:59:29.496" starttime="20191115 03:59:29.495"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 03:59:29.497" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 03:59:29.497" starttime="20191115 03:59:29.496"></status>
</kw>
<msg timestamp="20191115 03:59:29.497" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 03:59:29.497" starttime="20191115 03:59:27.633"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 03:59:29.498" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 03:59:29.498" starttime="20191115 03:59:29.497"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 03:59:29.498" starttime="20191115 03:59:29.498"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 03:59:29.499" starttime="20191115 03:59:29.499"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 03:59:29.499" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 03:59:29.500" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 03:59:29.500" starttime="20191115 03:59:29.499"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 03:59:29.500" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 03:59:29.500" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 03:59:29.500" starttime="20191115 03:59:29.500"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 03:59:29.501" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 03:59:29.501" starttime="20191115 03:59:29.501"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 03:59:29.501" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 03:59:29.501" starttime="20191115 03:59:29.501"></status>
</kw>
<msg timestamp="20191115 03:59:29.502" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 03:59:29.502" starttime="20191115 03:59:27.632"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 03:59:29.503" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 03:59:29.503" starttime="20191115 03:59:29.502"></status>
</kw>
<status status="FAIL" endtime="20191115 03:59:29.503" starttime="20191115 03:59:24.038"></status>
</kw>
<status status="FAIL" endtime="20191115 03:59:29.503" starttime="20191115 03:59:24.037"></status>
</kw>
<status status="FAIL" endtime="20191115 03:59:29.503" critical="yes" starttime="20191115 03:59:24.037">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191115 03:59:29.504" starttime="20191115 03:59:15.309"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
