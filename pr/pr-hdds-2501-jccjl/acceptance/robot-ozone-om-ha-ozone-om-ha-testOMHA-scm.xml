<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 23:46:15.662" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:46:15.789" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:46:18.736" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:46:18.737" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 23:46:18.737" starttime="20191115 23:46:15.787"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:46:18.738" level="INFO"></msg>
<status status="PASS" endtime="20191115 23:46:18.738" starttime="20191115 23:46:18.737"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:46:18.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:46:18.739" starttime="20191115 23:46:18.738"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:18.740" starttime="20191115 23:46:15.787"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:46:18.746" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:46:20.989" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:46:20.990" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 23:46:20.990" starttime="20191115 23:46:18.744"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:46:20.992" level="INFO"></msg>
<status status="PASS" endtime="20191115 23:46:20.992" starttime="20191115 23:46:20.991"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:46:20.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:46:20.993" starttime="20191115 23:46:20.992"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:20.993" starttime="20191115 23:46:18.740"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:20.994" starttime="20191115 23:46:15.786"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:46:20.996" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191115 23:46:20.996" starttime="20191115 23:46:20.995"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:46:20.997" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191115 23:46:20.997" starttime="20191115 23:46:20.996"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:46:20.998" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191115 23:46:20.998" starttime="20191115 23:46:20.998"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:46:21.012" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:46:21.013" starttime="20191115 23:46:20.999"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:46:21.016" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:46:25.687" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:46:25.687" level="INFO">${output} = 2019-11-15 23:46:23 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:46:23 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 23:46:25.687" starttime="20191115 23:46:21.014"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:46:25.689" level="INFO">2019-11-15 23:46:23 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:46:23 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:46:23 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:46:25.689" starttime="20191115 23:46:25.688"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:46:25.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:46:25.690" starttime="20191115 23:46:25.689"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:25.691" starttime="20191115 23:46:21.013"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:46:25.695" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:46:27.957" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:46:27.958" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191115 23:46:27.958" starttime="20191115 23:46:25.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:46:27.959" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191115 23:46:27.960" starttime="20191115 23:46:27.959"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:46:27.960" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:46:27.961" starttime="20191115 23:46:27.960"></status>
</kw>
<msg timestamp="20191115 23:46:27.961" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191115 23:46:27.961" starttime="20191115 23:46:25.691"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:27.962" starttime="20191115 23:46:27.962"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:46:27.963" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:46:27.963" starttime="20191115 23:46:27.962"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:27.964" starttime="20191115 23:46:20.994"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:46:27.968" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:46:30.042" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:46:30.042" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:46:30.042" starttime="20191115 23:46:27.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:46:30.043" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:46:30.043" starttime="20191115 23:46:30.042"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:46:30.044" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:46:30.044" starttime="20191115 23:46:30.043"></status>
</kw>
<msg timestamp="20191115 23:46:30.044" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:46:30.044" starttime="20191115 23:46:27.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:46:30.045" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:46:30.045" starttime="20191115 23:46:30.045"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:30.046" starttime="20191115 23:46:30.045"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:30.047" starttime="20191115 23:46:30.046"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:46:30.047" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:46:30.047" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:46:30.047" starttime="20191115 23:46:30.047"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:46:30.048" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191115 23:46:30.048" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:46:30.048" starttime="20191115 23:46:30.047"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:46:30.049" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:46:30.049" starttime="20191115 23:46:30.048"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:46:30.049" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191115 23:46:30.049" starttime="20191115 23:46:30.049"></status>
</kw>
<msg timestamp="20191115 23:46:30.050" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:46:30.050" starttime="20191115 23:46:27.964"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:46:30.051" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:46:30.051" starttime="20191115 23:46:30.050"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:30.052" starttime="20191115 23:46:30.052"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:46:30.053" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:46:31.259" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:46:31.259" starttime="20191115 23:46:30.052"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:31.260" starttime="20191115 23:46:30.051"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:46:31.261" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:46:41.433" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:46:41.433" starttime="20191115 23:46:31.260"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:46:41.434" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:46:41.542" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:46:41.543" level="INFO">${shutdownMsg} = hadoop     437  0.0  0.0   9556  1164 ?        Ss   23:46   0:00 bash -c sudo ps aux | grep om
hadoop     439  0.0  0.0   9088   672 ?        S    23:46   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:46:41.543" starttime="20191115 23:46:41.434"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:46:41.608" starttime="20191115 23:46:41.543"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:41.609" starttime="20191115 23:46:41.609"></status>
</kw>
<msg timestamp="20191115 23:46:41.610" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 23:46:41.610" starttime="20191115 23:46:30.050"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:46:41.614" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:46:43.854" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:46:43.854" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:46:43.854" starttime="20191115 23:46:41.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:46:43.856" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:46:43.856" starttime="20191115 23:46:43.855"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:46:43.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:46:43.857" starttime="20191115 23:46:43.856"></status>
</kw>
<msg timestamp="20191115 23:46:43.858" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:46:43.858" starttime="20191115 23:46:41.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:46:43.859" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:46:43.859" starttime="20191115 23:46:43.858"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:43.860" starttime="20191115 23:46:43.859"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:43.860" starttime="20191115 23:46:43.860"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:46:43.861" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:46:43.861" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:46:43.862" starttime="20191115 23:46:43.861"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:46:43.862" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 23:46:43.862" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:46:43.862" starttime="20191115 23:46:43.862"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:46:43.863" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:46:43.863" starttime="20191115 23:46:43.863"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:46:43.864" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 23:46:43.864" starttime="20191115 23:46:43.863"></status>
</kw>
<msg timestamp="20191115 23:46:43.864" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:46:43.864" starttime="20191115 23:46:41.610"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:43.865" starttime="20191115 23:46:43.864"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:46:43.866" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191115 23:46:43.866" starttime="20191115 23:46:43.865"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:46:43.867" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191115 23:46:43.867" starttime="20191115 23:46:43.866"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:46:43.868" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191115 23:46:43.868" starttime="20191115 23:46:43.867"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:46:43.870" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:46:43.870" starttime="20191115 23:46:43.868"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:46:43.874" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:46:48.369" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:46:48.369" level="INFO">${output} = 2019-11-15 23:46:46 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:46:46 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 23:46:48.370" starttime="20191115 23:46:43.871"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:46:48.371" level="INFO">2019-11-15 23:46:46 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:46:46 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:46:46 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:46:48.371" starttime="20191115 23:46:48.370"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:46:48.372" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:46:48.373" starttime="20191115 23:46:48.372"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:48.373" starttime="20191115 23:46:43.870"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:46:48.377" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:46:50.579" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:46:50.580" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191115 23:46:50.580" starttime="20191115 23:46:48.375"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:46:50.582" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191115 23:46:50.582" starttime="20191115 23:46:50.581"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:46:50.583" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:46:50.583" starttime="20191115 23:46:50.582"></status>
</kw>
<msg timestamp="20191115 23:46:50.584" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191115 23:46:50.584" starttime="20191115 23:46:48.374"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:50.585" starttime="20191115 23:46:50.584"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:46:50.586" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:46:50.586" starttime="20191115 23:46:50.585"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:50.586" starttime="20191115 23:46:43.865"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:46:50.588" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:46:50.588" starttime="20191115 23:46:50.587"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:50.590" starttime="20191115 23:46:50.589"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:46:50.591" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:46:51.797" level="INFO">Read output: Last login: Fri Nov 15 23:46:30 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:46:51.797" starttime="20191115 23:46:50.591"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:51.798" starttime="20191115 23:46:50.589"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:46:51.799" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:46:53.978" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:46:53.979" starttime="20191115 23:46:51.798"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:46:53.980" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:46:54.078" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:46:54.078" level="INFO">${startupMsg} = hadoop     490  372  0.0 34485712 230072 ?     Sl   23:46   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:46:54.078" starttime="20191115 23:46:53.979"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:46:54.144" starttime="20191115 23:46:54.079"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:54.145" starttime="20191115 23:46:54.144"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:54.145" starttime="20191115 23:46:50.586"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:54.145" critical="yes" starttime="20191115 23:46:15.786"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 23:46:54.147" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:46:54.148" starttime="20191115 23:46:54.146"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 23:46:54.149" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 23:46:54.149" starttime="20191115 23:46:54.148"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:46:54.151" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:46:54.151" starttime="20191115 23:46:54.150"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:54.152" starttime="20191115 23:46:54.151"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:46:54.153" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:46:55.351" level="INFO">Read output: Last login: Fri Nov 15 23:46:50 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:46:55.352" starttime="20191115 23:46:54.153"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:55.352" starttime="20191115 23:46:54.151"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:46:55.353" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:46:56.501" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:46:56.502" starttime="20191115 23:46:55.352"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:46:56.503" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:46:56.611" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:46:56.612" level="INFO">${shutdownMsg} = hadoop     843  0.0  0.0   9556  1164 ?        Ss   23:46   0:00 bash -c sudo ps aux | grep om
hadoop     845  0.0  0.0   9088   672 ?        S    23:46   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:46:56.612" starttime="20191115 23:46:56.502"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:46:56.677" starttime="20191115 23:46:56.612"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:56.678" starttime="20191115 23:46:56.678"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:56.679" starttime="20191115 23:46:54.149"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:46:56.681" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:46:56.681" starttime="20191115 23:46:56.680"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:46:56.683" starttime="20191115 23:46:56.682"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:46:56.684" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:46:57.888" level="INFO">Read output: Last login: Fri Nov 15 23:46:54 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:46:57.889" starttime="20191115 23:46:56.683"></status>
</kw>
<status status="PASS" endtime="20191115 23:46:57.889" starttime="20191115 23:46:56.681"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 23:46:57.890" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 23:46:57.926" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:46:57.926" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:46:57.926" starttime="20191115 23:46:57.889"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 23:46:57.928" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:46:57.928" starttime="20191115 23:46:57.927"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 23:46:57.930" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 23:46:57.930" starttime="20191115 23:46:57.929"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 23:46:57.978" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 23:46:57.987" level="INFO">1 file:
log_inprogress_0</msg>
<msg timestamp="20191115 23:46:57.988" level="INFO">@{logs} = [ log_inprogress_0 ]</msg>
<status status="PASS" endtime="20191115 23:46:57.988" starttime="20191115 23:46:57.930"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 23:46:57.989" level="INFO">Length is 1</msg>
<msg timestamp="20191115 23:46:57.989" level="INFO">${numLogs} = 1</msg>
<status status="PASS" endtime="20191115 23:46:57.989" starttime="20191115 23:46:57.988"></status>
</kw>
<msg timestamp="20191115 23:46:57.990" level="INFO">${numLogsBefore} = 1</msg>
<msg timestamp="20191115 23:46:57.990" level="INFO">@{logsBefore} = [ [u'log_inprogress_0'] ]</msg>
<status status="PASS" endtime="20191115 23:46:57.990" starttime="20191115 23:46:56.679"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:46:57.993" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:47:00.079" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:47:00.080" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:47:00.080" starttime="20191115 23:46:57.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:47:00.081" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:47:00.082" starttime="20191115 23:47:00.080"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:47:00.082" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:47:00.083" starttime="20191115 23:47:00.082"></status>
</kw>
<msg timestamp="20191115 23:47:00.083" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:47:00.083" starttime="20191115 23:46:57.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:47:00.084" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:47:00.084" starttime="20191115 23:47:00.084"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:00.085" starttime="20191115 23:47:00.085"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:00.086" starttime="20191115 23:47:00.085"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:47:00.087" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:47:00.087" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:47:00.087" starttime="20191115 23:47:00.086"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:47:00.088" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 23:47:00.088" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:47:00.088" starttime="20191115 23:47:00.088"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:47:00.089" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:47:00.089" starttime="20191115 23:47:00.089"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:47:00.090" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 23:47:00.090" starttime="20191115 23:47:00.090"></status>
</kw>
<msg timestamp="20191115 23:47:00.091" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:47:00.091" starttime="20191115 23:46:57.990"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191115 23:47:00.095" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191115 23:47:00.095" starttime="20191115 23:47:00.092"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:47:00.099" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191115 23:47:00.099" starttime="20191115 23:47:00.098"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:47:00.100" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191115 23:47:00.100" starttime="20191115 23:47:00.099"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:47:00.105" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:47:04.803" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:47:04.803" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:47:04.803" starttime="20191115 23:47:00.103"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:47:04.805" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:47:04.805" starttime="20191115 23:47:04.804"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:47:04.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:47:04.806" starttime="20191115 23:47:04.805"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:04.806" starttime="20191115 23:47:00.101"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:47:04.811" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:47:07.150" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:47:07.150" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573861622318,
  "modificationTime": 1573861624412,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:47:07.150" starttime="20191115 23:47:04.809"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:47:07.151" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573861622318,
  "modificationTime": 1573861624412,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103144595280101380,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:47:07.152" starttime="20191115 23:47:07.151"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:47:07.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:47:07.152" starttime="20191115 23:47:07.152"></status>
</kw>
<msg timestamp="20191115 23:47:07.153" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573861622318,
  "modificationTime": 1573861624412,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:47:07.153" starttime="20191115 23:47:04.807"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:07.153" starttime="20191115 23:47:07.153"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:07.153" starttime="20191115 23:47:00.100"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:07.153" starttime="20191115 23:47:00.097"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:47:07.154" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191115 23:47:07.154" starttime="20191115 23:47:07.154"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:47:07.155" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191115 23:47:07.155" starttime="20191115 23:47:07.155"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:47:07.158" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:47:11.989" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:47:11.989" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:47:11.989" starttime="20191115 23:47:07.156"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:47:11.991" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:47:11.991" starttime="20191115 23:47:11.990"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:47:11.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:47:11.992" starttime="20191115 23:47:11.991"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:11.992" starttime="20191115 23:47:07.156"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:47:11.996" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:47:14.246" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:47:14.246" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573861629325,
  "modificationTime": 1573861631582,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:47:14.247" starttime="20191115 23:47:11.994"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:47:14.248" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573861629325,
  "modificationTime": 1573861631582,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103144595739312130,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:47:14.248" starttime="20191115 23:47:14.247"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:47:14.249" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:47:14.249" starttime="20191115 23:47:14.248"></status>
</kw>
<msg timestamp="20191115 23:47:14.250" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573861629325,
  "modificationTime": 1573861631582,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:47:14.250" starttime="20191115 23:47:11.993"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:14.250" starttime="20191115 23:47:14.250"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:14.251" starttime="20191115 23:47:07.155"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:14.251" starttime="20191115 23:47:07.154"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:47:14.252" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191115 23:47:14.252" starttime="20191115 23:47:14.251"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:47:14.253" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191115 23:47:14.253" starttime="20191115 23:47:14.252"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:47:14.257" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:47:18.891" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:47:18.892" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:47:18.892" starttime="20191115 23:47:14.255"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:47:18.893" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:47:18.893" starttime="20191115 23:47:18.892"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:47:18.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:47:18.894" starttime="20191115 23:47:18.893"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:18.894" starttime="20191115 23:47:14.254"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:47:18.898" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:47:21.271" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:47:21.271" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573861636445,
  "modificationTime": 1573861638495,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:47:21.271" starttime="20191115 23:47:18.896"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:47:21.272" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573861636445,
  "modificationTime": 1573861638495,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103144596205928450,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:47:21.273" starttime="20191115 23:47:21.272"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:47:21.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:47:21.273" starttime="20191115 23:47:21.273"></status>
</kw>
<msg timestamp="20191115 23:47:21.274" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573861636445,
  "modificationTime": 1573861638495,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:47:21.274" starttime="20191115 23:47:18.894"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:21.274" starttime="20191115 23:47:21.274"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:21.275" starttime="20191115 23:47:14.253"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:21.275" starttime="20191115 23:47:14.251"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:47:21.276" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191115 23:47:21.276" starttime="20191115 23:47:21.275"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:47:21.276" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191115 23:47:21.276" starttime="20191115 23:47:21.276"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:47:21.280" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:47:25.759" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:47:25.759" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:47:25.759" starttime="20191115 23:47:21.278"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:47:25.761" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:47:25.762" starttime="20191115 23:47:25.760"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:47:25.763" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:47:25.763" starttime="20191115 23:47:25.762"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:25.764" starttime="20191115 23:47:21.277"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:47:25.769" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:47:27.972" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:47:27.972" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573861643452,
  "modificationTime": 1573861645337,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:47:27.972" starttime="20191115 23:47:25.766"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:47:27.974" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573861643452,
  "modificationTime": 1573861645337,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103144596665139200,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:47:27.974" starttime="20191115 23:47:27.973"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:47:27.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:47:27.975" starttime="20191115 23:47:27.974"></status>
</kw>
<msg timestamp="20191115 23:47:27.975" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573861643452,
  "modificationTime": 1573861645337,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:47:27.975" starttime="20191115 23:47:25.764"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:27.976" starttime="20191115 23:47:27.975"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:27.976" starttime="20191115 23:47:21.276"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:27.976" starttime="20191115 23:47:21.275"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 23:47:27.977" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:47:27.977" starttime="20191115 23:47:27.977"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 23:47:27.978" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:47:27.978" starttime="20191115 23:47:27.977"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:47:27.981" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:47:32.659" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:47:32.660" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 23:47:32.660" starttime="20191115 23:47:27.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:47:32.662" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:47:32.663" starttime="20191115 23:47:32.661"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:47:32.664" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:47:32.664" starttime="20191115 23:47:32.663"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:32.665" starttime="20191115 23:47:27.978"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:47:32.670" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:47:35.097" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:47:35.097" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573861650261,
  "modificationTime": 1573861652228,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:47:35.097" starttime="20191115 23:47:32.667"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:47:35.099" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573861650261,
  "modificationTime": 1573861652228,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103144597111439360,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 23:47:35.100" starttime="20191115 23:47:35.098"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:47:35.101" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:47:35.101" starttime="20191115 23:47:35.100"></status>
</kw>
<msg timestamp="20191115 23:47:35.102" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573861650261,
  "modificationTime": 1573861652228,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 23:47:35.102" starttime="20191115 23:47:32.665"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:35.103" starttime="20191115 23:47:35.102"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:35.103" starttime="20191115 23:47:27.978"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:35.103" starttime="20191115 23:47:27.976"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:35.103" starttime="20191115 23:47:00.097"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:35.103" starttime="20191115 23:47:00.096"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:47:35.106" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 23:47:35.106" starttime="20191115 23:47:35.105"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:35.108" starttime="20191115 23:47:35.107"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:47:35.109" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:47:36.297" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:47:36.298" starttime="20191115 23:47:35.108"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:36.298" starttime="20191115 23:47:35.106"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 23:47:36.300" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 23:47:36.325" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:47:36.325" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:47:36.325" starttime="20191115 23:47:36.299"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 23:47:36.326" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:47:36.327" starttime="20191115 23:47:36.326"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 23:47:36.328" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 23:47:36.328" starttime="20191115 23:47:36.327"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 23:47:36.375" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 23:47:36.387" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191115 23:47:36.388" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191115 23:47:36.388" starttime="20191115 23:47:36.328"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 23:47:36.389" level="INFO">Length is 2</msg>
<msg timestamp="20191115 23:47:36.389" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191115 23:47:36.389" starttime="20191115 23:47:36.388"></status>
</kw>
<msg timestamp="20191115 23:47:36.390" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191115 23:47:36.390" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191115 23:47:36.390" starttime="20191115 23:47:35.104"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191115 23:47:36.391" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191115 23:47:36.392" starttime="20191115 23:47:36.391"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:36.392" starttime="20191115 23:47:00.091"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:36.392" starttime="20191115 23:47:00.091"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:36.393" starttime="20191115 23:47:36.392"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:47:36.396" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:47:36.396" starttime="20191115 23:47:36.395"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:36.399" starttime="20191115 23:47:36.398"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:47:36.400" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:47:37.604" level="INFO">Read output: Last login: Fri Nov 15 23:46:56 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:47:37.604" starttime="20191115 23:47:36.399"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:37.605" starttime="20191115 23:47:36.396"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:47:37.606" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:47:39.767" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:47:39.768" starttime="20191115 23:47:37.605"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:47:39.769" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:47:39.834" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:47:39.835" level="INFO">${startupMsg} = hadoop     916  375  0.0 34481404 263108 ?     Sl   23:47   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:47:39.835" starttime="20191115 23:47:39.768"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:47:39.901" starttime="20191115 23:47:39.835"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:39.902" starttime="20191115 23:47:39.902"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:39.902" starttime="20191115 23:47:36.393"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:47:39.904" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:47:39.904" starttime="20191115 23:47:39.903"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:39.906" starttime="20191115 23:47:39.905"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:47:39.906" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:47:41.105" level="INFO">Read output: Last login: Fri Nov 15 23:47:36 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:47:41.105" starttime="20191115 23:47:39.906"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:41.106" starttime="20191115 23:47:39.904"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 23:47:41.107" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 23:47:41.121" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:47:41.122" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:47:41.122" starttime="20191115 23:47:41.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 23:47:41.122" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:47:41.122" starttime="20191115 23:47:41.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 23:47:41.123" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 23:47:41.123" starttime="20191115 23:47:41.123"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 23:47:41.201" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 23:47:41.209" level="INFO">1 file:
log_inprogress_0</msg>
<msg timestamp="20191115 23:47:41.209" level="INFO">@{logs} = [ log_inprogress_0 ]</msg>
<status status="PASS" endtime="20191115 23:47:41.209" starttime="20191115 23:47:41.123"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 23:47:41.210" level="INFO">Length is 1</msg>
<msg timestamp="20191115 23:47:41.210" level="INFO">${numLogs} = 1</msg>
<status status="PASS" endtime="20191115 23:47:41.210" starttime="20191115 23:47:41.209"></status>
</kw>
<msg timestamp="20191115 23:47:41.211" level="INFO">${numLogsAfter} = 1</msg>
<msg timestamp="20191115 23:47:41.211" level="INFO">@{logsAfter} = [ [u'log_inprogress_0'] ]</msg>
<status status="PASS" endtime="20191115 23:47:41.211" starttime="20191115 23:47:39.903"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:41.212" starttime="20191115 23:47:41.211"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191115 23:47:42.213" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191115 23:47:42.213" starttime="20191115 23:47:41.212"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:42.213" starttime="20191115 23:47:39.903"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:47:42.216" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:47:42.216" starttime="20191115 23:47:42.215"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:42.218" starttime="20191115 23:47:42.217"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:47:42.219" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:47:43.406" level="INFO">Read output: Last login: Fri Nov 15 23:47:40 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:47:43.406" starttime="20191115 23:47:42.218"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:43.407" starttime="20191115 23:47:42.216"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 23:47:43.408" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 23:47:43.424" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:47:43.425" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:47:43.425" starttime="20191115 23:47:43.407"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 23:47:43.426" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 23:47:43.426" starttime="20191115 23:47:43.425"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 23:47:43.428" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 23:47:43.428" starttime="20191115 23:47:43.427"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 23:47:43.510" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 23:47:43.523" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191115 23:47:43.523" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191115 23:47:43.523" starttime="20191115 23:47:43.428"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 23:47:43.525" level="INFO">Length is 2</msg>
<msg timestamp="20191115 23:47:43.525" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191115 23:47:43.525" starttime="20191115 23:47:43.524"></status>
</kw>
<msg timestamp="20191115 23:47:43.526" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191115 23:47:43.526" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191115 23:47:43.526" starttime="20191115 23:47:42.214"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191115 23:47:43.527" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191115 23:47:43.528" starttime="20191115 23:47:43.526"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:43.528" starttime="20191115 23:47:42.213"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:43.528" starttime="20191115 23:47:39.902"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:43.529" starttime="20191115 23:47:43.528"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:43.530" starttime="20191115 23:47:43.530"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:43.531" critical="yes" starttime="20191115 23:46:54.145"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:47:43.538" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:47:45.607" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:47:45.607" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:47:45.607" starttime="20191115 23:47:43.535"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:47:45.609" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:47:45.609" starttime="20191115 23:47:45.608"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:47:45.610" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:47:45.610" starttime="20191115 23:47:45.609"></status>
</kw>
<msg timestamp="20191115 23:47:45.611" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:47:45.611" starttime="20191115 23:47:43.534"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:47:45.612" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:47:45.612" starttime="20191115 23:47:45.611"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:45.613" starttime="20191115 23:47:45.612"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:45.614" starttime="20191115 23:47:45.613"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:47:45.615" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:47:45.615" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:47:45.615" starttime="20191115 23:47:45.614"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:47:45.616" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 23:47:45.616" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:47:45.617" starttime="20191115 23:47:45.615"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:47:45.618" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:47:45.618" starttime="20191115 23:47:45.617"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:47:45.619" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 23:47:45.619" starttime="20191115 23:47:45.618"></status>
</kw>
<msg timestamp="20191115 23:47:45.620" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:47:45.620" starttime="20191115 23:47:43.533"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:47:45.622" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 23:47:45.622" starttime="20191115 23:47:45.621"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:45.625" starttime="20191115 23:47:45.624"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:47:45.626" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:47:46.835" level="INFO">Read output: Last login: Fri Nov 15 23:47:35 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:47:46.836" starttime="20191115 23:47:45.625"></status>
</kw>
<status status="PASS" endtime="20191115 23:47:46.836" starttime="20191115 23:47:45.623"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:47:46.837" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:47:57.021" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:47:57.021" starttime="20191115 23:47:46.837"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:47:57.022" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:47:57.120" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:47:57.121" level="INFO">${shutdownMsg} = hadoop     536  0.0  0.0   9556  1164 ?        Ss   23:47   0:00 bash -c sudo ps aux | grep om
hadoop     538  0.0  0.0   9088   668 ?        S    23:47   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:47:57.121" starttime="20191115 23:47:57.022"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:47:57.186" starttime="20191115 23:47:57.121"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:47:57.187" starttime="20191115 23:47:57.186"></status>
</kw>
<msg timestamp="20191115 23:47:57.187" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 23:47:57.187" starttime="20191115 23:47:45.620"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:47:57.190" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:48:09.378" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:48:09.378" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:09.378" starttime="20191115 23:47:57.188"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:48:09.380" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:09.380" starttime="20191115 23:48:09.379"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:48:09.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:48:09.380" starttime="20191115 23:48:09.380"></status>
</kw>
<msg timestamp="20191115 23:48:09.381" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:09.381" starttime="20191115 23:47:57.188"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:48:09.381" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:09.381" starttime="20191115 23:48:09.381"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:09.382" starttime="20191115 23:48:09.382"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:09.383" starttime="20191115 23:48:09.382"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:48:09.383" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:48:09.383" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:09.383" starttime="20191115 23:48:09.383"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:48:09.384" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191115 23:48:09.384" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:48:09.384" starttime="20191115 23:48:09.384"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:48:09.385" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:48:09.385" starttime="20191115 23:48:09.384"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:48:09.385" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191115 23:48:09.385" starttime="20191115 23:48:09.385"></status>
</kw>
<msg timestamp="20191115 23:48:09.386" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:48:09.386" starttime="20191115 23:47:57.187"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:09.386" starttime="20191115 23:48:09.386"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:48:09.388" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191115 23:48:09.388" starttime="20191115 23:48:09.387"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:48:09.388" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191115 23:48:09.389" starttime="20191115 23:48:09.388"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:48:09.389" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191115 23:48:09.389" starttime="20191115 23:48:09.389"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:48:09.391" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:48:09.391" starttime="20191115 23:48:09.390"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:48:09.394" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:48:24.055" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:48:24.056" level="INFO">${output} = 2019-11-15 23:48:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191115 23:48:24.056" starttime="20191115 23:48:09.392"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:48:24.058" level="INFO">2019-11-15 23:48:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:48:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:48:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:48:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:48:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:48:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:48:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:48:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:48:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:48:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:48:22 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:48:22 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:48:22 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:48:24.058" starttime="20191115 23:48:24.057"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:48:24.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:48:24.060" starttime="20191115 23:48:24.059"></status>
</kw>
<status status="PASS" endtime="20191115 23:48:24.060" starttime="20191115 23:48:09.391"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:48:24.064" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:48:36.249" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:48:36.249" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:48:36.249" starttime="20191115 23:48:24.062"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:48:36.251" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:48:36.251" starttime="20191115 23:48:36.250"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:48:36.251" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:48:36.252" starttime="20191115 23:48:36.251"></status>
</kw>
<msg timestamp="20191115 23:48:36.252" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:48:36.252" starttime="20191115 23:48:24.060"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:36.253" starttime="20191115 23:48:36.252"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:48:36.254" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:48:36.254" starttime="20191115 23:48:36.253"></status>
</kw>
<status status="PASS" endtime="20191115 23:48:36.255" starttime="20191115 23:48:09.387"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:48:36.256" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 23:48:36.256" starttime="20191115 23:48:36.256"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:36.258" starttime="20191115 23:48:36.257"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:48:36.258" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:48:37.462" level="INFO">Read output: Last login: Fri Nov 15 23:47:45 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:48:37.463" starttime="20191115 23:48:36.258"></status>
</kw>
<status status="PASS" endtime="20191115 23:48:37.463" starttime="20191115 23:48:36.257"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:48:37.464" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:48:39.643" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:48:39.644" starttime="20191115 23:48:37.463"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:48:39.644" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:48:39.710" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:48:39.711" level="INFO">${startupMsg} = hadoop     589  228  0.0 34475676 207528 ?     Sl   23:48   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:48:39.711" starttime="20191115 23:48:39.644"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:48:39.777" starttime="20191115 23:48:39.711"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:39.778" starttime="20191115 23:48:39.777"></status>
</kw>
<status status="PASS" endtime="20191115 23:48:39.778" starttime="20191115 23:48:36.255"></status>
</kw>
<status status="PASS" endtime="20191115 23:48:39.778" starttime="20191115 23:47:43.533"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:48:39.791" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:48:42.681" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:48:42.681" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:42.681" starttime="20191115 23:48:39.787"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:48:42.682" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:42.682" starttime="20191115 23:48:42.682"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:48:42.683" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:48:42.683" starttime="20191115 23:48:42.683"></status>
</kw>
<msg timestamp="20191115 23:48:42.684" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:42.684" starttime="20191115 23:48:39.786"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:48:42.684" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:42.685" starttime="20191115 23:48:42.684"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:42.685" starttime="20191115 23:48:42.685"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:42.686" starttime="20191115 23:48:42.686"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:48:42.687" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:48:42.687" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:42.687" starttime="20191115 23:48:42.686"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:48:42.688" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191115 23:48:42.688" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:48:42.688" starttime="20191115 23:48:42.687"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:48:42.689" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:48:42.689" starttime="20191115 23:48:42.688"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:48:42.689" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191115 23:48:42.689" starttime="20191115 23:48:42.689"></status>
</kw>
<msg timestamp="20191115 23:48:42.690" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:48:42.690" starttime="20191115 23:48:39.782"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:48:42.692" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:48:42.692" starttime="20191115 23:48:42.691"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:42.694" starttime="20191115 23:48:42.693"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:48:42.694" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:48:43.902" level="INFO">Read output: Last login: Fri Nov 15 23:47:42 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:48:43.902" starttime="20191115 23:48:42.694"></status>
</kw>
<status status="PASS" endtime="20191115 23:48:43.903" starttime="20191115 23:48:42.692"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:48:43.904" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:48:45.052" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:48:45.052" starttime="20191115 23:48:43.903"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:48:45.053" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:48:45.150" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:48:45.150" level="INFO">${shutdownMsg} = hadoop    1458  0.0  0.0   9556  1168 ?        Ss   23:48   0:00 bash -c sudo ps aux | grep om
hadoop    1460  0.0  0.0   9088   672 ?        S    23:48   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:48:45.150" starttime="20191115 23:48:45.053"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:48:45.215" starttime="20191115 23:48:45.151"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:45.216" starttime="20191115 23:48:45.216"></status>
</kw>
<msg timestamp="20191115 23:48:45.216" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 23:48:45.216" starttime="20191115 23:48:42.690"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:48:45.219" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:48:47.413" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:48:47.413" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:47.413" starttime="20191115 23:48:45.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:48:47.415" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:47.415" starttime="20191115 23:48:47.414"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:48:47.416" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:48:47.416" starttime="20191115 23:48:47.416"></status>
</kw>
<msg timestamp="20191115 23:48:47.417" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:47.417" starttime="20191115 23:48:45.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:48:47.418" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:47.418" starttime="20191115 23:48:47.417"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:47.419" starttime="20191115 23:48:47.418"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:47.420" starttime="20191115 23:48:47.419"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:48:47.421" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:48:47.421" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:47.421" starttime="20191115 23:48:47.420"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:48:47.422" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 23:48:47.422" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:48:47.422" starttime="20191115 23:48:47.421"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:48:47.423" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:48:47.423" starttime="20191115 23:48:47.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:48:47.424" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 23:48:47.424" starttime="20191115 23:48:47.423"></status>
</kw>
<msg timestamp="20191115 23:48:47.424" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:48:47.425" starttime="20191115 23:48:45.216"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:47.426" starttime="20191115 23:48:47.425"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:48:47.428" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191115 23:48:47.428" starttime="20191115 23:48:47.427"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:48:47.429" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191115 23:48:47.429" starttime="20191115 23:48:47.428"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:48:47.430" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191115 23:48:47.430" starttime="20191115 23:48:47.429"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:48:47.432" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:48:47.433" starttime="20191115 23:48:47.430"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:48:47.437" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:48:52.144" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:48:52.145" level="INFO">${output} = 2019-11-15 23:48:50 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:48:50 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 23:48:52.145" starttime="20191115 23:48:47.434"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:48:52.147" level="INFO">2019-11-15 23:48:50 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:48:50 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:48:50 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:48:52.147" starttime="20191115 23:48:52.146"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:48:52.148" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:48:52.148" starttime="20191115 23:48:52.147"></status>
</kw>
<status status="PASS" endtime="20191115 23:48:52.149" starttime="20191115 23:48:47.433"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:48:52.153" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:48:54.596" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:48:54.597" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:48:54.597" starttime="20191115 23:48:52.150"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:48:54.598" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:48:54.598" starttime="20191115 23:48:54.597"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:48:54.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:48:54.599" starttime="20191115 23:48:54.599"></status>
</kw>
<msg timestamp="20191115 23:48:54.600" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:48:54.600" starttime="20191115 23:48:52.149"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:54.601" starttime="20191115 23:48:54.600"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:48:54.602" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:48:54.602" starttime="20191115 23:48:54.601"></status>
</kw>
<status status="PASS" endtime="20191115 23:48:54.603" starttime="20191115 23:48:47.426"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:48:54.604" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:48:54.605" starttime="20191115 23:48:54.604"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:54.606" starttime="20191115 23:48:54.605"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:48:54.607" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:48:55.808" level="INFO">Read output: Last login: Fri Nov 15 23:48:42 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:48:55.809" starttime="20191115 23:48:54.607"></status>
</kw>
<status status="PASS" endtime="20191115 23:48:55.809" starttime="20191115 23:48:54.605"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:48:55.810" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:48:57.978" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:48:57.978" starttime="20191115 23:48:55.810"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:48:57.979" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:48:58.076" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:48:58.076" level="INFO">${startupMsg} = hadoop    1510  386  0.0 34488760 262904 ?     Sl   23:48   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:48:58.076" starttime="20191115 23:48:57.978"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:48:58.141" starttime="20191115 23:48:58.077"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:48:58.142" starttime="20191115 23:48:58.142"></status>
</kw>
<status status="PASS" endtime="20191115 23:48:58.142" starttime="20191115 23:48:54.603"></status>
</kw>
<status status="PASS" endtime="20191115 23:48:58.143" starttime="20191115 23:48:39.779"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:48:58.146" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:48:59.995" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:48:59.995" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:59.995" starttime="20191115 23:48:58.144"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:48:59.997" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:59.997" starttime="20191115 23:48:59.996"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:48:59.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:48:59.999" starttime="20191115 23:48:59.998"></status>
</kw>
<msg timestamp="20191115 23:48:59.999" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:48:59.999" starttime="20191115 23:48:58.143"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:49:00.000" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:49:00.001" starttime="20191115 23:49:00.000"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:00.002" starttime="20191115 23:49:00.001"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:00.003" starttime="20191115 23:49:00.002"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:49:00.004" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:49:00.004" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:49:00.004" starttime="20191115 23:49:00.003"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:49:00.005" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 23:49:00.005" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:49:00.005" starttime="20191115 23:49:00.005"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:49:00.006" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:49:00.006" starttime="20191115 23:49:00.006"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:49:00.007" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 23:49:00.007" starttime="20191115 23:49:00.006"></status>
</kw>
<msg timestamp="20191115 23:49:00.007" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:49:00.007" starttime="20191115 23:48:58.143"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:49:00.009" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 23:49:00.009" starttime="20191115 23:49:00.008"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:00.010" starttime="20191115 23:49:00.009"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:49:00.011" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:49:01.209" level="INFO">Read output: Last login: Fri Nov 15 23:48:36 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:49:01.210" starttime="20191115 23:49:00.010"></status>
</kw>
<status status="PASS" endtime="20191115 23:49:01.210" starttime="20191115 23:49:00.009"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:49:01.211" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:49:02.370" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:49:02.371" starttime="20191115 23:49:01.211"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:49:02.372" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:49:02.448" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:49:02.449" level="INFO">${shutdownMsg} = hadoop    1080  0.0  0.0   9556  1164 ?        Ss   23:49   0:00 bash -c sudo ps aux | grep om
hadoop    1082  0.0  0.0   9088   668 ?        S    23:49   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:49:02.449" starttime="20191115 23:49:02.371"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:49:02.514" starttime="20191115 23:49:02.449"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:02.515" starttime="20191115 23:49:02.515"></status>
</kw>
<msg timestamp="20191115 23:49:02.516" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 23:49:02.516" starttime="20191115 23:49:00.007"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:49:02.521" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:49:14.647" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:49:14.647" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:49:14.647" starttime="20191115 23:49:02.518"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:49:14.648" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:49:14.648" starttime="20191115 23:49:14.647"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:49:14.649" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:49:14.649" starttime="20191115 23:49:14.648"></status>
</kw>
<msg timestamp="20191115 23:49:14.649" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:49:14.649" starttime="20191115 23:49:02.517"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:49:14.650" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:49:14.650" starttime="20191115 23:49:14.649"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:14.650" starttime="20191115 23:49:14.650"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:14.651" starttime="20191115 23:49:14.651"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:49:14.652" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:49:14.652" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:49:14.652" starttime="20191115 23:49:14.651"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:49:14.652" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191115 23:49:14.652" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:49:14.653" starttime="20191115 23:49:14.652"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:49:14.653" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:49:14.653" starttime="20191115 23:49:14.653"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:49:14.654" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191115 23:49:14.654" starttime="20191115 23:49:14.653"></status>
</kw>
<msg timestamp="20191115 23:49:14.654" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:49:14.654" starttime="20191115 23:49:02.516"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:14.655" starttime="20191115 23:49:14.654"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:49:14.656" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191115 23:49:14.657" starttime="20191115 23:49:14.656"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:49:14.657" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191115 23:49:14.657" starttime="20191115 23:49:14.657"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:49:14.658" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191115 23:49:14.658" starttime="20191115 23:49:14.658"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:49:14.660" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:49:14.660" starttime="20191115 23:49:14.658"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:49:14.662" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:49:29.380" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:49:29.380" level="INFO">${output} = 2019-11-15 23:49:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191115 23:49:29.381" starttime="20191115 23:49:14.661"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:49:29.382" level="INFO">2019-11-15 23:49:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:49:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:49:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:49:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:49:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:49:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:49:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:49:24 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:49:25 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:49:26 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 23:49:27 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:49:27 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:49:27 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:49:29.383" starttime="20191115 23:49:29.381"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:49:29.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:49:29.384" starttime="20191115 23:49:29.383"></status>
</kw>
<status status="PASS" endtime="20191115 23:49:29.384" starttime="20191115 23:49:14.660"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:49:29.388" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:49:41.836" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:49:41.836" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:49:41.836" starttime="20191115 23:49:29.386"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:49:41.838" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:49:41.838" starttime="20191115 23:49:41.837"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:49:41.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:49:41.839" starttime="20191115 23:49:41.839"></status>
</kw>
<msg timestamp="20191115 23:49:41.840" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:49:41.840" starttime="20191115 23:49:29.384"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:41.841" starttime="20191115 23:49:41.841"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:49:41.843" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:49:41.843" starttime="20191115 23:49:41.842"></status>
</kw>
<status status="PASS" endtime="20191115 23:49:41.844" starttime="20191115 23:49:14.655"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:49:41.846" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 23:49:41.846" starttime="20191115 23:49:41.845"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:41.847" starttime="20191115 23:49:41.847"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:49:41.848" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:49:43.054" level="INFO">Read output: Last login: Fri Nov 15 23:49:00 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:49:43.055" starttime="20191115 23:49:41.848"></status>
</kw>
<status status="PASS" endtime="20191115 23:49:43.055" starttime="20191115 23:49:41.846"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:49:43.056" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:49:45.227" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:49:45.228" starttime="20191115 23:49:43.056"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:49:45.228" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:49:45.326" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:49:45.326" level="INFO">${startupMsg} = hadoop    1131  375  0.0 34484840 233244 ?     Sl   23:49   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:49:45.326" starttime="20191115 23:49:45.228"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:49:45.391" starttime="20191115 23:49:45.327"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:45.393" starttime="20191115 23:49:45.392"></status>
</kw>
<status status="PASS" endtime="20191115 23:49:45.393" starttime="20191115 23:49:41.844"></status>
</kw>
<status status="PASS" endtime="20191115 23:49:45.393" starttime="20191115 23:48:58.143"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:49:45.397" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:49:47.774" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:49:47.775" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:49:47.775" starttime="20191115 23:49:45.395"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:49:47.777" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:49:47.777" starttime="20191115 23:49:47.776"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:49:47.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:49:47.778" starttime="20191115 23:49:47.777"></status>
</kw>
<msg timestamp="20191115 23:49:47.779" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:49:47.779" starttime="20191115 23:49:45.394"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:49:47.779" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:49:47.779" starttime="20191115 23:49:47.779"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:47.780" starttime="20191115 23:49:47.780"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:47.781" starttime="20191115 23:49:47.781"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:49:47.782" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:49:47.782" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191115 23:49:47.782" starttime="20191115 23:49:47.781"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:49:47.783" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191115 23:49:47.783" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:49:47.783" starttime="20191115 23:49:47.782"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:49:47.784" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:49:47.784" starttime="20191115 23:49:47.783"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:49:47.784" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191115 23:49:47.785" starttime="20191115 23:49:47.784"></status>
</kw>
<msg timestamp="20191115 23:49:47.785" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 23:49:47.785" starttime="20191115 23:49:45.393"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:49:47.786" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:49:47.786" starttime="20191115 23:49:47.786"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:47.787" starttime="20191115 23:49:47.787"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:49:47.788" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:49:48.987" level="INFO">Read output: Last login: Fri Nov 15 23:48:54 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:49:48.987" starttime="20191115 23:49:47.788"></status>
</kw>
<status status="PASS" endtime="20191115 23:49:48.988" starttime="20191115 23:49:47.786"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:49:48.989" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:49:50.159" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:49:50.160" starttime="20191115 23:49:48.988"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:49:50.161" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:49:50.227" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:49:50.227" level="INFO">${shutdownMsg} = hadoop    2015  0.0  0.0   9556  1168 ?        Ss   23:49   0:00 bash -c sudo ps aux | grep om
hadoop    2017  0.0  0.0   9088   672 ?        S    23:49   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:49:50.227" starttime="20191115 23:49:50.160"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:49:50.293" starttime="20191115 23:49:50.228"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:49:50.294" starttime="20191115 23:49:50.293"></status>
</kw>
<msg timestamp="20191115 23:49:50.294" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 23:49:50.294" starttime="20191115 23:49:47.785"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:49:50.297" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:50:12.565" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:50:12.566" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:12.566" starttime="20191115 23:49:50.295"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:50:12.567" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:12.567" starttime="20191115 23:50:12.566"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:50:12.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:50:12.568" starttime="20191115 23:50:12.568"></status>
</kw>
<msg timestamp="20191115 23:50:12.569" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:12.569" starttime="20191115 23:49:50.295"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:50:12.570" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:12.570" starttime="20191115 23:50:12.569"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:12.571" starttime="20191115 23:50:12.570"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:12.571" starttime="20191115 23:50:12.571"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:50:12.572" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:50:12.572" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:12.572" starttime="20191115 23:50:12.572"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:50:12.573" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191115 23:50:12.573" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:50:12.574" starttime="20191115 23:50:12.573"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:50:12.574" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:50:12.574" starttime="20191115 23:50:12.574"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:50:12.575" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191115 23:50:12.575" starttime="20191115 23:50:12.575"></status>
</kw>
<msg timestamp="20191115 23:50:12.576" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:50:12.576" starttime="20191115 23:49:50.294"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:12.577" starttime="20191115 23:50:12.576"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:50:12.578" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191115 23:50:12.578" starttime="20191115 23:50:12.577"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:50:12.579" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191115 23:50:12.579" starttime="20191115 23:50:12.578"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:50:12.580" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191115 23:50:12.580" starttime="20191115 23:50:12.579"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:50:12.582" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:50:12.582" starttime="20191115 23:50:12.580"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:50:12.586" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:50:17.127" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:50:17.128" level="INFO">${output} = 2019-11-15 23:50:15 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:50:15 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 23:50:17.128" starttime="20191115 23:50:12.583"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:50:17.129" level="INFO">2019-11-15 23:50:15 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:50:15 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:50:15 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:50:17.130" starttime="20191115 23:50:17.129"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:50:17.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:50:17.131" starttime="20191115 23:50:17.130"></status>
</kw>
<status status="PASS" endtime="20191115 23:50:17.131" starttime="20191115 23:50:12.583"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:50:17.136" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:50:19.286" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:50:19.286" level="INFO">${output} = 1.txt
2.txt
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:50:19.286" starttime="20191115 23:50:17.133"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:50:19.288" level="INFO">1.txt
2.txt
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:50:19.288" starttime="20191115 23:50:19.287"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:50:19.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:50:19.288" starttime="20191115 23:50:19.288"></status>
</kw>
<msg timestamp="20191115 23:50:19.289" level="INFO">${result} = 1.txt
2.txt
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:50:19.289" starttime="20191115 23:50:17.132"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:19.289" starttime="20191115 23:50:19.289"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:50:19.291" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:50:19.291" starttime="20191115 23:50:19.290"></status>
</kw>
<status status="PASS" endtime="20191115 23:50:19.291" starttime="20191115 23:50:12.577"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:50:19.292" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 23:50:19.292" starttime="20191115 23:50:19.292"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:19.293" starttime="20191115 23:50:19.293"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:50:19.294" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:50:20.495" level="INFO">Read output: Last login: Fri Nov 15 23:49:47 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:50:20.495" starttime="20191115 23:50:19.293"></status>
</kw>
<status status="PASS" endtime="20191115 23:50:20.496" starttime="20191115 23:50:19.292"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:50:20.497" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:50:22.687" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:50:22.687" starttime="20191115 23:50:20.496"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:50:22.689" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:50:22.796" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:50:22.797" level="INFO">${startupMsg} = hadoop    2068  240  0.0 34477272 235892 ?     Sl   23:50   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:50:22.797" starttime="20191115 23:50:22.688"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:50:22.862" starttime="20191115 23:50:22.797"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:22.863" starttime="20191115 23:50:22.863"></status>
</kw>
<status status="PASS" endtime="20191115 23:50:22.863" starttime="20191115 23:50:19.291"></status>
</kw>
<status status="PASS" endtime="20191115 23:50:22.864" starttime="20191115 23:49:45.393"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:50:22.868" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:50:24.735" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:50:24.735" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:24.735" starttime="20191115 23:50:22.865"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:50:24.736" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:24.736" starttime="20191115 23:50:24.735"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:50:24.736" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:50:24.737" starttime="20191115 23:50:24.736"></status>
</kw>
<msg timestamp="20191115 23:50:24.737" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:24.737" starttime="20191115 23:50:22.865"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:50:24.737" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:24.738" starttime="20191115 23:50:24.737"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:24.738" starttime="20191115 23:50:24.738"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:24.739" starttime="20191115 23:50:24.738"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:50:24.739" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:50:24.739" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:24.739" starttime="20191115 23:50:24.739"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:50:24.740" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191115 23:50:24.740" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:50:24.740" starttime="20191115 23:50:24.739"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:50:24.741" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:50:24.741" starttime="20191115 23:50:24.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:50:24.742" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191115 23:50:24.742" starttime="20191115 23:50:24.741"></status>
</kw>
<msg timestamp="20191115 23:50:24.742" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 23:50:24.742" starttime="20191115 23:50:22.864"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:50:24.743" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 23:50:24.743" starttime="20191115 23:50:24.743"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:24.745" starttime="20191115 23:50:24.744"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:50:24.746" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:50:25.944" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:50:25.944" starttime="20191115 23:50:24.745"></status>
</kw>
<status status="PASS" endtime="20191115 23:50:25.945" starttime="20191115 23:50:24.744"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 23:50:25.946" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 23:50:36.120" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:50:36.120" starttime="20191115 23:50:25.945"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 23:50:36.121" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:50:36.219" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:50:36.219" level="INFO">${shutdownMsg} = hadoop     582  0.0  0.0   9556  1168 ?        Ss   23:50   0:00 bash -c sudo ps aux | grep om
hadoop     584  0.0  0.0   9088   668 ?        S    23:50   0:00 grep om</msg>
<status status="PASS" endtime="20191115 23:50:36.219" starttime="20191115 23:50:36.120"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:50:36.284" starttime="20191115 23:50:36.219"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:36.285" starttime="20191115 23:50:36.285"></status>
</kw>
<msg timestamp="20191115 23:50:36.286" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 23:50:36.286" starttime="20191115 23:50:24.742"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:50:36.290" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:50:38.508" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:50:38.508" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:38.508" starttime="20191115 23:50:36.288"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:50:38.510" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:38.510" starttime="20191115 23:50:38.509"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:50:38.511" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:50:38.511" starttime="20191115 23:50:38.510"></status>
</kw>
<msg timestamp="20191115 23:50:38.511" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:38.512" starttime="20191115 23:50:36.287"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 23:50:38.512" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:38.512" starttime="20191115 23:50:38.512"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:38.513" starttime="20191115 23:50:38.513"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:38.514" starttime="20191115 23:50:38.513"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 23:50:38.515" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 23:50:38.515" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 23:50:38.515" starttime="20191115 23:50:38.514"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 23:50:38.516" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 23:50:38.516" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 23:50:38.516" starttime="20191115 23:50:38.515"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 23:50:38.517" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:50:38.517" starttime="20191115 23:50:38.516"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 23:50:38.518" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 23:50:38.518" starttime="20191115 23:50:38.517"></status>
</kw>
<msg timestamp="20191115 23:50:38.518" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 23:50:38.518" starttime="20191115 23:50:36.286"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:38.519" starttime="20191115 23:50:38.519"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 23:50:38.521" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191115 23:50:38.521" starttime="20191115 23:50:38.520"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 23:50:38.522" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191115 23:50:38.522" starttime="20191115 23:50:38.521"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 23:50:38.523" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191115 23:50:38.523" starttime="20191115 23:50:38.522"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:50:38.525" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:50:38.525" starttime="20191115 23:50:38.523"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:50:38.529" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:50:43.026" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:50:43.026" level="INFO">${output} = 2019-11-15 23:50:41 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:50:41 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 23:50:43.026" starttime="20191115 23:50:38.526"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:50:43.028" level="INFO">2019-11-15 23:50:41 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 23:50:41 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 23:50:41 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 23:50:43.028" starttime="20191115 23:50:43.027"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:50:43.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:50:43.029" starttime="20191115 23:50:43.028"></status>
</kw>
<status status="PASS" endtime="20191115 23:50:43.030" starttime="20191115 23:50:38.525"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 23:50:43.034" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 23:50:45.360" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 23:50:45.361" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:50:45.361" starttime="20191115 23:50:43.031"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 23:50:45.363" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:50:45.363" starttime="20191115 23:50:45.362"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 23:50:45.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 23:50:45.365" starttime="20191115 23:50:45.364"></status>
</kw>
<msg timestamp="20191115 23:50:45.366" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 23:50:45.366" starttime="20191115 23:50:43.030"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:45.367" starttime="20191115 23:50:45.366"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 23:50:45.368" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 23:50:45.368" starttime="20191115 23:50:45.367"></status>
</kw>
<status status="PASS" endtime="20191115 23:50:45.368" starttime="20191115 23:50:38.519"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 23:50:45.370" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 23:50:45.371" starttime="20191115 23:50:45.370"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:45.372" starttime="20191115 23:50:45.371"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 23:50:45.373" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 23:50:46.573" level="INFO">Read output: Last login: Fri Nov 15 23:50:24 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 23:50:46.574" starttime="20191115 23:50:45.372"></status>
</kw>
<status status="PASS" endtime="20191115 23:50:46.574" starttime="20191115 23:50:45.371"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 23:50:46.575" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 23:50:48.755" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 23:50:48.755" starttime="20191115 23:50:46.575"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 23:50:48.756" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 23:50:48.853" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 23:50:48.854" level="INFO">${startupMsg} = hadoop     635  348  0.0 34476708 231208 ?     Sl   23:50   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 23:50:48.854" starttime="20191115 23:50:48.755"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 23:50:48.919" starttime="20191115 23:50:48.854"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 23:50:48.920" starttime="20191115 23:50:48.919"></status>
</kw>
<status status="PASS" endtime="20191115 23:50:48.920" starttime="20191115 23:50:45.369"></status>
</kw>
<status status="PASS" endtime="20191115 23:50:48.920" starttime="20191115 23:50:22.864"></status>
</kw>
<status status="PASS" endtime="20191115 23:50:48.920" starttime="20191115 23:47:43.532"></status>
</kw>
<status status="PASS" endtime="20191115 23:50:48.920" critical="yes" starttime="20191115 23:47:43.531"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191115 23:50:48.922" starttime="20191115 23:46:15.663"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
