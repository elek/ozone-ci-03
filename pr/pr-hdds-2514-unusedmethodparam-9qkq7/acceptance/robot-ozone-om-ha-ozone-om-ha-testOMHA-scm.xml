<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 20:23:07.134" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:23:07.306" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:23:09.849" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:23:09.849" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 20:23:09.849" starttime="20191115 20:23:07.304"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:23:09.851" level="INFO"></msg>
<status status="PASS" endtime="20191115 20:23:09.851" starttime="20191115 20:23:09.850"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:23:09.851" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:23:09.851" starttime="20191115 20:23:09.851"></status>
</kw>
<status status="PASS" endtime="20191115 20:23:09.852" starttime="20191115 20:23:07.303"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:23:09.857" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:23:11.846" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:23:11.847" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 20:23:11.847" starttime="20191115 20:23:09.855"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:23:11.848" level="INFO"></msg>
<status status="PASS" endtime="20191115 20:23:11.848" starttime="20191115 20:23:11.847"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:23:11.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:23:11.849" starttime="20191115 20:23:11.848"></status>
</kw>
<status status="PASS" endtime="20191115 20:23:11.849" starttime="20191115 20:23:09.852"></status>
</kw>
<status status="PASS" endtime="20191115 20:23:11.849" starttime="20191115 20:23:07.303"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 20:23:11.850" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191115 20:23:11.850" starttime="20191115 20:23:11.850"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 20:23:11.851" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191115 20:23:11.851" starttime="20191115 20:23:11.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 20:23:11.851" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191115 20:23:11.852" starttime="20191115 20:23:11.851"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 20:23:11.853" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 20:23:11.853" starttime="20191115 20:23:11.852"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:23:11.856" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:23:16.867" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:23:16.867" level="INFO">${output} = 2019-11-15 20:23:15 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 20:23:15 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 20:23:16.867" starttime="20191115 20:23:11.854"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:23:16.868" level="INFO">2019-11-15 20:23:15 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 20:23:15 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 20:23:15 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 20:23:16.869" starttime="20191115 20:23:16.868"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:23:16.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:23:16.869" starttime="20191115 20:23:16.869"></status>
</kw>
<status status="PASS" endtime="20191115 20:23:16.869" starttime="20191115 20:23:11.853"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:23:16.872" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:23:18.841" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:23:18.841" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191115 20:23:18.841" starttime="20191115 20:23:16.870"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:23:18.842" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191115 20:23:18.842" starttime="20191115 20:23:18.842"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:23:18.843" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:23:18.843" starttime="20191115 20:23:18.843"></status>
</kw>
<msg timestamp="20191115 20:23:18.843" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191115 20:23:18.843" starttime="20191115 20:23:16.870"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:18.844" starttime="20191115 20:23:18.844"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 20:23:18.845" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 20:23:18.845" starttime="20191115 20:23:18.844"></status>
</kw>
<status status="PASS" endtime="20191115 20:23:18.845" starttime="20191115 20:23:11.849"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:23:18.848" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:23:20.696" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:23:20.696" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:20.696" starttime="20191115 20:23:18.846"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:23:20.698" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:20.698" starttime="20191115 20:23:20.697"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:23:20.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:23:20.698" starttime="20191115 20:23:20.698"></status>
</kw>
<msg timestamp="20191115 20:23:20.699" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:20.699" starttime="20191115 20:23:18.846"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:23:20.699" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:20.699" starttime="20191115 20:23:20.699"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:20.700" starttime="20191115 20:23:20.700"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:20.701" starttime="20191115 20:23:20.701"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:23:20.701" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:23:20.702" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:20.702" starttime="20191115 20:23:20.701"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:23:20.702" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:23:20.702" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:23:20.702" starttime="20191115 20:23:20.702"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:23:20.703" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:23:20.703" starttime="20191115 20:23:20.702"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:23:20.703" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:23:20.704" starttime="20191115 20:23:20.703"></status>
</kw>
<msg timestamp="20191115 20:23:20.704" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:23:20.704" starttime="20191115 20:23:18.845"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:23:20.705" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 20:23:20.705" starttime="20191115 20:23:20.705"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:20.706" starttime="20191115 20:23:20.706"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:23:20.707" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:23:21.981" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:23:21.982" starttime="20191115 20:23:20.707"></status>
</kw>
<status status="PASS" endtime="20191115 20:23:21.982" starttime="20191115 20:23:20.705"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:23:21.984" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:23:21.999" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:23:21.999" starttime="20191115 20:23:21.983"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:23:22.000" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:23:22.077" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:23:22.077" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:23:22.077" starttime="20191115 20:23:21.999"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:23:22.192" starttime="20191115 20:23:22.077"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:22.193" starttime="20191115 20:23:22.192"></status>
</kw>
<msg timestamp="20191115 20:23:22.193" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 20:23:22.193" starttime="20191115 20:23:20.704"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:23:22.197" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:23:24.145" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:23:24.145" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:24.145" starttime="20191115 20:23:22.195"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:23:24.146" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:24.146" starttime="20191115 20:23:24.145"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:23:24.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:23:24.147" starttime="20191115 20:23:24.146"></status>
</kw>
<msg timestamp="20191115 20:23:24.147" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:24.147" starttime="20191115 20:23:22.194"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:23:24.148" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:24.148" starttime="20191115 20:23:24.148"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:24.149" starttime="20191115 20:23:24.148"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:24.149" starttime="20191115 20:23:24.149"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:23:24.150" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:23:24.150" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:24.150" starttime="20191115 20:23:24.149"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:23:24.151" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:23:24.151" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:23:24.151" starttime="20191115 20:23:24.150"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:23:24.151" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:23:24.151" starttime="20191115 20:23:24.151"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:23:24.152" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:23:24.152" starttime="20191115 20:23:24.151"></status>
</kw>
<msg timestamp="20191115 20:23:24.152" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:23:24.152" starttime="20191115 20:23:22.194"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 20:23:24.153" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 20:23:24.153" starttime="20191115 20:23:24.152"></status>
</kw>
<status status="FAIL" endtime="20191115 20:23:24.153" critical="yes" starttime="20191115 20:23:07.302">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 20:23:24.156" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:23:24.156" starttime="20191115 20:23:24.155"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 20:23:24.157" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 20:23:24.157" starttime="20191115 20:23:24.156"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:23:24.159" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:23:24.159" starttime="20191115 20:23:24.158"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:24.160" starttime="20191115 20:23:24.159"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:23:24.161" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:23:25.360" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:23:25.360" starttime="20191115 20:23:24.160"></status>
</kw>
<status status="PASS" endtime="20191115 20:23:25.361" starttime="20191115 20:23:24.159"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:23:25.362" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:23:25.378" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:23:25.378" starttime="20191115 20:23:25.361"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:23:25.379" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:23:25.457" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:23:25.457" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:23:25.457" starttime="20191115 20:23:25.378"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:23:25.572" starttime="20191115 20:23:25.457"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:25.573" starttime="20191115 20:23:25.572"></status>
</kw>
<status status="PASS" endtime="20191115 20:23:25.573" starttime="20191115 20:23:24.158"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:23:25.576" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:23:25.576" starttime="20191115 20:23:25.575"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:25.578" starttime="20191115 20:23:25.577"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:23:25.579" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:23:26.778" level="INFO">Read output: Last login: Fri Nov 15 20:23:24 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:23:26.778" starttime="20191115 20:23:25.578"></status>
</kw>
<status status="PASS" endtime="20191115 20:23:26.779" starttime="20191115 20:23:25.576"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 20:23:26.780" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 20:23:26.794" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:23:26.794" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191115 20:23:26.794" starttime="20191115 20:23:26.779"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 20:23:26.796" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191115 20:23:26.796" starttime="20191115 20:23:26.795"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 20:23:26.797" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191115 20:23:26.797" starttime="20191115 20:23:26.796"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 20:23:26.840" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191115 20:23:26.840" starttime="20191115 20:23:26.797"></status>
</kw>
<status status="FAIL" endtime="20191115 20:23:26.840" starttime="20191115 20:23:25.574"></status>
</kw>
<status status="FAIL" endtime="20191115 20:23:26.841" critical="yes" starttime="20191115 20:23:24.154">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:23:26.847" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:23:28.801" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:23:28.801" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:28.801" starttime="20191115 20:23:26.844"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:23:28.802" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:28.802" starttime="20191115 20:23:28.802"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:23:28.803" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:23:28.803" starttime="20191115 20:23:28.802"></status>
</kw>
<msg timestamp="20191115 20:23:28.803" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:28.804" starttime="20191115 20:23:26.843"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:23:28.804" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:28.804" starttime="20191115 20:23:28.804"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:28.805" starttime="20191115 20:23:28.804"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:28.805" starttime="20191115 20:23:28.805"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:23:28.806" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:23:28.806" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:28.806" starttime="20191115 20:23:28.805"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:23:28.807" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:23:28.807" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:23:28.807" starttime="20191115 20:23:28.806"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:23:28.807" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:23:28.807" starttime="20191115 20:23:28.807"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:23:28.808" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:23:28.808" starttime="20191115 20:23:28.808"></status>
</kw>
<msg timestamp="20191115 20:23:28.808" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:23:28.808" starttime="20191115 20:23:26.843"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:23:28.810" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 20:23:28.810" starttime="20191115 20:23:28.809"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:28.811" starttime="20191115 20:23:28.810"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:23:28.811" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:23:29.999" level="INFO">Read output: Last login: Fri Nov 15 20:23:20 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:23:29.999" starttime="20191115 20:23:28.811"></status>
</kw>
<status status="PASS" endtime="20191115 20:23:30.000" starttime="20191115 20:23:28.810"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:23:30.001" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:23:30.015" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:23:30.016" starttime="20191115 20:23:30.000"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:23:30.017" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:23:30.094" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:23:30.095" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:23:30.095" starttime="20191115 20:23:30.016"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:23:30.210" starttime="20191115 20:23:30.095"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:30.211" starttime="20191115 20:23:30.211"></status>
</kw>
<msg timestamp="20191115 20:23:30.212" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 20:23:30.212" starttime="20191115 20:23:28.808"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:23:30.216" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:23:32.177" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:23:32.177" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:32.178" starttime="20191115 20:23:30.214"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:23:32.180" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:32.180" starttime="20191115 20:23:32.179"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:23:32.181" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:23:32.182" starttime="20191115 20:23:32.181"></status>
</kw>
<msg timestamp="20191115 20:23:32.183" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:32.183" starttime="20191115 20:23:30.213"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:23:32.184" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:32.184" starttime="20191115 20:23:32.183"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:32.186" starttime="20191115 20:23:32.185"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:23:32.187" starttime="20191115 20:23:32.186"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:23:32.188" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:23:32.189" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:23:32.189" starttime="20191115 20:23:32.187"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:23:32.190" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:23:32.190" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:23:32.190" starttime="20191115 20:23:32.189"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:23:32.192" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:23:32.192" starttime="20191115 20:23:32.191"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:23:32.193" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:23:32.193" starttime="20191115 20:23:32.192"></status>
</kw>
<msg timestamp="20191115 20:23:32.194" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:23:32.194" starttime="20191115 20:23:30.212"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 20:23:32.196" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 20:23:32.196" starttime="20191115 20:23:32.194"></status>
</kw>
<status status="FAIL" endtime="20191115 20:23:32.196" starttime="20191115 20:23:26.842"></status>
</kw>
<status status="FAIL" endtime="20191115 20:23:32.196" starttime="20191115 20:23:26.842"></status>
</kw>
<status status="FAIL" endtime="20191115 20:23:32.197" critical="yes" starttime="20191115 20:23:26.841">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191115 20:23:32.199" starttime="20191115 20:23:07.135"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
