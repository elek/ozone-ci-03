<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191104 17:40:38.376" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 17:40:38.524" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 17:40:41.091" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 17:40:41.092" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191104 17:40:41.092" starttime="20191104 17:40:38.522"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 17:40:41.093" level="INFO"></msg>
<status status="PASS" endtime="20191104 17:40:41.093" starttime="20191104 17:40:41.092"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 17:40:41.094" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 17:40:41.094" starttime="20191104 17:40:41.094"></status>
</kw>
<status status="PASS" endtime="20191104 17:40:41.095" starttime="20191104 17:40:38.522"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 17:40:41.102" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 17:40:43.215" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 17:40:43.215" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191104 17:40:43.215" starttime="20191104 17:40:41.100"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 17:40:43.216" level="INFO"></msg>
<status status="PASS" endtime="20191104 17:40:43.216" starttime="20191104 17:40:43.216"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 17:40:43.217" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 17:40:43.217" starttime="20191104 17:40:43.217"></status>
</kw>
<status status="PASS" endtime="20191104 17:40:43.217" starttime="20191104 17:40:41.095"></status>
</kw>
<status status="PASS" endtime="20191104 17:40:43.217" starttime="20191104 17:40:38.521"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191104 17:40:43.219" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191104 17:40:43.219" starttime="20191104 17:40:43.218"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191104 17:40:43.220" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191104 17:40:43.220" starttime="20191104 17:40:43.219"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191104 17:40:43.221" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191104 17:40:43.221" starttime="20191104 17:40:43.220"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 17:40:43.223" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 17:40:43.223" starttime="20191104 17:40:43.221"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 17:40:43.227" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 17:40:47.836" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 17:40:47.837" level="INFO">${output} = 2019-11-04 17:40:45 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 17:40:45 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191104 17:40:47.837" starttime="20191104 17:40:43.225"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 17:40:47.838" level="INFO">2019-11-04 17:40:45 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 17:40:45 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-04 17:40:45 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 17:40:47.838" starttime="20191104 17:40:47.837"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 17:40:47.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 17:40:47.839" starttime="20191104 17:40:47.838"></status>
</kw>
<status status="PASS" endtime="20191104 17:40:47.839" starttime="20191104 17:40:43.224"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 17:40:47.842" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 17:40:49.998" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 17:40:49.998" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191104 17:40:49.998" starttime="20191104 17:40:47.840"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 17:40:50.000" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191104 17:40:50.000" starttime="20191104 17:40:49.999"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 17:40:50.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 17:40:50.001" starttime="20191104 17:40:50.000"></status>
</kw>
<msg timestamp="20191104 17:40:50.001" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191104 17:40:50.001" starttime="20191104 17:40:47.839"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191104 17:40:50.002" starttime="20191104 17:40:50.002"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 17:40:50.003" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 17:40:50.003" starttime="20191104 17:40:50.002"></status>
</kw>
<status status="PASS" endtime="20191104 17:40:50.003" starttime="20191104 17:40:43.218"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 17:40:50.007" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 17:40:51.913" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 17:40:51.913" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 17:40:51.913" starttime="20191104 17:40:50.005"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 17:40:51.914" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 17:40:51.914" starttime="20191104 17:40:51.914"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 17:40:51.915" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 17:40:51.915" starttime="20191104 17:40:51.914"></status>
</kw>
<msg timestamp="20191104 17:40:51.915" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 17:40:51.915" starttime="20191104 17:40:50.004"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 17:40:51.916" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 17:40:51.916" starttime="20191104 17:40:51.915"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 17:40:51.917" starttime="20191104 17:40:51.916"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 17:40:51.917" starttime="20191104 17:40:51.917"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 17:40:51.918" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 17:40:51.918" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191104 17:40:51.918" starttime="20191104 17:40:51.917"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 17:40:51.918" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191104 17:40:51.918" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 17:40:51.918" starttime="20191104 17:40:51.918"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 17:40:51.919" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191104 17:40:51.919" starttime="20191104 17:40:51.918"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 17:40:51.919" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191104 17:40:51.919" starttime="20191104 17:40:51.919"></status>
</kw>
<msg timestamp="20191104 17:40:51.920" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191104 17:40:51.920" starttime="20191104 17:40:50.004"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 17:40:51.921" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191104 17:40:51.921" starttime="20191104 17:40:51.920"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 17:40:51.922" starttime="20191104 17:40:51.921"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 17:40:51.922" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191104 17:40:53.262" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191104 17:40:53.262" starttime="20191104 17:40:51.922"></status>
</kw>
<status status="PASS" endtime="20191104 17:40:53.263" starttime="20191104 17:40:51.921"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191104 17:40:53.264" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191104 17:41:03.399" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 17:41:03.400" starttime="20191104 17:40:53.263"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191104 17:41:03.401" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 17:41:03.498" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 17:41:03.499" level="INFO">${shutdownMsg} = hadoop     464  0.0  0.0   9556  1164 ?        Ss   17:41   0:00 bash -c sudo ps aux | grep om
hadoop     466  0.0  0.0   9088   672 ?        S    17:41   0:00 grep om</msg>
<status status="PASS" endtime="20191104 17:41:03.499" starttime="20191104 17:41:03.400"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 17:41:03.563" starttime="20191104 17:41:03.499"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 17:41:03.565" starttime="20191104 17:41:03.564"></status>
</kw>
<msg timestamp="20191104 17:41:03.565" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191104 17:41:03.565" starttime="20191104 17:40:51.920"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 17:41:03.570" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 17:41:15.594" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 17:41:15.595" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 17:41:15.595" starttime="20191104 17:41:03.567"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 17:41:15.596" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 17:41:15.596" starttime="20191104 17:41:15.595"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 17:41:15.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 17:41:15.597" starttime="20191104 17:41:15.596"></status>
</kw>
<msg timestamp="20191104 17:41:15.597" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 17:41:15.597" starttime="20191104 17:41:03.566"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 17:41:15.598" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 17:41:15.598" starttime="20191104 17:41:15.597"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 17:41:15.598" starttime="20191104 17:41:15.598"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 17:41:15.599" starttime="20191104 17:41:15.598"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 17:41:15.599" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 17:41:15.599" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191104 17:41:15.600" starttime="20191104 17:41:15.599"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 17:41:15.600" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191104 17:41:15.600" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 17:41:15.600" starttime="20191104 17:41:15.600"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 17:41:15.601" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191104 17:41:15.601" starttime="20191104 17:41:15.600"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 17:41:15.601" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191104 17:41:15.601" starttime="20191104 17:41:15.601"></status>
</kw>
<msg timestamp="20191104 17:41:15.602" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191104 17:41:15.602" starttime="20191104 17:41:03.565"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191104 17:41:15.603" starttime="20191104 17:41:15.602"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191104 17:41:15.605" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191104 17:41:15.605" starttime="20191104 17:41:15.604"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191104 17:41:15.606" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191104 17:41:15.606" starttime="20191104 17:41:15.605"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191104 17:41:15.607" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191104 17:41:15.607" starttime="20191104 17:41:15.607"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 17:41:15.610" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 17:41:15.610" starttime="20191104 17:41:15.608"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 17:41:15.612" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 17:41:29.750" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 17:41:29.750" level="INFO">${output} = 2019-11-04 17:41:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.8:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191104 17:41:29.750" starttime="20191104 17:41:15.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 17:41:29.751" level="INFO">2019-11-04 17:41:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.8:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 17:41:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.8:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 17:41:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.8:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 17:41:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.8:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 17:41:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.8:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 17:41:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.8:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 17:41:24 INFO  Client:948 - Retrying connect to server: om1/172.18.0.8:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 17:41:25 INFO  Client:948 - Retrying connect to server: om1/172.18.0.8:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 17:41:26 INFO  Client:948 - Retrying connect to server: om1/172.18.0.8:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 17:41:27 INFO  Client:948 - Retrying connect to server: om1/172.18.0.8:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 17:41:27 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-04 17:41:28 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 17:41:28 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-04 17:41:28 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 17:41:29.751" starttime="20191104 17:41:29.750"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 17:41:29.752" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 17:41:29.752" starttime="20191104 17:41:29.751"></status>
</kw>
<status status="PASS" endtime="20191104 17:41:29.753" starttime="20191104 17:41:15.610"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 17:41:29.755" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 17:41:41.728" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 17:41:41.729" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191104 17:41:41.729" starttime="20191104 17:41:29.753"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 17:41:41.730" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191104 17:41:41.730" starttime="20191104 17:41:41.729"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 17:41:41.731" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 17:41:41.731" starttime="20191104 17:41:41.730"></status>
</kw>
<msg timestamp="20191104 17:41:41.731" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191104 17:41:41.731" starttime="20191104 17:41:29.753"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191104 17:41:41.732" starttime="20191104 17:41:41.732"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 17:41:41.733" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 17:41:41.733" starttime="20191104 17:41:41.732"></status>
</kw>
<status status="PASS" endtime="20191104 17:41:41.733" starttime="20191104 17:41:15.603"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 17:41:41.734" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191104 17:41:41.734" starttime="20191104 17:41:41.734"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 17:41:41.735" starttime="20191104 17:41:41.735"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 17:41:41.736" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191104 17:41:42.934" level="INFO">Read output: Last login: Mon Nov  4 17:40:52 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 17:41:42.935" starttime="20191104 17:41:41.736"></status>
</kw>
<status status="PASS" endtime="20191104 17:41:42.935" starttime="20191104 17:41:41.734"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191104 17:41:42.935" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191104 17:41:45.051" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191104 17:41:45.051" starttime="20191104 17:41:42.935"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191104 17:41:45.052" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 17:41:45.150" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 17:41:45.150" level="INFO">${startupMsg} = hadoop     544  0.0  0.0   9556  1168 ?        Ss   17:41   0:00 bash -c sudo ps aux | grep om
hadoop     546  0.0  0.0   9088   672 ?        S    17:41   0:00 grep om</msg>
<status status="PASS" endtime="20191104 17:41:45.150" starttime="20191104 17:41:45.051"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 17:41:45.216" starttime="20191104 17:41:45.151"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<msg timestamp="20191104 17:41:45.219" level="FAIL">'hadoop     544  0.0  0.0   9556  1168 ?        Ss   17:41   0:00 bash -c sudo ps aux | grep om
hadoop     546  0.0  0.0   9088   672 ?        S    17:41   0:00 grep om' does not contain 'OzoneManagerStarter'</msg>
<status status="FAIL" endtime="20191104 17:41:45.219" starttime="20191104 17:41:45.217"></status>
</kw>
<status status="FAIL" endtime="20191104 17:41:45.220" starttime="20191104 17:41:41.733"></status>
</kw>
<status status="FAIL" endtime="20191104 17:41:45.221" critical="yes" starttime="20191104 17:40:38.521">'hadoop     544  0.0  0.0   9556  1168 ?        Ss   17:41   0:00 bash -c sudo ps aux | grep om
hadoop     546  0.0  0.0   9088   672 ?        S    17:41   0:00 grep om' does not contain 'OzoneManagerStarter'</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191104 17:41:45.227" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191104 17:41:45.227" starttime="20191104 17:41:45.224"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191104 17:41:45.229" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191104 17:41:45.229" starttime="20191104 17:41:45.227"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 17:41:45.231" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191104 17:41:45.231" starttime="20191104 17:41:45.231"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 17:41:45.233" starttime="20191104 17:41:45.232"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 17:41:45.234" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191104 17:41:46.433" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191104 17:41:46.433" starttime="20191104 17:41:45.234"></status>
</kw>
<status status="PASS" endtime="20191104 17:41:46.434" starttime="20191104 17:41:45.232"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191104 17:41:46.435" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191104 17:41:56.588" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 17:41:56.588" starttime="20191104 17:41:46.434"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191104 17:41:56.589" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 17:41:56.654" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 17:41:56.654" level="INFO">${shutdownMsg} = hadoop     434  0.0  0.0   9556  1168 ?        Ss   17:41   0:00 bash -c sudo ps aux | grep om
hadoop     436  0.0  0.0   9088   668 ?        S    17:41   0:00 grep om</msg>
<status status="PASS" endtime="20191104 17:41:56.654" starttime="20191104 17:41:56.589"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 17:41:56.719" starttime="20191104 17:41:56.655"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 17:41:56.720" starttime="20191104 17:41:56.720"></status>
</kw>
<status status="PASS" endtime="20191104 17:41:56.720" starttime="20191104 17:41:45.230"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 17:41:56.722" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191104 17:41:56.722" starttime="20191104 17:41:56.721"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 17:41:56.723" starttime="20191104 17:41:56.722"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 17:41:56.723" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191104 17:41:57.921" level="INFO">Read output: Last login: Mon Nov  4 17:41:45 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 17:41:57.922" starttime="20191104 17:41:56.723"></status>
</kw>
<status status="PASS" endtime="20191104 17:41:57.922" starttime="20191104 17:41:56.722"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191104 17:41:57.923" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191104 17:41:57.938" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 17:41:57.938" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 17:41:57.939" starttime="20191104 17:41:57.923"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191104 17:41:57.940" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 17:41:57.940" starttime="20191104 17:41:57.939"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191104 17:41:57.941" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191104 17:41:57.941" starttime="20191104 17:41:57.940"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191104 17:41:58.019" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191104 17:41:58.026" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191104 17:41:58.026" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191104 17:41:58.026" starttime="20191104 17:41:57.941"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191104 17:41:58.027" level="INFO">Length is 2</msg>
<msg timestamp="20191104 17:41:58.027" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191104 17:41:58.027" starttime="20191104 17:41:58.026"></status>
</kw>
<msg timestamp="20191104 17:41:58.027" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191104 17:41:58.028" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191104 17:41:58.028" starttime="20191104 17:41:56.720"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 17:41:58.030" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 17:42:19.936" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 17:42:19.936" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 17:42:19.937" starttime="20191104 17:41:58.029"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 17:42:19.938" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 17:42:19.938" starttime="20191104 17:42:19.937"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 17:42:19.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 17:42:19.939" starttime="20191104 17:42:19.938"></status>
</kw>
<msg timestamp="20191104 17:42:19.939" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 17:42:19.939" starttime="20191104 17:41:58.028"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 17:42:19.940" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 17:42:19.940" starttime="20191104 17:42:19.939"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 17:42:19.941" starttime="20191104 17:42:19.940"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 17:42:19.941" starttime="20191104 17:42:19.941"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 17:42:19.942" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 17:42:19.942" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191104 17:42:19.942" starttime="20191104 17:42:19.941"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 17:42:19.942" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191104 17:42:19.942" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 17:42:19.942" starttime="20191104 17:42:19.942"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 17:42:19.943" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191104 17:42:19.943" starttime="20191104 17:42:19.943"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 17:42:19.944" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191104 17:42:19.944" starttime="20191104 17:42:19.943"></status>
</kw>
<msg timestamp="20191104 17:42:19.944" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191104 17:42:19.944" starttime="20191104 17:41:58.028"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191104 17:42:19.946" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191104 17:42:19.946" starttime="20191104 17:42:19.945"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 17:42:19.949" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191104 17:42:19.949" starttime="20191104 17:42:19.948"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 17:42:19.949" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191104 17:42:19.950" starttime="20191104 17:42:19.949"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 17:42:19.953" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 17:41:28.558" level="INFO">${rc} = 255</msg>
<msg timestamp="20191105 17:41:28.558" level="INFO">${output} = Call From cf620a973ae2/172.18.0.5 to om1:9862 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused</msg>
<status status="PASS" endtime="20191105 17:41:28.558" starttime="20191104 17:42:19.951"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 17:41:28.561" level="INFO">Call From cf620a973ae2/172.18.0.5 to om1:9862 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused</msg>
<status status="PASS" endtime="20191105 17:41:28.561" starttime="20191105 17:41:28.560"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 17:41:28.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191105 17:41:28.563" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191105 17:41:28.564" starttime="20191105 17:41:28.561"></status>
</kw>
<status status="FAIL" endtime="20191105 17:41:28.564" starttime="20191104 17:42:19.951"></status>
</kw>
<status status="FAIL" endtime="20191105 17:41:28.564" starttime="20191104 17:42:19.950"></status>
</kw>
<status status="FAIL" endtime="20191105 17:41:28.564" starttime="20191104 17:42:19.947"></status>
</kw>
<status status="FAIL" endtime="20191105 17:41:28.566" starttime="20191104 17:42:19.947"></status>
</kw>
<status status="FAIL" endtime="20191105 17:41:28.566" starttime="20191104 17:42:19.946"></status>
</kw>
<status status="FAIL" endtime="20191105 17:41:28.566" starttime="20191104 17:42:19.944"></status>
</kw>
<status status="FAIL" endtime="20191105 17:41:28.566" starttime="20191104 17:42:19.944"></status>
</kw>
<status status="FAIL" endtime="20191105 17:41:28.567" critical="yes" starttime="20191104 17:41:45.222">255 != 0</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 17:41:28.577" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 17:42:55.310" level="INFO">${rc} = 255</msg>
<msg timestamp="20191105 17:42:55.311" level="INFO">${output} = Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
jav...</msg>
<status status="PASS" endtime="20191105 17:42:55.311" starttime="20191105 17:41:28.574"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 17:42:55.312" level="INFO">Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
java.net.ConnectException: Call From cf620a973ae2/172.18.0.5 to om2:9862 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.apache.hadoop.net.NetUtils.wrapWithMessage(NetUtils.java:831)
	at org.apache.hadoop.net.NetUtils.wrapException(NetUtils.java:755)
	at org.apache.hadoop.ipc.Client.getRpcResponse(Client.java:1515)
	at org.apache.hadoop.ipc.Client.call(Client.java:1457)
	at org.apache.hadoop.ipc.Client.call(Client.java:1367)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:228)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:116)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:422)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeMethod(RetryInvocationHandler.java:165)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invoke(RetryInvocationHandler.java:157)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeOnce(RetryInvocationHandler.java:95)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:359)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.submitRequest(OzoneManagerProtocolClientSideTranslatorPB.java:358)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.getServiceInfo(OzoneManagerProtocolClientSideTranslatorPB.java:1249)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.hdds.tracing.TraceAllMethod.invoke(TraceAllMethod.java:66)
	at com.sun.proxy.$Proxy17.getServiceInfo(Unknown Source)
	at org.apache.hadoop.ozone.client.rpc.RpcClient.&lt;init&gt;(RpcClient.java:156)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getClientProtocol(OzoneClientFactory.java:256)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getRpcClient(OzoneClientFactory.java:187)
	at org.apache.hadoop.ozone.admin.om.OMAdmin.createClient(OMAdmin.java:59)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:49)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:32)
	at picocli.CommandLine.execute(CommandLine.java:1173)
	at picocli.CommandLine.access$800(CommandLine.java:141)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1367)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1335)
	at picocli.CommandLine$AbstractParseResultHandler.handleParseResult(CommandLine.java:1243)
	at picocli.CommandLine.parseWithHandlers(CommandLine.java:1526)
	at picocli.CommandLine.parseWithHandler(CommandLine.java:1465)
	at org.apache.hadoop.hdds.cli.GenericCli.execute(GenericCli.java:65)
	at org.apache.hadoop.hdds.cli.GenericCli.run(GenericCli.java:56)
	at org.apache.hadoop.ozone.admin.OzoneAdmin.main(OzoneAdmin.java:66)
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:779)
	at org.apache.hadoop.net.SocketIOWithTimeout.connect(SocketIOWithTimeout.java:206)
	at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:531)
	at org.apache.hadoop.ipc.Client$Connection.setupConnection(Client.java:690)
	at org.apache.hadoop.ipc.Client$Connection.setupIOstreams(Client.java:794)
	at org.apache.hadoop.ipc.Client$Connection.access$3700(Client.java:411)
	at org.apache.hadoop.ipc.Client.getConnection(Client.java:1572)
	at org.apache.hadoop.ipc.Client.call(Client.java:1403)
	... 38 more
Connection refused</msg>
<status status="PASS" endtime="20191105 17:42:55.412" starttime="20191105 17:42:55.311"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 17:42:55.413" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191105 17:42:55.413" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191105 17:42:55.413" starttime="20191105 17:42:55.412"></status>
</kw>
<status status="FAIL" endtime="20191105 17:42:55.414" starttime="20191105 17:41:28.573"></status>
</kw>
<status status="FAIL" endtime="20191105 17:42:55.414" starttime="20191105 17:41:28.572"></status>
</kw>
<status status="FAIL" endtime="20191105 17:42:55.414" starttime="20191105 17:41:28.572"></status>
</kw>
<status status="FAIL" endtime="20191105 17:42:55.414" starttime="20191105 17:41:28.571"></status>
</kw>
<status status="FAIL" endtime="20191105 17:42:55.415" critical="yes" starttime="20191105 17:41:28.569">255 != 0</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191105 17:42:55.419" starttime="20191104 17:40:38.377"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
