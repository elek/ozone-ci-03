<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191114 01:58:03.178" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 01:58:03.349" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 01:58:05.711" level="INFO">${rc} = 255</msg>
<msg timestamp="20191114 01:58:05.712" level="INFO">${output} = Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191114 01:58:05.712" starttime="20191114 01:58:03.347"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 01:58:05.713" level="INFO">Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191114 01:58:05.713" starttime="20191114 01:58:05.712"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 01:58:05.713" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191114 01:58:05.714" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191114 01:58:05.716" starttime="20191114 01:58:05.713"></status>
</kw>
<status status="FAIL" endtime="20191114 01:58:05.717" starttime="20191114 01:58:03.347"></status>
</kw>
<status status="FAIL" endtime="20191114 01:58:05.717" starttime="20191114 01:58:03.346"></status>
</kw>
<status status="FAIL" endtime="20191114 01:58:05.717" critical="yes" starttime="20191114 01:58:03.346">255 != 0</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191114 01:58:05.719" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191114 01:58:05.719" starttime="20191114 01:58:05.718"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191114 01:58:05.721" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191114 01:58:05.721" starttime="20191114 01:58:05.720"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 01:58:05.722" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 01:58:05.722" starttime="20191114 01:58:05.721"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 01:58:05.723" starttime="20191114 01:58:05.722"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 01:58:05.723" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 01:58:07.008" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191114 01:58:07.009" starttime="20191114 01:58:05.723"></status>
</kw>
<status status="PASS" endtime="20191114 01:58:07.009" starttime="20191114 01:58:05.722"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 01:58:07.010" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 01:58:17.376" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 01:58:17.377" starttime="20191114 01:58:07.009"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 01:58:17.378" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 01:58:17.534" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 01:58:17.534" level="INFO">${shutdownMsg} = hadoop     399  0.0  0.0   9556  1164 ?        Ss   01:58   0:00 bash -c sudo ps aux | grep om
hadoop     401  0.0  0.0   9088   668 ?        S    01:58   0:00 grep om</msg>
<status status="PASS" endtime="20191114 01:58:17.534" starttime="20191114 01:58:17.377"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 01:58:17.600" starttime="20191114 01:58:17.535"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 01:58:17.601" starttime="20191114 01:58:17.600"></status>
</kw>
<status status="PASS" endtime="20191114 01:58:17.601" starttime="20191114 01:58:05.721"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 01:58:17.603" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 01:58:17.603" starttime="20191114 01:58:17.602"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 01:58:17.605" starttime="20191114 01:58:17.604"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 01:58:17.606" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 01:58:18.793" level="INFO">Read output: Last login: Thu Nov 14 01:58:06 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 01:58:18.794" starttime="20191114 01:58:17.605"></status>
</kw>
<status status="PASS" endtime="20191114 01:58:18.794" starttime="20191114 01:58:17.603"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 01:58:18.795" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 01:58:18.872" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 01:58:18.872" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 01:58:18.872" starttime="20191114 01:58:18.795"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 01:58:18.874" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 01:58:18.874" starttime="20191114 01:58:18.873"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 01:58:18.875" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191114 01:58:18.875" starttime="20191114 01:58:18.874"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 01:58:18.924" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191114 01:58:18.935" level="INFO">1 file:
log_inprogress_0</msg>
<msg timestamp="20191114 01:58:18.936" level="INFO">@{logs} = [ log_inprogress_0 ]</msg>
<status status="PASS" endtime="20191114 01:58:18.936" starttime="20191114 01:58:18.875"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191114 01:58:18.937" level="INFO">Length is 1</msg>
<msg timestamp="20191114 01:58:18.937" level="INFO">${numLogs} = 1</msg>
<status status="PASS" endtime="20191114 01:58:18.937" starttime="20191114 01:58:18.936"></status>
</kw>
<msg timestamp="20191114 01:58:18.938" level="INFO">${numLogsBefore} = 1</msg>
<msg timestamp="20191114 01:58:18.938" level="INFO">@{logsBefore} = [ [u'log_inprogress_0'] ]</msg>
<status status="PASS" endtime="20191114 01:58:18.938" starttime="20191114 01:58:17.601"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 01:58:18.943" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 01:58:23.310" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 01:58:23.310" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 01:58:23.310" starttime="20191114 01:58:18.940"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 01:58:23.311" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 01:58:23.312" starttime="20191114 01:58:23.311"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 01:58:23.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 01:58:23.312" starttime="20191114 01:58:23.312"></status>
</kw>
<msg timestamp="20191114 01:58:23.313" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 01:58:23.313" starttime="20191114 01:58:18.939"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 01:58:23.313" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 01:58:23.313" starttime="20191114 01:58:23.313"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 01:58:23.314" starttime="20191114 01:58:23.313"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 01:58:23.314" starttime="20191114 01:58:23.314"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 01:58:23.315" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 01:58:23.315" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 01:58:23.315" starttime="20191114 01:58:23.314"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 01:58:23.315" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 01:58:23.316" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 01:58:23.316" starttime="20191114 01:58:23.315"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 01:58:23.316" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 01:58:23.316" starttime="20191114 01:58:23.316"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 01:58:23.317" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 01:58:23.317" starttime="20191114 01:58:23.316"></status>
</kw>
<msg timestamp="20191114 01:58:23.317" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 01:58:23.317" starttime="20191114 01:58:18.938"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191114 01:58:23.319" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191114 01:58:23.319" starttime="20191114 01:58:23.318"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 01:58:23.321" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191114 01:58:23.321" starttime="20191114 01:58:23.320"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 01:58:23.321" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191114 01:58:23.321" starttime="20191114 01:58:23.321"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 01:58:23.325" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 01:58:25.375" level="INFO">${rc} = 255</msg>
<msg timestamp="20191114 01:58:25.375" level="INFO">${output} = VOLUME_NOT_FOUND Volume volume1 is not found</msg>
<status status="PASS" endtime="20191114 01:58:25.376" starttime="20191114 01:58:23.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 01:58:25.377" level="INFO">VOLUME_NOT_FOUND Volume volume1 is not found</msg>
<status status="PASS" endtime="20191114 01:58:25.377" starttime="20191114 01:58:25.376"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 01:58:25.378" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191114 01:58:25.379" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191114 01:58:25.379" starttime="20191114 01:58:25.378"></status>
</kw>
<status status="FAIL" endtime="20191114 01:58:25.379" starttime="20191114 01:58:23.322"></status>
</kw>
<status status="FAIL" endtime="20191114 01:58:25.379" starttime="20191114 01:58:23.322"></status>
</kw>
<status status="FAIL" endtime="20191114 01:58:25.380" starttime="20191114 01:58:23.320"></status>
</kw>
<status status="FAIL" endtime="20191114 01:58:25.380" starttime="20191114 01:58:23.320"></status>
</kw>
<status status="FAIL" endtime="20191114 01:58:25.380" starttime="20191114 01:58:23.319"></status>
</kw>
<status status="FAIL" endtime="20191114 01:58:25.380" starttime="20191114 01:58:23.317"></status>
</kw>
<status status="FAIL" endtime="20191114 01:58:25.380" starttime="20191114 01:58:23.317"></status>
</kw>
<status status="FAIL" endtime="20191114 01:58:25.381" critical="yes" starttime="20191114 01:58:05.717">255 != 0</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 01:58:25.385" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 01:58:27.909" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 01:58:27.909" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 01:58:27.909" starttime="20191114 01:58:25.383"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 01:58:27.911" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 01:58:27.911" starttime="20191114 01:58:27.910"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 01:58:27.912" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 01:58:27.912" starttime="20191114 01:58:27.911"></status>
</kw>
<msg timestamp="20191114 01:58:27.913" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 01:58:27.913" starttime="20191114 01:58:25.383"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 01:58:27.913" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 01:58:27.914" starttime="20191114 01:58:27.913"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 01:58:27.914" starttime="20191114 01:58:27.914"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 01:58:27.915" starttime="20191114 01:58:27.915"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 01:58:27.916" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 01:58:27.916" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 01:58:27.916" starttime="20191114 01:58:27.916"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 01:58:27.917" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 01:58:27.917" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 01:58:27.918" starttime="20191114 01:58:27.917"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 01:58:27.918" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 01:58:27.919" starttime="20191114 01:58:27.918"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 01:58:27.919" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 01:58:27.919" starttime="20191114 01:58:27.919"></status>
</kw>
<msg timestamp="20191114 01:58:27.920" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 01:58:27.920" starttime="20191114 01:58:25.382"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 01:58:27.922" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 01:58:27.922" starttime="20191114 01:58:27.921"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 01:58:27.924" starttime="20191114 01:58:27.923"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 01:58:27.924" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 01:58:29.130" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191114 01:58:29.131" starttime="20191114 01:58:27.924"></status>
</kw>
<status status="PASS" endtime="20191114 01:58:29.131" starttime="20191114 01:58:27.922"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 01:58:29.132" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 01:58:39.295" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 01:58:39.296" starttime="20191114 01:58:29.131"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 01:58:39.297" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 01:58:39.362" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 01:58:39.362" level="INFO">${shutdownMsg} = hadoop     468  0.0  0.0   9556  1168 ?        Ss   01:58   0:00 bash -c sudo ps aux | grep om
hadoop     470  0.0  0.0   9088   668 ?        S    01:58   0:00 grep om</msg>
<status status="PASS" endtime="20191114 01:58:39.362" starttime="20191114 01:58:39.296"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 01:58:39.427" starttime="20191114 01:58:39.362"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 01:58:39.428" starttime="20191114 01:58:39.427"></status>
</kw>
<msg timestamp="20191114 01:58:39.428" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 01:58:39.428" starttime="20191114 01:58:27.920"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 01:58:39.433" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 01:59:41.032" level="INFO">${rc} = 255</msg>
<msg timestamp="20191114 01:59:41.032" level="INFO">${output} = Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
jav...</msg>
<status status="PASS" endtime="20191114 01:59:41.032" starttime="20191114 01:58:39.430"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 01:59:41.034" level="INFO">Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
java.net.ConnectException: Call From c71b1de465de/172.18.0.3 to om2:9862 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.apache.hadoop.net.NetUtils.wrapWithMessage(NetUtils.java:831)
	at org.apache.hadoop.net.NetUtils.wrapException(NetUtils.java:755)
	at org.apache.hadoop.ipc.Client.getRpcResponse(Client.java:1515)
	at org.apache.hadoop.ipc.Client.call(Client.java:1457)
	at org.apache.hadoop.ipc.Client.call(Client.java:1367)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:228)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:116)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:422)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeMethod(RetryInvocationHandler.java:165)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invoke(RetryInvocationHandler.java:157)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeOnce(RetryInvocationHandler.java:95)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:359)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.submitRequest(OzoneManagerProtocolClientSideTranslatorPB.java:361)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.getServiceInfo(OzoneManagerProtocolClientSideTranslatorPB.java:1252)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.hdds.tracing.TraceAllMethod.invoke(TraceAllMethod.java:66)
	at com.sun.proxy.$Proxy17.getServiceInfo(Unknown Source)
	at org.apache.hadoop.ozone.client.rpc.RpcClient.&lt;init&gt;(RpcClient.java:157)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getClientProtocol(OzoneClientFactory.java:256)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getRpcClient(OzoneClientFactory.java:187)
	at org.apache.hadoop.ozone.admin.om.OMAdmin.createClient(OMAdmin.java:59)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:49)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:32)
	at picocli.CommandLine.execute(CommandLine.java:1173)
	at picocli.CommandLine.access$800(CommandLine.java:141)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1367)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1335)
	at picocli.CommandLine$AbstractParseResultHandler.handleParseResult(CommandLine.java:1243)
	at picocli.CommandLine.parseWithHandlers(CommandLine.java:1526)
	at picocli.CommandLine.parseWithHandler(CommandLine.java:1465)
	at org.apache.hadoop.hdds.cli.GenericCli.execute(GenericCli.java:65)
	at org.apache.hadoop.hdds.cli.GenericCli.run(GenericCli.java:56)
	at org.apache.hadoop.ozone.admin.OzoneAdmin.main(OzoneAdmin.java:66)
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:779)
	at org.apache.hadoop.net.SocketIOWithTimeout.connect(SocketIOWithTimeout.java:206)
	at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:531)
	at org.apache.hadoop.ipc.Client$Connection.setupConnection(Client.java:690)
	at org.apache.hadoop.ipc.Client$Connection.setupIOstreams(Client.java:794)
	at org.apache.hadoop.ipc.Client$Connection.access$3700(Client.java:411)
	at org.apache.hadoop.ipc.Client.getConnection(Client.java:1572)
	at org.apache.hadoop.ipc.Client.call(Client.java:1403)
	... 38 more
Connection refused</msg>
<status status="PASS" endtime="20191114 01:59:41.035" starttime="20191114 01:59:41.033"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 01:59:41.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191114 01:59:41.036" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191114 01:59:41.036" starttime="20191114 01:59:41.035"></status>
</kw>
<status status="FAIL" endtime="20191114 01:59:41.037" starttime="20191114 01:58:39.429"></status>
</kw>
<status status="FAIL" endtime="20191114 01:59:41.037" starttime="20191114 01:58:39.429"></status>
</kw>
<status status="FAIL" endtime="20191114 01:59:41.037" starttime="20191114 01:58:25.382"></status>
</kw>
<status status="FAIL" endtime="20191114 01:59:41.037" starttime="20191114 01:58:25.382"></status>
</kw>
<status status="FAIL" endtime="20191114 01:59:41.038" critical="yes" starttime="20191114 01:58:25.381">255 != 0</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191114 01:59:41.040" starttime="20191114 01:58:03.179"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
