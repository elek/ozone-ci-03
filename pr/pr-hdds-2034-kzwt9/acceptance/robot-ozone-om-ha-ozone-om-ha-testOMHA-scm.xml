<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191106 13:22:12.198" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 13:22:12.362" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 13:22:15.008" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 13:22:15.008" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191106 13:22:15.008" starttime="20191106 13:22:12.361"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 13:22:15.009" level="INFO"></msg>
<status status="PASS" endtime="20191106 13:22:15.010" starttime="20191106 13:22:15.009"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 13:22:15.010" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 13:22:15.010" starttime="20191106 13:22:15.010"></status>
</kw>
<status status="PASS" endtime="20191106 13:22:15.011" starttime="20191106 13:22:12.360"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 13:22:15.016" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 13:22:16.946" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 13:22:16.946" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191106 13:22:16.946" starttime="20191106 13:22:15.014"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 13:22:16.947" level="INFO"></msg>
<status status="PASS" endtime="20191106 13:22:16.947" starttime="20191106 13:22:16.946"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 13:22:16.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 13:22:16.947" starttime="20191106 13:22:16.947"></status>
</kw>
<status status="PASS" endtime="20191106 13:22:16.948" starttime="20191106 13:22:15.011"></status>
</kw>
<status status="PASS" endtime="20191106 13:22:16.948" starttime="20191106 13:22:12.360"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 13:22:16.949" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191106 13:22:16.949" starttime="20191106 13:22:16.948"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 13:22:16.950" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191106 13:22:16.950" starttime="20191106 13:22:16.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 13:22:16.950" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191106 13:22:16.950" starttime="20191106 13:22:16.950"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 13:22:16.951" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 13:22:16.952" starttime="20191106 13:22:16.950"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 13:22:16.954" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 13:22:21.160" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 13:22:21.160" level="INFO">${output} = 2019-11-06 13:22:19 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 13:22:19 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 13:22:21.160" starttime="20191106 13:22:16.952"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 13:22:21.162" level="INFO">2019-11-06 13:22:19 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 13:22:19 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 13:22:19 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 13:22:21.162" starttime="20191106 13:22:21.161"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 13:22:21.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 13:22:21.163" starttime="20191106 13:22:21.162"></status>
</kw>
<status status="PASS" endtime="20191106 13:22:21.163" starttime="20191106 13:22:16.952"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 13:22:21.167" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 13:22:23.257" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 13:22:23.257" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191106 13:22:23.257" starttime="20191106 13:22:21.165"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 13:22:23.259" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191106 13:22:23.259" starttime="20191106 13:22:23.258"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 13:22:23.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 13:22:23.259" starttime="20191106 13:22:23.259"></status>
</kw>
<msg timestamp="20191106 13:22:23.260" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191106 13:22:23.260" starttime="20191106 13:22:21.164"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:23.260" starttime="20191106 13:22:23.260"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 13:22:23.261" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 13:22:23.261" starttime="20191106 13:22:23.261"></status>
</kw>
<status status="PASS" endtime="20191106 13:22:23.261" starttime="20191106 13:22:16.948"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 13:22:23.264" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 13:22:25.195" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 13:22:25.195" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:25.195" starttime="20191106 13:22:23.262"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 13:22:25.196" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:25.196" starttime="20191106 13:22:25.195"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 13:22:25.196" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 13:22:25.197" starttime="20191106 13:22:25.196"></status>
</kw>
<msg timestamp="20191106 13:22:25.197" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:25.197" starttime="20191106 13:22:23.262"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 13:22:25.197" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:25.197" starttime="20191106 13:22:25.197"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:25.198" starttime="20191106 13:22:25.198"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:25.199" starttime="20191106 13:22:25.198"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 13:22:25.199" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 13:22:25.199" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:25.199" starttime="20191106 13:22:25.199"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 13:22:25.200" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 13:22:25.200" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 13:22:25.200" starttime="20191106 13:22:25.200"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 13:22:25.201" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 13:22:25.201" starttime="20191106 13:22:25.200"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 13:22:25.201" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 13:22:25.201" starttime="20191106 13:22:25.201"></status>
</kw>
<msg timestamp="20191106 13:22:25.201" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 13:22:25.201" starttime="20191106 13:22:23.262"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 13:22:25.203" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 13:22:25.203" starttime="20191106 13:22:25.202"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:25.204" starttime="20191106 13:22:25.203"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 13:22:25.204" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 13:22:26.478" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191106 13:22:26.479" starttime="20191106 13:22:25.204"></status>
</kw>
<status status="PASS" endtime="20191106 13:22:26.479" starttime="20191106 13:22:25.203"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 13:22:26.480" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 13:22:26.495" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191106 13:22:26.495" starttime="20191106 13:22:26.480"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 13:22:26.496" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 13:22:26.572" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191106 13:22:26.572" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191106 13:22:26.572" starttime="20191106 13:22:26.496"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 13:22:26.687" starttime="20191106 13:22:26.573"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:26.688" starttime="20191106 13:22:26.687"></status>
</kw>
<msg timestamp="20191106 13:22:26.688" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 13:22:26.688" starttime="20191106 13:22:25.202"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 13:22:26.692" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 13:22:28.510" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 13:22:28.510" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:28.510" starttime="20191106 13:22:26.690"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 13:22:28.511" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:28.511" starttime="20191106 13:22:28.511"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 13:22:28.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 13:22:28.512" starttime="20191106 13:22:28.511"></status>
</kw>
<msg timestamp="20191106 13:22:28.512" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:28.512" starttime="20191106 13:22:26.689"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 13:22:28.513" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:28.513" starttime="20191106 13:22:28.512"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:28.513" starttime="20191106 13:22:28.513"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:28.514" starttime="20191106 13:22:28.513"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 13:22:28.514" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 13:22:28.514" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:28.514" starttime="20191106 13:22:28.514"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 13:22:28.515" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 13:22:28.515" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 13:22:28.515" starttime="20191106 13:22:28.515"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 13:22:28.516" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 13:22:28.516" starttime="20191106 13:22:28.515"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 13:22:28.516" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 13:22:28.516" starttime="20191106 13:22:28.516"></status>
</kw>
<msg timestamp="20191106 13:22:28.516" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191106 13:22:28.516" starttime="20191106 13:22:26.689"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191106 13:22:28.517" level="FAIL">OMs did not failover: om2 == om2</msg>
<status status="FAIL" endtime="20191106 13:22:28.517" starttime="20191106 13:22:28.517"></status>
</kw>
<status status="FAIL" endtime="20191106 13:22:28.518" critical="yes" starttime="20191106 13:22:12.359">OMs did not failover: om2 == om2</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191106 13:22:28.520" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191106 13:22:28.520" starttime="20191106 13:22:28.519"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191106 13:22:28.521" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191106 13:22:28.521" starttime="20191106 13:22:28.520"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 13:22:28.522" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 13:22:28.522" starttime="20191106 13:22:28.522"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:28.524" starttime="20191106 13:22:28.523"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 13:22:28.524" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 13:22:29.722" level="INFO">Read output: Last login: Wed Nov  6 13:22:25 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191106 13:22:29.723" starttime="20191106 13:22:28.524"></status>
</kw>
<status status="PASS" endtime="20191106 13:22:29.723" starttime="20191106 13:22:28.523"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 13:22:29.724" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 13:22:29.739" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191106 13:22:29.740" starttime="20191106 13:22:29.724"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 13:22:29.740" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 13:22:29.817" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191106 13:22:29.818" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191106 13:22:29.818" starttime="20191106 13:22:29.740"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 13:22:29.932" starttime="20191106 13:22:29.818"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:29.934" starttime="20191106 13:22:29.933"></status>
</kw>
<status status="PASS" endtime="20191106 13:22:29.934" starttime="20191106 13:22:28.522"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 13:22:29.936" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 13:22:29.936" starttime="20191106 13:22:29.935"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:29.938" starttime="20191106 13:22:29.937"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 13:22:29.939" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 13:22:31.142" level="INFO">Read output: Last login: Wed Nov  6 13:22:28 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191106 13:22:31.142" starttime="20191106 13:22:29.938"></status>
</kw>
<status status="PASS" endtime="20191106 13:22:31.143" starttime="20191106 13:22:29.937"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 13:22:31.144" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 13:22:31.159" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191106 13:22:31.159" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191106 13:22:31.159" starttime="20191106 13:22:31.143"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 13:22:31.160" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191106 13:22:31.161" starttime="20191106 13:22:31.160"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 13:22:31.161" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191106 13:22:31.161" starttime="20191106 13:22:31.161"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 13:22:31.237" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191106 13:22:31.237" starttime="20191106 13:22:31.162"></status>
</kw>
<status status="FAIL" endtime="20191106 13:22:31.238" starttime="20191106 13:22:29.934"></status>
</kw>
<status status="FAIL" endtime="20191106 13:22:31.238" critical="yes" starttime="20191106 13:22:28.518">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 13:22:31.243" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 13:22:33.252" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 13:22:33.253" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:33.253" starttime="20191106 13:22:31.241"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 13:22:33.254" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:33.254" starttime="20191106 13:22:33.253"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 13:22:33.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 13:22:33.255" starttime="20191106 13:22:33.254"></status>
</kw>
<msg timestamp="20191106 13:22:33.255" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:33.255" starttime="20191106 13:22:31.240"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 13:22:33.256" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:33.256" starttime="20191106 13:22:33.255"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:33.256" starttime="20191106 13:22:33.256"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:33.257" starttime="20191106 13:22:33.256"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 13:22:33.257" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 13:22:33.258" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:33.258" starttime="20191106 13:22:33.257"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 13:22:33.258" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 13:22:33.258" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 13:22:33.258" starttime="20191106 13:22:33.258"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 13:22:33.259" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 13:22:33.259" starttime="20191106 13:22:33.258"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 13:22:33.259" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 13:22:33.259" starttime="20191106 13:22:33.259"></status>
</kw>
<msg timestamp="20191106 13:22:33.260" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 13:22:33.260" starttime="20191106 13:22:31.240"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 13:22:33.261" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 13:22:33.261" starttime="20191106 13:22:33.261"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:33.262" starttime="20191106 13:22:33.262"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 13:22:33.263" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 13:22:34.461" level="INFO">Read output: Last login: Wed Nov  6 13:22:30 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191106 13:22:34.461" starttime="20191106 13:22:33.262"></status>
</kw>
<status status="PASS" endtime="20191106 13:22:34.461" starttime="20191106 13:22:33.261"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 13:22:34.462" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 13:22:34.476" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191106 13:22:34.476" starttime="20191106 13:22:34.462"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 13:22:34.477" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 13:22:34.553" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191106 13:22:34.554" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191106 13:22:34.554" starttime="20191106 13:22:34.476"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 13:22:34.668" starttime="20191106 13:22:34.554"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:34.669" starttime="20191106 13:22:34.669"></status>
</kw>
<msg timestamp="20191106 13:22:34.670" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 13:22:34.670" starttime="20191106 13:22:33.260"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 13:22:34.674" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 13:22:36.594" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 13:22:36.594" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:36.594" starttime="20191106 13:22:34.672"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 13:22:36.596" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:36.596" starttime="20191106 13:22:36.595"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 13:22:36.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 13:22:36.597" starttime="20191106 13:22:36.596"></status>
</kw>
<msg timestamp="20191106 13:22:36.597" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:36.598" starttime="20191106 13:22:34.671"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 13:22:36.598" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:36.598" starttime="20191106 13:22:36.598"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:36.599" starttime="20191106 13:22:36.599"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 13:22:36.600" starttime="20191106 13:22:36.599"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 13:22:36.600" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 13:22:36.601" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 13:22:36.601" starttime="20191106 13:22:36.600"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 13:22:36.601" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 13:22:36.602" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 13:22:36.602" starttime="20191106 13:22:36.601"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 13:22:36.602" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 13:22:36.602" starttime="20191106 13:22:36.602"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 13:22:36.603" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 13:22:36.603" starttime="20191106 13:22:36.603"></status>
</kw>
<msg timestamp="20191106 13:22:36.604" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191106 13:22:36.604" starttime="20191106 13:22:34.670"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191106 13:22:36.605" level="FAIL">OMs did not failover: om2 == om2</msg>
<status status="FAIL" endtime="20191106 13:22:36.605" starttime="20191106 13:22:36.604"></status>
</kw>
<status status="FAIL" endtime="20191106 13:22:36.605" starttime="20191106 13:22:31.239"></status>
</kw>
<status status="FAIL" endtime="20191106 13:22:36.605" starttime="20191106 13:22:31.239"></status>
</kw>
<status status="FAIL" endtime="20191106 13:22:36.605" critical="yes" starttime="20191106 13:22:31.238">OMs did not failover: om2 == om2</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191106 13:22:36.607" starttime="20191106 13:22:12.199"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
