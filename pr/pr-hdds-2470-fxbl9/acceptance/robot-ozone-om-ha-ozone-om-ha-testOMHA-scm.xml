<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191113 20:00:47.514" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:00:47.684" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:00:50.504" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:00:50.504" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 20:00:50.504" starttime="20191113 20:00:47.682"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:00:50.505" level="INFO"></msg>
<status status="PASS" endtime="20191113 20:00:50.506" starttime="20191113 20:00:50.505"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:00:50.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:00:50.506" starttime="20191113 20:00:50.506"></status>
</kw>
<status status="PASS" endtime="20191113 20:00:50.507" starttime="20191113 20:00:47.681"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:00:50.511" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:00:52.621" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:00:52.621" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 20:00:52.622" starttime="20191113 20:00:50.510"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:00:52.623" level="INFO"></msg>
<status status="PASS" endtime="20191113 20:00:52.623" starttime="20191113 20:00:52.622"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:00:52.624" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:00:52.624" starttime="20191113 20:00:52.624"></status>
</kw>
<status status="PASS" endtime="20191113 20:00:52.625" starttime="20191113 20:00:50.507"></status>
</kw>
<status status="PASS" endtime="20191113 20:00:52.625" starttime="20191113 20:00:47.681"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 20:00:52.627" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191113 20:00:52.627" starttime="20191113 20:00:52.626"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 20:00:52.628" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191113 20:00:52.628" starttime="20191113 20:00:52.627"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 20:00:52.629" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191113 20:00:52.629" starttime="20191113 20:00:52.628"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:00:52.631" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:00:52.632" starttime="20191113 20:00:52.629"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:00:52.635" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:00:57.496" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:00:57.496" level="INFO">${output} = 2019-11-13 20:00:55 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 20:00:55 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 20:00:57.496" starttime="20191113 20:00:52.633"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:00:57.498" level="INFO">2019-11-13 20:00:55 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 20:00:55 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 20:00:55 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 20:00:57.498" starttime="20191113 20:00:57.497"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:00:57.499" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:00:57.499" starttime="20191113 20:00:57.499"></status>
</kw>
<status status="PASS" endtime="20191113 20:00:57.500" starttime="20191113 20:00:52.632"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:00:57.504" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:00:59.692" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:00:59.692" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191113 20:00:59.692" starttime="20191113 20:00:57.501"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:00:59.694" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191113 20:00:59.694" starttime="20191113 20:00:59.693"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:00:59.695" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:00:59.695" starttime="20191113 20:00:59.694"></status>
</kw>
<msg timestamp="20191113 20:00:59.695" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191113 20:00:59.695" starttime="20191113 20:00:57.500"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:00:59.696" starttime="20191113 20:00:59.695"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:00:59.697" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:00:59.697" starttime="20191113 20:00:59.696"></status>
</kw>
<status status="PASS" endtime="20191113 20:00:59.697" starttime="20191113 20:00:52.625"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:00:59.700" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:01:03.371" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:01:03.372" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:01:03.372" starttime="20191113 20:00:59.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:01:03.374" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:01:03.374" starttime="20191113 20:01:03.373"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:01:03.375" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:01:03.375" starttime="20191113 20:01:03.374"></status>
</kw>
<msg timestamp="20191113 20:01:03.376" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:01:03.376" starttime="20191113 20:00:59.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 20:01:03.377" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:01:03.377" starttime="20191113 20:01:03.376"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 20:01:03.380" starttime="20191113 20:01:03.378"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 20:01:03.381" starttime="20191113 20:01:03.380"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 20:01:03.381" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 20:01:03.382" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:01:03.382" starttime="20191113 20:01:03.381"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 20:01:03.383" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 20:01:03.383" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 20:01:03.383" starttime="20191113 20:01:03.382"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 20:01:03.384" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 20:01:03.384" starttime="20191113 20:01:03.383"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 20:01:03.385" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 20:01:03.385" starttime="20191113 20:01:03.384"></status>
</kw>
<msg timestamp="20191113 20:01:03.385" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 20:01:03.385" starttime="20191113 20:00:59.697"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:01:03.387" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 20:01:03.388" starttime="20191113 20:01:03.387"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:01:03.389" starttime="20191113 20:01:03.388"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:01:03.390" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:01:05.477" level="INFO">Read output:</msg>
<status status="PASS" endtime="20191113 20:01:05.477" starttime="20191113 20:01:03.390"></status>
</kw>
<status status="PASS" endtime="20191113 20:01:05.478" starttime="20191113 20:01:03.388"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 20:01:05.479" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 20:01:15.718" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:01:15.719" starttime="20191113 20:01:05.478"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 20:01:15.719" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:01:15.817" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:01:15.817" level="INFO">${shutdownMsg} = hadoop     459  0.0  0.0   9556  1164 ?        Ss   20:01   0:00 bash -c sudo ps aux | grep om
hadoop     461  0.0  0.0   9088   672 ?        S    20:01   0:00 grep om</msg>
<status status="PASS" endtime="20191113 20:01:15.817" starttime="20191113 20:01:15.719"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:01:15.882" starttime="20191113 20:01:15.818"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:01:15.883" starttime="20191113 20:01:15.883"></status>
</kw>
<msg timestamp="20191113 20:01:15.883" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 20:01:15.884" starttime="20191113 20:01:03.386"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:01:15.887" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:01:27.911" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:01:27.911" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:01:27.911" starttime="20191113 20:01:15.885"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:01:27.912" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:01:27.912" starttime="20191113 20:01:27.911"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:01:27.913" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:01:27.913" starttime="20191113 20:01:27.912"></status>
</kw>
<msg timestamp="20191113 20:01:27.913" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:01:27.913" starttime="20191113 20:01:15.884"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 20:01:27.914" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:01:27.914" starttime="20191113 20:01:27.913"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 20:01:27.914" starttime="20191113 20:01:27.914"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 20:01:27.915" starttime="20191113 20:01:27.914"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 20:01:27.915" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 20:01:27.915" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:01:27.915" starttime="20191113 20:01:27.915"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 20:01:27.916" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 20:01:27.916" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 20:01:27.916" starttime="20191113 20:01:27.916"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 20:01:27.917" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 20:01:27.917" starttime="20191113 20:01:27.916"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 20:01:27.917" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 20:01:27.917" starttime="20191113 20:01:27.917"></status>
</kw>
<msg timestamp="20191113 20:01:27.918" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191113 20:01:27.918" starttime="20191113 20:01:15.884"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 20:01:27.918" starttime="20191113 20:01:27.918"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 20:01:27.919" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191113 20:01:27.919" starttime="20191113 20:01:27.919"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 20:01:27.920" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191113 20:01:27.920" starttime="20191113 20:01:27.920"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 20:01:27.921" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191113 20:01:27.921" starttime="20191113 20:01:27.920"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:01:27.923" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:01:27.923" starttime="20191113 20:01:27.921"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:01:27.925" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:01:42.268" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:01:42.268" level="INFO">${output} = 2019-11-13 20:01:30 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191113 20:01:42.268" starttime="20191113 20:01:27.924"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:01:42.269" level="INFO">2019-11-13 20:01:30 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:01:31 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:01:32 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:01:33 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:01:34 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:01:35 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:01:36 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:01:37 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:01:38 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:01:39 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:01:40 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 20:01:40 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 20:01:40 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 20:01:42.270" starttime="20191113 20:01:42.269"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:01:42.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:01:42.271" starttime="20191113 20:01:42.270"></status>
</kw>
<status status="PASS" endtime="20191113 20:01:42.271" starttime="20191113 20:01:27.923"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:01:42.275" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:01:54.560" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:01:54.561" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 20:01:54.561" starttime="20191113 20:01:42.273"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:01:54.562" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 20:01:54.563" starttime="20191113 20:01:54.562"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:01:54.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:01:54.564" starttime="20191113 20:01:54.563"></status>
</kw>
<msg timestamp="20191113 20:01:54.564" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 20:01:54.564" starttime="20191113 20:01:42.272"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:01:54.565" starttime="20191113 20:01:54.565"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:01:54.566" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:01:54.566" starttime="20191113 20:01:54.565"></status>
</kw>
<status status="PASS" endtime="20191113 20:01:54.567" starttime="20191113 20:01:27.918"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:01:54.569" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 20:01:54.569" starttime="20191113 20:01:54.568"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:01:54.571" starttime="20191113 20:01:54.570"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:01:54.571" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:01:55.776" level="INFO">Read output: Last login: Wed Nov 13 20:01:04 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:01:55.777" starttime="20191113 20:01:54.571"></status>
</kw>
<status status="PASS" endtime="20191113 20:01:55.777" starttime="20191113 20:01:54.569"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 20:01:55.778" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 20:01:57.969" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:01:57.969" starttime="20191113 20:01:55.778"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 20:01:57.970" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:01:58.034" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:01:58.034" level="INFO">${startupMsg} = hadoop     512  358  0.0 34481920 218976 ?     Sl   20:01   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 20:01:58.035" starttime="20191113 20:01:57.969"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:01:58.099" starttime="20191113 20:01:58.035"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:01:58.100" starttime="20191113 20:01:58.100"></status>
</kw>
<status status="PASS" endtime="20191113 20:01:58.101" starttime="20191113 20:01:54.567"></status>
</kw>
<status status="PASS" endtime="20191113 20:01:58.101" critical="yes" starttime="20191113 20:00:47.680"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191113 20:01:58.107" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191113 20:01:58.107" starttime="20191113 20:01:58.104"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191113 20:01:58.109" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191113 20:01:58.109" starttime="20191113 20:01:58.107"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:01:58.111" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 20:01:58.111" starttime="20191113 20:01:58.110"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:01:58.113" starttime="20191113 20:01:58.112"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:01:58.113" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:01:59.318" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:01:59.318" starttime="20191113 20:01:58.113"></status>
</kw>
<status status="PASS" endtime="20191113 20:01:59.319" starttime="20191113 20:01:58.111"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 20:01:59.320" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 20:02:09.471" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:02:09.471" starttime="20191113 20:01:59.319"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 20:02:09.472" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:02:09.561" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:02:09.561" level="INFO">${shutdownMsg} = hadoop     496  0.0  0.0   9556  1168 ?        Ss   20:02   0:00 bash -c sudo ps aux | grep om
hadoop     498  0.0  0.0   9088   668 ?        S    20:02   0:00 grep om</msg>
<status status="PASS" endtime="20191113 20:02:09.561" starttime="20191113 20:02:09.472"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:02:09.626" starttime="20191113 20:02:09.561"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:02:09.627" starttime="20191113 20:02:09.627"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:09.628" starttime="20191113 20:01:58.110"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:02:09.630" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 20:02:09.630" starttime="20191113 20:02:09.629"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:02:09.632" starttime="20191113 20:02:09.631"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:02:09.633" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:02:10.831" level="INFO">Read output: Last login: Wed Nov 13 20:01:58 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:02:10.831" starttime="20191113 20:02:09.632"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:10.832" starttime="20191113 20:02:09.630"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 20:02:10.833" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 20:02:10.848" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:02:10.848" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 20:02:10.848" starttime="20191113 20:02:10.832"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 20:02:10.849" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 20:02:10.849" starttime="20191113 20:02:10.849"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 20:02:10.851" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 20:02:10.851" starttime="20191113 20:02:10.850"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 20:02:10.931" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 20:02:10.942" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 20:02:10.943" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 20:02:10.943" starttime="20191113 20:02:10.851"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 20:02:10.944" level="INFO">Length is 2</msg>
<msg timestamp="20191113 20:02:10.945" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 20:02:10.945" starttime="20191113 20:02:10.943"></status>
</kw>
<msg timestamp="20191113 20:02:10.945" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191113 20:02:10.946" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 20:02:10.946" starttime="20191113 20:02:09.628"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:02:10.950" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:02:22.908" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:02:22.908" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:02:22.908" starttime="20191113 20:02:10.947"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:02:22.909" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:02:22.910" starttime="20191113 20:02:22.909"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:02:22.910" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:02:22.910" starttime="20191113 20:02:22.910"></status>
</kw>
<msg timestamp="20191113 20:02:22.911" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:02:22.911" starttime="20191113 20:02:10.946"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 20:02:22.911" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:02:22.912" starttime="20191113 20:02:22.911"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 20:02:22.912" starttime="20191113 20:02:22.912"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 20:02:22.913" starttime="20191113 20:02:22.912"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 20:02:22.914" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 20:02:22.914" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:02:22.914" starttime="20191113 20:02:22.913"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 20:02:22.914" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191113 20:02:22.915" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 20:02:22.915" starttime="20191113 20:02:22.914"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 20:02:22.915" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 20:02:22.915" starttime="20191113 20:02:22.915"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 20:02:22.916" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191113 20:02:22.916" starttime="20191113 20:02:22.916"></status>
</kw>
<msg timestamp="20191113 20:02:22.916" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 20:02:22.916" starttime="20191113 20:02:10.946"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191113 20:02:22.919" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191113 20:02:22.919" starttime="20191113 20:02:22.917"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 20:02:22.921" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191113 20:02:22.921" starttime="20191113 20:02:22.921"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 20:02:22.922" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191113 20:02:22.922" starttime="20191113 20:02:22.921"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:02:22.925" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:02:27.487" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:02:27.487" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 20:02:27.487" starttime="20191113 20:02:22.924"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:02:27.488" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 20:02:27.488" starttime="20191113 20:02:27.488"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:02:27.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:02:27.489" starttime="20191113 20:02:27.489"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:27.490" starttime="20191113 20:02:22.923"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:02:27.493" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:02:29.672" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:02:29.673" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573675345103,
  "modificationTime": 1573675347085,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 20:02:29.673" starttime="20191113 20:02:27.492"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:02:29.674" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573675345103,
  "modificationTime": 1573675347085,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103132387416145920,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 20:02:29.674" starttime="20191113 20:02:29.673"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:02:29.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:02:29.674" starttime="20191113 20:02:29.674"></status>
</kw>
<msg timestamp="20191113 20:02:29.675" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573675345103,
  "modificationTime": 1573675347085,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 20:02:29.675" starttime="20191113 20:02:27.490"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 20:02:29.675" starttime="20191113 20:02:29.675"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:29.675" starttime="20191113 20:02:22.922"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:29.676" starttime="20191113 20:02:22.920"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 20:02:29.676" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191113 20:02:29.676" starttime="20191113 20:02:29.676"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 20:02:29.677" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191113 20:02:29.677" starttime="20191113 20:02:29.677"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:02:29.681" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:02:33.646" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:02:33.646" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 20:02:33.646" starttime="20191113 20:02:29.679"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:02:33.648" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 20:02:33.648" starttime="20191113 20:02:33.647"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:02:33.649" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:02:33.649" starttime="20191113 20:02:33.648"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:33.650" starttime="20191113 20:02:29.678"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:02:33.654" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:02:35.850" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:02:35.850" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573675351597,
  "modificationTime": 1573675353233,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 20:02:35.850" starttime="20191113 20:02:33.651"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:02:35.852" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573675351597,
  "modificationTime": 1573675353233,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103132387842129920,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 20:02:35.852" starttime="20191113 20:02:35.851"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:02:35.853" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:02:35.853" starttime="20191113 20:02:35.853"></status>
</kw>
<msg timestamp="20191113 20:02:35.854" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573675351597,
  "modificationTime": 1573675353233,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 20:02:35.854" starttime="20191113 20:02:33.650"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 20:02:35.855" starttime="20191113 20:02:35.855"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:35.855" starttime="20191113 20:02:29.677"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:35.856" starttime="20191113 20:02:29.676"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 20:02:35.857" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191113 20:02:35.857" starttime="20191113 20:02:35.856"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 20:02:35.858" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191113 20:02:35.858" starttime="20191113 20:02:35.857"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:02:35.863" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:02:40.166" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:02:40.166" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 20:02:40.166" starttime="20191113 20:02:35.860"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:02:40.167" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 20:02:40.167" starttime="20191113 20:02:40.166"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:02:40.168" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:02:40.168" starttime="20191113 20:02:40.167"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:40.168" starttime="20191113 20:02:35.859"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:02:40.172" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:02:42.332" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:02:42.332" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573675357986,
  "modificationTime": 1573675359749,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 20:02:42.332" starttime="20191113 20:02:40.170"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:02:42.334" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573675357986,
  "modificationTime": 1573675359749,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103132388260839420,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 20:02:42.334" starttime="20191113 20:02:42.333"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:02:42.335" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:02:42.335" starttime="20191113 20:02:42.334"></status>
</kw>
<msg timestamp="20191113 20:02:42.335" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573675357986,
  "modificationTime": 1573675359749,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 20:02:42.336" starttime="20191113 20:02:40.168"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 20:02:42.336" starttime="20191113 20:02:42.336"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:42.337" starttime="20191113 20:02:35.858"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:42.337" starttime="20191113 20:02:35.856"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 20:02:42.338" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191113 20:02:42.338" starttime="20191113 20:02:42.337"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 20:02:42.339" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191113 20:02:42.339" starttime="20191113 20:02:42.338"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:02:42.343" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:02:46.346" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:02:46.346" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 20:02:46.346" starttime="20191113 20:02:42.341"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:02:46.348" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 20:02:46.348" starttime="20191113 20:02:46.347"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:02:46.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:02:46.348" starttime="20191113 20:02:46.348"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:46.349" starttime="20191113 20:02:42.340"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:02:46.352" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:02:48.456" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:02:48.456" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573675364326,
  "modificationTime": 1573675365950,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 20:02:48.457" starttime="20191113 20:02:46.350"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:02:48.458" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573675364326,
  "modificationTime": 1573675365950,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103132388676337660,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 20:02:48.458" starttime="20191113 20:02:48.457"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:02:48.459" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:02:48.459" starttime="20191113 20:02:48.459"></status>
</kw>
<msg timestamp="20191113 20:02:48.460" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573675364326,
  "modificationTime": 1573675365950,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 20:02:48.460" starttime="20191113 20:02:46.349"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 20:02:48.461" starttime="20191113 20:02:48.460"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:48.461" starttime="20191113 20:02:42.339"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:48.461" starttime="20191113 20:02:42.337"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 20:02:48.462" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:02:48.462" starttime="20191113 20:02:48.461"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 20:02:48.463" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:02:48.463" starttime="20191113 20:02:48.462"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:02:48.467" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:02:53.092" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:02:53.092" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 20:02:53.092" starttime="20191113 20:02:48.466"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:02:53.093" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 20:02:53.093" starttime="20191113 20:02:53.093"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:02:53.094" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:02:53.094" starttime="20191113 20:02:53.094"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:53.094" starttime="20191113 20:02:48.465"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:02:53.098" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:02:55.310" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:02:55.310" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573675370709,
  "modificationTime": 1573675372697,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 20:02:55.310" starttime="20191113 20:02:53.096"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:02:55.312" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573675370709,
  "modificationTime": 1573675372697,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103132389094653950,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 20:02:55.312" starttime="20191113 20:02:55.311"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:02:55.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:02:55.312" starttime="20191113 20:02:55.312"></status>
</kw>
<msg timestamp="20191113 20:02:55.313" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573675370709,
  "modificationTime": 1573675372697,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 20:02:55.313" starttime="20191113 20:02:53.095"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 20:02:55.313" starttime="20191113 20:02:55.313"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:55.313" starttime="20191113 20:02:48.463"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:55.313" starttime="20191113 20:02:48.461"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:55.314" starttime="20191113 20:02:22.920"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:55.314" starttime="20191113 20:02:22.919"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:02:55.315" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 20:02:55.315" starttime="20191113 20:02:55.314"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:02:55.316" starttime="20191113 20:02:55.316"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:02:55.317" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:02:56.516" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:02:56.516" starttime="20191113 20:02:55.316"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:56.516" starttime="20191113 20:02:55.315"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 20:02:56.517" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 20:02:56.532" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:02:56.533" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 20:02:56.533" starttime="20191113 20:02:56.517"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 20:02:56.534" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 20:02:56.534" starttime="20191113 20:02:56.533"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 20:02:56.535" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 20:02:56.535" starttime="20191113 20:02:56.534"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 20:02:56.614" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 20:02:56.624" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191113 20:02:56.624" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191113 20:02:56.625" starttime="20191113 20:02:56.536"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 20:02:56.626" level="INFO">Length is 3</msg>
<msg timestamp="20191113 20:02:56.626" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191113 20:02:56.626" starttime="20191113 20:02:56.625"></status>
</kw>
<msg timestamp="20191113 20:02:56.627" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191113 20:02:56.627" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191113 20:02:56.627" starttime="20191113 20:02:55.314"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191113 20:02:56.628" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191113 20:02:56.628" starttime="20191113 20:02:56.627"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:56.628" starttime="20191113 20:02:22.917"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:56.628" starttime="20191113 20:02:22.917"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191113 20:02:56.630" starttime="20191113 20:02:56.629"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:02:56.632" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 20:02:56.632" starttime="20191113 20:02:56.631"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:02:56.634" starttime="20191113 20:02:56.633"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:02:56.635" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:02:57.823" level="INFO">Read output: Last login: Wed Nov 13 20:02:09 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:02:57.823" starttime="20191113 20:02:56.634"></status>
</kw>
<status status="PASS" endtime="20191113 20:02:57.824" starttime="20191113 20:02:56.632"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 20:02:57.824" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 20:02:59.983" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:02:59.983" starttime="20191113 20:02:57.824"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 20:02:59.984" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:03:00.038" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:03:00.038" level="INFO">${startupMsg} = hadoop     571  366  0.1 34487564 267636 ?     Sl   20:02   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 20:03:00.038" starttime="20191113 20:02:59.983"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:03:00.103" starttime="20191113 20:03:00.038"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:00.104" starttime="20191113 20:03:00.103"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:00.104" starttime="20191113 20:02:56.630"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:03:00.106" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 20:03:00.106" starttime="20191113 20:03:00.105"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:00.107" starttime="20191113 20:03:00.107"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:03:00.108" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:03:01.306" level="INFO">Read output: Last login: Wed Nov 13 20:02:56 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:03:01.307" starttime="20191113 20:03:00.108"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:01.307" starttime="20191113 20:03:00.106"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 20:03:01.308" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 20:03:01.322" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:03:01.322" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 20:03:01.322" starttime="20191113 20:03:01.307"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 20:03:01.323" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 20:03:01.323" starttime="20191113 20:03:01.322"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 20:03:01.323" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 20:03:01.324" starttime="20191113 20:03:01.323"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 20:03:01.400" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 20:03:01.405" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 20:03:01.406" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 20:03:01.406" starttime="20191113 20:03:01.324"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 20:03:01.407" level="INFO">Length is 2</msg>
<msg timestamp="20191113 20:03:01.407" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 20:03:01.407" starttime="20191113 20:03:01.406"></status>
</kw>
<msg timestamp="20191113 20:03:01.407" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191113 20:03:01.407" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 20:03:01.407" starttime="20191113 20:03:00.105"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:01.408" starttime="20191113 20:03:01.407"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191113 20:03:02.409" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191113 20:03:02.409" starttime="20191113 20:03:01.408"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:02.409" starttime="20191113 20:03:00.104"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:03:02.413" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 20:03:02.413" starttime="20191113 20:03:02.411"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:02.414" starttime="20191113 20:03:02.414"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:03:02.415" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:03:03.619" level="INFO">Read output: Last login: Wed Nov 13 20:03:00 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:03:03.620" starttime="20191113 20:03:02.415"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:03.620" starttime="20191113 20:03:02.413"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 20:03:03.622" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 20:03:03.636" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:03:03.637" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 20:03:03.637" starttime="20191113 20:03:03.621"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 20:03:03.638" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 20:03:03.638" starttime="20191113 20:03:03.637"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 20:03:03.639" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 20:03:03.639" starttime="20191113 20:03:03.638"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 20:03:03.717" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 20:03:03.726" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191113 20:03:03.727" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191113 20:03:03.727" starttime="20191113 20:03:03.640"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 20:03:03.727" level="INFO">Length is 3</msg>
<msg timestamp="20191113 20:03:03.728" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191113 20:03:03.728" starttime="20191113 20:03:03.727"></status>
</kw>
<msg timestamp="20191113 20:03:03.728" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191113 20:03:03.728" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191113 20:03:03.728" starttime="20191113 20:03:02.410"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191113 20:03:03.729" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191113 20:03:03.729" starttime="20191113 20:03:03.728"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:03.729" starttime="20191113 20:03:02.410"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:03.729" starttime="20191113 20:03:00.104"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:03.730" starttime="20191113 20:03:03.729"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:03.730" starttime="20191113 20:03:03.730"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:03.731" critical="yes" starttime="20191113 20:01:58.102"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:03:03.735" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:03:05.638" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:03:05.638" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:05.638" starttime="20191113 20:03:03.733"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:03:05.639" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:05.640" starttime="20191113 20:03:05.639"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:03:05.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:03:05.640" starttime="20191113 20:03:05.640"></status>
</kw>
<msg timestamp="20191113 20:03:05.641" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:05.641" starttime="20191113 20:03:03.733"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 20:03:05.641" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:05.641" starttime="20191113 20:03:05.641"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:05.642" starttime="20191113 20:03:05.641"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:05.643" starttime="20191113 20:03:05.642"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 20:03:05.643" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 20:03:05.643" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:05.643" starttime="20191113 20:03:05.643"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 20:03:05.644" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191113 20:03:05.644" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 20:03:05.644" starttime="20191113 20:03:05.644"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 20:03:05.645" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 20:03:05.645" starttime="20191113 20:03:05.645"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 20:03:05.646" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191113 20:03:05.646" starttime="20191113 20:03:05.645"></status>
</kw>
<msg timestamp="20191113 20:03:05.646" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 20:03:05.646" starttime="20191113 20:03:03.732"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:03:05.647" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 20:03:05.647" starttime="20191113 20:03:05.647"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:05.648" starttime="20191113 20:03:05.648"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:03:05.649" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:03:06.837" level="INFO">Read output: Last login: Wed Nov 13 20:02:55 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:03:06.840" starttime="20191113 20:03:05.649"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:06.840" starttime="20191113 20:03:05.648"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 20:03:06.841" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 20:03:17.020" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:03:17.020" starttime="20191113 20:03:06.840"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 20:03:17.021" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:03:17.119" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:03:17.120" level="INFO">${shutdownMsg} = hadoop     578  0.0  0.0   9556  1164 ?        Ss   20:03   0:00 bash -c sudo ps aux | grep om
hadoop     580  0.0  0.0   9088   668 ?        S    20:03   0:00 grep om</msg>
<status status="PASS" endtime="20191113 20:03:17.120" starttime="20191113 20:03:17.021"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:03:17.185" starttime="20191113 20:03:17.120"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:17.186" starttime="20191113 20:03:17.186"></status>
</kw>
<msg timestamp="20191113 20:03:17.187" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 20:03:17.187" starttime="20191113 20:03:05.646"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:03:17.201" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:03:19.478" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:03:19.478" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:19.479" starttime="20191113 20:03:17.197"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:03:19.480" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:19.480" starttime="20191113 20:03:19.479"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:03:19.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:03:19.481" starttime="20191113 20:03:19.480"></status>
</kw>
<msg timestamp="20191113 20:03:19.481" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:19.481" starttime="20191113 20:03:17.193"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 20:03:19.482" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:19.482" starttime="20191113 20:03:19.482"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:19.483" starttime="20191113 20:03:19.482"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:19.483" starttime="20191113 20:03:19.483"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 20:03:19.484" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 20:03:19.484" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:19.484" starttime="20191113 20:03:19.484"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 20:03:19.485" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 20:03:19.485" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 20:03:19.485" starttime="20191113 20:03:19.484"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 20:03:19.485" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 20:03:19.486" starttime="20191113 20:03:19.485"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 20:03:19.486" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 20:03:19.486" starttime="20191113 20:03:19.486"></status>
</kw>
<msg timestamp="20191113 20:03:19.487" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191113 20:03:19.487" starttime="20191113 20:03:17.187"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:19.487" starttime="20191113 20:03:19.487"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 20:03:19.489" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191113 20:03:19.489" starttime="20191113 20:03:19.488"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 20:03:19.490" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191113 20:03:19.490" starttime="20191113 20:03:19.489"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 20:03:19.490" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191113 20:03:19.490" starttime="20191113 20:03:19.490"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:03:19.492" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:03:19.492" starttime="20191113 20:03:19.491"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:03:19.495" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:03:23.395" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:03:23.396" level="INFO">${output} = 2019-11-13 20:03:21 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 20:03:22 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 20:03:23.396" starttime="20191113 20:03:19.493"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:03:23.398" level="INFO">2019-11-13 20:03:21 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 20:03:22 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 20:03:22 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 20:03:23.398" starttime="20191113 20:03:23.397"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:03:23.398" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:03:23.399" starttime="20191113 20:03:23.398"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:23.399" starttime="20191113 20:03:19.492"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:03:23.403" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:03:25.400" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:03:25.401" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:03:25.401" starttime="20191113 20:03:23.401"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:03:25.402" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:03:25.403" starttime="20191113 20:03:25.402"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:03:25.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:03:25.404" starttime="20191113 20:03:25.403"></status>
</kw>
<msg timestamp="20191113 20:03:25.404" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:03:25.404" starttime="20191113 20:03:23.399"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:25.405" starttime="20191113 20:03:25.405"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:03:25.407" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:03:25.407" starttime="20191113 20:03:25.405"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:25.407" starttime="20191113 20:03:19.488"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:03:25.409" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 20:03:25.409" starttime="20191113 20:03:25.408"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:25.411" starttime="20191113 20:03:25.410"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:03:25.412" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:03:26.616" level="INFO">Read output: Last login: Wed Nov 13 20:03:05 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:03:26.617" starttime="20191113 20:03:25.411"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:26.617" starttime="20191113 20:03:25.409"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 20:03:26.618" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 20:03:28.766" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:03:28.767" starttime="20191113 20:03:26.618"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 20:03:28.768" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:03:28.864" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:03:28.865" level="INFO">${startupMsg} = hadoop     631  386  0.0 34481572 231796 ?     Sl   20:03   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 20:03:28.865" starttime="20191113 20:03:28.767"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:03:28.898" starttime="20191113 20:03:28.865"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:28.899" starttime="20191113 20:03:28.898"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:28.899" starttime="20191113 20:03:25.408"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:28.899" starttime="20191113 20:03:03.732"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:03:28.902" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:03:30.840" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:03:30.840" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:30.840" starttime="20191113 20:03:28.900"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:03:30.841" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:30.841" starttime="20191113 20:03:30.841"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:03:30.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:03:30.842" starttime="20191113 20:03:30.841"></status>
</kw>
<msg timestamp="20191113 20:03:30.842" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:30.842" starttime="20191113 20:03:28.900"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 20:03:30.843" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:30.843" starttime="20191113 20:03:30.842"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:30.843" starttime="20191113 20:03:30.843"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:30.844" starttime="20191113 20:03:30.843"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 20:03:30.844" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 20:03:30.844" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:30.844" starttime="20191113 20:03:30.844"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 20:03:30.845" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 20:03:30.845" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 20:03:30.845" starttime="20191113 20:03:30.845"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 20:03:30.846" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 20:03:30.846" starttime="20191113 20:03:30.845"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 20:03:30.846" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 20:03:30.846" starttime="20191113 20:03:30.846"></status>
</kw>
<msg timestamp="20191113 20:03:30.847" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 20:03:30.847" starttime="20191113 20:03:28.899"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:03:30.848" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 20:03:30.848" starttime="20191113 20:03:30.847"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:30.850" starttime="20191113 20:03:30.849"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:03:30.850" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:03:32.054" level="INFO">Read output: Last login: Wed Nov 13 20:03:02 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:03:32.054" starttime="20191113 20:03:30.850"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:32.054" starttime="20191113 20:03:30.848"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 20:03:32.055" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 20:03:33.172" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:03:33.172" starttime="20191113 20:03:32.055"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 20:03:33.173" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:03:33.270" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:03:33.270" level="INFO">${shutdownMsg} = hadoop    1109  0.0  0.0   9556  1168 ?        Ss   20:03   0:00 bash -c sudo ps aux | grep om
hadoop    1111  0.0  0.0   9088   668 ?        S    20:03   0:00 grep om</msg>
<status status="PASS" endtime="20191113 20:03:33.270" starttime="20191113 20:03:33.172"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:03:33.335" starttime="20191113 20:03:33.271"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:33.336" starttime="20191113 20:03:33.335"></status>
</kw>
<msg timestamp="20191113 20:03:33.337" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 20:03:33.337" starttime="20191113 20:03:30.847"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:03:33.341" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:03:35.385" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:03:35.385" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:35.385" starttime="20191113 20:03:33.338"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:03:35.386" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:35.386" starttime="20191113 20:03:35.385"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:03:35.387" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:03:35.387" starttime="20191113 20:03:35.386"></status>
</kw>
<msg timestamp="20191113 20:03:35.387" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:35.387" starttime="20191113 20:03:33.338"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 20:03:35.387" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:35.388" starttime="20191113 20:03:35.387"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:35.388" starttime="20191113 20:03:35.388"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:35.389" starttime="20191113 20:03:35.388"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 20:03:35.389" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 20:03:35.389" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:35.389" starttime="20191113 20:03:35.389"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 20:03:35.390" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 20:03:35.390" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 20:03:35.390" starttime="20191113 20:03:35.389"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 20:03:35.391" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 20:03:35.391" starttime="20191113 20:03:35.390"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 20:03:35.391" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 20:03:35.391" starttime="20191113 20:03:35.391"></status>
</kw>
<msg timestamp="20191113 20:03:35.391" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191113 20:03:35.391" starttime="20191113 20:03:33.337"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:35.392" starttime="20191113 20:03:35.392"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 20:03:35.393" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191113 20:03:35.393" starttime="20191113 20:03:35.393"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 20:03:35.394" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191113 20:03:35.394" starttime="20191113 20:03:35.393"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 20:03:35.395" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191113 20:03:35.395" starttime="20191113 20:03:35.394"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:03:35.396" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:03:35.396" starttime="20191113 20:03:35.395"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:03:35.399" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:03:39.501" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:03:39.501" level="INFO">${output} = 2019-11-13 20:03:38 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 20:03:38 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 20:03:39.501" starttime="20191113 20:03:35.397"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:03:39.502" level="INFO">2019-11-13 20:03:38 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 20:03:38 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 20:03:38 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 20:03:39.502" starttime="20191113 20:03:39.501"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:03:39.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:03:39.503" starttime="20191113 20:03:39.502"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:39.503" starttime="20191113 20:03:35.396"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:03:39.506" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:03:41.384" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:03:41.384" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:03:41.384" starttime="20191113 20:03:39.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:03:41.385" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:03:41.385" starttime="20191113 20:03:41.385"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:03:41.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:03:41.386" starttime="20191113 20:03:41.386"></status>
</kw>
<msg timestamp="20191113 20:03:41.387" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:03:41.387" starttime="20191113 20:03:39.503"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:41.387" starttime="20191113 20:03:41.387"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:03:41.388" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:03:41.388" starttime="20191113 20:03:41.388"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:41.388" starttime="20191113 20:03:35.392"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:03:41.390" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 20:03:41.390" starttime="20191113 20:03:41.389"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:41.393" starttime="20191113 20:03:41.392"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:03:41.393" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:03:42.593" level="INFO">Read output: Last login: Wed Nov 13 20:03:31 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:03:42.593" starttime="20191113 20:03:41.393"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:42.594" starttime="20191113 20:03:41.391"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 20:03:42.595" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 20:03:44.754" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:03:44.754" starttime="20191113 20:03:42.594"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 20:03:44.755" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:03:44.830" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:03:44.831" level="INFO">${startupMsg} = hadoop    1160  354  0.0 34478016 229544 ?     Sl   20:03   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 20:03:44.831" starttime="20191113 20:03:44.755"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:03:44.869" starttime="20191113 20:03:44.831"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:44.870" starttime="20191113 20:03:44.869"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:44.870" starttime="20191113 20:03:41.389"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:44.870" starttime="20191113 20:03:28.899"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:03:44.874" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:03:46.784" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:03:46.784" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:46.784" starttime="20191113 20:03:44.872"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:03:46.786" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:46.786" starttime="20191113 20:03:46.785"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:03:46.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:03:46.787" starttime="20191113 20:03:46.786"></status>
</kw>
<msg timestamp="20191113 20:03:46.788" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:46.788" starttime="20191113 20:03:44.871"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 20:03:46.789" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:46.789" starttime="20191113 20:03:46.788"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:46.790" starttime="20191113 20:03:46.789"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:46.791" starttime="20191113 20:03:46.790"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 20:03:46.792" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 20:03:46.793" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 20:03:46.793" starttime="20191113 20:03:46.791"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 20:03:46.794" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 20:03:46.794" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 20:03:46.794" starttime="20191113 20:03:46.793"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 20:03:46.795" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 20:03:46.795" starttime="20191113 20:03:46.794"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 20:03:46.796" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 20:03:46.796" starttime="20191113 20:03:46.795"></status>
</kw>
<msg timestamp="20191113 20:03:46.797" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 20:03:46.797" starttime="20191113 20:03:44.871"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:03:46.799" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 20:03:46.799" starttime="20191113 20:03:46.798"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:46.800" starttime="20191113 20:03:46.799"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:03:46.801" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:03:47.999" level="INFO">Read output: Last login: Wed Nov 13 20:01:54 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:03:47.999" starttime="20191113 20:03:46.801"></status>
</kw>
<status status="PASS" endtime="20191113 20:03:47.999" starttime="20191113 20:03:46.799"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 20:03:48.000" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 20:03:49.127" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:03:49.127" starttime="20191113 20:03:48.000"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 20:03:49.128" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:03:49.192" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:03:49.193" level="INFO">${shutdownMsg} = hadoop    1082  0.0  0.0   9556  1164 ?        Ss   20:03   0:00 bash -c sudo ps aux | grep om
hadoop    1084  0.0  0.0   9088   672 ?        S    20:03   0:00 grep om</msg>
<status status="PASS" endtime="20191113 20:03:49.193" starttime="20191113 20:03:49.128"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:03:49.226" starttime="20191113 20:03:49.193"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:03:49.226" starttime="20191113 20:03:49.226"></status>
</kw>
<msg timestamp="20191113 20:03:49.227" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 20:03:49.227" starttime="20191113 20:03:46.797"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:03:49.231" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:04:01.288" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:04:01.288" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:01.288" starttime="20191113 20:03:49.228"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:04:01.289" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:01.289" starttime="20191113 20:04:01.289"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:04:01.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:04:01.291" starttime="20191113 20:04:01.290"></status>
</kw>
<msg timestamp="20191113 20:04:01.291" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:01.291" starttime="20191113 20:03:49.227"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 20:04:01.292" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:01.292" starttime="20191113 20:04:01.292"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:01.293" starttime="20191113 20:04:01.293"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:01.294" starttime="20191113 20:04:01.294"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 20:04:01.295" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 20:04:01.295" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:01.296" starttime="20191113 20:04:01.295"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 20:04:01.297" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191113 20:04:01.297" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 20:04:01.297" starttime="20191113 20:04:01.296"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 20:04:01.298" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 20:04:01.298" starttime="20191113 20:04:01.297"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 20:04:01.299" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191113 20:04:01.299" starttime="20191113 20:04:01.298"></status>
</kw>
<msg timestamp="20191113 20:04:01.300" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191113 20:04:01.300" starttime="20191113 20:03:49.227"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:01.301" starttime="20191113 20:04:01.300"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 20:04:01.303" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191113 20:04:01.303" starttime="20191113 20:04:01.303"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 20:04:01.305" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191113 20:04:01.305" starttime="20191113 20:04:01.304"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 20:04:01.306" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191113 20:04:01.306" starttime="20191113 20:04:01.305"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:04:01.308" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:04:01.309" starttime="20191113 20:04:01.306"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:04:01.313" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:04:15.898" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:04:15.899" level="INFO">${output} = 2019-11-13 20:04:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191113 20:04:15.899" starttime="20191113 20:04:01.310"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:04:15.900" level="INFO">2019-11-13 20:04:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:04:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:04:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:04:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:04:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:04:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:04:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:04:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:04:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:04:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 20:04:13 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-13 20:04:14 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 20:04:14 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 20:04:14 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 20:04:15.901" starttime="20191113 20:04:15.899"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:04:15.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:04:15.902" starttime="20191113 20:04:15.901"></status>
</kw>
<status status="PASS" endtime="20191113 20:04:15.902" starttime="20191113 20:04:01.309"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:04:15.905" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:04:28.245" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:04:28.245" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:04:28.246" starttime="20191113 20:04:15.903"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:04:28.247" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:04:28.248" starttime="20191113 20:04:28.246"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:04:28.249" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:04:28.249" starttime="20191113 20:04:28.248"></status>
</kw>
<msg timestamp="20191113 20:04:28.249" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:04:28.250" starttime="20191113 20:04:15.902"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:28.251" starttime="20191113 20:04:28.250"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:04:28.252" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:04:28.252" starttime="20191113 20:04:28.251"></status>
</kw>
<status status="PASS" endtime="20191113 20:04:28.252" starttime="20191113 20:04:01.301"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:04:28.255" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 20:04:28.255" starttime="20191113 20:04:28.254"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:28.257" starttime="20191113 20:04:28.256"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:04:28.258" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:04:29.446" level="INFO">Read output: Last login: Wed Nov 13 20:03:46 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:04:29.447" starttime="20191113 20:04:28.257"></status>
</kw>
<status status="PASS" endtime="20191113 20:04:29.447" starttime="20191113 20:04:28.255"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 20:04:29.448" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 20:04:31.609" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:04:31.610" starttime="20191113 20:04:29.448"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 20:04:31.611" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:04:31.708" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:04:31.708" level="INFO">${startupMsg} = hadoop    1133  363  0.0 34484756 228528 ?     Sl   20:04   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 20:04:31.709" starttime="20191113 20:04:31.610"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:04:31.773" starttime="20191113 20:04:31.709"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:31.775" starttime="20191113 20:04:31.774"></status>
</kw>
<status status="PASS" endtime="20191113 20:04:31.775" starttime="20191113 20:04:28.253"></status>
</kw>
<status status="PASS" endtime="20191113 20:04:31.775" starttime="20191113 20:03:44.871"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:04:31.780" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:04:33.919" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:04:33.919" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:33.919" starttime="20191113 20:04:31.777"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:04:33.920" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:33.920" starttime="20191113 20:04:33.920"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:04:33.921" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:04:33.921" starttime="20191113 20:04:33.920"></status>
</kw>
<msg timestamp="20191113 20:04:33.921" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:33.921" starttime="20191113 20:04:31.776"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 20:04:33.922" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:33.922" starttime="20191113 20:04:33.921"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:33.923" starttime="20191113 20:04:33.922"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:33.923" starttime="20191113 20:04:33.923"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 20:04:33.924" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 20:04:33.924" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:33.924" starttime="20191113 20:04:33.923"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 20:04:33.924" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191113 20:04:33.924" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 20:04:33.925" starttime="20191113 20:04:33.924"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 20:04:33.925" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 20:04:33.925" starttime="20191113 20:04:33.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 20:04:33.926" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191113 20:04:33.926" starttime="20191113 20:04:33.925"></status>
</kw>
<msg timestamp="20191113 20:04:33.926" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 20:04:33.926" starttime="20191113 20:04:31.775"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:04:33.927" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 20:04:33.927" starttime="20191113 20:04:33.927"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:33.928" starttime="20191113 20:04:33.928"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:04:33.929" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:04:35.118" level="INFO">Read output: Last login: Wed Nov 13 20:03:25 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:04:35.118" starttime="20191113 20:04:33.929"></status>
</kw>
<status status="PASS" endtime="20191113 20:04:35.119" starttime="20191113 20:04:33.927"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 20:04:35.120" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 20:04:36.290" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:04:36.291" starttime="20191113 20:04:35.119"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 20:04:36.292" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:04:36.368" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:04:36.368" level="INFO">${shutdownMsg} = hadoop    1131  0.0  0.0   9556  1168 ?        Ss   20:04   0:00 bash -c sudo ps aux | grep om
hadoop    1133  0.0  0.0   9088   668 ?        S    20:04   0:00 grep om</msg>
<status status="PASS" endtime="20191113 20:04:36.368" starttime="20191113 20:04:36.291"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:04:36.402" starttime="20191113 20:04:36.369"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:36.403" starttime="20191113 20:04:36.402"></status>
</kw>
<msg timestamp="20191113 20:04:36.403" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 20:04:36.403" starttime="20191113 20:04:33.926"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:04:36.409" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:04:38.444" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:04:38.444" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:38.444" starttime="20191113 20:04:36.405"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:04:38.445" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:38.445" starttime="20191113 20:04:38.445"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:04:38.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:04:38.446" starttime="20191113 20:04:38.446"></status>
</kw>
<msg timestamp="20191113 20:04:38.447" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:38.447" starttime="20191113 20:04:36.404"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 20:04:38.447" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:38.447" starttime="20191113 20:04:38.447"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:38.448" starttime="20191113 20:04:38.448"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:38.448" starttime="20191113 20:04:38.448"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 20:04:38.449" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 20:04:38.449" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:38.449" starttime="20191113 20:04:38.449"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 20:04:38.450" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 20:04:38.450" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 20:04:38.450" starttime="20191113 20:04:38.449"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 20:04:38.451" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 20:04:38.451" starttime="20191113 20:04:38.450"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 20:04:38.451" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 20:04:38.451" starttime="20191113 20:04:38.451"></status>
</kw>
<msg timestamp="20191113 20:04:38.452" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191113 20:04:38.452" starttime="20191113 20:04:36.403"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:38.452" starttime="20191113 20:04:38.452"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 20:04:38.453" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191113 20:04:38.453" starttime="20191113 20:04:38.453"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 20:04:38.454" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191113 20:04:38.454" starttime="20191113 20:04:38.454"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 20:04:38.455" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191113 20:04:38.455" starttime="20191113 20:04:38.454"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:04:38.456" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:04:38.457" starttime="20191113 20:04:38.455"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:04:38.459" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:04:43.025" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:04:43.025" level="INFO">${output} = 2019-11-13 20:04:41 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 20:04:41 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 20:04:43.025" starttime="20191113 20:04:38.457"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:04:43.027" level="INFO">2019-11-13 20:04:41 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 20:04:41 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 20:04:41 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 20:04:43.027" starttime="20191113 20:04:43.026"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:04:43.028" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:04:43.028" starttime="20191113 20:04:43.027"></status>
</kw>
<status status="PASS" endtime="20191113 20:04:43.028" starttime="20191113 20:04:38.457"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:04:43.032" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:04:45.421" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:04:45.421" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:04:45.421" starttime="20191113 20:04:43.030"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:04:45.422" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:04:45.423" starttime="20191113 20:04:45.422"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:04:45.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:04:45.423" starttime="20191113 20:04:45.423"></status>
</kw>
<msg timestamp="20191113 20:04:45.424" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:04:45.424" starttime="20191113 20:04:43.029"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:45.425" starttime="20191113 20:04:45.424"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:04:45.426" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:04:45.427" starttime="20191113 20:04:45.425"></status>
</kw>
<status status="PASS" endtime="20191113 20:04:45.427" starttime="20191113 20:04:38.452"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:04:45.429" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 20:04:45.429" starttime="20191113 20:04:45.428"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:45.430" starttime="20191113 20:04:45.429"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:04:45.431" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:04:46.619" level="INFO">Read output: Last login: Wed Nov 13 20:04:34 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:04:46.620" starttime="20191113 20:04:45.430"></status>
</kw>
<status status="PASS" endtime="20191113 20:04:46.620" starttime="20191113 20:04:45.429"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 20:04:46.621" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 20:04:48.792" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:04:48.792" starttime="20191113 20:04:46.621"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 20:04:48.793" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:04:48.859" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:04:48.859" level="INFO">${startupMsg} = hadoop    1182  375  0.0 34479932 226804 ?     Sl   20:04   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 20:04:48.859" starttime="20191113 20:04:48.793"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:04:48.892" starttime="20191113 20:04:48.859"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:48.893" starttime="20191113 20:04:48.892"></status>
</kw>
<status status="PASS" endtime="20191113 20:04:48.893" starttime="20191113 20:04:45.427"></status>
</kw>
<status status="PASS" endtime="20191113 20:04:48.893" starttime="20191113 20:04:31.775"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:04:48.897" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:04:51.050" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:04:51.050" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:51.050" starttime="20191113 20:04:48.894"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:04:51.052" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:51.052" starttime="20191113 20:04:51.051"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:04:51.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:04:51.053" starttime="20191113 20:04:51.052"></status>
</kw>
<msg timestamp="20191113 20:04:51.054" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:51.054" starttime="20191113 20:04:48.894"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 20:04:51.054" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:51.055" starttime="20191113 20:04:51.054"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:51.056" starttime="20191113 20:04:51.055"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:51.057" starttime="20191113 20:04:51.056"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 20:04:51.058" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 20:04:51.058" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:51.058" starttime="20191113 20:04:51.057"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 20:04:51.059" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 20:04:51.059" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 20:04:51.059" starttime="20191113 20:04:51.058"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 20:04:51.060" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 20:04:51.060" starttime="20191113 20:04:51.059"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 20:04:51.061" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 20:04:51.061" starttime="20191113 20:04:51.060"></status>
</kw>
<msg timestamp="20191113 20:04:51.061" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 20:04:51.061" starttime="20191113 20:04:48.893"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:04:51.063" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 20:04:51.064" starttime="20191113 20:04:51.063"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:51.066" starttime="20191113 20:04:51.065"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:04:51.067" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:04:52.270" level="INFO">Read output: Last login: Wed Nov 13 20:03:41 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:04:52.271" starttime="20191113 20:04:51.066"></status>
</kw>
<status status="PASS" endtime="20191113 20:04:52.271" starttime="20191113 20:04:51.064"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 20:04:52.272" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 20:04:53.431" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:04:53.431" starttime="20191113 20:04:52.271"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 20:04:53.432" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:04:53.541" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:04:53.541" level="INFO">${shutdownMsg} = hadoop    1672  0.0  0.0   9556  1168 ?        Ss   20:04   0:00 bash -c sudo ps aux | grep om
hadoop    1674  0.0  0.0   9088   668 ?        S    20:04   0:00 grep om</msg>
<status status="PASS" endtime="20191113 20:04:53.541" starttime="20191113 20:04:53.432"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:04:53.607" starttime="20191113 20:04:53.542"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:53.608" starttime="20191113 20:04:53.607"></status>
</kw>
<msg timestamp="20191113 20:04:53.608" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 20:04:53.608" starttime="20191113 20:04:51.062"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:04:53.613" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:04:55.728" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:04:55.729" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:55.729" starttime="20191113 20:04:53.610"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:04:55.730" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:55.730" starttime="20191113 20:04:55.729"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:04:55.731" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:04:55.731" starttime="20191113 20:04:55.730"></status>
</kw>
<msg timestamp="20191113 20:04:55.732" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:55.732" starttime="20191113 20:04:53.609"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 20:04:55.732" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:55.732" starttime="20191113 20:04:55.732"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:55.733" starttime="20191113 20:04:55.732"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:55.734" starttime="20191113 20:04:55.733"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 20:04:55.734" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 20:04:55.735" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191113 20:04:55.735" starttime="20191113 20:04:55.734"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 20:04:55.735" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191113 20:04:55.735" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 20:04:55.735" starttime="20191113 20:04:55.735"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 20:04:55.736" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 20:04:55.736" starttime="20191113 20:04:55.736"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 20:04:55.737" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191113 20:04:55.737" starttime="20191113 20:04:55.736"></status>
</kw>
<msg timestamp="20191113 20:04:55.737" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191113 20:04:55.737" starttime="20191113 20:04:53.609"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 20:04:55.738" starttime="20191113 20:04:55.737"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 20:04:55.739" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191113 20:04:55.739" starttime="20191113 20:04:55.739"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 20:04:55.740" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191113 20:04:55.740" starttime="20191113 20:04:55.740"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 20:04:55.741" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191113 20:04:55.741" starttime="20191113 20:04:55.741"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:04:55.743" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:04:55.743" starttime="20191113 20:04:55.741"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:04:55.746" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:05:00.376" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:05:00.376" level="INFO">${output} = 2019-11-13 20:04:58 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 20:04:58 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 20:05:00.376" starttime="20191113 20:04:55.744"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:05:00.377" level="INFO">2019-11-13 20:04:58 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 20:04:58 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 20:04:58 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 20:05:00.377" starttime="20191113 20:05:00.376"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:05:00.378" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:05:00.378" starttime="20191113 20:05:00.377"></status>
</kw>
<status status="PASS" endtime="20191113 20:05:00.378" starttime="20191113 20:04:55.743"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 20:05:00.381" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 20:05:02.488" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 20:05:02.488" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191113 20:05:02.488" starttime="20191113 20:05:00.379"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 20:05:02.490" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 20:05:02.490" starttime="20191113 20:05:02.489"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 20:05:02.491" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 20:05:02.492" starttime="20191113 20:05:02.491"></status>
</kw>
<msg timestamp="20191113 20:05:02.492" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191113 20:05:02.492" starttime="20191113 20:05:00.378"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:05:02.493" starttime="20191113 20:05:02.493"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 20:05:02.494" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 20:05:02.494" starttime="20191113 20:05:02.493"></status>
</kw>
<status status="PASS" endtime="20191113 20:05:02.495" starttime="20191113 20:04:55.738"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 20:05:02.497" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 20:05:02.497" starttime="20191113 20:05:02.496"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 20:05:02.498" starttime="20191113 20:05:02.498"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 20:05:02.499" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 20:05:03.704" level="INFO">Read output: Last login: Wed Nov 13 20:04:51 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 20:05:03.705" starttime="20191113 20:05:02.499"></status>
</kw>
<status status="PASS" endtime="20191113 20:05:03.705" starttime="20191113 20:05:02.497"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 20:05:03.706" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 20:05:05.846" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 20:05:05.846" starttime="20191113 20:05:03.705"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 20:05:05.848" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 20:05:05.914" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 20:05:05.915" level="INFO">${startupMsg} = hadoop    1724  242  0.0 34480912 233456 ?     Sl   20:05   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 20:05:05.915" starttime="20191113 20:05:05.847"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 20:05:05.980" starttime="20191113 20:05:05.915"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 20:05:05.981" starttime="20191113 20:05:05.980"></status>
</kw>
<status status="PASS" endtime="20191113 20:05:05.981" starttime="20191113 20:05:02.495"></status>
</kw>
<status status="PASS" endtime="20191113 20:05:05.982" starttime="20191113 20:04:48.893"></status>
</kw>
<status status="PASS" endtime="20191113 20:05:05.982" starttime="20191113 20:03:03.731"></status>
</kw>
<status status="PASS" endtime="20191113 20:05:05.982" critical="yes" starttime="20191113 20:03:03.731"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191113 20:05:05.983" starttime="20191113 20:00:47.515"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
