<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191111 08:34:23.924" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:34:24.107" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:34:26.967" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:34:26.967" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191111 08:34:26.967" starttime="20191111 08:34:24.105"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:34:26.968" level="INFO"></msg>
<status status="PASS" endtime="20191111 08:34:26.968" starttime="20191111 08:34:26.967"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:34:26.969" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:34:26.969" starttime="20191111 08:34:26.968"></status>
</kw>
<status status="PASS" endtime="20191111 08:34:26.969" starttime="20191111 08:34:24.104"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:34:26.975" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:34:29.230" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:34:29.230" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191111 08:34:29.230" starttime="20191111 08:34:26.973"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:34:29.232" level="INFO"></msg>
<status status="PASS" endtime="20191111 08:34:29.232" starttime="20191111 08:34:29.231"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:34:29.233" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:34:29.233" starttime="20191111 08:34:29.233"></status>
</kw>
<status status="PASS" endtime="20191111 08:34:29.234" starttime="20191111 08:34:26.969"></status>
</kw>
<status status="PASS" endtime="20191111 08:34:29.234" starttime="20191111 08:34:24.104"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 08:34:29.236" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191111 08:34:29.236" starttime="20191111 08:34:29.235"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 08:34:29.237" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191111 08:34:29.238" starttime="20191111 08:34:29.237"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 08:34:29.239" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191111 08:34:29.239" starttime="20191111 08:34:29.238"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 08:34:29.252" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 08:34:29.252" starttime="20191111 08:34:29.239"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:34:29.256" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:34:34.206" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:34:34.206" level="INFO">${output} = 2019-11-11 08:34:32 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 08:34:32 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191111 08:34:34.206" starttime="20191111 08:34:29.254"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:34:34.208" level="INFO">2019-11-11 08:34:32 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 08:34:32 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 08:34:32 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 08:34:34.208" starttime="20191111 08:34:34.207"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:34:34.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:34:34.209" starttime="20191111 08:34:34.209"></status>
</kw>
<status status="PASS" endtime="20191111 08:34:34.210" starttime="20191111 08:34:29.253"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:34:34.214" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:34:36.501" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:34:36.501" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191111 08:34:36.501" starttime="20191111 08:34:34.212"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:34:36.503" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191111 08:34:36.503" starttime="20191111 08:34:36.502"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:34:36.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:34:36.504" starttime="20191111 08:34:36.503"></status>
</kw>
<msg timestamp="20191111 08:34:36.505" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191111 08:34:36.505" starttime="20191111 08:34:34.210"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:34:36.506" starttime="20191111 08:34:36.505"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 08:34:36.507" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 08:34:36.507" starttime="20191111 08:34:36.506"></status>
</kw>
<status status="PASS" endtime="20191111 08:34:36.507" starttime="20191111 08:34:29.234"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:34:36.512" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:34:38.692" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:34:38.692" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:34:38.692" starttime="20191111 08:34:36.509"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:34:38.694" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:34:38.694" starttime="20191111 08:34:38.693"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:34:38.695" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:34:38.695" starttime="20191111 08:34:38.694"></status>
</kw>
<msg timestamp="20191111 08:34:38.696" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:34:38.696" starttime="20191111 08:34:36.508"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 08:34:38.697" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:34:38.697" starttime="20191111 08:34:38.696"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 08:34:38.699" starttime="20191111 08:34:38.697"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 08:34:38.700" starttime="20191111 08:34:38.699"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 08:34:38.701" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 08:34:38.701" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:34:38.701" starttime="20191111 08:34:38.700"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 08:34:38.702" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 08:34:38.702" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 08:34:38.702" starttime="20191111 08:34:38.701"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 08:34:38.703" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 08:34:38.703" starttime="20191111 08:34:38.703"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 08:34:38.704" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 08:34:38.704" starttime="20191111 08:34:38.704"></status>
</kw>
<msg timestamp="20191111 08:34:38.705" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 08:34:38.705" starttime="20191111 08:34:36.508"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:34:38.707" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 08:34:38.707" starttime="20191111 08:34:38.706"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:34:38.709" starttime="20191111 08:34:38.708"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:34:38.710" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:34:39.987" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:34:39.987" starttime="20191111 08:34:38.709"></status>
</kw>
<status status="PASS" endtime="20191111 08:34:39.988" starttime="20191111 08:34:38.707"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 08:34:39.989" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 08:34:50.170" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 08:34:50.171" starttime="20191111 08:34:39.988"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 08:34:50.172" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 08:34:50.281" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:34:50.282" level="INFO">${shutdownMsg} = hadoop     452  0.0  0.0   9556  1168 ?        Ss   08:34   0:00 bash -c sudo ps aux | grep om
hadoop     454  0.0  0.0   9088   668 ?        S    08:34   0:00 grep om</msg>
<status status="PASS" endtime="20191111 08:34:50.282" starttime="20191111 08:34:50.172"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 08:34:50.315" starttime="20191111 08:34:50.282"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 08:34:50.316" starttime="20191111 08:34:50.315"></status>
</kw>
<msg timestamp="20191111 08:34:50.317" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 08:34:50.317" starttime="20191111 08:34:38.705"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:34:50.321" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:35:02.558" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:35:02.559" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:35:02.559" starttime="20191111 08:34:50.318"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:35:02.561" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:35:02.561" starttime="20191111 08:35:02.560"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:35:02.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:35:02.562" starttime="20191111 08:35:02.561"></status>
</kw>
<msg timestamp="20191111 08:35:02.563" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:35:02.563" starttime="20191111 08:34:50.318"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 08:35:02.564" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:35:02.564" starttime="20191111 08:35:02.563"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 08:35:02.565" starttime="20191111 08:35:02.564"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 08:35:02.566" starttime="20191111 08:35:02.566"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 08:35:02.567" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 08:35:02.567" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:35:02.567" starttime="20191111 08:35:02.567"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 08:35:02.568" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 08:35:02.569" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 08:35:02.569" starttime="20191111 08:35:02.568"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 08:35:02.570" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 08:35:02.570" starttime="20191111 08:35:02.569"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 08:35:02.571" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 08:35:02.571" starttime="20191111 08:35:02.570"></status>
</kw>
<msg timestamp="20191111 08:35:02.571" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191111 08:35:02.571" starttime="20191111 08:34:50.317"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 08:35:02.572" starttime="20191111 08:35:02.572"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 08:35:02.574" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191111 08:35:02.574" starttime="20191111 08:35:02.573"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 08:35:02.576" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191111 08:35:02.576" starttime="20191111 08:35:02.575"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 08:35:02.577" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191111 08:35:02.577" starttime="20191111 08:35:02.576"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 08:35:02.579" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 08:35:02.579" starttime="20191111 08:35:02.577"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:35:02.583" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:35:17.631" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:35:17.631" level="INFO">${output} = 2019-11-11 08:35:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191111 08:35:17.631" starttime="20191111 08:35:02.581"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:35:17.633" level="INFO">2019-11-11 08:35:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:35:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:35:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:35:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:35:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:35:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:35:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:35:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:35:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:35:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:35:15 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 08:35:15 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 08:35:15 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 08:35:17.633" starttime="20191111 08:35:17.632"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:35:17.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:35:17.635" starttime="20191111 08:35:17.634"></status>
</kw>
<status status="PASS" endtime="20191111 08:35:17.636" starttime="20191111 08:35:02.580"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:35:17.640" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:35:29.937" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:35:29.938" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191111 08:35:29.938" starttime="20191111 08:35:17.637"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:35:29.939" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191111 08:35:29.940" starttime="20191111 08:35:29.939"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:35:29.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:35:29.941" starttime="20191111 08:35:29.940"></status>
</kw>
<msg timestamp="20191111 08:35:29.941" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191111 08:35:29.941" starttime="20191111 08:35:17.636"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:35:29.942" starttime="20191111 08:35:29.942"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 08:35:29.944" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 08:35:29.944" starttime="20191111 08:35:29.943"></status>
</kw>
<status status="PASS" endtime="20191111 08:35:29.945" starttime="20191111 08:35:02.573"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:35:29.948" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 08:35:29.948" starttime="20191111 08:35:29.946"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:35:29.950" starttime="20191111 08:35:29.949"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:35:29.951" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:35:31.141" level="INFO">Read output: Last login: Mon Nov 11 08:34:38 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:35:31.141" starttime="20191111 08:35:29.951"></status>
</kw>
<status status="PASS" endtime="20191111 08:35:31.142" starttime="20191111 08:35:29.948"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 08:35:31.143" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 08:35:33.342" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 08:35:33.342" starttime="20191111 08:35:31.142"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 08:35:33.343" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 08:35:33.441" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:35:33.442" level="INFO">${startupMsg} = hadoop     505  374  0.0 34484260 220748 ?     Sl   08:35   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 08:35:33.442" starttime="20191111 08:35:33.343"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 08:35:33.507" starttime="20191111 08:35:33.442"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 08:35:33.509" starttime="20191111 08:35:33.508"></status>
</kw>
<status status="PASS" endtime="20191111 08:35:33.509" starttime="20191111 08:35:29.945"></status>
</kw>
<status status="PASS" endtime="20191111 08:35:33.509" critical="yes" starttime="20191111 08:34:24.103"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191111 08:35:33.513" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191111 08:35:33.513" starttime="20191111 08:35:33.511"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191111 08:35:33.515" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191111 08:35:33.516" starttime="20191111 08:35:33.514"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:35:33.517" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 08:35:33.518" starttime="20191111 08:35:33.517"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:35:33.519" starttime="20191111 08:35:33.518"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:35:33.520" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:35:34.724" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:35:34.725" starttime="20191111 08:35:33.520"></status>
</kw>
<status status="PASS" endtime="20191111 08:35:34.725" starttime="20191111 08:35:33.518"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 08:35:34.725" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 08:35:44.854" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 08:35:44.854" starttime="20191111 08:35:34.725"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 08:35:44.856" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 08:35:44.964" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:35:44.964" level="INFO">${shutdownMsg} = hadoop     496  0.0  0.0   9556  1168 ?        Ss   08:35   0:00 bash -c sudo ps aux | grep om
hadoop     498  0.0  0.0   9088   668 ?        S    08:35   0:00 grep om</msg>
<status status="PASS" endtime="20191111 08:35:44.965" starttime="20191111 08:35:44.855"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 08:35:45.030" starttime="20191111 08:35:44.965"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 08:35:45.031" starttime="20191111 08:35:45.030"></status>
</kw>
<status status="PASS" endtime="20191111 08:35:45.031" starttime="20191111 08:35:33.516"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:35:45.033" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 08:35:45.033" starttime="20191111 08:35:45.032"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:35:45.035" starttime="20191111 08:35:45.034"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:35:45.036" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:35:46.241" level="INFO">Read output: Last login: Mon Nov 11 08:35:33 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:35:46.241" starttime="20191111 08:35:45.035"></status>
</kw>
<status status="PASS" endtime="20191111 08:35:46.242" starttime="20191111 08:35:45.033"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191111 08:35:46.243" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191111 08:35:46.269" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:35:46.269" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 08:35:46.269" starttime="20191111 08:35:46.242"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191111 08:35:46.270" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 08:35:46.270" starttime="20191111 08:35:46.270"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191111 08:35:46.272" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191111 08:35:46.272" starttime="20191111 08:35:46.271"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191111 08:35:46.322" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191111 08:35:46.334" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191111 08:35:46.334" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191111 08:35:46.335" starttime="20191111 08:35:46.272"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191111 08:35:46.337" level="INFO">Length is 2</msg>
<msg timestamp="20191111 08:35:46.337" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191111 08:35:46.337" starttime="20191111 08:35:46.335"></status>
</kw>
<msg timestamp="20191111 08:35:46.338" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191111 08:35:46.338" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191111 08:35:46.338" starttime="20191111 08:35:45.031"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:35:46.343" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:35:48.610" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:35:48.611" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 08:35:48.611" starttime="20191111 08:35:46.340"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:35:48.612" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 08:35:48.613" starttime="20191111 08:35:48.612"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:35:48.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:35:48.614" starttime="20191111 08:35:48.613"></status>
</kw>
<msg timestamp="20191111 08:35:48.614" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 08:35:48.614" starttime="20191111 08:35:46.339"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 08:35:48.615" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 08:35:48.615" starttime="20191111 08:35:48.614"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 08:35:48.616" starttime="20191111 08:35:48.615"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 08:35:48.617" starttime="20191111 08:35:48.616"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 08:35:48.617" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 08:35:48.618" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191111 08:35:48.618" starttime="20191111 08:35:48.617"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 08:35:48.619" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191111 08:35:48.619" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 08:35:48.619" starttime="20191111 08:35:48.618"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 08:35:48.620" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 08:35:48.620" starttime="20191111 08:35:48.619"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 08:35:48.620" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191111 08:35:48.621" starttime="20191111 08:35:48.620"></status>
</kw>
<msg timestamp="20191111 08:35:48.621" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 08:35:48.621" starttime="20191111 08:35:46.338"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191111 08:35:48.624" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191111 08:35:48.624" starttime="20191111 08:35:48.622"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 08:35:48.627" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191111 08:35:48.627" starttime="20191111 08:35:48.626"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 08:35:48.627" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191111 08:35:48.628" starttime="20191111 08:35:48.627"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:35:48.632" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:35:53.172" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:35:53.172" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 08:35:53.172" starttime="20191111 08:35:48.630"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:35:53.174" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 08:35:53.174" starttime="20191111 08:35:53.173"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:35:53.174" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:35:53.174" starttime="20191111 08:35:53.174"></status>
</kw>
<status status="PASS" endtime="20191111 08:35:53.175" starttime="20191111 08:35:48.629"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:35:53.179" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:35:55.593" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:35:55.593" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573461350883,
  "modificationTime": 1573461352768,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 08:35:55.593" starttime="20191111 08:35:53.177"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:35:55.594" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573461350883,
  "modificationTime": 1573461352768,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103118363090812930,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 08:35:55.594" starttime="20191111 08:35:55.594"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:35:55.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:35:55.595" starttime="20191111 08:35:55.595"></status>
</kw>
<msg timestamp="20191111 08:35:55.595" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573461350883,
  "modificationTime": 1573461352768,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 08:35:55.596" starttime="20191111 08:35:53.175"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 08:35:55.596" starttime="20191111 08:35:55.596"></status>
</kw>
<status status="PASS" endtime="20191111 08:35:55.596" starttime="20191111 08:35:48.628"></status>
</kw>
<status status="PASS" endtime="20191111 08:35:55.596" starttime="20191111 08:35:48.626"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 08:35:55.597" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191111 08:35:55.597" starttime="20191111 08:35:55.597"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 08:35:55.598" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191111 08:35:55.598" starttime="20191111 08:35:55.597"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:35:55.601" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:36:00.099" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:36:00.100" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 08:36:00.100" starttime="20191111 08:35:55.599"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:36:00.101" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 08:36:00.101" starttime="20191111 08:36:00.100"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:36:00.102" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:36:00.102" starttime="20191111 08:36:00.102"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:00.103" starttime="20191111 08:35:55.599"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:36:00.107" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:36:02.489" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:36:02.490" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573461357849,
  "modificationTime": 1573461359690,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 08:36:02.490" starttime="20191111 08:36:00.104"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:36:02.492" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573461357849,
  "modificationTime": 1573461359690,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103118363547861000,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 08:36:02.492" starttime="20191111 08:36:02.491"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:36:02.493" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:36:02.493" starttime="20191111 08:36:02.492"></status>
</kw>
<msg timestamp="20191111 08:36:02.494" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573461357849,
  "modificationTime": 1573461359690,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 08:36:02.494" starttime="20191111 08:36:00.103"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:02.495" starttime="20191111 08:36:02.494"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:02.495" starttime="20191111 08:35:55.598"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:02.495" starttime="20191111 08:35:55.596"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 08:36:02.497" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191111 08:36:02.497" starttime="20191111 08:36:02.496"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 08:36:02.498" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191111 08:36:02.498" starttime="20191111 08:36:02.497"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:36:02.503" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:36:07.038" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:36:07.038" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 08:36:07.038" starttime="20191111 08:36:02.500"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:36:07.040" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 08:36:07.041" starttime="20191111 08:36:07.039"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:36:07.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:36:07.042" starttime="20191111 08:36:07.041"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:07.042" starttime="20191111 08:36:02.499"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:36:07.048" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:36:09.415" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:36:09.416" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573461364709,
  "modificationTime": 1573461366612,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 08:36:09.416" starttime="20191111 08:36:07.045"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:36:09.418" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573461364709,
  "modificationTime": 1573461366612,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103118363997503490,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 08:36:09.418" starttime="20191111 08:36:09.417"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:36:09.419" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:36:09.419" starttime="20191111 08:36:09.418"></status>
</kw>
<msg timestamp="20191111 08:36:09.420" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573461364709,
  "modificationTime": 1573461366612,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 08:36:09.420" starttime="20191111 08:36:07.043"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:09.421" starttime="20191111 08:36:09.420"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:09.421" starttime="20191111 08:36:02.498"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:09.421" starttime="20191111 08:36:02.495"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 08:36:09.423" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191111 08:36:09.423" starttime="20191111 08:36:09.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 08:36:09.424" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191111 08:36:09.424" starttime="20191111 08:36:09.423"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:36:09.429" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:36:14.332" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:36:14.332" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 08:36:14.333" starttime="20191111 08:36:09.426"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:36:14.334" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 08:36:14.334" starttime="20191111 08:36:14.333"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:36:14.335" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:36:14.335" starttime="20191111 08:36:14.334"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:14.335" starttime="20191111 08:36:09.425"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:36:14.339" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:36:16.897" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:36:16.897" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573461371749,
  "modificationTime": 1573461373916,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 08:36:16.897" starttime="20191111 08:36:14.337"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:36:16.899" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573461371749,
  "modificationTime": 1573461373916,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103118364458876930,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 08:36:16.899" starttime="20191111 08:36:16.898"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:36:16.900" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:36:16.900" starttime="20191111 08:36:16.899"></status>
</kw>
<msg timestamp="20191111 08:36:16.900" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573461371749,
  "modificationTime": 1573461373916,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 08:36:16.900" starttime="20191111 08:36:14.336"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:16.901" starttime="20191111 08:36:16.901"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:16.901" starttime="20191111 08:36:09.424"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:16.901" starttime="20191111 08:36:09.421"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 08:36:16.902" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 08:36:16.902" starttime="20191111 08:36:16.902"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 08:36:16.903" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 08:36:16.903" starttime="20191111 08:36:16.903"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:36:16.908" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:36:21.439" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:36:21.439" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 08:36:21.439" starttime="20191111 08:36:16.906"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:36:21.441" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 08:36:21.442" starttime="20191111 08:36:21.440"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:36:21.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:36:21.443" starttime="20191111 08:36:21.442"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:21.444" starttime="20191111 08:36:16.905"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:36:21.451" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:36:23.688" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:36:23.688" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573461379146,
  "modificationTime": 1573461381005,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 08:36:23.688" starttime="20191111 08:36:21.447"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:36:23.689" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573461379146,
  "modificationTime": 1573461381005,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103118364943646720,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 08:36:23.689" starttime="20191111 08:36:23.688"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:36:23.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:36:23.690" starttime="20191111 08:36:23.689"></status>
</kw>
<msg timestamp="20191111 08:36:23.690" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573461379146,
  "modificationTime": 1573461381005,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 08:36:23.690" starttime="20191111 08:36:21.444"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:23.691" starttime="20191111 08:36:23.691"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:23.691" starttime="20191111 08:36:16.904"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:23.691" starttime="20191111 08:36:16.901"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:23.691" starttime="20191111 08:35:48.625"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:23.692" starttime="20191111 08:35:48.625"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:36:23.693" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191111 08:36:23.693" starttime="20191111 08:36:23.692"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:23.694" starttime="20191111 08:36:23.694"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:36:23.695" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:36:24.895" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:36:24.896" starttime="20191111 08:36:23.695"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:24.896" starttime="20191111 08:36:23.693"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191111 08:36:24.897" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191111 08:36:24.912" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:36:24.912" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 08:36:24.912" starttime="20191111 08:36:24.896"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191111 08:36:24.913" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 08:36:24.914" starttime="20191111 08:36:24.913"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191111 08:36:24.915" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191111 08:36:24.915" starttime="20191111 08:36:24.914"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191111 08:36:24.993" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191111 08:36:25.003" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191111 08:36:25.004" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191111 08:36:25.004" starttime="20191111 08:36:24.915"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191111 08:36:25.005" level="INFO">Length is 3</msg>
<msg timestamp="20191111 08:36:25.005" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191111 08:36:25.005" starttime="20191111 08:36:25.004"></status>
</kw>
<msg timestamp="20191111 08:36:25.005" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191111 08:36:25.006" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191111 08:36:25.006" starttime="20191111 08:36:23.692"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191111 08:36:25.007" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191111 08:36:25.007" starttime="20191111 08:36:25.006"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:25.007" starttime="20191111 08:35:48.622"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:25.007" starttime="20191111 08:35:48.621"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:25.008" starttime="20191111 08:36:25.007"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:36:25.010" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 08:36:25.010" starttime="20191111 08:36:25.009"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:25.012" starttime="20191111 08:36:25.011"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:36:25.013" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:36:26.216" level="INFO">Read output: Last login: Mon Nov 11 08:35:45 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:36:26.216" starttime="20191111 08:36:25.012"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:26.217" starttime="20191111 08:36:25.010"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 08:36:26.218" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 08:36:28.399" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 08:36:28.399" starttime="20191111 08:36:26.217"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 08:36:28.400" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 08:36:28.508" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:36:28.509" level="INFO">${startupMsg} = hadoop     571  353  0.0 34475504 208084 ?     Sl   08:36   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 08:36:28.509" starttime="20191111 08:36:28.400"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 08:36:28.574" starttime="20191111 08:36:28.509"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:28.575" starttime="20191111 08:36:28.575"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:28.576" starttime="20191111 08:36:25.008"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:36:28.578" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 08:36:28.578" starttime="20191111 08:36:28.577"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:28.580" starttime="20191111 08:36:28.579"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:36:28.581" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:36:29.786" level="INFO">Read output: Last login: Mon Nov 11 08:36:25 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:36:29.786" starttime="20191111 08:36:28.580"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:29.786" starttime="20191111 08:36:28.579"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191111 08:36:29.787" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191111 08:36:29.802" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:36:29.802" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 08:36:29.802" starttime="20191111 08:36:29.786"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191111 08:36:29.803" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 08:36:29.803" starttime="20191111 08:36:29.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191111 08:36:29.804" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191111 08:36:29.804" starttime="20191111 08:36:29.804"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191111 08:36:29.882" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191111 08:36:29.891" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191111 08:36:29.891" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191111 08:36:29.891" starttime="20191111 08:36:29.805"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191111 08:36:29.892" level="INFO">Length is 2</msg>
<msg timestamp="20191111 08:36:29.892" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191111 08:36:29.892" starttime="20191111 08:36:29.891"></status>
</kw>
<msg timestamp="20191111 08:36:29.893" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191111 08:36:29.893" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191111 08:36:29.893" starttime="20191111 08:36:28.576"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:29.894" starttime="20191111 08:36:29.893"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191111 08:36:30.895" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191111 08:36:30.896" starttime="20191111 08:36:29.895"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:30.896" starttime="20191111 08:36:28.576"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:36:30.898" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 08:36:30.898" starttime="20191111 08:36:30.897"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:30.900" starttime="20191111 08:36:30.899"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:36:30.901" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:36:32.105" level="INFO">Read output: Last login: Mon Nov 11 08:36:28 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:36:32.106" starttime="20191111 08:36:30.900"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:32.106" starttime="20191111 08:36:30.898"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191111 08:36:32.108" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191111 08:36:32.134" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:36:32.134" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 08:36:32.134" starttime="20191111 08:36:32.107"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191111 08:36:32.136" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 08:36:32.136" starttime="20191111 08:36:32.135"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191111 08:36:32.137" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191111 08:36:32.137" starttime="20191111 08:36:32.136"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191111 08:36:32.186" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191111 08:36:32.198" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191111 08:36:32.198" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191111 08:36:32.198" starttime="20191111 08:36:32.138"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191111 08:36:32.200" level="INFO">Length is 3</msg>
<msg timestamp="20191111 08:36:32.200" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191111 08:36:32.200" starttime="20191111 08:36:32.199"></status>
</kw>
<msg timestamp="20191111 08:36:32.201" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191111 08:36:32.201" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191111 08:36:32.201" starttime="20191111 08:36:30.896"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191111 08:36:32.202" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191111 08:36:32.202" starttime="20191111 08:36:32.201"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:32.202" starttime="20191111 08:36:30.896"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:32.203" starttime="20191111 08:36:28.576"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:32.204" starttime="20191111 08:36:32.203"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:32.205" starttime="20191111 08:36:32.204"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:32.205" critical="yes" starttime="20191111 08:35:33.510"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:36:32.212" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:36:34.277" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:36:34.277" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 08:36:34.277" starttime="20191111 08:36:32.210"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:36:34.278" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 08:36:34.278" starttime="20191111 08:36:34.277"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:36:34.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:36:34.279" starttime="20191111 08:36:34.278"></status>
</kw>
<msg timestamp="20191111 08:36:34.279" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 08:36:34.279" starttime="20191111 08:36:32.209"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 08:36:34.280" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 08:36:34.280" starttime="20191111 08:36:34.279"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:34.280" starttime="20191111 08:36:34.280"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:34.281" starttime="20191111 08:36:34.281"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 08:36:34.281" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 08:36:34.282" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191111 08:36:34.282" starttime="20191111 08:36:34.281"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 08:36:34.282" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191111 08:36:34.282" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 08:36:34.282" starttime="20191111 08:36:34.282"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 08:36:34.283" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 08:36:34.283" starttime="20191111 08:36:34.283"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 08:36:34.284" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191111 08:36:34.284" starttime="20191111 08:36:34.283"></status>
</kw>
<msg timestamp="20191111 08:36:34.284" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 08:36:34.284" starttime="20191111 08:36:32.208"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:36:34.285" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191111 08:36:34.285" starttime="20191111 08:36:34.285"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:34.286" starttime="20191111 08:36:34.286"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:36:34.287" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:36:35.475" level="INFO">Read output: Last login: Mon Nov 11 08:36:23 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:36:35.478" starttime="20191111 08:36:34.287"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:35.478" starttime="20191111 08:36:34.285"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 08:36:35.479" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 08:36:45.657" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 08:36:45.659" starttime="20191111 08:36:35.479"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 08:36:45.661" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 08:36:45.769" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:36:45.770" level="INFO">${shutdownMsg} = hadoop     526  0.0  0.0   9556  1168 ?        Ss   08:36   0:00 bash -c sudo ps aux | grep om
hadoop     528  0.0  0.0   9088   668 ?        S    08:36   0:00 grep om</msg>
<status status="PASS" endtime="20191111 08:36:45.770" starttime="20191111 08:36:45.660"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 08:36:45.835" starttime="20191111 08:36:45.770"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:45.836" starttime="20191111 08:36:45.835"></status>
</kw>
<msg timestamp="20191111 08:36:45.836" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 08:36:45.836" starttime="20191111 08:36:34.284"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:36:45.840" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:36:48.044" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:36:48.045" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:36:48.045" starttime="20191111 08:36:45.838"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:36:48.047" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:36:48.047" starttime="20191111 08:36:48.046"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:36:48.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:36:48.049" starttime="20191111 08:36:48.048"></status>
</kw>
<msg timestamp="20191111 08:36:48.049" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:36:48.050" starttime="20191111 08:36:45.837"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 08:36:48.051" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:36:48.051" starttime="20191111 08:36:48.050"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:48.052" starttime="20191111 08:36:48.051"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:48.053" starttime="20191111 08:36:48.053"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 08:36:48.055" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 08:36:48.055" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:36:48.055" starttime="20191111 08:36:48.054"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 08:36:48.056" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 08:36:48.056" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 08:36:48.056" starttime="20191111 08:36:48.055"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 08:36:48.058" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 08:36:48.058" starttime="20191111 08:36:48.057"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 08:36:48.059" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 08:36:48.059" starttime="20191111 08:36:48.058"></status>
</kw>
<msg timestamp="20191111 08:36:48.060" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191111 08:36:48.060" starttime="20191111 08:36:45.837"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:48.061" starttime="20191111 08:36:48.060"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 08:36:48.063" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191111 08:36:48.063" starttime="20191111 08:36:48.062"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 08:36:48.064" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191111 08:36:48.065" starttime="20191111 08:36:48.064"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 08:36:48.066" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191111 08:36:48.066" starttime="20191111 08:36:48.065"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 08:36:48.068" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 08:36:48.069" starttime="20191111 08:36:48.066"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:36:48.072" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:36:52.758" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:36:52.759" level="INFO">${output} = 2019-11-11 08:36:51 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 08:36:51 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191111 08:36:52.759" starttime="20191111 08:36:48.070"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:36:52.761" level="INFO">2019-11-11 08:36:51 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 08:36:51 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 08:36:51 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 08:36:52.761" starttime="20191111 08:36:52.760"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:36:52.762" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:36:52.762" starttime="20191111 08:36:52.761"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:52.762" starttime="20191111 08:36:48.069"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:36:52.767" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:36:55.062" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:36:55.063" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 08:36:55.063" starttime="20191111 08:36:52.764"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:36:55.064" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 08:36:55.065" starttime="20191111 08:36:55.063"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:36:55.065" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:36:55.066" starttime="20191111 08:36:55.065"></status>
</kw>
<msg timestamp="20191111 08:36:55.066" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 08:36:55.066" starttime="20191111 08:36:52.763"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:55.067" starttime="20191111 08:36:55.067"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 08:36:55.069" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 08:36:55.069" starttime="20191111 08:36:55.067"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:55.069" starttime="20191111 08:36:48.062"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:36:55.071" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191111 08:36:55.072" starttime="20191111 08:36:55.071"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:55.074" starttime="20191111 08:36:55.073"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:36:55.075" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:36:56.282" level="INFO">Read output: Last login: Mon Nov 11 08:36:34 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:36:56.282" starttime="20191111 08:36:55.074"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:56.283" starttime="20191111 08:36:55.072"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 08:36:56.284" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 08:36:58.454" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 08:36:58.455" starttime="20191111 08:36:56.283"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 08:36:58.455" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 08:36:58.563" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:36:58.564" level="INFO">${startupMsg} = hadoop     579  341  0.0 34475368 204804 ?     Sl   08:36   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 08:36:58.564" starttime="20191111 08:36:58.455"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 08:36:58.597" starttime="20191111 08:36:58.564"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 08:36:58.598" starttime="20191111 08:36:58.598"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:58.599" starttime="20191111 08:36:55.070"></status>
</kw>
<status status="PASS" endtime="20191111 08:36:58.599" starttime="20191111 08:36:32.208"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:36:58.604" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:37:00.549" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:37:00.549" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:00.549" starttime="20191111 08:36:58.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:37:00.551" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:00.551" starttime="20191111 08:37:00.550"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:37:00.551" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:37:00.552" starttime="20191111 08:37:00.551"></status>
</kw>
<msg timestamp="20191111 08:37:00.552" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:00.552" starttime="20191111 08:36:58.600"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 08:37:00.553" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:00.553" starttime="20191111 08:37:00.552"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:00.553" starttime="20191111 08:37:00.553"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:00.554" starttime="20191111 08:37:00.554"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 08:37:00.555" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 08:37:00.555" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:00.555" starttime="20191111 08:37:00.554"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 08:37:00.556" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 08:37:00.556" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 08:37:00.556" starttime="20191111 08:37:00.555"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 08:37:00.557" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 08:37:00.557" starttime="20191111 08:37:00.556"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 08:37:00.557" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 08:37:00.557" starttime="20191111 08:37:00.557"></status>
</kw>
<msg timestamp="20191111 08:37:00.558" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 08:37:00.558" starttime="20191111 08:36:58.599"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:37:00.559" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 08:37:00.559" starttime="20191111 08:37:00.559"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:00.561" starttime="20191111 08:37:00.560"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:37:00.561" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:37:01.749" level="INFO">Read output: Last login: Mon Nov 11 08:36:31 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:37:01.749" starttime="20191111 08:37:00.561"></status>
</kw>
<status status="PASS" endtime="20191111 08:37:01.749" starttime="20191111 08:37:00.559"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 08:37:01.751" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 08:37:02.868" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 08:37:02.869" starttime="20191111 08:37:01.750"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 08:37:02.870" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 08:37:02.978" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:37:02.979" level="INFO">${shutdownMsg} = hadoop    1114  0.0  0.0   9556  1164 ?        Ss   08:37   0:00 bash -c sudo ps aux | grep om
hadoop    1116  0.0  0.0   9088   668 ?        S    08:37   0:00 grep om</msg>
<status status="PASS" endtime="20191111 08:37:02.979" starttime="20191111 08:37:02.870"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 08:37:03.044" starttime="20191111 08:37:02.979"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:03.045" starttime="20191111 08:37:03.044"></status>
</kw>
<msg timestamp="20191111 08:37:03.046" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 08:37:03.046" starttime="20191111 08:37:00.558"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:37:03.051" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:37:05.143" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:37:05.143" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:05.143" starttime="20191111 08:37:03.048"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:37:05.145" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:05.145" starttime="20191111 08:37:05.144"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:37:05.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:37:05.147" starttime="20191111 08:37:05.146"></status>
</kw>
<msg timestamp="20191111 08:37:05.147" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:05.147" starttime="20191111 08:37:03.047"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 08:37:05.148" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:05.148" starttime="20191111 08:37:05.148"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:05.149" starttime="20191111 08:37:05.149"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:05.150" starttime="20191111 08:37:05.150"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 08:37:05.151" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 08:37:05.152" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:05.152" starttime="20191111 08:37:05.151"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 08:37:05.153" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 08:37:05.153" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 08:37:05.153" starttime="20191111 08:37:05.152"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 08:37:05.154" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 08:37:05.154" starttime="20191111 08:37:05.153"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 08:37:05.155" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 08:37:05.155" starttime="20191111 08:37:05.154"></status>
</kw>
<msg timestamp="20191111 08:37:05.156" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191111 08:37:05.156" starttime="20191111 08:37:03.046"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:05.157" starttime="20191111 08:37:05.156"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 08:37:05.159" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191111 08:37:05.159" starttime="20191111 08:37:05.158"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 08:37:05.160" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191111 08:37:05.161" starttime="20191111 08:37:05.159"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 08:37:05.162" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191111 08:37:05.162" starttime="20191111 08:37:05.161"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 08:37:05.165" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 08:37:05.165" starttime="20191111 08:37:05.163"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:37:05.171" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:37:09.615" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:37:09.615" level="INFO">${output} = 2019-11-11 08:37:08 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 08:37:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191111 08:37:09.615" starttime="20191111 08:37:05.167"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:37:09.618" level="INFO">2019-11-11 08:37:08 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 08:37:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 08:37:08 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 08:37:09.618" starttime="20191111 08:37:09.616"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:37:09.619" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:37:09.619" starttime="20191111 08:37:09.618"></status>
</kw>
<status status="PASS" endtime="20191111 08:37:09.619" starttime="20191111 08:37:05.166"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:37:09.623" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:37:11.955" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:37:11.955" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 08:37:11.955" starttime="20191111 08:37:09.620"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:37:11.956" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 08:37:11.957" starttime="20191111 08:37:11.956"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:37:11.957" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:37:11.957" starttime="20191111 08:37:11.957"></status>
</kw>
<msg timestamp="20191111 08:37:11.958" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 08:37:11.958" starttime="20191111 08:37:09.619"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:11.958" starttime="20191111 08:37:11.958"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 08:37:11.959" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 08:37:11.959" starttime="20191111 08:37:11.958"></status>
</kw>
<status status="PASS" endtime="20191111 08:37:11.959" starttime="20191111 08:37:05.157"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:37:11.960" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 08:37:11.960" starttime="20191111 08:37:11.960"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:11.962" starttime="20191111 08:37:11.961"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:37:11.962" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:37:13.166" level="INFO">Read output: Last login: Mon Nov 11 08:37:00 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:37:13.167" starttime="20191111 08:37:11.962"></status>
</kw>
<status status="PASS" endtime="20191111 08:37:13.167" starttime="20191111 08:37:11.961"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 08:37:13.168" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 08:37:15.347" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 08:37:15.347" starttime="20191111 08:37:13.168"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 08:37:15.348" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 08:37:15.446" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:37:15.447" level="INFO">${startupMsg} = hadoop    1165  368  0.0 34478480 225452 ?     Sl   08:37   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 08:37:15.447" starttime="20191111 08:37:15.348"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 08:37:15.512" starttime="20191111 08:37:15.447"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:15.513" starttime="20191111 08:37:15.512"></status>
</kw>
<status status="PASS" endtime="20191111 08:37:15.513" starttime="20191111 08:37:11.959"></status>
</kw>
<status status="PASS" endtime="20191111 08:37:15.513" starttime="20191111 08:36:58.599"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:37:15.518" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:37:17.503" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:37:17.503" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:17.503" starttime="20191111 08:37:15.515"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:37:17.504" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:17.504" starttime="20191111 08:37:17.504"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:37:17.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:37:17.505" starttime="20191111 08:37:17.504"></status>
</kw>
<msg timestamp="20191111 08:37:17.505" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:17.505" starttime="20191111 08:37:15.515"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 08:37:17.506" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:17.506" starttime="20191111 08:37:17.505"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:17.506" starttime="20191111 08:37:17.506"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:17.507" starttime="20191111 08:37:17.506"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 08:37:17.507" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 08:37:17.507" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:17.507" starttime="20191111 08:37:17.507"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 08:37:17.509" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 08:37:17.509" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 08:37:17.509" starttime="20191111 08:37:17.508"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 08:37:17.509" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 08:37:17.509" starttime="20191111 08:37:17.509"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 08:37:17.510" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 08:37:17.510" starttime="20191111 08:37:17.509"></status>
</kw>
<msg timestamp="20191111 08:37:17.510" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 08:37:17.510" starttime="20191111 08:37:15.514"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:37:17.511" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 08:37:17.511" starttime="20191111 08:37:17.511"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:17.512" starttime="20191111 08:37:17.512"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:37:17.513" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:37:18.712" level="INFO">Read output: Last login: Mon Nov 11 08:35:30 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:37:18.712" starttime="20191111 08:37:17.513"></status>
</kw>
<status status="PASS" endtime="20191111 08:37:18.712" starttime="20191111 08:37:17.511"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 08:37:18.713" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 08:37:19.883" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 08:37:19.883" starttime="20191111 08:37:18.713"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 08:37:19.884" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 08:37:19.960" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:37:19.960" level="INFO">${shutdownMsg} = hadoop    1026  0.0  0.0   9556  1168 ?        Ss   08:37   0:00 bash -c sudo ps aux | grep om
hadoop    1028  0.0  0.0   9088   668 ?        S    08:37   0:00 grep om</msg>
<status status="PASS" endtime="20191111 08:37:19.960" starttime="20191111 08:37:19.884"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 08:37:20.026" starttime="20191111 08:37:19.961"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:20.027" starttime="20191111 08:37:20.026"></status>
</kw>
<msg timestamp="20191111 08:37:20.027" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 08:37:20.027" starttime="20191111 08:37:17.510"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:37:20.033" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:37:32.220" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:37:32.220" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:32.220" starttime="20191111 08:37:20.030"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:37:32.221" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:32.222" starttime="20191111 08:37:32.221"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:37:32.222" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:37:32.222" starttime="20191111 08:37:32.222"></status>
</kw>
<msg timestamp="20191111 08:37:32.223" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:32.223" starttime="20191111 08:37:20.029"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 08:37:32.223" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:32.223" starttime="20191111 08:37:32.223"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:32.224" starttime="20191111 08:37:32.224"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:32.225" starttime="20191111 08:37:32.224"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 08:37:32.225" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 08:37:32.225" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:37:32.225" starttime="20191111 08:37:32.225"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 08:37:32.226" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 08:37:32.226" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 08:37:32.226" starttime="20191111 08:37:32.226"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 08:37:32.227" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 08:37:32.227" starttime="20191111 08:37:32.226"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 08:37:32.227" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 08:37:32.228" starttime="20191111 08:37:32.227"></status>
</kw>
<msg timestamp="20191111 08:37:32.228" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191111 08:37:32.228" starttime="20191111 08:37:20.028"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:32.229" starttime="20191111 08:37:32.228"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 08:37:32.230" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191111 08:37:32.230" starttime="20191111 08:37:32.229"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 08:37:32.231" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191111 08:37:32.231" starttime="20191111 08:37:32.231"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 08:37:32.232" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191111 08:37:32.232" starttime="20191111 08:37:32.232"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 08:37:32.234" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 08:37:32.234" starttime="20191111 08:37:32.232"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:37:32.237" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:37:46.894" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:37:46.894" level="INFO">${output} = 2019-11-11 08:37:35 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191111 08:37:46.894" starttime="20191111 08:37:32.235"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:37:46.896" level="INFO">2019-11-11 08:37:35 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:37:36 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:37:37 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:37:38 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:37:39 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:37:40 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:37:41 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:37:42 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:37:43 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:37:44 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 08:37:45 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 08:37:45 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 08:37:45 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 08:37:46.896" starttime="20191111 08:37:46.895"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:37:46.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:37:46.898" starttime="20191111 08:37:46.897"></status>
</kw>
<status status="PASS" endtime="20191111 08:37:46.899" starttime="20191111 08:37:32.234"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:37:46.903" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:37:59.398" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:37:59.399" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 08:37:59.399" starttime="20191111 08:37:46.900"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:37:59.401" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 08:37:59.401" starttime="20191111 08:37:59.400"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:37:59.402" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:37:59.402" starttime="20191111 08:37:59.401"></status>
</kw>
<msg timestamp="20191111 08:37:59.403" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 08:37:59.403" starttime="20191111 08:37:46.899"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:59.404" starttime="20191111 08:37:59.404"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 08:37:59.406" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 08:37:59.406" starttime="20191111 08:37:59.405"></status>
</kw>
<status status="PASS" endtime="20191111 08:37:59.406" starttime="20191111 08:37:32.229"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:37:59.409" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 08:37:59.409" starttime="20191111 08:37:59.408"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:37:59.411" starttime="20191111 08:37:59.410"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:37:59.412" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:38:00.617" level="INFO">Read output: Last login: Mon Nov 11 08:37:17 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:38:00.617" starttime="20191111 08:37:59.411"></status>
</kw>
<status status="PASS" endtime="20191111 08:38:00.618" starttime="20191111 08:37:59.409"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 08:38:00.619" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 08:38:02.800" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 08:38:02.801" starttime="20191111 08:38:00.618"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 08:38:02.802" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 08:38:02.910" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:38:02.910" level="INFO">${startupMsg} = hadoop    1077  230  0.0 34474716 206884 ?     Sl   08:37   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 08:38:02.910" starttime="20191111 08:38:02.801"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 08:38:02.976" starttime="20191111 08:38:02.911"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 08:38:02.977" starttime="20191111 08:38:02.976"></status>
</kw>
<status status="PASS" endtime="20191111 08:38:02.977" starttime="20191111 08:37:59.407"></status>
</kw>
<status status="PASS" endtime="20191111 08:38:02.978" starttime="20191111 08:37:15.514"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:38:02.982" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:38:05.891" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 08:38:05.891" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:38:05.891" starttime="20191111 08:38:02.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:38:05.892" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:38:05.892" starttime="20191111 08:38:05.892"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:38:05.893" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 08:38:05.893" starttime="20191111 08:38:05.893"></status>
</kw>
<msg timestamp="20191111 08:38:05.893" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:38:05.893" starttime="20191111 08:38:02.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 08:38:05.894" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:38:05.894" starttime="20191111 08:38:05.894"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 08:38:05.895" starttime="20191111 08:38:05.894"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 08:38:05.895" starttime="20191111 08:38:05.895"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 08:38:05.896" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 08:38:05.896" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 08:38:05.896" starttime="20191111 08:38:05.895"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 08:38:05.897" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 08:38:05.897" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 08:38:05.897" starttime="20191111 08:38:05.896"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 08:38:05.897" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 08:38:05.897" starttime="20191111 08:38:05.897"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 08:38:05.898" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 08:38:05.898" starttime="20191111 08:38:05.898"></status>
</kw>
<msg timestamp="20191111 08:38:05.898" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 08:38:05.898" starttime="20191111 08:38:02.978"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 08:38:05.900" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 08:38:05.900" starttime="20191111 08:38:05.899"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 08:38:05.901" starttime="20191111 08:38:05.900"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 08:38:05.901" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 08:38:07.090" level="INFO">Read output: Last login: Mon Nov 11 08:37:12 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 08:38:07.090" starttime="20191111 08:38:05.901"></status>
</kw>
<status status="PASS" endtime="20191111 08:38:07.091" starttime="20191111 08:38:05.900"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 08:38:07.092" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 08:38:08.252" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 08:38:08.253" starttime="20191111 08:38:07.091"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 08:38:08.254" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 08:38:08.363" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 08:38:08.363" level="INFO">${shutdownMsg} = hadoop    1676  0.0  0.0   9556  1168 ?        Ss   08:38   0:00 bash -c sudo ps aux | grep om
hadoop    1678  0.0  0.0   9088   672 ?        S    08:38   0:00 grep om</msg>
<status status="PASS" endtime="20191111 08:38:08.363" starttime="20191111 08:38:08.254"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 08:38:08.429" starttime="20191111 08:38:08.364"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 08:38:08.430" starttime="20191111 08:38:08.429"></status>
</kw>
<msg timestamp="20191111 08:38:08.430" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 08:38:08.430" starttime="20191111 08:38:05.898"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 08:38:08.435" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 08:38:40.192" level="INFO">${rc} = 255</msg>
<msg timestamp="20191111 08:38:40.192" level="INFO">${output} = Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
jav...</msg>
<status status="PASS" endtime="20191111 08:38:40.193" starttime="20191111 08:38:08.432"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 08:38:40.194" level="INFO">Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
java.net.ConnectException: Call From 4e8fa9ebb46a/172.18.0.7 to om2:9862 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.apache.hadoop.net.NetUtils.wrapWithMessage(NetUtils.java:831)
	at org.apache.hadoop.net.NetUtils.wrapException(NetUtils.java:755)
	at org.apache.hadoop.ipc.Client.getRpcResponse(Client.java:1515)
	at org.apache.hadoop.ipc.Client.call(Client.java:1457)
	at org.apache.hadoop.ipc.Client.call(Client.java:1367)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:228)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:116)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:422)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeMethod(RetryInvocationHandler.java:165)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invoke(RetryInvocationHandler.java:157)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeOnce(RetryInvocationHandler.java:95)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:359)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.submitRequest(OzoneManagerProtocolClientSideTranslatorPB.java:361)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.getServiceInfo(OzoneManagerProtocolClientSideTranslatorPB.java:1252)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.hdds.tracing.TraceAllMethod.invoke(TraceAllMethod.java:66)
	at com.sun.proxy.$Proxy17.getServiceInfo(Unknown Source)
	at org.apache.hadoop.ozone.client.rpc.RpcClient.&lt;init&gt;(RpcClient.java:157)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getClientProtocol(OzoneClientFactory.java:256)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getRpcClient(OzoneClientFactory.java:187)
	at org.apache.hadoop.ozone.admin.om.OMAdmin.createClient(OMAdmin.java:59)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:49)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:32)
	at picocli.CommandLine.execute(CommandLine.java:1173)
	at picocli.CommandLine.access$800(CommandLine.java:141)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1367)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1335)
	at picocli.CommandLine$AbstractParseResultHandler.handleParseResult(CommandLine.java:1243)
	at picocli.CommandLine.parseWithHandlers(CommandLine.java:1526)
	at picocli.CommandLine.parseWithHandler(CommandLine.java:1465)
	at org.apache.hadoop.hdds.cli.GenericCli.execute(GenericCli.java:65)
	at org.apache.hadoop.hdds.cli.GenericCli.run(GenericCli.java:56)
	at org.apache.hadoop.ozone.admin.OzoneAdmin.main(OzoneAdmin.java:66)
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:779)
	at org.apache.hadoop.net.SocketIOWithTimeout.connect(SocketIOWithTimeout.java:206)
	at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:531)
	at org.apache.hadoop.ipc.Client$Connection.setupConnection(Client.java:690)
	at org.apache.hadoop.ipc.Client$Connection.setupIOstreams(Client.java:794)
	at org.apache.hadoop.ipc.Client$Connection.access$3700(Client.java:411)
	at org.apache.hadoop.ipc.Client.getConnection(Client.java:1572)
	at org.apache.hadoop.ipc.Client.call(Client.java:1403)
	... 38 more
Connection refused</msg>
<status status="PASS" endtime="20191111 08:38:40.195" starttime="20191111 08:38:40.193"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 08:38:40.196" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191111 08:38:40.198" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191111 08:38:40.198" starttime="20191111 08:38:40.196"></status>
</kw>
<status status="FAIL" endtime="20191111 08:38:40.198" starttime="20191111 08:38:08.431"></status>
</kw>
<status status="FAIL" endtime="20191111 08:38:40.199" starttime="20191111 08:38:08.430"></status>
</kw>
<status status="FAIL" endtime="20191111 08:38:40.199" starttime="20191111 08:38:02.978"></status>
</kw>
<status status="FAIL" endtime="20191111 08:38:40.199" starttime="20191111 08:36:32.207"></status>
</kw>
<status status="FAIL" endtime="20191111 08:38:40.200" critical="yes" starttime="20191111 08:36:32.206">255 != 0</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191111 08:38:40.202" starttime="20191111 08:34:23.924"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="2">Critical Tests</stat>
<stat fail="1" pass="2">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="1" id="s1" name="ozone-om-ha-testOMHA" pass="2">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
