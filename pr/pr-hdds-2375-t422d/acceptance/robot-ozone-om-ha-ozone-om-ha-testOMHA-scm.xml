<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191113 19:48:52.944" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:48:53.116" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:48:55.865" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:48:55.865" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 19:48:55.865" starttime="20191113 19:48:53.115"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:48:55.866" level="INFO"></msg>
<status status="PASS" endtime="20191113 19:48:55.867" starttime="20191113 19:48:55.866"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:48:55.867" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:48:55.867" starttime="20191113 19:48:55.867"></status>
</kw>
<status status="PASS" endtime="20191113 19:48:55.868" starttime="20191113 19:48:53.114"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:48:55.873" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:48:58.158" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:48:58.159" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 19:48:58.159" starttime="20191113 19:48:55.872"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:48:58.161" level="INFO"></msg>
<status status="PASS" endtime="20191113 19:48:58.161" starttime="20191113 19:48:58.160"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:48:58.162" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:48:58.162" starttime="20191113 19:48:58.161"></status>
</kw>
<status status="PASS" endtime="20191113 19:48:58.163" starttime="20191113 19:48:55.868"></status>
</kw>
<status status="PASS" endtime="20191113 19:48:58.163" starttime="20191113 19:48:53.114"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 19:48:58.165" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191113 19:48:58.166" starttime="20191113 19:48:58.165"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 19:48:58.166" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191113 19:48:58.167" starttime="20191113 19:48:58.166"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 19:48:58.167" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191113 19:48:58.167" starttime="20191113 19:48:58.167"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 19:48:58.169" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 19:48:58.169" starttime="20191113 19:48:58.168"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:48:58.173" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:49:07.011" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:49:07.011" level="INFO">${output} = 2019-11-13 19:49:01 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 19:49:01 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 19:49:07.011" starttime="20191113 19:48:58.171"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:49:07.013" level="INFO">2019-11-13 19:49:01 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 19:49:01 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 19:49:01 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:49:07.013" starttime="20191113 19:49:07.012"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:49:07.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:49:07.014" starttime="20191113 19:49:07.013"></status>
</kw>
<status status="PASS" endtime="20191113 19:49:07.014" starttime="20191113 19:48:58.170"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:49:07.017" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:49:09.137" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:49:09.137" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191113 19:49:09.138" starttime="20191113 19:49:07.015"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:49:09.139" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191113 19:49:09.139" starttime="20191113 19:49:09.138"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:49:09.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:49:09.140" starttime="20191113 19:49:09.139"></status>
</kw>
<msg timestamp="20191113 19:49:09.141" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191113 19:49:09.141" starttime="20191113 19:49:07.014"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:09.141" starttime="20191113 19:49:09.141"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 19:49:09.142" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 19:49:09.142" starttime="20191113 19:49:09.142"></status>
</kw>
<status status="PASS" endtime="20191113 19:49:09.142" starttime="20191113 19:48:58.164"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:49:09.146" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:49:11.084" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:49:11.085" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:11.085" starttime="20191113 19:49:09.144"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:49:11.087" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:11.087" starttime="20191113 19:49:11.086"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:49:11.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:49:11.088" starttime="20191113 19:49:11.087"></status>
</kw>
<msg timestamp="20191113 19:49:11.089" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:11.089" starttime="20191113 19:49:09.143"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:49:11.090" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:11.090" starttime="20191113 19:49:11.089"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:11.091" starttime="20191113 19:49:11.090"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:11.092" starttime="20191113 19:49:11.092"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:49:11.093" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:49:11.094" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:11.094" starttime="20191113 19:49:11.093"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:49:11.095" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 19:49:11.095" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:49:11.095" starttime="20191113 19:49:11.094"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:49:11.096" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 19:49:11.096" starttime="20191113 19:49:11.095"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:49:11.097" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 19:49:11.097" starttime="20191113 19:49:11.096"></status>
</kw>
<msg timestamp="20191113 19:49:11.097" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 19:49:11.097" starttime="20191113 19:49:09.143"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:49:11.099" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 19:49:11.100" starttime="20191113 19:49:11.099"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:11.101" starttime="20191113 19:49:11.100"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:49:11.102" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:49:12.358" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 19:49:12.359" starttime="20191113 19:49:11.102"></status>
</kw>
<status status="PASS" endtime="20191113 19:49:12.359" starttime="20191113 19:49:11.100"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 19:49:12.360" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 19:49:12.374" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191113 19:49:12.375" starttime="20191113 19:49:12.359"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 19:49:12.375" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:49:12.452" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 19:49:12.452" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191113 19:49:12.452" starttime="20191113 19:49:12.375"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:49:12.567" starttime="20191113 19:49:12.453"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:12.569" starttime="20191113 19:49:12.568"></status>
</kw>
<msg timestamp="20191113 19:49:12.569" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 19:49:12.569" starttime="20191113 19:49:11.098"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:49:12.573" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:49:14.424" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:49:14.424" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:14.424" starttime="20191113 19:49:12.571"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:49:14.426" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:14.426" starttime="20191113 19:49:14.425"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:49:14.426" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:49:14.427" starttime="20191113 19:49:14.426"></status>
</kw>
<msg timestamp="20191113 19:49:14.427" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:14.427" starttime="20191113 19:49:12.570"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:49:14.428" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:14.428" starttime="20191113 19:49:14.427"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:14.429" starttime="20191113 19:49:14.428"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:14.429" starttime="20191113 19:49:14.429"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:49:14.430" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:49:14.430" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:14.430" starttime="20191113 19:49:14.429"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:49:14.431" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 19:49:14.431" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:49:14.431" starttime="20191113 19:49:14.430"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:49:14.431" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 19:49:14.432" starttime="20191113 19:49:14.431"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:49:14.432" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 19:49:14.432" starttime="20191113 19:49:14.432"></status>
</kw>
<msg timestamp="20191113 19:49:14.433" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191113 19:49:14.433" starttime="20191113 19:49:12.569"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191113 19:49:14.434" level="FAIL">OMs did not failover: om2 == om2</msg>
<status status="FAIL" endtime="20191113 19:49:14.434" starttime="20191113 19:49:14.433"></status>
</kw>
<status status="FAIL" endtime="20191113 19:49:14.434" critical="yes" starttime="20191113 19:48:53.113">OMs did not failover: om2 == om2</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191113 19:49:14.438" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191113 19:49:14.439" starttime="20191113 19:49:14.436"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191113 19:49:14.441" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191113 19:49:14.441" starttime="20191113 19:49:14.439"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:49:14.443" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 19:49:14.443" starttime="20191113 19:49:14.442"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:14.445" starttime="20191113 19:49:14.444"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:49:14.446" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:49:15.635" level="INFO">Read output: Last login: Wed Nov 13 19:49:11 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 19:49:15.635" starttime="20191113 19:49:14.446"></status>
</kw>
<status status="PASS" endtime="20191113 19:49:15.636" starttime="20191113 19:49:14.443"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 19:49:15.637" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 19:49:15.651" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191113 19:49:15.652" starttime="20191113 19:49:15.636"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 19:49:15.653" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:49:15.730" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 19:49:15.730" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191113 19:49:15.730" starttime="20191113 19:49:15.652"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:49:15.845" starttime="20191113 19:49:15.731"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:15.846" starttime="20191113 19:49:15.846"></status>
</kw>
<status status="PASS" endtime="20191113 19:49:15.847" starttime="20191113 19:49:14.441"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:49:15.849" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 19:49:15.849" starttime="20191113 19:49:15.848"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:15.850" starttime="20191113 19:49:15.850"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:49:15.851" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:49:17.055" level="INFO">Read output: Last login: Wed Nov 13 19:49:14 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 19:49:17.056" starttime="20191113 19:49:15.851"></status>
</kw>
<status status="PASS" endtime="20191113 19:49:17.056" starttime="20191113 19:49:15.849"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 19:49:17.057" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 19:49:17.072" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 19:49:17.072" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191113 19:49:17.073" starttime="20191113 19:49:17.056"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 19:49:17.073" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191113 19:49:17.074" starttime="20191113 19:49:17.073"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 19:49:17.075" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191113 19:49:17.075" starttime="20191113 19:49:17.074"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 19:49:17.120" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191113 19:49:17.120" starttime="20191113 19:49:17.075"></status>
</kw>
<status status="FAIL" endtime="20191113 19:49:17.120" starttime="20191113 19:49:15.847"></status>
</kw>
<status status="FAIL" endtime="20191113 19:49:17.120" critical="yes" starttime="20191113 19:49:14.435">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:49:17.126" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:49:19.055" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:49:19.056" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:19.056" starttime="20191113 19:49:17.123"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:49:19.057" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:19.057" starttime="20191113 19:49:19.056"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:49:19.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:49:19.058" starttime="20191113 19:49:19.057"></status>
</kw>
<msg timestamp="20191113 19:49:19.059" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:19.059" starttime="20191113 19:49:17.123"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:49:19.059" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:19.059" starttime="20191113 19:49:19.059"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:19.060" starttime="20191113 19:49:19.060"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:19.061" starttime="20191113 19:49:19.060"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:49:19.061" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:49:19.062" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:19.062" starttime="20191113 19:49:19.061"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:49:19.062" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 19:49:19.062" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:49:19.063" starttime="20191113 19:49:19.062"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:49:19.063" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 19:49:19.063" starttime="20191113 19:49:19.063"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:49:19.064" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 19:49:19.064" starttime="20191113 19:49:19.063"></status>
</kw>
<msg timestamp="20191113 19:49:19.064" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 19:49:19.064" starttime="20191113 19:49:17.122"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:49:19.066" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 19:49:19.066" starttime="20191113 19:49:19.065"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:19.067" starttime="20191113 19:49:19.067"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:49:19.068" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:49:20.256" level="INFO">Read output: Last login: Wed Nov 13 19:49:16 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 19:49:20.257" starttime="20191113 19:49:19.067"></status>
</kw>
<status status="PASS" endtime="20191113 19:49:20.257" starttime="20191113 19:49:19.066"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 19:49:20.258" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 19:49:20.273" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191113 19:49:20.273" starttime="20191113 19:49:20.257"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 19:49:20.274" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:49:20.351" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 19:49:20.351" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191113 19:49:20.351" starttime="20191113 19:49:20.273"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:49:20.466" starttime="20191113 19:49:20.352"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:20.468" starttime="20191113 19:49:20.467"></status>
</kw>
<msg timestamp="20191113 19:49:20.468" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 19:49:20.468" starttime="20191113 19:49:19.064"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:49:20.472" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:49:22.568" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:49:22.568" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:22.568" starttime="20191113 19:49:20.470"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:49:22.569" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:22.569" starttime="20191113 19:49:22.568"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:49:22.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:49:22.570" starttime="20191113 19:49:22.569"></status>
</kw>
<msg timestamp="20191113 19:49:22.570" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:22.570" starttime="20191113 19:49:20.469"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:49:22.571" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:22.571" starttime="20191113 19:49:22.570"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:22.571" starttime="20191113 19:49:22.571"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:49:22.572" starttime="20191113 19:49:22.572"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:49:22.573" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:49:22.573" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:49:22.573" starttime="20191113 19:49:22.572"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:49:22.573" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 19:49:22.573" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:49:22.573" starttime="20191113 19:49:22.573"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:49:22.574" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 19:49:22.574" starttime="20191113 19:49:22.574"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:49:22.575" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 19:49:22.575" starttime="20191113 19:49:22.574"></status>
</kw>
<msg timestamp="20191113 19:49:22.575" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191113 19:49:22.575" starttime="20191113 19:49:20.468"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191113 19:49:22.576" level="FAIL">OMs did not failover: om2 == om2</msg>
<status status="FAIL" endtime="20191113 19:49:22.576" starttime="20191113 19:49:22.575"></status>
</kw>
<status status="FAIL" endtime="20191113 19:49:22.576" starttime="20191113 19:49:17.122"></status>
</kw>
<status status="FAIL" endtime="20191113 19:49:22.576" starttime="20191113 19:49:17.122"></status>
</kw>
<status status="FAIL" endtime="20191113 19:49:22.577" critical="yes" starttime="20191113 19:49:17.121">OMs did not failover: om2 == om2</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191113 19:49:22.578" starttime="20191113 19:48:52.945"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
