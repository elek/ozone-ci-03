<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191114 20:04:42.025" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 20:04:42.189" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 20:04:44.817" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 20:04:44.817" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 20:04:44.817" starttime="20191114 20:04:42.187"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 20:04:44.819" level="INFO"></msg>
<status status="PASS" endtime="20191114 20:04:44.819" starttime="20191114 20:04:44.818"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 20:04:44.819" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 20:04:44.819" starttime="20191114 20:04:44.819"></status>
</kw>
<status status="PASS" endtime="20191114 20:04:44.820" starttime="20191114 20:04:42.186"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 20:04:44.825" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 20:04:46.936" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 20:04:46.937" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 20:04:46.937" starttime="20191114 20:04:44.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 20:04:46.938" level="INFO"></msg>
<status status="PASS" endtime="20191114 20:04:46.938" starttime="20191114 20:04:46.937"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 20:04:46.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 20:04:46.939" starttime="20191114 20:04:46.939"></status>
</kw>
<status status="PASS" endtime="20191114 20:04:46.940" starttime="20191114 20:04:44.820"></status>
</kw>
<status status="PASS" endtime="20191114 20:04:46.940" starttime="20191114 20:04:42.186"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 20:04:46.942" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191114 20:04:46.942" starttime="20191114 20:04:46.941"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 20:04:46.943" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191114 20:04:46.943" starttime="20191114 20:04:46.942"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 20:04:46.944" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191114 20:04:46.944" starttime="20191114 20:04:46.943"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 20:04:46.946" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 20:04:46.946" starttime="20191114 20:04:46.944"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 20:04:46.950" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 20:04:51.582" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 20:04:51.582" level="INFO">${output} = 2019-11-14 20:04:49 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 20:04:49 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 20:04:51.582" starttime="20191114 20:04:46.948"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 20:04:51.584" level="INFO">2019-11-14 20:04:49 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 20:04:49 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 20:04:49 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 20:04:51.584" starttime="20191114 20:04:51.583"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 20:04:51.585" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 20:04:51.585" starttime="20191114 20:04:51.584"></status>
</kw>
<status status="PASS" endtime="20191114 20:04:51.586" starttime="20191114 20:04:46.947"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 20:04:51.590" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 20:04:53.887" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 20:04:53.887" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191114 20:04:53.887" starttime="20191114 20:04:51.587"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 20:04:53.888" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191114 20:04:53.888" starttime="20191114 20:04:53.888"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 20:04:53.889" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 20:04:53.889" starttime="20191114 20:04:53.889"></status>
</kw>
<msg timestamp="20191114 20:04:53.889" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191114 20:04:53.890" starttime="20191114 20:04:51.586"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 20:04:53.890" starttime="20191114 20:04:53.890"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 20:04:53.891" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 20:04:53.891" starttime="20191114 20:04:53.890"></status>
</kw>
<status status="PASS" endtime="20191114 20:04:53.891" starttime="20191114 20:04:46.940"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 20:04:53.894" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 20:04:55.844" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 20:04:55.844" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:04:55.844" starttime="20191114 20:04:53.892"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 20:04:55.845" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:04:55.846" starttime="20191114 20:04:55.845"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 20:04:55.846" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 20:04:55.846" starttime="20191114 20:04:55.846"></status>
</kw>
<msg timestamp="20191114 20:04:55.847" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:04:55.847" starttime="20191114 20:04:53.892"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 20:04:55.847" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:04:55.847" starttime="20191114 20:04:55.847"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 20:04:55.848" starttime="20191114 20:04:55.847"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 20:04:55.849" starttime="20191114 20:04:55.848"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 20:04:55.849" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 20:04:55.849" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:04:55.849" starttime="20191114 20:04:55.849"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 20:04:55.850" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 20:04:55.850" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 20:04:55.850" starttime="20191114 20:04:55.850"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 20:04:55.851" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 20:04:55.851" starttime="20191114 20:04:55.850"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 20:04:55.851" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 20:04:55.851" starttime="20191114 20:04:55.851"></status>
</kw>
<msg timestamp="20191114 20:04:55.852" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 20:04:55.852" starttime="20191114 20:04:53.891"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 20:04:55.853" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 20:04:55.853" starttime="20191114 20:04:55.852"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 20:04:55.854" starttime="20191114 20:04:55.854"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 20:04:55.855" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 20:04:57.094" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 20:04:57.095" starttime="20191114 20:04:55.854"></status>
</kw>
<status status="PASS" endtime="20191114 20:04:57.095" starttime="20191114 20:04:55.853"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 20:04:57.096" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 20:04:57.112" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 20:04:57.112" starttime="20191114 20:04:57.096"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 20:04:57.113" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 20:04:57.191" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 20:04:57.191" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 20:04:57.191" starttime="20191114 20:04:57.112"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 20:04:57.306" starttime="20191114 20:04:57.192"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 20:04:57.308" starttime="20191114 20:04:57.307"></status>
</kw>
<msg timestamp="20191114 20:04:57.308" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 20:04:57.308" starttime="20191114 20:04:55.852"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 20:04:57.312" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 20:04:59.328" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 20:04:59.328" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:04:59.328" starttime="20191114 20:04:57.310"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 20:04:59.330" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:04:59.330" starttime="20191114 20:04:59.329"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 20:04:59.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 20:04:59.330" starttime="20191114 20:04:59.330"></status>
</kw>
<msg timestamp="20191114 20:04:59.331" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:04:59.331" starttime="20191114 20:04:57.309"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 20:04:59.331" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:04:59.331" starttime="20191114 20:04:59.331"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 20:04:59.332" starttime="20191114 20:04:59.332"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 20:04:59.333" starttime="20191114 20:04:59.332"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 20:04:59.333" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 20:04:59.333" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:04:59.333" starttime="20191114 20:04:59.333"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 20:04:59.334" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 20:04:59.334" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 20:04:59.334" starttime="20191114 20:04:59.334"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 20:04:59.335" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 20:04:59.335" starttime="20191114 20:04:59.334"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 20:04:59.335" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 20:04:59.335" starttime="20191114 20:04:59.335"></status>
</kw>
<msg timestamp="20191114 20:04:59.336" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 20:04:59.336" starttime="20191114 20:04:57.308"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 20:04:59.337" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191114 20:04:59.337" starttime="20191114 20:04:59.336"></status>
</kw>
<status status="FAIL" endtime="20191114 20:04:59.337" critical="yes" starttime="20191114 20:04:42.186">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191114 20:04:59.340" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191114 20:04:59.340" starttime="20191114 20:04:59.338"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191114 20:04:59.341" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191114 20:04:59.341" starttime="20191114 20:04:59.340"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 20:04:59.342" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 20:04:59.342" starttime="20191114 20:04:59.342"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 20:04:59.344" starttime="20191114 20:04:59.343"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 20:04:59.344" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 20:05:00.549" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 20:05:00.550" starttime="20191114 20:04:59.344"></status>
</kw>
<status status="PASS" endtime="20191114 20:05:00.550" starttime="20191114 20:04:59.343"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 20:05:00.551" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 20:05:00.567" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 20:05:00.567" starttime="20191114 20:05:00.550"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 20:05:00.568" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 20:05:00.646" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 20:05:00.646" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 20:05:00.646" starttime="20191114 20:05:00.567"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 20:05:00.761" starttime="20191114 20:05:00.646"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 20:05:00.762" starttime="20191114 20:05:00.761"></status>
</kw>
<status status="PASS" endtime="20191114 20:05:00.763" starttime="20191114 20:04:59.341"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 20:05:00.765" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 20:05:00.765" starttime="20191114 20:05:00.764"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 20:05:00.767" starttime="20191114 20:05:00.766"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 20:05:00.768" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 20:05:01.973" level="INFO">Read output: Last login: Thu Nov 14 20:04:59 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 20:05:01.973" starttime="20191114 20:05:00.767"></status>
</kw>
<status status="PASS" endtime="20191114 20:05:01.974" starttime="20191114 20:05:00.765"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 20:05:01.975" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 20:05:01.990" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 20:05:01.990" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191114 20:05:01.990" starttime="20191114 20:05:01.974"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 20:05:01.991" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191114 20:05:01.991" starttime="20191114 20:05:01.990"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 20:05:01.992" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191114 20:05:01.992" starttime="20191114 20:05:01.991"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 20:05:02.071" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191114 20:05:02.071" starttime="20191114 20:05:01.992"></status>
</kw>
<status status="FAIL" endtime="20191114 20:05:02.072" starttime="20191114 20:05:00.763"></status>
</kw>
<status status="FAIL" endtime="20191114 20:05:02.072" critical="yes" starttime="20191114 20:04:59.338">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 20:05:02.078" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 20:05:04.156" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 20:05:04.156" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:05:04.156" starttime="20191114 20:05:02.076"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 20:05:04.158" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:05:04.158" starttime="20191114 20:05:04.157"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 20:05:04.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 20:05:04.158" starttime="20191114 20:05:04.158"></status>
</kw>
<msg timestamp="20191114 20:05:04.159" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:05:04.159" starttime="20191114 20:05:02.075"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 20:05:04.159" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:05:04.159" starttime="20191114 20:05:04.159"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 20:05:04.160" starttime="20191114 20:05:04.160"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 20:05:04.161" starttime="20191114 20:05:04.160"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 20:05:04.162" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 20:05:04.162" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:05:04.162" starttime="20191114 20:05:04.161"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 20:05:04.163" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 20:05:04.163" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 20:05:04.163" starttime="20191114 20:05:04.162"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 20:05:04.163" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 20:05:04.163" starttime="20191114 20:05:04.163"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 20:05:04.164" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 20:05:04.164" starttime="20191114 20:05:04.163"></status>
</kw>
<msg timestamp="20191114 20:05:04.164" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 20:05:04.164" starttime="20191114 20:05:02.074"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 20:05:04.165" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 20:05:04.166" starttime="20191114 20:05:04.165"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 20:05:04.167" starttime="20191114 20:05:04.166"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 20:05:04.167" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 20:05:05.354" level="INFO">Read output: Last login: Thu Nov 14 20:04:56 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 20:05:05.354" starttime="20191114 20:05:04.167"></status>
</kw>
<status status="PASS" endtime="20191114 20:05:05.355" starttime="20191114 20:05:04.166"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 20:05:05.355" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 20:05:05.370" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 20:05:05.370" starttime="20191114 20:05:05.355"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 20:05:05.371" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 20:05:05.448" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 20:05:05.449" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 20:05:05.449" starttime="20191114 20:05:05.370"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 20:05:05.564" starttime="20191114 20:05:05.449"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 20:05:05.565" starttime="20191114 20:05:05.564"></status>
</kw>
<msg timestamp="20191114 20:05:05.565" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 20:05:05.565" starttime="20191114 20:05:04.164"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 20:05:05.569" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 20:05:07.531" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 20:05:07.531" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:05:07.531" starttime="20191114 20:05:05.567"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 20:05:07.533" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:05:07.533" starttime="20191114 20:05:07.532"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 20:05:07.534" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 20:05:07.534" starttime="20191114 20:05:07.533"></status>
</kw>
<msg timestamp="20191114 20:05:07.535" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:05:07.535" starttime="20191114 20:05:05.566"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 20:05:07.536" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:05:07.536" starttime="20191114 20:05:07.535"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 20:05:07.537" starttime="20191114 20:05:07.536"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 20:05:07.537" starttime="20191114 20:05:07.537"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 20:05:07.538" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 20:05:07.538" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 20:05:07.539" starttime="20191114 20:05:07.538"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 20:05:07.539" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 20:05:07.540" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 20:05:07.540" starttime="20191114 20:05:07.539"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 20:05:07.540" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 20:05:07.541" starttime="20191114 20:05:07.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 20:05:07.541" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 20:05:07.541" starttime="20191114 20:05:07.541"></status>
</kw>
<msg timestamp="20191114 20:05:07.542" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 20:05:07.542" starttime="20191114 20:05:05.565"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 20:05:07.543" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191114 20:05:07.543" starttime="20191114 20:05:07.542"></status>
</kw>
<status status="FAIL" endtime="20191114 20:05:07.543" starttime="20191114 20:05:02.074"></status>
</kw>
<status status="FAIL" endtime="20191114 20:05:07.544" starttime="20191114 20:05:02.074"></status>
</kw>
<status status="FAIL" endtime="20191114 20:05:07.544" critical="yes" starttime="20191114 20:05:02.073">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191114 20:05:07.545" starttime="20191114 20:04:42.027"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
