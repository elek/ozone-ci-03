<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 20:06:17.602" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:06:17.771" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:06:20.440" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:06:20.440" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 20:06:20.440" starttime="20191115 20:06:17.770"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:06:20.442" level="INFO"></msg>
<status status="PASS" endtime="20191115 20:06:20.442" starttime="20191115 20:06:20.441"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:06:20.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:06:20.443" starttime="20191115 20:06:20.442"></status>
</kw>
<status status="PASS" endtime="20191115 20:06:20.444" starttime="20191115 20:06:17.769"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:06:20.452" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:06:22.412" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:06:22.412" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 20:06:22.412" starttime="20191115 20:06:20.450"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:06:22.413" level="INFO"></msg>
<status status="PASS" endtime="20191115 20:06:22.413" starttime="20191115 20:06:22.413"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:06:22.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:06:22.414" starttime="20191115 20:06:22.413"></status>
</kw>
<status status="PASS" endtime="20191115 20:06:22.414" starttime="20191115 20:06:20.444"></status>
</kw>
<status status="PASS" endtime="20191115 20:06:22.414" starttime="20191115 20:06:17.769"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 20:06:22.416" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191115 20:06:22.416" starttime="20191115 20:06:22.415"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 20:06:22.416" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191115 20:06:22.416" starttime="20191115 20:06:22.416"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 20:06:22.417" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191115 20:06:22.417" starttime="20191115 20:06:22.417"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 20:06:22.419" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 20:06:22.419" starttime="20191115 20:06:22.417"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:06:22.421" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:06:26.585" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:06:26.585" level="INFO">${output} = 2019-11-15 20:06:24 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 20:06:24 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 20:06:26.585" starttime="20191115 20:06:22.420"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:06:26.586" level="INFO">2019-11-15 20:06:24 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 20:06:24 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 20:06:24 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 20:06:26.586" starttime="20191115 20:06:26.585"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:06:26.587" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:06:26.587" starttime="20191115 20:06:26.587"></status>
</kw>
<status status="PASS" endtime="20191115 20:06:26.587" starttime="20191115 20:06:22.419"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:06:26.591" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:06:28.609" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:06:28.609" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191115 20:06:28.609" starttime="20191115 20:06:26.589"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:06:28.611" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191115 20:06:28.611" starttime="20191115 20:06:28.610"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:06:28.611" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:06:28.611" starttime="20191115 20:06:28.611"></status>
</kw>
<msg timestamp="20191115 20:06:28.612" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191115 20:06:28.612" starttime="20191115 20:06:26.588"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:28.612" starttime="20191115 20:06:28.612"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 20:06:28.613" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 20:06:28.613" starttime="20191115 20:06:28.612"></status>
</kw>
<status status="PASS" endtime="20191115 20:06:28.613" starttime="20191115 20:06:22.415"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:06:28.616" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:06:30.305" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:06:30.305" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:30.305" starttime="20191115 20:06:28.614"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:06:30.306" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:30.306" starttime="20191115 20:06:30.306"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:06:30.307" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:06:30.307" starttime="20191115 20:06:30.307"></status>
</kw>
<msg timestamp="20191115 20:06:30.307" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:30.307" starttime="20191115 20:06:28.614"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:06:30.308" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:30.308" starttime="20191115 20:06:30.307"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:30.309" starttime="20191115 20:06:30.308"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:30.309" starttime="20191115 20:06:30.309"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:06:30.310" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:06:30.310" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:30.310" starttime="20191115 20:06:30.309"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:06:30.310" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:06:30.310" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:06:30.310" starttime="20191115 20:06:30.310"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:06:30.311" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:06:30.311" starttime="20191115 20:06:30.311"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:06:30.311" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:06:30.311" starttime="20191115 20:06:30.311"></status>
</kw>
<msg timestamp="20191115 20:06:30.312" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:06:30.312" starttime="20191115 20:06:28.613"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:06:30.313" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 20:06:30.313" starttime="20191115 20:06:30.312"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:30.314" starttime="20191115 20:06:30.313"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:06:30.314" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:06:31.554" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:06:31.554" starttime="20191115 20:06:30.314"></status>
</kw>
<status status="PASS" endtime="20191115 20:06:31.555" starttime="20191115 20:06:30.313"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:06:31.556" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:06:31.571" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:06:31.571" starttime="20191115 20:06:31.555"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:06:31.572" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:06:31.649" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:06:31.650" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:06:31.650" starttime="20191115 20:06:31.571"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:06:31.764" starttime="20191115 20:06:31.650"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:31.765" starttime="20191115 20:06:31.765"></status>
</kw>
<msg timestamp="20191115 20:06:31.766" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 20:06:31.766" starttime="20191115 20:06:30.312"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:06:31.769" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:06:33.603" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:06:33.603" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:33.603" starttime="20191115 20:06:31.767"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:06:33.604" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:33.604" starttime="20191115 20:06:33.603"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:06:33.604" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:06:33.605" starttime="20191115 20:06:33.604"></status>
</kw>
<msg timestamp="20191115 20:06:33.605" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:33.605" starttime="20191115 20:06:31.766"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:06:33.605" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:33.605" starttime="20191115 20:06:33.605"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:33.606" starttime="20191115 20:06:33.606"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:33.606" starttime="20191115 20:06:33.606"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:06:33.607" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:06:33.607" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:33.607" starttime="20191115 20:06:33.607"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:06:33.608" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:06:33.608" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:06:33.608" starttime="20191115 20:06:33.607"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:06:33.608" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:06:33.608" starttime="20191115 20:06:33.608"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:06:33.609" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:06:33.609" starttime="20191115 20:06:33.609"></status>
</kw>
<msg timestamp="20191115 20:06:33.609" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:06:33.609" starttime="20191115 20:06:31.766"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 20:06:33.610" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 20:06:33.610" starttime="20191115 20:06:33.609"></status>
</kw>
<status status="FAIL" endtime="20191115 20:06:33.610" critical="yes" starttime="20191115 20:06:17.768">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 20:06:33.613" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:06:33.613" starttime="20191115 20:06:33.612"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 20:06:33.614" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 20:06:33.614" starttime="20191115 20:06:33.613"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:06:33.615" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:06:33.615" starttime="20191115 20:06:33.615"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:33.617" starttime="20191115 20:06:33.616"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:06:33.617" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:06:34.804" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:06:34.804" starttime="20191115 20:06:33.617"></status>
</kw>
<status status="PASS" endtime="20191115 20:06:34.804" starttime="20191115 20:06:33.615"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:06:34.805" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:06:34.820" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:06:34.820" starttime="20191115 20:06:34.805"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:06:34.821" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:06:34.898" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:06:34.898" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:06:34.898" starttime="20191115 20:06:34.821"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:06:35.013" starttime="20191115 20:06:34.899"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:35.014" starttime="20191115 20:06:35.013"></status>
</kw>
<status status="PASS" endtime="20191115 20:06:35.014" starttime="20191115 20:06:33.614"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:06:35.016" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:06:35.017" starttime="20191115 20:06:35.016"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:35.018" starttime="20191115 20:06:35.017"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:06:35.019" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:06:36.206" level="INFO">Read output: Last login: Fri Nov 15 20:06:33 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:06:36.206" starttime="20191115 20:06:35.018"></status>
</kw>
<status status="PASS" endtime="20191115 20:06:36.206" starttime="20191115 20:06:35.017"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 20:06:36.207" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 20:06:36.221" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:06:36.222" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191115 20:06:36.222" starttime="20191115 20:06:36.207"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 20:06:36.223" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191115 20:06:36.223" starttime="20191115 20:06:36.222"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 20:06:36.223" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191115 20:06:36.223" starttime="20191115 20:06:36.223"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 20:06:36.265" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191115 20:06:36.265" starttime="20191115 20:06:36.224"></status>
</kw>
<status status="FAIL" endtime="20191115 20:06:36.266" starttime="20191115 20:06:35.015"></status>
</kw>
<status status="FAIL" endtime="20191115 20:06:36.266" critical="yes" starttime="20191115 20:06:33.611">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:06:36.269" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:06:38.052" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:06:38.052" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:38.052" starttime="20191115 20:06:36.268"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:06:38.054" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:38.054" starttime="20191115 20:06:38.053"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:06:38.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:06:38.056" starttime="20191115 20:06:38.055"></status>
</kw>
<msg timestamp="20191115 20:06:38.056" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:38.057" starttime="20191115 20:06:36.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:06:38.057" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:38.058" starttime="20191115 20:06:38.057"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:38.059" starttime="20191115 20:06:38.058"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:38.060" starttime="20191115 20:06:38.059"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:06:38.060" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:06:38.061" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:38.061" starttime="20191115 20:06:38.060"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:06:38.062" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:06:38.062" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:06:38.062" starttime="20191115 20:06:38.061"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:06:38.063" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:06:38.063" starttime="20191115 20:06:38.062"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:06:38.064" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:06:38.064" starttime="20191115 20:06:38.063"></status>
</kw>
<msg timestamp="20191115 20:06:38.064" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:06:38.064" starttime="20191115 20:06:36.267"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:06:38.066" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 20:06:38.066" starttime="20191115 20:06:38.065"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:38.068" starttime="20191115 20:06:38.067"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:06:38.069" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:06:39.268" level="INFO">Read output: Last login: Fri Nov 15 20:06:30 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:06:39.268" starttime="20191115 20:06:38.069"></status>
</kw>
<status status="PASS" endtime="20191115 20:06:39.269" starttime="20191115 20:06:38.067"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:06:39.269" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:06:39.283" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:06:39.284" starttime="20191115 20:06:39.269"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:06:39.284" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:06:39.361" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:06:39.361" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:06:39.361" starttime="20191115 20:06:39.284"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:06:39.476" starttime="20191115 20:06:39.362"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:39.477" starttime="20191115 20:06:39.476"></status>
</kw>
<msg timestamp="20191115 20:06:39.477" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 20:06:39.477" starttime="20191115 20:06:38.064"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:06:39.480" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:06:41.368" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:06:41.368" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:41.368" starttime="20191115 20:06:39.478"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:06:41.370" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:41.370" starttime="20191115 20:06:41.369"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:06:41.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:06:41.370" starttime="20191115 20:06:41.370"></status>
</kw>
<msg timestamp="20191115 20:06:41.371" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:41.371" starttime="20191115 20:06:39.478"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:06:41.371" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:41.371" starttime="20191115 20:06:41.371"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:41.372" starttime="20191115 20:06:41.372"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:06:41.372" starttime="20191115 20:06:41.372"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:06:41.373" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:06:41.373" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:06:41.373" starttime="20191115 20:06:41.373"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:06:41.374" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:06:41.374" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:06:41.374" starttime="20191115 20:06:41.373"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:06:41.374" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:06:41.374" starttime="20191115 20:06:41.374"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:06:41.375" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:06:41.375" starttime="20191115 20:06:41.374"></status>
</kw>
<msg timestamp="20191115 20:06:41.375" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:06:41.375" starttime="20191115 20:06:39.477"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 20:06:41.376" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 20:06:41.376" starttime="20191115 20:06:41.375"></status>
</kw>
<status status="FAIL" endtime="20191115 20:06:41.376" starttime="20191115 20:06:36.267"></status>
</kw>
<status status="FAIL" endtime="20191115 20:06:41.376" starttime="20191115 20:06:36.267"></status>
</kw>
<status status="FAIL" endtime="20191115 20:06:41.377" critical="yes" starttime="20191115 20:06:36.266">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191115 20:06:41.377" starttime="20191115 20:06:17.603"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
