<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191105 22:46:21.915" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:46:22.059" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:46:24.481" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:46:24.481" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191105 22:46:24.481" starttime="20191105 22:46:22.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:46:24.482" level="INFO"></msg>
<status status="PASS" endtime="20191105 22:46:24.482" starttime="20191105 22:46:24.482"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:46:24.483" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:46:24.483" starttime="20191105 22:46:24.483"></status>
</kw>
<status status="PASS" endtime="20191105 22:46:24.484" starttime="20191105 22:46:22.057"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:46:24.489" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:46:26.433" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:46:26.433" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191105 22:46:26.433" starttime="20191105 22:46:24.487"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:46:26.434" level="INFO"></msg>
<status status="PASS" endtime="20191105 22:46:26.434" starttime="20191105 22:46:26.433"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:46:26.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:46:26.435" starttime="20191105 22:46:26.434"></status>
</kw>
<status status="PASS" endtime="20191105 22:46:26.435" starttime="20191105 22:46:24.484"></status>
</kw>
<status status="PASS" endtime="20191105 22:46:26.435" starttime="20191105 22:46:22.057"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191105 22:46:26.436" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191105 22:46:26.436" starttime="20191105 22:46:26.436"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191105 22:46:26.437" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191105 22:46:26.437" starttime="20191105 22:46:26.436"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191105 22:46:26.438" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191105 22:46:26.438" starttime="20191105 22:46:26.437"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 22:46:26.439" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 22:46:26.439" starttime="20191105 22:46:26.438"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:46:26.441" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:46:30.896" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:46:30.896" level="INFO">${output} = 2019-11-05 22:46:29 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 22:46:29 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191105 22:46:30.896" starttime="20191105 22:46:26.440"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:46:30.897" level="INFO">2019-11-05 22:46:29 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 22:46:29 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-05 22:46:29 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 22:46:30.897" starttime="20191105 22:46:30.896"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:46:30.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:46:30.898" starttime="20191105 22:46:30.897"></status>
</kw>
<status status="PASS" endtime="20191105 22:46:30.898" starttime="20191105 22:46:26.439"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:46:30.901" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:46:33.035" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:46:33.035" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191105 22:46:33.035" starttime="20191105 22:46:30.899"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:46:33.036" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191105 22:46:33.036" starttime="20191105 22:46:33.036"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:46:33.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:46:33.037" starttime="20191105 22:46:33.037"></status>
</kw>
<msg timestamp="20191105 22:46:33.037" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191105 22:46:33.038" starttime="20191105 22:46:30.898"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:33.038" starttime="20191105 22:46:33.038"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 22:46:33.039" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 22:46:33.039" starttime="20191105 22:46:33.038"></status>
</kw>
<status status="PASS" endtime="20191105 22:46:33.039" starttime="20191105 22:46:26.435"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:46:33.042" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:46:34.789" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:46:34.790" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:34.790" starttime="20191105 22:46:33.040"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:46:34.791" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:34.791" starttime="20191105 22:46:34.790"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:46:34.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:46:34.792" starttime="20191105 22:46:34.792"></status>
</kw>
<msg timestamp="20191105 22:46:34.793" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:34.793" starttime="20191105 22:46:33.040"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 22:46:34.794" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:34.794" starttime="20191105 22:46:34.793"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:34.795" starttime="20191105 22:46:34.794"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:34.796" starttime="20191105 22:46:34.795"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 22:46:34.796" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 22:46:34.797" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:34.797" starttime="20191105 22:46:34.796"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 22:46:34.798" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 22:46:34.798" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 22:46:34.798" starttime="20191105 22:46:34.797"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 22:46:34.798" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:46:34.799" starttime="20191105 22:46:34.798"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 22:46:34.799" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 22:46:34.799" starttime="20191105 22:46:34.799"></status>
</kw>
<msg timestamp="20191105 22:46:34.800" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:46:34.800" starttime="20191105 22:46:33.039"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 22:46:34.801" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191105 22:46:34.802" starttime="20191105 22:46:34.801"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:34.803" starttime="20191105 22:46:34.802"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 22:46:34.804" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191105 22:46:36.103" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 22:46:36.104" starttime="20191105 22:46:34.803"></status>
</kw>
<status status="PASS" endtime="20191105 22:46:36.104" starttime="20191105 22:46:34.802"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 22:46:36.105" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 22:46:36.119" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 22:46:36.119" starttime="20191105 22:46:36.104"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 22:46:36.120" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 22:46:36.196" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 22:46:36.197" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 22:46:36.197" starttime="20191105 22:46:36.119"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 22:46:36.311" starttime="20191105 22:46:36.197"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:36.313" starttime="20191105 22:46:36.312"></status>
</kw>
<msg timestamp="20191105 22:46:36.313" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191105 22:46:36.313" starttime="20191105 22:46:34.800"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:46:36.317" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:46:38.185" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:46:38.185" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:38.185" starttime="20191105 22:46:36.315"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:46:38.187" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:38.187" starttime="20191105 22:46:38.186"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:46:38.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:46:38.188" starttime="20191105 22:46:38.188"></status>
</kw>
<msg timestamp="20191105 22:46:38.189" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:38.189" starttime="20191105 22:46:36.314"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 22:46:38.190" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:38.190" starttime="20191105 22:46:38.189"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:38.191" starttime="20191105 22:46:38.190"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:38.192" starttime="20191105 22:46:38.191"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 22:46:38.193" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 22:46:38.193" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:38.193" starttime="20191105 22:46:38.192"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 22:46:38.194" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 22:46:38.195" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 22:46:38.195" starttime="20191105 22:46:38.194"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 22:46:38.196" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:46:38.196" starttime="20191105 22:46:38.195"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 22:46:38.196" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 22:46:38.197" starttime="20191105 22:46:38.196"></status>
</kw>
<msg timestamp="20191105 22:46:38.197" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:46:38.197" starttime="20191105 22:46:36.313"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191105 22:46:38.199" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191105 22:46:38.199" starttime="20191105 22:46:38.198"></status>
</kw>
<status status="FAIL" endtime="20191105 22:46:38.199" critical="yes" starttime="20191105 22:46:22.056">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191105 22:46:38.204" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191105 22:46:38.204" starttime="20191105 22:46:38.201"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191105 22:46:38.206" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191105 22:46:38.206" starttime="20191105 22:46:38.204"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 22:46:38.208" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 22:46:38.208" starttime="20191105 22:46:38.207"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:38.211" starttime="20191105 22:46:38.209"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 22:46:38.211" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 22:46:39.409" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 22:46:39.409" starttime="20191105 22:46:38.211"></status>
</kw>
<status status="PASS" endtime="20191105 22:46:39.410" starttime="20191105 22:46:38.209"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 22:46:39.410" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 22:46:39.425" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 22:46:39.425" starttime="20191105 22:46:39.410"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 22:46:39.425" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 22:46:39.502" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 22:46:39.502" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 22:46:39.503" starttime="20191105 22:46:39.425"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 22:46:39.617" starttime="20191105 22:46:39.503"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:39.618" starttime="20191105 22:46:39.618"></status>
</kw>
<status status="PASS" endtime="20191105 22:46:39.618" starttime="20191105 22:46:38.207"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 22:46:39.620" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 22:46:39.620" starttime="20191105 22:46:39.619"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:39.621" starttime="20191105 22:46:39.620"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 22:46:39.622" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 22:46:40.820" level="INFO">Read output: Last login: Tue Nov  5 22:46:38 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 22:46:40.820" starttime="20191105 22:46:39.621"></status>
</kw>
<status status="PASS" endtime="20191105 22:46:40.820" starttime="20191105 22:46:39.620"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191105 22:46:40.821" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191105 22:46:40.835" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 22:46:40.835" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191105 22:46:40.835" starttime="20191105 22:46:40.821"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191105 22:46:40.836" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191105 22:46:40.836" starttime="20191105 22:46:40.835"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191105 22:46:40.836" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191105 22:46:40.836" starttime="20191105 22:46:40.836"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191105 22:46:40.881" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191105 22:46:40.881" starttime="20191105 22:46:40.837"></status>
</kw>
<status status="FAIL" endtime="20191105 22:46:40.881" starttime="20191105 22:46:39.619"></status>
</kw>
<status status="FAIL" endtime="20191105 22:46:40.882" critical="yes" starttime="20191105 22:46:38.200">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:46:40.887" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:46:42.586" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:46:42.586" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:42.586" starttime="20191105 22:46:40.885"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:46:42.587" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:42.587" starttime="20191105 22:46:42.587"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:46:42.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:46:42.589" starttime="20191105 22:46:42.588"></status>
</kw>
<msg timestamp="20191105 22:46:42.589" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:42.589" starttime="20191105 22:46:40.884"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 22:46:42.590" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:42.590" starttime="20191105 22:46:42.589"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:42.591" starttime="20191105 22:46:42.590"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:42.591" starttime="20191105 22:46:42.591"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 22:46:42.592" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 22:46:42.592" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:42.592" starttime="20191105 22:46:42.591"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 22:46:42.593" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 22:46:42.593" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 22:46:42.593" starttime="20191105 22:46:42.592"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 22:46:42.594" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:46:42.594" starttime="20191105 22:46:42.593"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 22:46:42.595" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 22:46:42.595" starttime="20191105 22:46:42.594"></status>
</kw>
<msg timestamp="20191105 22:46:42.595" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:46:42.595" starttime="20191105 22:46:40.883"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 22:46:42.597" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191105 22:46:42.597" starttime="20191105 22:46:42.596"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:42.598" starttime="20191105 22:46:42.597"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 22:46:42.599" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191105 22:46:43.797" level="INFO">Read output: Last login: Tue Nov  5 22:46:35 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 22:46:43.797" starttime="20191105 22:46:42.598"></status>
</kw>
<status status="PASS" endtime="20191105 22:46:43.797" starttime="20191105 22:46:42.597"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 22:46:43.798" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 22:46:43.811" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 22:46:43.812" starttime="20191105 22:46:43.797"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 22:46:43.812" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 22:46:43.888" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 22:46:43.889" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 22:46:43.889" starttime="20191105 22:46:43.812"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 22:46:44.004" starttime="20191105 22:46:43.889"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:44.004" starttime="20191105 22:46:44.004"></status>
</kw>
<msg timestamp="20191105 22:46:44.005" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191105 22:46:44.005" starttime="20191105 22:46:42.595"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 22:46:44.007" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 22:46:45.926" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 22:46:45.926" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:45.926" starttime="20191105 22:46:44.006"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 22:46:45.927" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:45.927" starttime="20191105 22:46:45.926"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 22:46:45.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 22:46:45.928" starttime="20191105 22:46:45.928"></status>
</kw>
<msg timestamp="20191105 22:46:45.929" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:45.929" starttime="20191105 22:46:44.005"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 22:46:45.929" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:45.930" starttime="20191105 22:46:45.929"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:45.930" starttime="20191105 22:46:45.930"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 22:46:45.931" starttime="20191105 22:46:45.931"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 22:46:45.932" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 22:46:45.932" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 22:46:45.932" starttime="20191105 22:46:45.931"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 22:46:45.933" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 22:46:45.933" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 22:46:45.933" starttime="20191105 22:46:45.932"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 22:46:45.934" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:46:45.934" starttime="20191105 22:46:45.933"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 22:46:45.934" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 22:46:45.934" starttime="20191105 22:46:45.934"></status>
</kw>
<msg timestamp="20191105 22:46:45.935" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191105 22:46:45.935" starttime="20191105 22:46:44.005"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191105 22:46:45.936" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191105 22:46:45.936" starttime="20191105 22:46:45.935"></status>
</kw>
<status status="FAIL" endtime="20191105 22:46:45.936" starttime="20191105 22:46:40.883"></status>
</kw>
<status status="FAIL" endtime="20191105 22:46:45.936" starttime="20191105 22:46:40.883"></status>
</kw>
<status status="FAIL" endtime="20191105 22:46:45.937" critical="yes" starttime="20191105 22:46:40.882">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191105 22:46:45.938" starttime="20191105 22:46:21.916"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
