<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191114 22:40:18.154" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:40:18.310" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:40:21.418" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:40:21.418" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 22:40:21.418" starttime="20191114 22:40:18.308"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:40:21.419" level="INFO"></msg>
<status status="PASS" endtime="20191114 22:40:21.420" starttime="20191114 22:40:21.419"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:40:21.420" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:40:21.420" starttime="20191114 22:40:21.420"></status>
</kw>
<status status="PASS" endtime="20191114 22:40:21.420" starttime="20191114 22:40:18.307"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:40:21.426" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:40:23.472" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:40:23.473" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 22:40:23.473" starttime="20191114 22:40:21.424"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:40:23.474" level="INFO"></msg>
<status status="PASS" endtime="20191114 22:40:23.474" starttime="20191114 22:40:23.473"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:40:23.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:40:23.475" starttime="20191114 22:40:23.475"></status>
</kw>
<status status="PASS" endtime="20191114 22:40:23.476" starttime="20191114 22:40:21.421"></status>
</kw>
<status status="PASS" endtime="20191114 22:40:23.476" starttime="20191114 22:40:18.307"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 22:40:23.478" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191114 22:40:23.478" starttime="20191114 22:40:23.477"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 22:40:23.479" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191114 22:40:23.480" starttime="20191114 22:40:23.479"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 22:40:23.481" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191114 22:40:23.481" starttime="20191114 22:40:23.480"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 22:40:23.483" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 22:40:23.483" starttime="20191114 22:40:23.481"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:40:23.486" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:40:28.298" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:40:28.299" level="INFO">${output} = 2019-11-14 22:40:26 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 22:40:26 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 22:40:28.299" starttime="20191114 22:40:23.484"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:40:28.300" level="INFO">2019-11-14 22:40:26 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 22:40:26 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 22:40:26 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 22:40:28.300" starttime="20191114 22:40:28.299"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:40:28.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:40:28.302" starttime="20191114 22:40:28.301"></status>
</kw>
<status status="PASS" endtime="20191114 22:40:28.302" starttime="20191114 22:40:23.483"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:40:28.306" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:40:30.431" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:40:30.432" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191114 22:40:30.432" starttime="20191114 22:40:28.304"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:40:30.434" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191114 22:40:30.434" starttime="20191114 22:40:30.433"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:40:30.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:40:30.435" starttime="20191114 22:40:30.434"></status>
</kw>
<msg timestamp="20191114 22:40:30.436" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191114 22:40:30.436" starttime="20191114 22:40:28.302"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:30.437" starttime="20191114 22:40:30.436"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 22:40:30.438" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 22:40:30.438" starttime="20191114 22:40:30.437"></status>
</kw>
<status status="PASS" endtime="20191114 22:40:30.438" starttime="20191114 22:40:23.476"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:40:30.443" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:40:32.370" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:40:32.370" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:32.370" starttime="20191114 22:40:30.440"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:40:32.371" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:32.371" starttime="20191114 22:40:32.370"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:40:32.372" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:40:32.372" starttime="20191114 22:40:32.371"></status>
</kw>
<msg timestamp="20191114 22:40:32.372" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:32.372" starttime="20191114 22:40:30.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 22:40:32.373" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:32.373" starttime="20191114 22:40:32.372"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:32.374" starttime="20191114 22:40:32.373"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:32.374" starttime="20191114 22:40:32.374"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 22:40:32.375" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 22:40:32.375" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:32.375" starttime="20191114 22:40:32.374"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 22:40:32.376" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 22:40:32.376" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 22:40:32.376" starttime="20191114 22:40:32.375"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 22:40:32.376" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 22:40:32.376" starttime="20191114 22:40:32.376"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 22:40:32.377" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 22:40:32.377" starttime="20191114 22:40:32.377"></status>
</kw>
<msg timestamp="20191114 22:40:32.377" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 22:40:32.377" starttime="20191114 22:40:30.439"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 22:40:32.378" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 22:40:32.379" starttime="20191114 22:40:32.378"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:32.380" starttime="20191114 22:40:32.379"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 22:40:32.380" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 22:40:33.588" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 22:40:33.589" starttime="20191114 22:40:32.380"></status>
</kw>
<status status="PASS" endtime="20191114 22:40:33.589" starttime="20191114 22:40:32.379"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 22:40:33.590" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 22:40:33.604" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 22:40:33.605" starttime="20191114 22:40:33.589"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 22:40:33.605" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 22:40:33.682" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 22:40:33.683" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 22:40:33.683" starttime="20191114 22:40:33.605"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 22:40:33.798" starttime="20191114 22:40:33.683"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:33.799" starttime="20191114 22:40:33.798"></status>
</kw>
<msg timestamp="20191114 22:40:33.799" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 22:40:33.800" starttime="20191114 22:40:32.377"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:40:33.804" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:40:35.714" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:40:35.715" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:35.715" starttime="20191114 22:40:33.801"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:40:35.716" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:35.716" starttime="20191114 22:40:35.715"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:40:35.717" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:40:35.717" starttime="20191114 22:40:35.717"></status>
</kw>
<msg timestamp="20191114 22:40:35.718" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:35.718" starttime="20191114 22:40:33.800"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 22:40:35.719" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:35.719" starttime="20191114 22:40:35.718"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:35.719" starttime="20191114 22:40:35.719"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:35.720" starttime="20191114 22:40:35.720"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 22:40:35.721" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 22:40:35.721" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:35.721" starttime="20191114 22:40:35.721"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 22:40:35.722" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 22:40:35.722" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 22:40:35.722" starttime="20191114 22:40:35.722"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 22:40:35.723" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 22:40:35.723" starttime="20191114 22:40:35.722"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 22:40:35.724" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 22:40:35.724" starttime="20191114 22:40:35.723"></status>
</kw>
<msg timestamp="20191114 22:40:35.724" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191114 22:40:35.724" starttime="20191114 22:40:33.800"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 22:40:35.725" level="FAIL">OMs did not failover: om2 == om2</msg>
<status status="FAIL" endtime="20191114 22:40:35.726" starttime="20191114 22:40:35.725"></status>
</kw>
<status status="FAIL" endtime="20191114 22:40:35.726" critical="yes" starttime="20191114 22:40:18.306">OMs did not failover: om2 == om2</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191114 22:40:35.729" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191114 22:40:35.729" starttime="20191114 22:40:35.727"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191114 22:40:35.731" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191114 22:40:35.731" starttime="20191114 22:40:35.730"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 22:40:35.733" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 22:40:35.733" starttime="20191114 22:40:35.732"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:35.734" starttime="20191114 22:40:35.733"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 22:40:35.735" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 22:40:36.939" level="INFO">Read output: Last login: Thu Nov 14 22:40:32 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 22:40:36.939" starttime="20191114 22:40:35.735"></status>
</kw>
<status status="PASS" endtime="20191114 22:40:36.939" starttime="20191114 22:40:35.733"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 22:40:36.940" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 22:40:36.956" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 22:40:36.956" starttime="20191114 22:40:36.940"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 22:40:36.957" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 22:40:37.034" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 22:40:37.035" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 22:40:37.035" starttime="20191114 22:40:36.956"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 22:40:37.150" starttime="20191114 22:40:37.035"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:37.151" starttime="20191114 22:40:37.150"></status>
</kw>
<status status="PASS" endtime="20191114 22:40:37.152" starttime="20191114 22:40:35.732"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 22:40:37.154" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 22:40:37.154" starttime="20191114 22:40:37.153"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:37.156" starttime="20191114 22:40:37.155"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 22:40:37.156" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 22:40:38.362" level="INFO">Read output: Last login: Thu Nov 14 22:40:35 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 22:40:38.362" starttime="20191114 22:40:37.156"></status>
</kw>
<status status="PASS" endtime="20191114 22:40:38.363" starttime="20191114 22:40:37.154"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 22:40:38.364" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 22:40:38.379" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 22:40:38.379" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191114 22:40:38.379" starttime="20191114 22:40:38.363"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 22:40:38.380" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191114 22:40:38.380" starttime="20191114 22:40:38.380"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 22:40:38.381" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191114 22:40:38.382" starttime="20191114 22:40:38.381"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 22:40:38.426" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191114 22:40:38.426" starttime="20191114 22:40:38.382"></status>
</kw>
<status status="FAIL" endtime="20191114 22:40:38.426" starttime="20191114 22:40:37.152"></status>
</kw>
<status status="FAIL" endtime="20191114 22:40:38.427" critical="yes" starttime="20191114 22:40:35.727">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:40:38.432" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:40:40.341" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:40:40.342" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:40.342" starttime="20191114 22:40:38.430"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:40:40.344" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:40.344" starttime="20191114 22:40:40.343"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:40:40.345" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:40:40.345" starttime="20191114 22:40:40.344"></status>
</kw>
<msg timestamp="20191114 22:40:40.346" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:40.346" starttime="20191114 22:40:38.429"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 22:40:40.347" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:40.347" starttime="20191114 22:40:40.346"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:40.348" starttime="20191114 22:40:40.347"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:40.349" starttime="20191114 22:40:40.348"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 22:40:40.350" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 22:40:40.350" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:40.350" starttime="20191114 22:40:40.349"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 22:40:40.351" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 22:40:40.351" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 22:40:40.351" starttime="20191114 22:40:40.350"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 22:40:40.352" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 22:40:40.352" starttime="20191114 22:40:40.352"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 22:40:40.353" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 22:40:40.353" starttime="20191114 22:40:40.353"></status>
</kw>
<msg timestamp="20191114 22:40:40.354" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 22:40:40.354" starttime="20191114 22:40:38.428"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 22:40:40.356" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 22:40:40.356" starttime="20191114 22:40:40.355"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:40.358" starttime="20191114 22:40:40.357"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 22:40:40.359" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 22:40:41.564" level="INFO">Read output: Last login: Thu Nov 14 22:40:37 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 22:40:41.564" starttime="20191114 22:40:40.358"></status>
</kw>
<status status="PASS" endtime="20191114 22:40:41.565" starttime="20191114 22:40:40.356"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 22:40:41.566" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 22:40:41.581" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 22:40:41.581" starttime="20191114 22:40:41.565"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 22:40:41.581" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 22:40:41.659" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 22:40:41.659" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 22:40:41.659" starttime="20191114 22:40:41.581"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 22:40:41.774" starttime="20191114 22:40:41.660"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:41.775" starttime="20191114 22:40:41.775"></status>
</kw>
<msg timestamp="20191114 22:40:41.776" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 22:40:41.776" starttime="20191114 22:40:40.354"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:40:41.780" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:40:43.719" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:40:43.719" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:43.719" starttime="20191114 22:40:41.777"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:40:43.720" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:43.720" starttime="20191114 22:40:43.719"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:40:43.721" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:40:43.721" starttime="20191114 22:40:43.720"></status>
</kw>
<msg timestamp="20191114 22:40:43.721" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:43.721" starttime="20191114 22:40:41.777"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 22:40:43.722" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:43.722" starttime="20191114 22:40:43.721"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:43.722" starttime="20191114 22:40:43.722"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 22:40:43.723" starttime="20191114 22:40:43.723"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 22:40:43.723" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 22:40:43.724" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 22:40:43.724" starttime="20191114 22:40:43.723"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 22:40:43.724" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 22:40:43.724" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 22:40:43.724" starttime="20191114 22:40:43.724"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 22:40:43.725" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 22:40:43.725" starttime="20191114 22:40:43.724"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 22:40:43.725" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 22:40:43.725" starttime="20191114 22:40:43.725"></status>
</kw>
<msg timestamp="20191114 22:40:43.726" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191114 22:40:43.726" starttime="20191114 22:40:41.776"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 22:40:43.727" level="FAIL">OMs did not failover: om2 == om2</msg>
<status status="FAIL" endtime="20191114 22:40:43.727" starttime="20191114 22:40:43.726"></status>
</kw>
<status status="FAIL" endtime="20191114 22:40:43.727" starttime="20191114 22:40:38.428"></status>
</kw>
<status status="FAIL" endtime="20191114 22:40:43.727" starttime="20191114 22:40:38.428"></status>
</kw>
<status status="FAIL" endtime="20191114 22:40:43.727" critical="yes" starttime="20191114 22:40:38.427">OMs did not failover: om2 == om2</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191114 22:40:43.728" starttime="20191114 22:40:18.155"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
