<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191030 23:13:32.590" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:13:32.740" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:13:35.500" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:13:35.500" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191030 23:13:35.500" starttime="20191030 23:13:32.738"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:13:35.501" level="INFO"></msg>
<status status="PASS" endtime="20191030 23:13:35.501" starttime="20191030 23:13:35.501"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:13:35.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:13:35.505" starttime="20191030 23:13:35.502"></status>
</kw>
<status status="PASS" endtime="20191030 23:13:35.505" starttime="20191030 23:13:32.737"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:13:35.508" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:13:37.656" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:13:37.657" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191030 23:13:37.657" starttime="20191030 23:13:35.506"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:13:37.658" level="INFO"></msg>
<status status="PASS" endtime="20191030 23:13:37.659" starttime="20191030 23:13:37.657"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:13:37.660" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:13:37.660" starttime="20191030 23:13:37.659"></status>
</kw>
<status status="PASS" endtime="20191030 23:13:37.660" starttime="20191030 23:13:35.505"></status>
</kw>
<status status="PASS" endtime="20191030 23:13:37.660" starttime="20191030 23:13:32.737"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191030 23:13:37.662" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191030 23:13:37.662" starttime="20191030 23:13:37.661"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191030 23:13:37.663" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191030 23:13:37.663" starttime="20191030 23:13:37.663"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191030 23:13:37.664" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191030 23:13:37.665" starttime="20191030 23:13:37.664"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:13:37.676" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:13:37.676" starttime="20191030 23:13:37.665"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:13:37.680" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:13:42.578" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:13:42.578" level="INFO">${output} = 2019-10-30 23:13:40 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-30 23:13:40 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191030 23:13:42.578" starttime="20191030 23:13:37.678"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:13:42.580" level="INFO">2019-10-30 23:13:40 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-30 23:13:40 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-30 23:13:40 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191030 23:13:42.580" starttime="20191030 23:13:42.579"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:13:42.581" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:13:42.581" starttime="20191030 23:13:42.581"></status>
</kw>
<status status="PASS" endtime="20191030 23:13:42.582" starttime="20191030 23:13:37.677"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:13:42.585" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:13:44.706" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:13:44.706" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191030 23:13:44.706" starttime="20191030 23:13:42.583"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:13:44.707" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191030 23:13:44.707" starttime="20191030 23:13:44.706"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:13:44.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:13:44.708" starttime="20191030 23:13:44.707"></status>
</kw>
<msg timestamp="20191030 23:13:44.708" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191030 23:13:44.708" starttime="20191030 23:13:42.582"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:13:44.709" starttime="20191030 23:13:44.709"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:13:44.710" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:13:44.710" starttime="20191030 23:13:44.709"></status>
</kw>
<status status="PASS" endtime="20191030 23:13:44.710" starttime="20191030 23:13:37.661"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:13:44.713" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:13:46.719" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:13:46.720" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:13:46.720" starttime="20191030 23:13:44.711"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:13:46.722" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:13:46.722" starttime="20191030 23:13:46.721"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:13:46.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:13:46.723" starttime="20191030 23:13:46.722"></status>
</kw>
<msg timestamp="20191030 23:13:46.724" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:13:46.724" starttime="20191030 23:13:44.711"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191030 23:13:46.724" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:13:46.725" starttime="20191030 23:13:46.724"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191030 23:13:46.726" starttime="20191030 23:13:46.725"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191030 23:13:46.727" starttime="20191030 23:13:46.726"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191030 23:13:46.728" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191030 23:13:46.728" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:13:46.728" starttime="20191030 23:13:46.727"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191030 23:13:46.729" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191030 23:13:46.729" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191030 23:13:46.729" starttime="20191030 23:13:46.728"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191030 23:13:46.730" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191030 23:13:46.731" starttime="20191030 23:13:46.730"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191030 23:13:46.731" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191030 23:13:46.732" starttime="20191030 23:13:46.731"></status>
</kw>
<msg timestamp="20191030 23:13:46.732" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191030 23:13:46.732" starttime="20191030 23:13:44.710"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:13:46.734" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191030 23:13:46.734" starttime="20191030 23:13:46.733"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:13:46.736" starttime="20191030 23:13:46.735"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:13:46.737" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:13:47.977" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:13:47.978" starttime="20191030 23:13:46.736"></status>
</kw>
<status status="PASS" endtime="20191030 23:13:47.978" starttime="20191030 23:13:46.734"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191030 23:13:47.979" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191030 23:13:58.162" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:13:58.162" starttime="20191030 23:13:47.978"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191030 23:13:58.164" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:13:58.272" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:13:58.272" level="INFO">${shutdownMsg} = hadoop     450  0.0  0.0   9556  1168 ?        Ss   23:13   0:00 bash -c sudo ps aux | grep om
hadoop     452  0.0  0.0   9088   672 ?        S    23:13   0:00 grep om</msg>
<status status="PASS" endtime="20191030 23:13:58.272" starttime="20191030 23:13:58.163"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:13:58.306" starttime="20191030 23:13:58.273"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:13:58.307" starttime="20191030 23:13:58.306"></status>
</kw>
<msg timestamp="20191030 23:13:58.307" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191030 23:13:58.307" starttime="20191030 23:13:46.732"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:13:58.312" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:14:10.500" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:14:10.501" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:14:10.501" starttime="20191030 23:13:58.309"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:14:10.503" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:14:10.503" starttime="20191030 23:14:10.502"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:14:10.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:14:10.504" starttime="20191030 23:14:10.503"></status>
</kw>
<msg timestamp="20191030 23:14:10.505" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:14:10.505" starttime="20191030 23:13:58.308"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191030 23:14:10.506" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:14:10.506" starttime="20191030 23:14:10.505"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191030 23:14:10.507" starttime="20191030 23:14:10.506"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191030 23:14:10.508" starttime="20191030 23:14:10.508"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191030 23:14:10.509" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191030 23:14:10.510" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:14:10.510" starttime="20191030 23:14:10.509"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191030 23:14:10.511" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191030 23:14:10.511" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191030 23:14:10.511" starttime="20191030 23:14:10.510"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191030 23:14:10.512" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191030 23:14:10.512" starttime="20191030 23:14:10.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191030 23:14:10.513" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191030 23:14:10.513" starttime="20191030 23:14:10.512"></status>
</kw>
<msg timestamp="20191030 23:14:10.514" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191030 23:14:10.514" starttime="20191030 23:13:58.308"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191030 23:14:10.515" starttime="20191030 23:14:10.514"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191030 23:14:10.517" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191030 23:14:10.517" starttime="20191030 23:14:10.516"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191030 23:14:10.518" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191030 23:14:10.518" starttime="20191030 23:14:10.517"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191030 23:14:10.519" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191030 23:14:10.519" starttime="20191030 23:14:10.518"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:14:10.522" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:14:10.522" starttime="20191030 23:14:10.520"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:14:10.526" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:14:25.073" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:14:25.073" level="INFO">${output} = 2019-10-30 23:14:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191030 23:14:25.074" starttime="20191030 23:14:10.523"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:14:25.075" level="INFO">2019-10-30 23:14:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:14:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:14:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:14:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:14:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:14:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:14:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:14:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:14:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:14:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:14:23 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-30 23:14:23 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-30 23:14:23 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191030 23:14:25.075" starttime="20191030 23:14:25.074"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:14:25.076" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:14:25.076" starttime="20191030 23:14:25.075"></status>
</kw>
<status status="PASS" endtime="20191030 23:14:25.076" starttime="20191030 23:14:10.522"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:14:25.079" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:14:37.508" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:14:37.509" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191030 23:14:37.509" starttime="20191030 23:14:25.077"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:14:37.511" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191030 23:14:37.511" starttime="20191030 23:14:37.510"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:14:37.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:14:37.512" starttime="20191030 23:14:37.511"></status>
</kw>
<msg timestamp="20191030 23:14:37.513" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191030 23:14:37.513" starttime="20191030 23:14:25.076"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:14:37.514" starttime="20191030 23:14:37.513"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:14:37.516" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:14:37.516" starttime="20191030 23:14:37.515"></status>
</kw>
<status status="PASS" endtime="20191030 23:14:37.516" starttime="20191030 23:14:10.515"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:14:37.518" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191030 23:14:37.519" starttime="20191030 23:14:37.518"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:14:37.521" starttime="20191030 23:14:37.520"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:14:37.522" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:14:38.727" level="INFO">Read output: Last login: Wed Oct 30 23:13:46 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:14:38.728" starttime="20191030 23:14:37.521"></status>
</kw>
<status status="PASS" endtime="20191030 23:14:38.728" starttime="20191030 23:14:37.519"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191030 23:14:38.730" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191030 23:14:40.908" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:14:40.909" starttime="20191030 23:14:38.729"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191030 23:14:40.910" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:14:41.008" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:14:41.009" level="INFO">${startupMsg} = hadoop     503  372  0.0 34482484 258792 ?     Sl   23:14   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191030 23:14:41.009" starttime="20191030 23:14:40.909"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:14:41.074" starttime="20191030 23:14:41.009"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:14:41.075" starttime="20191030 23:14:41.074"></status>
</kw>
<status status="PASS" endtime="20191030 23:14:41.075" starttime="20191030 23:14:37.517"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20191030 23:14:41.075" critical="yes" starttime="20191030 23:13:32.736"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191030 23:14:41.078" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191030 23:14:41.078" starttime="20191030 23:14:41.076"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191030 23:14:41.080" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191030 23:14:41.080" starttime="20191030 23:14:41.078"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:14:41.081" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191030 23:14:41.081" starttime="20191030 23:14:41.081"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:14:41.083" starttime="20191030 23:14:41.082"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:14:41.084" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:14:42.282" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:14:42.282" starttime="20191030 23:14:41.083"></status>
</kw>
<status status="PASS" endtime="20191030 23:14:42.283" starttime="20191030 23:14:41.082"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191030 23:14:42.284" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191030 23:14:52.442" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:14:52.442" starttime="20191030 23:14:42.283"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191030 23:14:52.444" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:14:52.541" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:14:52.542" level="INFO">${shutdownMsg} = hadoop     498  0.0  0.0   9556  1168 ?        Ss   23:14   0:00 bash -c sudo ps aux | grep om
hadoop     500  0.0  0.0   9088   668 ?        S    23:14   0:00 grep om</msg>
<status status="PASS" endtime="20191030 23:14:52.542" starttime="20191030 23:14:52.443"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:14:52.607" starttime="20191030 23:14:52.542"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:14:52.609" starttime="20191030 23:14:52.608"></status>
</kw>
<status status="PASS" endtime="20191030 23:14:52.609" starttime="20191030 23:14:41.080"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:14:52.611" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191030 23:14:52.611" starttime="20191030 23:14:52.610"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:14:52.613" starttime="20191030 23:14:52.612"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:14:52.614" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:14:53.818" level="INFO">Read output: Last login: Wed Oct 30 23:14:41 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:14:53.818" starttime="20191030 23:14:52.613"></status>
</kw>
<status status="PASS" endtime="20191030 23:14:53.819" starttime="20191030 23:14:52.611"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191030 23:14:53.820" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191030 23:14:53.835" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:14:53.836" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191030 23:14:53.836" starttime="20191030 23:14:53.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191030 23:14:53.838" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191030 23:14:53.838" starttime="20191030 23:14:53.837"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191030 23:14:53.839" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191030 23:14:53.839" starttime="20191030 23:14:53.838"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191030 23:14:53.919" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191030 23:14:53.929" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191030 23:14:53.929" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191030 23:14:53.929" starttime="20191030 23:14:53.840"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191030 23:14:53.930" level="INFO">Length is 2</msg>
<msg timestamp="20191030 23:14:53.931" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191030 23:14:53.931" starttime="20191030 23:14:53.930"></status>
</kw>
<msg timestamp="20191030 23:14:53.931" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191030 23:14:53.931" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191030 23:14:53.931" starttime="20191030 23:14:52.609"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:14:53.935" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:15:05.967" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:15:05.967" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:15:05.967" starttime="20191030 23:14:53.933"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:15:05.969" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:15:05.970" starttime="20191030 23:15:05.968"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:15:05.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:15:05.971" starttime="20191030 23:15:05.970"></status>
</kw>
<msg timestamp="20191030 23:15:05.972" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:15:05.972" starttime="20191030 23:14:53.932"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191030 23:15:05.973" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:15:05.973" starttime="20191030 23:15:05.972"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191030 23:15:05.974" starttime="20191030 23:15:05.973"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191030 23:15:05.975" starttime="20191030 23:15:05.975"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191030 23:15:05.977" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191030 23:15:05.977" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:15:05.977" starttime="20191030 23:15:05.976"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191030 23:15:05.978" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191030 23:15:05.978" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191030 23:15:05.978" starttime="20191030 23:15:05.977"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191030 23:15:05.979" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191030 23:15:05.980" starttime="20191030 23:15:05.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191030 23:15:05.980" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191030 23:15:05.981" starttime="20191030 23:15:05.980"></status>
</kw>
<msg timestamp="20191030 23:15:05.981" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191030 23:15:05.981" starttime="20191030 23:14:53.932"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191030 23:15:05.985" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191030 23:15:05.985" starttime="20191030 23:15:05.982"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191030 23:15:05.989" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191030 23:15:05.989" starttime="20191030 23:15:05.988"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191030 23:15:05.990" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191030 23:15:05.990" starttime="20191030 23:15:05.989"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:15:05.995" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:15:20.790" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:15:20.790" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191030 23:15:20.791" starttime="20191030 23:15:05.992"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:15:20.792" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191030 23:15:20.792" starttime="20191030 23:15:20.791"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:15:20.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:15:20.795" starttime="20191030 23:15:20.793"></status>
</kw>
<status status="PASS" endtime="20191030 23:15:20.796" starttime="20191030 23:15:05.991"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:15:20.801" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:15:33.295" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:15:33.295" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1572477318297,
  "modificationTime": 1572477320368,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191030 23:15:33.295" starttime="20191030 23:15:20.798"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:15:33.297" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1572477318297,
  "modificationTime": 1572477320368,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103053873531453440,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191030 23:15:33.297" starttime="20191030 23:15:33.296"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:15:33.298" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:15:33.299" starttime="20191030 23:15:33.297"></status>
</kw>
<msg timestamp="20191030 23:15:33.299" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1572477318297,
  "modificationTime": 1572477320368,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191030 23:15:33.299" starttime="20191030 23:15:20.796"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191030 23:15:33.300" starttime="20191030 23:15:33.300"></status>
</kw>
<status status="PASS" endtime="20191030 23:15:33.301" starttime="20191030 23:15:05.990"></status>
</kw>
<status status="PASS" endtime="20191030 23:15:33.301" starttime="20191030 23:15:05.987"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191030 23:15:33.302" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191030 23:15:33.302" starttime="20191030 23:15:33.301"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191030 23:15:33.303" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191030 23:15:33.303" starttime="20191030 23:15:33.303"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:15:33.309" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:15:48.053" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:15:48.053" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191030 23:15:48.053" starttime="20191030 23:15:33.306"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:15:48.055" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191030 23:15:48.056" starttime="20191030 23:15:48.054"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:15:48.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:15:48.057" starttime="20191030 23:15:48.056"></status>
</kw>
<status status="PASS" endtime="20191030 23:15:48.058" starttime="20191030 23:15:33.305"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:15:48.062" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:16:00.499" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:16:00.499" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1572477345483,
  "modificationTime": 1572477347633,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191030 23:16:00.499" starttime="20191030 23:15:48.060"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:16:00.501" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1572477345483,
  "modificationTime": 1572477347633,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103053875313508350,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191030 23:16:00.501" starttime="20191030 23:16:00.500"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:16:00.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:16:00.503" starttime="20191030 23:16:00.502"></status>
</kw>
<msg timestamp="20191030 23:16:00.503" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1572477345483,
  "modificationTime": 1572477347633,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191030 23:16:00.503" starttime="20191030 23:15:48.058"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191030 23:16:00.505" starttime="20191030 23:16:00.504"></status>
</kw>
<status status="PASS" endtime="20191030 23:16:00.505" starttime="20191030 23:15:33.304"></status>
</kw>
<status status="PASS" endtime="20191030 23:16:00.505" starttime="20191030 23:15:33.301"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191030 23:16:00.507" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191030 23:16:00.507" starttime="20191030 23:16:00.506"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191030 23:16:00.508" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191030 23:16:00.508" starttime="20191030 23:16:00.507"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:16:00.514" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:16:15.285" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:16:15.286" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191030 23:16:15.286" starttime="20191030 23:16:00.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:16:15.289" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191030 23:16:15.289" starttime="20191030 23:16:15.287"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:16:15.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:16:15.290" starttime="20191030 23:16:15.289"></status>
</kw>
<status status="PASS" endtime="20191030 23:16:15.291" starttime="20191030 23:16:00.509"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:16:15.295" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:16:27.775" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:16:27.775" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1572477372780,
  "modificationTime": 1572477374865,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191030 23:16:27.775" starttime="20191030 23:16:15.293"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:16:27.776" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1572477372780,
  "modificationTime": 1572477374865,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103053877102379000,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191030 23:16:27.777" starttime="20191030 23:16:27.776"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:16:27.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:16:27.778" starttime="20191030 23:16:27.777"></status>
</kw>
<msg timestamp="20191030 23:16:27.778" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1572477372780,
  "modificationTime": 1572477374865,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191030 23:16:27.778" starttime="20191030 23:16:15.291"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191030 23:16:27.779" starttime="20191030 23:16:27.779"></status>
</kw>
<status status="PASS" endtime="20191030 23:16:27.780" starttime="20191030 23:16:00.508"></status>
</kw>
<status status="PASS" endtime="20191030 23:16:27.780" starttime="20191030 23:16:00.505"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191030 23:16:27.781" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191030 23:16:27.781" starttime="20191030 23:16:27.780"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191030 23:16:27.782" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191030 23:16:27.783" starttime="20191030 23:16:27.782"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:16:27.787" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:16:42.339" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:16:42.340" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191030 23:16:42.340" starttime="20191030 23:16:27.785"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:16:42.341" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191030 23:16:42.342" starttime="20191030 23:16:42.341"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:16:42.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:16:42.343" starttime="20191030 23:16:42.342"></status>
</kw>
<status status="PASS" endtime="20191030 23:16:42.343" starttime="20191030 23:16:27.784"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:16:42.347" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:16:54.772" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:16:54.772" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1572477400050,
  "modificationTime": 1572477401916,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191030 23:16:54.772" starttime="20191030 23:16:42.345"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:16:54.774" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1572477400050,
  "modificationTime": 1572477401916,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103053878889611260,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191030 23:16:54.774" starttime="20191030 23:16:54.773"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:16:54.776" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:16:54.776" starttime="20191030 23:16:54.775"></status>
</kw>
<msg timestamp="20191030 23:16:54.776" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1572477400050,
  "modificationTime": 1572477401916,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191030 23:16:54.776" starttime="20191030 23:16:42.343"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191030 23:16:54.778" starttime="20191030 23:16:54.777"></status>
</kw>
<status status="PASS" endtime="20191030 23:16:54.778" starttime="20191030 23:16:27.783"></status>
</kw>
<status status="PASS" endtime="20191030 23:16:54.778" starttime="20191030 23:16:27.780"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191030 23:16:54.779" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:16:54.780" starttime="20191030 23:16:54.778"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191030 23:16:54.780" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:16:54.781" starttime="20191030 23:16:54.780"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:16:54.786" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:17:09.504" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:17:09.505" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191030 23:17:09.505" starttime="20191030 23:16:54.783"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:17:09.507" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191030 23:17:09.507" starttime="20191030 23:17:09.506"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:17:09.508" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:17:09.508" starttime="20191030 23:17:09.507"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:09.509" starttime="20191030 23:16:54.782"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:17:09.513" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:17:21.959" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:17:21.959" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1572477427204,
  "modificationTime": 1572477429097,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191030 23:17:21.959" starttime="20191030 23:17:09.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:17:21.960" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1572477427204,
  "modificationTime": 1572477429097,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103053880669110270,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191030 23:17:21.960" starttime="20191030 23:17:21.960"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:17:21.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:17:21.961" starttime="20191030 23:17:21.961"></status>
</kw>
<msg timestamp="20191030 23:17:21.961" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1572477427204,
  "modificationTime": 1572477429097,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191030 23:17:21.962" starttime="20191030 23:17:09.509"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:21.962" starttime="20191030 23:17:21.962"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:21.962" starttime="20191030 23:16:54.781"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:21.963" starttime="20191030 23:16:54.778"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:21.963" starttime="20191030 23:15:05.987"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:21.963" starttime="20191030 23:15:05.986"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:17:21.964" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191030 23:17:21.964" starttime="20191030 23:17:21.964"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:21.965" starttime="20191030 23:17:21.965"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:17:21.966" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:17:23.172" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:17:23.173" starttime="20191030 23:17:21.966"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:23.173" starttime="20191030 23:17:21.964"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191030 23:17:23.175" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191030 23:17:23.191" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:17:23.191" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191030 23:17:23.191" starttime="20191030 23:17:23.174"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191030 23:17:23.193" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191030 23:17:23.193" starttime="20191030 23:17:23.192"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191030 23:17:23.195" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191030 23:17:23.195" starttime="20191030 23:17:23.194"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191030 23:17:23.276" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191030 23:17:23.286" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191030 23:17:23.287" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191030 23:17:23.287" starttime="20191030 23:17:23.196"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191030 23:17:23.288" level="INFO">Length is 3</msg>
<msg timestamp="20191030 23:17:23.288" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191030 23:17:23.288" starttime="20191030 23:17:23.287"></status>
</kw>
<msg timestamp="20191030 23:17:23.289" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191030 23:17:23.289" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191030 23:17:23.289" starttime="20191030 23:17:21.963"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191030 23:17:23.290" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191030 23:17:23.291" starttime="20191030 23:17:23.289"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:23.291" starttime="20191030 23:15:05.982"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:23.291" starttime="20191030 23:15:05.982"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:23.292" starttime="20191030 23:17:23.291"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:17:23.294" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191030 23:17:23.294" starttime="20191030 23:17:23.294"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:23.296" starttime="20191030 23:17:23.295"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:17:23.297" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:17:24.500" level="INFO">Read output: Last login: Wed Oct 30 23:14:52 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:17:24.501" starttime="20191030 23:17:23.296"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:24.501" starttime="20191030 23:17:23.295"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191030 23:17:24.502" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191030 23:17:26.683" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:17:26.683" starttime="20191030 23:17:24.502"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191030 23:17:26.684" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:17:26.793" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:17:26.794" level="INFO">${startupMsg} = hadoop     573  235  0.0 34475964 209340 ?     Sl   23:17   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191030 23:17:26.794" starttime="20191030 23:17:26.684"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:17:26.827" starttime="20191030 23:17:26.794"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:26.829" starttime="20191030 23:17:26.828"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:26.830" starttime="20191030 23:17:23.292"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:17:26.834" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191030 23:17:26.834" starttime="20191030 23:17:26.833"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:26.836" starttime="20191030 23:17:26.835"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:17:26.837" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:17:28.041" level="INFO">Read output: Last login: Wed Oct 30 23:17:23 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:17:28.041" starttime="20191030 23:17:26.836"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:28.042" starttime="20191030 23:17:26.835"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191030 23:17:28.043" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191030 23:17:28.058" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:17:28.059" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191030 23:17:28.059" starttime="20191030 23:17:28.042"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191030 23:17:28.060" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191030 23:17:28.061" starttime="20191030 23:17:28.059"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191030 23:17:28.062" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191030 23:17:28.062" starttime="20191030 23:17:28.061"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191030 23:17:28.142" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191030 23:17:28.153" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191030 23:17:28.153" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191030 23:17:28.153" starttime="20191030 23:17:28.063"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191030 23:17:28.155" level="INFO">Length is 2</msg>
<msg timestamp="20191030 23:17:28.155" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191030 23:17:28.155" starttime="20191030 23:17:28.154"></status>
</kw>
<msg timestamp="20191030 23:17:28.155" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191030 23:17:28.156" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191030 23:17:28.156" starttime="20191030 23:17:26.831"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:28.157" starttime="20191030 23:17:28.156"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191030 23:17:29.158" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191030 23:17:29.159" starttime="20191030 23:17:28.157"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:29.159" starttime="20191030 23:17:26.830"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:17:29.161" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191030 23:17:29.161" starttime="20191030 23:17:29.160"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:29.162" starttime="20191030 23:17:29.162"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:17:29.163" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:17:30.362" level="INFO">Read output: Last login: Wed Oct 30 23:17:27 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:17:30.363" starttime="20191030 23:17:29.162"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:30.363" starttime="20191030 23:17:29.161"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191030 23:17:30.365" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191030 23:17:30.382" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:17:30.383" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191030 23:17:30.383" starttime="20191030 23:17:30.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191030 23:17:30.384" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191030 23:17:30.385" starttime="20191030 23:17:30.383"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191030 23:17:30.386" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191030 23:17:30.386" starttime="20191030 23:17:30.385"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191030 23:17:30.467" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191030 23:17:30.480" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191030 23:17:30.480" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191030 23:17:30.480" starttime="20191030 23:17:30.386"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191030 23:17:30.482" level="INFO">Length is 3</msg>
<msg timestamp="20191030 23:17:30.482" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191030 23:17:30.482" starttime="20191030 23:17:30.481"></status>
</kw>
<msg timestamp="20191030 23:17:30.483" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191030 23:17:30.483" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191030 23:17:30.483" starttime="20191030 23:17:29.159"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191030 23:17:30.484" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191030 23:17:30.485" starttime="20191030 23:17:30.483"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:30.485" starttime="20191030 23:17:29.159"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:30.485" starttime="20191030 23:17:26.830"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:30.486" starttime="20191030 23:17:30.485"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:30.488" starttime="20191030 23:17:30.487"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20191030 23:17:30.488" critical="yes" starttime="20191030 23:14:41.076"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:17:30.494" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:17:32.543" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:17:32.543" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:32.543" starttime="20191030 23:17:30.492"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:17:32.544" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:32.545" starttime="20191030 23:17:32.544"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:17:32.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:17:32.545" starttime="20191030 23:17:32.545"></status>
</kw>
<msg timestamp="20191030 23:17:32.546" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:32.546" starttime="20191030 23:17:30.491"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191030 23:17:32.546" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:32.546" starttime="20191030 23:17:32.546"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:32.547" starttime="20191030 23:17:32.547"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:32.548" starttime="20191030 23:17:32.547"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191030 23:17:32.548" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191030 23:17:32.549" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:32.549" starttime="20191030 23:17:32.548"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191030 23:17:32.549" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191030 23:17:32.549" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191030 23:17:32.549" starttime="20191030 23:17:32.549"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191030 23:17:32.550" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191030 23:17:32.550" starttime="20191030 23:17:32.550"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191030 23:17:32.551" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191030 23:17:32.551" starttime="20191030 23:17:32.551"></status>
</kw>
<msg timestamp="20191030 23:17:32.551" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191030 23:17:32.551" starttime="20191030 23:17:30.490"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:17:32.553" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191030 23:17:32.553" starttime="20191030 23:17:32.552"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:32.554" starttime="20191030 23:17:32.553"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:17:32.555" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:17:33.746" level="INFO">Read output: Last login: Wed Oct 30 23:17:22 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:17:33.746" starttime="20191030 23:17:32.554"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:33.747" starttime="20191030 23:17:32.553"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191030 23:17:33.748" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191030 23:17:43.912" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:17:43.913" starttime="20191030 23:17:33.747"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191030 23:17:43.915" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:17:44.012" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:17:44.013" level="INFO">${shutdownMsg} = hadoop     597  0.0  0.0   9556  1168 ?        Ss   23:17   0:00 bash -c sudo ps aux | grep om
hadoop     599  0.0  0.0   9088   668 ?        S    23:17   0:00 grep om</msg>
<status status="PASS" endtime="20191030 23:17:44.013" starttime="20191030 23:17:43.914"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:17:44.078" starttime="20191030 23:17:44.013"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:44.079" starttime="20191030 23:17:44.078"></status>
</kw>
<msg timestamp="20191030 23:17:44.080" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191030 23:17:44.080" starttime="20191030 23:17:32.552"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:17:44.085" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:17:46.125" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:17:46.125" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:46.125" starttime="20191030 23:17:44.082"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:17:46.128" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:46.128" starttime="20191030 23:17:46.126"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:17:46.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:17:46.130" starttime="20191030 23:17:46.128"></status>
</kw>
<msg timestamp="20191030 23:17:46.130" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:46.130" starttime="20191030 23:17:44.081"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191030 23:17:46.131" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:46.131" starttime="20191030 23:17:46.131"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:46.133" starttime="20191030 23:17:46.132"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:46.134" starttime="20191030 23:17:46.133"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191030 23:17:46.135" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191030 23:17:46.135" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:46.136" starttime="20191030 23:17:46.134"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191030 23:17:46.137" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191030 23:17:46.137" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191030 23:17:46.137" starttime="20191030 23:17:46.136"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191030 23:17:46.138" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191030 23:17:46.138" starttime="20191030 23:17:46.137"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191030 23:17:46.139" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191030 23:17:46.140" starttime="20191030 23:17:46.139"></status>
</kw>
<msg timestamp="20191030 23:17:46.140" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191030 23:17:46.140" starttime="20191030 23:17:44.080"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:46.142" starttime="20191030 23:17:46.140"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191030 23:17:46.144" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191030 23:17:46.144" starttime="20191030 23:17:46.143"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191030 23:17:46.145" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191030 23:17:46.145" starttime="20191030 23:17:46.144"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191030 23:17:46.146" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191030 23:17:46.146" starttime="20191030 23:17:46.145"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:17:46.149" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:17:46.149" starttime="20191030 23:17:46.147"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:17:46.152" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:17:50.718" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:17:50.718" level="INFO">${output} = 2019-10-30 23:17:49 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-30 23:17:49 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191030 23:17:50.718" starttime="20191030 23:17:46.150"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:17:50.720" level="INFO">2019-10-30 23:17:49 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-30 23:17:49 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-30 23:17:49 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191030 23:17:50.720" starttime="20191030 23:17:50.719"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:17:50.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:17:50.722" starttime="20191030 23:17:50.721"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:50.722" starttime="20191030 23:17:46.149"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:17:50.727" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:17:53.001" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:17:53.001" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:17:53.001" starttime="20191030 23:17:50.724"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:17:53.003" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:17:53.003" starttime="20191030 23:17:53.002"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:17:53.005" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:17:53.005" starttime="20191030 23:17:53.003"></status>
</kw>
<msg timestamp="20191030 23:17:53.006" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:17:53.006" starttime="20191030 23:17:50.723"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:53.007" starttime="20191030 23:17:53.006"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:17:53.008" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:17:53.008" starttime="20191030 23:17:53.007"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:53.008" starttime="20191030 23:17:46.142"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:17:53.010" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191030 23:17:53.010" starttime="20191030 23:17:53.009"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:53.011" starttime="20191030 23:17:53.011"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:17:53.012" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:17:54.202" level="INFO">Read output: Last login: Wed Oct 30 23:17:32 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:17:54.203" starttime="20191030 23:17:53.012"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:54.203" starttime="20191030 23:17:53.010"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191030 23:17:54.204" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191030 23:17:56.364" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:17:56.364" starttime="20191030 23:17:54.204"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191030 23:17:56.365" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:17:56.464" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:17:56.464" level="INFO">${startupMsg} = hadoop     650  368  0.0 34481284 225580 ?     Sl   23:17   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191030 23:17:56.464" starttime="20191030 23:17:56.365"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:17:56.530" starttime="20191030 23:17:56.465"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:56.531" starttime="20191030 23:17:56.530"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:56.531" starttime="20191030 23:17:53.008"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:56.531" starttime="20191030 23:17:30.490"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:17:56.535" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:17:58.455" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:17:58.455" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:58.455" starttime="20191030 23:17:56.533"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:17:58.457" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:58.457" starttime="20191030 23:17:58.456"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:17:58.458" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:17:58.458" starttime="20191030 23:17:58.457"></status>
</kw>
<msg timestamp="20191030 23:17:58.458" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:58.458" starttime="20191030 23:17:56.532"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191030 23:17:58.459" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:58.459" starttime="20191030 23:17:58.459"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:58.460" starttime="20191030 23:17:58.459"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:58.461" starttime="20191030 23:17:58.460"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191030 23:17:58.461" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191030 23:17:58.461" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:17:58.461" starttime="20191030 23:17:58.461"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191030 23:17:58.462" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191030 23:17:58.462" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191030 23:17:58.462" starttime="20191030 23:17:58.462"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191030 23:17:58.463" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191030 23:17:58.463" starttime="20191030 23:17:58.462"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191030 23:17:58.464" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191030 23:17:58.464" starttime="20191030 23:17:58.463"></status>
</kw>
<msg timestamp="20191030 23:17:58.464" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191030 23:17:58.464" starttime="20191030 23:17:56.531"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:17:58.465" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191030 23:17:58.465" starttime="20191030 23:17:58.465"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:17:58.467" starttime="20191030 23:17:58.466"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:17:58.468" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:17:59.654" level="INFO">Read output: Last login: Wed Oct 30 23:17:29 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:17:59.655" starttime="20191030 23:17:58.467"></status>
</kw>
<status status="PASS" endtime="20191030 23:17:59.656" starttime="20191030 23:17:58.466"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191030 23:17:59.657" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191030 23:18:00.826" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:18:00.827" starttime="20191030 23:17:59.656"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191030 23:18:00.828" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:18:00.937" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:18:00.937" level="INFO">${shutdownMsg} = hadoop    1113  0.0  0.0   9556  1168 ?        Ss   23:18   0:00 bash -c sudo ps aux | grep om
hadoop    1115  0.0  0.0   9088   668 ?        S    23:18   0:00 grep om</msg>
<status status="PASS" endtime="20191030 23:18:00.937" starttime="20191030 23:18:00.828"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:18:01.003" starttime="20191030 23:18:00.938"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:01.005" starttime="20191030 23:18:01.004"></status>
</kw>
<msg timestamp="20191030 23:18:01.005" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191030 23:18:01.005" starttime="20191030 23:17:58.464"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:18:01.009" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:18:03.339" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:18:03.340" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:03.340" starttime="20191030 23:18:01.007"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:18:03.342" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:03.342" starttime="20191030 23:18:03.341"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:18:03.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:18:03.344" starttime="20191030 23:18:03.343"></status>
</kw>
<msg timestamp="20191030 23:18:03.344" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:03.344" starttime="20191030 23:18:01.006"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191030 23:18:03.345" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:03.346" starttime="20191030 23:18:03.345"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:03.347" starttime="20191030 23:18:03.346"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:03.348" starttime="20191030 23:18:03.347"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191030 23:18:03.349" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191030 23:18:03.350" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:03.350" starttime="20191030 23:18:03.348"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191030 23:18:03.351" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191030 23:18:03.352" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191030 23:18:03.352" starttime="20191030 23:18:03.350"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191030 23:18:03.353" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191030 23:18:03.353" starttime="20191030 23:18:03.352"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191030 23:18:03.354" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191030 23:18:03.354" starttime="20191030 23:18:03.354"></status>
</kw>
<msg timestamp="20191030 23:18:03.355" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191030 23:18:03.355" starttime="20191030 23:18:01.005"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:03.357" starttime="20191030 23:18:03.356"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191030 23:18:03.359" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191030 23:18:03.359" starttime="20191030 23:18:03.358"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191030 23:18:03.360" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191030 23:18:03.360" starttime="20191030 23:18:03.359"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191030 23:18:03.361" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191030 23:18:03.361" starttime="20191030 23:18:03.360"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:18:03.364" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:18:03.364" starttime="20191030 23:18:03.362"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:18:03.369" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:18:08.010" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:18:08.010" level="INFO">${output} = 2019-10-30 23:18:06 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-30 23:18:06 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191030 23:18:08.010" starttime="20191030 23:18:03.366"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:18:08.012" level="INFO">2019-10-30 23:18:06 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-30 23:18:06 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-30 23:18:06 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191030 23:18:08.012" starttime="20191030 23:18:08.011"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:18:08.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:18:08.013" starttime="20191030 23:18:08.012"></status>
</kw>
<status status="PASS" endtime="20191030 23:18:08.014" starttime="20191030 23:18:03.364"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:18:08.018" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:18:10.274" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:18:10.275" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:18:10.275" starttime="20191030 23:18:08.015"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:18:10.276" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:18:10.276" starttime="20191030 23:18:10.275"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:18:10.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:18:10.277" starttime="20191030 23:18:10.277"></status>
</kw>
<msg timestamp="20191030 23:18:10.278" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:18:10.278" starttime="20191030 23:18:08.014"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:10.279" starttime="20191030 23:18:10.278"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:18:10.279" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:18:10.280" starttime="20191030 23:18:10.279"></status>
</kw>
<status status="PASS" endtime="20191030 23:18:10.280" starttime="20191030 23:18:03.357"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:18:10.281" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191030 23:18:10.282" starttime="20191030 23:18:10.281"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:10.285" starttime="20191030 23:18:10.283"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:18:10.286" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:18:11.491" level="INFO">Read output: Last login: Wed Oct 30 23:17:58 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:18:11.492" starttime="20191030 23:18:10.285"></status>
</kw>
<status status="PASS" endtime="20191030 23:18:11.492" starttime="20191030 23:18:10.282"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191030 23:18:11.494" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191030 23:18:13.675" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:18:13.675" starttime="20191030 23:18:11.493"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191030 23:18:13.677" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:18:13.752" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:18:13.753" level="INFO">${startupMsg} = hadoop    1164  326  0.0 34473192 207392 ?     Sl   23:18   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191030 23:18:13.753" starttime="20191030 23:18:13.676"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:18:13.818" starttime="20191030 23:18:13.753"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:13.820" starttime="20191030 23:18:13.819"></status>
</kw>
<status status="PASS" endtime="20191030 23:18:13.820" starttime="20191030 23:18:10.280"></status>
</kw>
<status status="PASS" endtime="20191030 23:18:13.820" starttime="20191030 23:17:56.531"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:18:13.824" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:18:15.696" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:18:15.696" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:15.696" starttime="20191030 23:18:13.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:18:15.697" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:15.697" starttime="20191030 23:18:15.697"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:18:15.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:18:15.698" starttime="20191030 23:18:15.698"></status>
</kw>
<msg timestamp="20191030 23:18:15.698" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:15.699" starttime="20191030 23:18:13.821"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191030 23:18:15.699" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:15.699" starttime="20191030 23:18:15.699"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:15.700" starttime="20191030 23:18:15.699"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:15.701" starttime="20191030 23:18:15.700"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191030 23:18:15.702" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191030 23:18:15.702" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:15.702" starttime="20191030 23:18:15.701"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191030 23:18:15.702" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191030 23:18:15.702" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191030 23:18:15.703" starttime="20191030 23:18:15.702"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191030 23:18:15.703" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191030 23:18:15.703" starttime="20191030 23:18:15.703"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191030 23:18:15.704" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191030 23:18:15.704" starttime="20191030 23:18:15.703"></status>
</kw>
<msg timestamp="20191030 23:18:15.704" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191030 23:18:15.704" starttime="20191030 23:18:13.820"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:18:15.705" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191030 23:18:15.705" starttime="20191030 23:18:15.705"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:15.707" starttime="20191030 23:18:15.706"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:18:15.707" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:18:16.905" level="INFO">Read output: Last login: Wed Oct 30 23:14:37 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:18:16.906" starttime="20191030 23:18:15.707"></status>
</kw>
<status status="PASS" endtime="20191030 23:18:16.907" starttime="20191030 23:18:15.706"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191030 23:18:16.908" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191030 23:18:18.081" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:18:18.081" starttime="20191030 23:18:16.907"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191030 23:18:18.083" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:18:18.160" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:18:18.160" level="INFO">${shutdownMsg} = hadoop    1071  0.0  0.0   9556  1164 ?        Ss   23:18   0:00 bash -c sudo ps aux | grep om
hadoop    1073  0.0  0.0   9088   668 ?        S    23:18   0:00 grep om</msg>
<status status="PASS" endtime="20191030 23:18:18.160" starttime="20191030 23:18:18.082"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:18:18.194" starttime="20191030 23:18:18.161"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:18.195" starttime="20191030 23:18:18.194"></status>
</kw>
<msg timestamp="20191030 23:18:18.196" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191030 23:18:18.196" starttime="20191030 23:18:15.704"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:18:18.201" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:18:30.391" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:18:30.391" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:30.391" starttime="20191030 23:18:18.198"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:18:30.393" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:30.393" starttime="20191030 23:18:30.392"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:18:30.394" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:18:30.394" starttime="20191030 23:18:30.393"></status>
</kw>
<msg timestamp="20191030 23:18:30.394" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:30.394" starttime="20191030 23:18:18.197"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191030 23:18:30.395" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:30.395" starttime="20191030 23:18:30.395"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:30.396" starttime="20191030 23:18:30.396"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:30.397" starttime="20191030 23:18:30.396"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191030 23:18:30.398" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191030 23:18:30.398" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:18:30.398" starttime="20191030 23:18:30.397"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191030 23:18:30.399" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191030 23:18:30.399" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191030 23:18:30.399" starttime="20191030 23:18:30.398"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191030 23:18:30.400" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191030 23:18:30.400" starttime="20191030 23:18:30.399"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191030 23:18:30.401" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191030 23:18:30.401" starttime="20191030 23:18:30.400"></status>
</kw>
<msg timestamp="20191030 23:18:30.401" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191030 23:18:30.401" starttime="20191030 23:18:18.196"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:30.402" starttime="20191030 23:18:30.402"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191030 23:18:30.404" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191030 23:18:30.405" starttime="20191030 23:18:30.404"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191030 23:18:30.405" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191030 23:18:30.406" starttime="20191030 23:18:30.405"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191030 23:18:30.406" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191030 23:18:30.407" starttime="20191030 23:18:30.406"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:18:30.409" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:18:30.409" starttime="20191030 23:18:30.407"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:18:30.414" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:18:45.064" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:18:45.064" level="INFO">${output} = 2019-10-30 23:18:33 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191030 23:18:45.065" starttime="20191030 23:18:30.411"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:18:45.067" level="INFO">2019-10-30 23:18:33 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:18:34 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:18:35 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:18:36 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:18:37 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:18:38 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:18:39 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:18:40 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:18:41 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:18:42 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:18:43 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-30 23:18:43 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-30 23:18:43 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191030 23:18:45.067" starttime="20191030 23:18:45.065"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:18:45.069" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:18:45.069" starttime="20191030 23:18:45.068"></status>
</kw>
<status status="PASS" endtime="20191030 23:18:45.070" starttime="20191030 23:18:30.410"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:18:45.074" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:18:57.429" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:18:57.430" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:18:57.430" starttime="20191030 23:18:45.071"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:18:57.432" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:18:57.432" starttime="20191030 23:18:57.431"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:18:57.433" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:18:57.433" starttime="20191030 23:18:57.432"></status>
</kw>
<msg timestamp="20191030 23:18:57.434" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:18:57.434" starttime="20191030 23:18:45.070"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:57.435" starttime="20191030 23:18:57.435"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:18:57.437" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:18:57.437" starttime="20191030 23:18:57.436"></status>
</kw>
<status status="PASS" endtime="20191030 23:18:57.437" starttime="20191030 23:18:30.402"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:18:57.440" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191030 23:18:57.440" starttime="20191030 23:18:57.439"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:18:57.443" starttime="20191030 23:18:57.441"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:18:57.444" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:18:58.650" level="INFO">Read output: Last login: Wed Oct 30 23:18:15 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:18:58.651" starttime="20191030 23:18:57.443"></status>
</kw>
<status status="PASS" endtime="20191030 23:18:58.651" starttime="20191030 23:18:57.440"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191030 23:18:58.652" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191030 23:19:00.832" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:19:00.833" starttime="20191030 23:18:58.651"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191030 23:19:00.834" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:19:00.899" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:19:00.900" level="INFO">${startupMsg} = hadoop    1122  347  0.0 34470600 197644 ?     Sl   23:18   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191030 23:19:00.900" starttime="20191030 23:19:00.833"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:19:00.965" starttime="20191030 23:19:00.900"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:00.966" starttime="20191030 23:19:00.965"></status>
</kw>
<status status="PASS" endtime="20191030 23:19:00.966" starttime="20191030 23:18:57.437"></status>
</kw>
<status status="PASS" endtime="20191030 23:19:00.966" starttime="20191030 23:18:13.820"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:19:00.970" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:19:03.428" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:19:03.428" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:03.428" starttime="20191030 23:19:00.968"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:19:03.430" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:03.430" starttime="20191030 23:19:03.429"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:19:03.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:19:03.431" starttime="20191030 23:19:03.430"></status>
</kw>
<msg timestamp="20191030 23:19:03.431" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:03.431" starttime="20191030 23:19:00.967"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191030 23:19:03.432" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:03.432" starttime="20191030 23:19:03.432"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:03.433" starttime="20191030 23:19:03.433"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:03.434" starttime="20191030 23:19:03.434"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191030 23:19:03.435" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191030 23:19:03.435" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:03.435" starttime="20191030 23:19:03.435"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191030 23:19:03.437" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191030 23:19:03.437" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191030 23:19:03.437" starttime="20191030 23:19:03.436"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191030 23:19:03.438" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191030 23:19:03.438" starttime="20191030 23:19:03.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191030 23:19:03.439" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191030 23:19:03.439" starttime="20191030 23:19:03.438"></status>
</kw>
<msg timestamp="20191030 23:19:03.439" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191030 23:19:03.439" starttime="20191030 23:19:00.967"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:19:03.441" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191030 23:19:03.441" starttime="20191030 23:19:03.440"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:03.443" starttime="20191030 23:19:03.442"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:19:03.444" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:19:04.632" level="INFO">Read output: Last login: Wed Oct 30 23:18:10 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:19:04.633" starttime="20191030 23:19:03.443"></status>
</kw>
<status status="PASS" endtime="20191030 23:19:04.633" starttime="20191030 23:19:03.441"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191030 23:19:04.635" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191030 23:19:05.794" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:19:05.794" starttime="20191030 23:19:04.634"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191030 23:19:05.796" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:19:05.893" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:19:05.893" level="INFO">${shutdownMsg} = hadoop    1665  0.0  0.0   9556  1164 ?        Ss   23:19   0:00 bash -c sudo ps aux | grep om
hadoop    1667  0.0  0.0   9088   668 ?        S    23:19   0:00 grep om</msg>
<status status="PASS" endtime="20191030 23:19:05.893" starttime="20191030 23:19:05.795"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:19:05.959" starttime="20191030 23:19:05.894"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:05.959" starttime="20191030 23:19:05.959"></status>
</kw>
<msg timestamp="20191030 23:19:05.960" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191030 23:19:05.960" starttime="20191030 23:19:03.440"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:19:05.963" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:19:18.172" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:19:18.172" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:18.172" starttime="20191030 23:19:05.961"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:19:18.174" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:18.174" starttime="20191030 23:19:18.173"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:19:18.175" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:19:18.175" starttime="20191030 23:19:18.174"></status>
</kw>
<msg timestamp="20191030 23:19:18.176" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:18.176" starttime="20191030 23:19:05.960"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191030 23:19:18.177" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:18.177" starttime="20191030 23:19:18.176"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:18.178" starttime="20191030 23:19:18.177"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:18.179" starttime="20191030 23:19:18.178"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191030 23:19:18.181" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191030 23:19:18.181" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:18.181" starttime="20191030 23:19:18.180"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191030 23:19:18.183" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191030 23:19:18.183" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191030 23:19:18.183" starttime="20191030 23:19:18.181"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191030 23:19:18.184" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191030 23:19:18.184" starttime="20191030 23:19:18.183"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191030 23:19:18.185" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191030 23:19:18.185" starttime="20191030 23:19:18.184"></status>
</kw>
<msg timestamp="20191030 23:19:18.185" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191030 23:19:18.185" starttime="20191030 23:19:05.960"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:18.186" starttime="20191030 23:19:18.186"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191030 23:19:18.188" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191030 23:19:18.188" starttime="20191030 23:19:18.187"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191030 23:19:18.189" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191030 23:19:18.189" starttime="20191030 23:19:18.188"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191030 23:19:18.190" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191030 23:19:18.190" starttime="20191030 23:19:18.190"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:19:18.192" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:19:18.192" starttime="20191030 23:19:18.191"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:19:18.195" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:19:22.940" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:19:22.940" level="INFO">${output} = 2019-10-30 23:19:21 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-30 23:19:21 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191030 23:19:22.940" starttime="20191030 23:19:18.193"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:19:22.941" level="INFO">2019-10-30 23:19:21 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-30 23:19:21 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-30 23:19:21 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191030 23:19:22.941" starttime="20191030 23:19:22.940"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:19:22.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:19:22.942" starttime="20191030 23:19:22.942"></status>
</kw>
<status status="PASS" endtime="20191030 23:19:22.943" starttime="20191030 23:19:18.192"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:19:22.946" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:19:25.250" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:19:25.251" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:19:25.251" starttime="20191030 23:19:22.944"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:19:25.253" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:19:25.253" starttime="20191030 23:19:25.252"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:19:25.254" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:19:25.255" starttime="20191030 23:19:25.254"></status>
</kw>
<msg timestamp="20191030 23:19:25.255" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:19:25.255" starttime="20191030 23:19:22.943"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:25.257" starttime="20191030 23:19:25.256"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:19:25.259" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:19:25.260" starttime="20191030 23:19:25.257"></status>
</kw>
<status status="PASS" endtime="20191030 23:19:25.260" starttime="20191030 23:19:18.187"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:19:25.262" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191030 23:19:25.262" starttime="20191030 23:19:25.261"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:25.264" starttime="20191030 23:19:25.263"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:19:25.266" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:19:26.472" level="INFO">Read output: Last login: Wed Oct 30 23:19:03 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:19:26.473" starttime="20191030 23:19:25.265"></status>
</kw>
<status status="PASS" endtime="20191030 23:19:26.473" starttime="20191030 23:19:25.262"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191030 23:19:26.474" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191030 23:19:28.632" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:19:28.632" starttime="20191030 23:19:26.474"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191030 23:19:28.634" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:19:28.741" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:19:28.742" level="INFO">${startupMsg} = hadoop    1717  378  0.0 34480452 221852 ?     Sl   23:19   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191030 23:19:28.742" starttime="20191030 23:19:28.633"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:19:28.775" starttime="20191030 23:19:28.742"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:28.776" starttime="20191030 23:19:28.775"></status>
</kw>
<status status="PASS" endtime="20191030 23:19:28.776" starttime="20191030 23:19:25.260"></status>
</kw>
<status status="PASS" endtime="20191030 23:19:28.776" starttime="20191030 23:19:00.966"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:19:28.780" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:19:30.853" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:19:30.853" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:30.854" starttime="20191030 23:19:28.778"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:19:30.855" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:30.855" starttime="20191030 23:19:30.854"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:19:30.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:19:30.857" starttime="20191030 23:19:30.856"></status>
</kw>
<msg timestamp="20191030 23:19:30.857" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:30.857" starttime="20191030 23:19:28.777"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191030 23:19:30.858" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:30.858" starttime="20191030 23:19:30.857"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:30.859" starttime="20191030 23:19:30.859"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:30.860" starttime="20191030 23:19:30.860"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191030 23:19:30.861" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191030 23:19:30.861" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:30.862" starttime="20191030 23:19:30.861"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191030 23:19:30.863" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191030 23:19:30.863" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191030 23:19:30.863" starttime="20191030 23:19:30.862"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191030 23:19:30.865" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191030 23:19:30.865" starttime="20191030 23:19:30.863"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191030 23:19:30.866" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191030 23:19:30.866" starttime="20191030 23:19:30.865"></status>
</kw>
<msg timestamp="20191030 23:19:30.866" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191030 23:19:30.866" starttime="20191030 23:19:28.777"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:19:30.867" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191030 23:19:30.868" starttime="20191030 23:19:30.867"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:30.869" starttime="20191030 23:19:30.869"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:19:30.870" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:19:32.057" level="INFO">Read output: Last login: Wed Oct 30 23:18:57 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:19:32.057" starttime="20191030 23:19:30.869"></status>
</kw>
<status status="PASS" endtime="20191030 23:19:32.058" starttime="20191030 23:19:30.868"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191030 23:19:32.059" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191030 23:19:33.208" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:19:33.209" starttime="20191030 23:19:32.058"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191030 23:19:33.210" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:19:33.317" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:19:33.318" level="INFO">${shutdownMsg} = hadoop    1626  0.0  0.0   9556  1168 ?        Ss   23:19   0:00 bash -c sudo ps aux | grep om
hadoop    1628  0.0  0.0   9088   668 ?        S    23:19   0:00 grep om</msg>
<status status="PASS" endtime="20191030 23:19:33.318" starttime="20191030 23:19:33.209"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:19:33.384" starttime="20191030 23:19:33.319"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:33.385" starttime="20191030 23:19:33.384"></status>
</kw>
<msg timestamp="20191030 23:19:33.385" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191030 23:19:33.385" starttime="20191030 23:19:30.866"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:19:33.390" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:19:45.670" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:19:45.670" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:45.670" starttime="20191030 23:19:33.387"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:19:45.672" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:45.673" starttime="20191030 23:19:45.671"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:19:45.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:19:45.674" starttime="20191030 23:19:45.673"></status>
</kw>
<msg timestamp="20191030 23:19:45.674" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:45.674" starttime="20191030 23:19:33.386"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191030 23:19:45.675" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:45.676" starttime="20191030 23:19:45.675"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:45.677" starttime="20191030 23:19:45.676"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:45.678" starttime="20191030 23:19:45.677"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191030 23:19:45.679" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191030 23:19:45.679" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191030 23:19:45.679" starttime="20191030 23:19:45.678"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191030 23:19:45.680" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191030 23:19:45.680" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191030 23:19:45.680" starttime="20191030 23:19:45.679"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191030 23:19:45.682" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191030 23:19:45.682" starttime="20191030 23:19:45.681"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191030 23:19:45.683" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191030 23:19:45.683" starttime="20191030 23:19:45.682"></status>
</kw>
<msg timestamp="20191030 23:19:45.683" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191030 23:19:45.683" starttime="20191030 23:19:33.386"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191030 23:19:45.684" starttime="20191030 23:19:45.684"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191030 23:19:45.686" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191030 23:19:45.686" starttime="20191030 23:19:45.685"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191030 23:19:45.687" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191030 23:19:45.687" starttime="20191030 23:19:45.687"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191030 23:19:45.688" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191030 23:19:45.689" starttime="20191030 23:19:45.688"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:19:45.691" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:19:45.691" starttime="20191030 23:19:45.689"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:19:45.695" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:20:00.425" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:20:00.425" level="INFO">${output} = 2019-10-30 23:19:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191030 23:20:00.425" starttime="20191030 23:19:45.692"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:20:00.427" level="INFO">2019-10-30 23:19:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:19:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:19:50 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:19:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:19:52 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:19:53 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:19:54 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:19:55 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:19:56 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:19:57 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-30 23:19:57 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM om2 is not the leader. Suggested leader is om3
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:190)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-10-30 23:19:58 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-30 23:19:58 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-30 23:19:58 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191030 23:20:00.428" starttime="20191030 23:20:00.426"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:20:00.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:20:00.429" starttime="20191030 23:20:00.428"></status>
</kw>
<status status="PASS" endtime="20191030 23:20:00.429" starttime="20191030 23:19:45.691"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191030 23:20:00.433" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191030 23:20:12.880" level="INFO">${rc} = 0</msg>
<msg timestamp="20191030 23:20:12.880" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:20:12.880" starttime="20191030 23:20:00.430"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191030 23:20:12.881" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:20:12.881" starttime="20191030 23:20:12.881"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191030 23:20:12.882" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191030 23:20:12.882" starttime="20191030 23:20:12.882"></status>
</kw>
<msg timestamp="20191030 23:20:12.883" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191030 23:20:12.883" starttime="20191030 23:20:00.429"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:20:12.883" starttime="20191030 23:20:12.883"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191030 23:20:12.884" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191030 23:20:12.884" starttime="20191030 23:20:12.883"></status>
</kw>
<status status="PASS" endtime="20191030 23:20:12.884" starttime="20191030 23:19:45.685"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191030 23:20:12.886" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191030 23:20:12.886" starttime="20191030 23:20:12.885"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191030 23:20:12.887" starttime="20191030 23:20:12.886"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191030 23:20:12.888" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191030 23:20:14.089" level="INFO">Read output: Last login: Wed Oct 30 23:19:31 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191030 23:20:14.090" starttime="20191030 23:20:12.887"></status>
</kw>
<status status="PASS" endtime="20191030 23:20:14.090" starttime="20191030 23:20:12.886"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191030 23:20:14.091" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191030 23:20:16.251" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191030 23:20:16.251" starttime="20191030 23:20:14.091"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191030 23:20:16.252" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191030 23:20:16.360" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191030 23:20:16.361" level="INFO">${startupMsg} = hadoop    1678  372  0.0 34476072 212516 ?     Sl   23:20   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191030 23:20:16.361" starttime="20191030 23:20:16.252"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191030 23:20:16.394" starttime="20191030 23:20:16.362"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191030 23:20:16.395" starttime="20191030 23:20:16.395"></status>
</kw>
<status status="PASS" endtime="20191030 23:20:16.396" starttime="20191030 23:20:12.885"></status>
</kw>
<status status="PASS" endtime="20191030 23:20:16.396" starttime="20191030 23:19:28.777"></status>
</kw>
<status status="PASS" endtime="20191030 23:20:16.396" starttime="20191030 23:17:30.490"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20191030 23:20:16.396" critical="yes" starttime="20191030 23:17:30.489"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191030 23:20:16.398" starttime="20191030 23:13:32.591"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
