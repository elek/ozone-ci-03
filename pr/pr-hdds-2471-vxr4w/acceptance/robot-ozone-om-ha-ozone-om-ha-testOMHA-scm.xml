<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191113 21:50:39.110" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:50:39.348" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:50:42.050" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:50:42.050" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 21:50:42.051" starttime="20191113 21:50:39.346"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:50:42.052" level="INFO"></msg>
<status status="PASS" endtime="20191113 21:50:42.053" starttime="20191113 21:50:42.052"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:50:42.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:50:42.054" starttime="20191113 21:50:42.053"></status>
</kw>
<status status="PASS" endtime="20191113 21:50:42.054" starttime="20191113 21:50:39.346"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:50:42.062" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:50:44.194" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:50:44.194" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 21:50:44.194" starttime="20191113 21:50:42.059"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:50:44.195" level="INFO"></msg>
<status status="PASS" endtime="20191113 21:50:44.196" starttime="20191113 21:50:44.195"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:50:44.196" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:50:44.196" starttime="20191113 21:50:44.196"></status>
</kw>
<status status="PASS" endtime="20191113 21:50:44.197" starttime="20191113 21:50:42.054"></status>
</kw>
<status status="PASS" endtime="20191113 21:50:44.197" starttime="20191113 21:50:39.345"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 21:50:44.198" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191113 21:50:44.198" starttime="20191113 21:50:44.197"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 21:50:44.199" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191113 21:50:44.199" starttime="20191113 21:50:44.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 21:50:44.199" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191113 21:50:44.199" starttime="20191113 21:50:44.199"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 21:50:44.222" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 21:50:44.222" starttime="20191113 21:50:44.200"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:50:44.225" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:50:49.164" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:50:49.164" level="INFO">${output} = 2019-11-13 21:50:46 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 21:50:46 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 21:50:49.164" starttime="20191113 21:50:44.223"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:50:49.165" level="INFO">2019-11-13 21:50:46 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 21:50:46 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 21:50:46 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 21:50:49.165" starttime="20191113 21:50:49.164"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:50:49.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:50:49.166" starttime="20191113 21:50:49.165"></status>
</kw>
<status status="PASS" endtime="20191113 21:50:49.166" starttime="20191113 21:50:44.222"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:50:49.169" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:50:52.297" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:50:52.297" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191113 21:50:52.298" starttime="20191113 21:50:49.167"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:50:52.299" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191113 21:50:52.300" starttime="20191113 21:50:52.298"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:50:52.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:50:52.301" starttime="20191113 21:50:52.300"></status>
</kw>
<msg timestamp="20191113 21:50:52.301" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191113 21:50:52.301" starttime="20191113 21:50:49.167"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 21:50:52.302" starttime="20191113 21:50:52.302"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 21:50:52.304" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 21:50:52.304" starttime="20191113 21:50:52.303"></status>
</kw>
<status status="PASS" endtime="20191113 21:50:52.304" starttime="20191113 21:50:44.197"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:50:52.308" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:50:54.310" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:50:54.310" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:50:54.310" starttime="20191113 21:50:52.306"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:50:54.311" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:50:54.311" starttime="20191113 21:50:54.311"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:50:54.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:50:54.312" starttime="20191113 21:50:54.312"></status>
</kw>
<msg timestamp="20191113 21:50:54.312" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:50:54.312" starttime="20191113 21:50:52.305"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 21:50:54.313" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:50:54.313" starttime="20191113 21:50:54.313"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 21:50:54.314" starttime="20191113 21:50:54.313"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 21:50:54.314" starttime="20191113 21:50:54.314"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 21:50:54.315" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 21:50:54.315" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:50:54.315" starttime="20191113 21:50:54.315"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 21:50:54.316" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 21:50:54.316" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 21:50:54.316" starttime="20191113 21:50:54.315"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 21:50:54.316" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:50:54.316" starttime="20191113 21:50:54.316"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 21:50:54.317" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 21:50:54.317" starttime="20191113 21:50:54.317"></status>
</kw>
<msg timestamp="20191113 21:50:54.317" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:50:54.317" starttime="20191113 21:50:52.304"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 21:50:54.319" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 21:50:54.319" starttime="20191113 21:50:54.318"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 21:50:54.320" starttime="20191113 21:50:54.319"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 21:50:54.320" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 21:50:55.732" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 21:50:55.732" starttime="20191113 21:50:54.320"></status>
</kw>
<status status="PASS" endtime="20191113 21:50:55.733" starttime="20191113 21:50:54.319"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 21:50:55.734" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 21:50:55.748" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191113 21:50:55.749" starttime="20191113 21:50:55.733"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 21:50:55.750" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 21:50:55.827" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 21:50:55.827" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191113 21:50:55.827" starttime="20191113 21:50:55.749"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 21:50:55.942" starttime="20191113 21:50:55.828"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 21:50:55.943" starttime="20191113 21:50:55.942"></status>
</kw>
<msg timestamp="20191113 21:50:55.943" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 21:50:55.943" starttime="20191113 21:50:54.317"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:50:55.946" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:50:57.885" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:50:57.885" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:50:57.885" starttime="20191113 21:50:55.944"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:50:57.886" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:50:57.886" starttime="20191113 21:50:57.886"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:50:57.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:50:57.887" starttime="20191113 21:50:57.886"></status>
</kw>
<msg timestamp="20191113 21:50:57.887" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:50:57.887" starttime="20191113 21:50:55.944"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 21:50:57.888" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:50:57.888" starttime="20191113 21:50:57.888"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 21:50:57.888" starttime="20191113 21:50:57.888"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 21:50:57.889" starttime="20191113 21:50:57.889"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 21:50:57.890" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 21:50:57.890" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:50:57.890" starttime="20191113 21:50:57.889"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 21:50:57.890" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 21:50:57.890" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 21:50:57.890" starttime="20191113 21:50:57.890"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 21:50:57.891" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:50:57.891" starttime="20191113 21:50:57.891"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 21:50:57.892" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 21:50:57.892" starttime="20191113 21:50:57.891"></status>
</kw>
<msg timestamp="20191113 21:50:57.892" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:50:57.892" starttime="20191113 21:50:55.943"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191113 21:50:57.893" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191113 21:50:57.893" starttime="20191113 21:50:57.892"></status>
</kw>
<status status="FAIL" endtime="20191113 21:50:57.893" critical="yes" starttime="20191113 21:50:39.345">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191113 21:50:57.896" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191113 21:50:57.896" starttime="20191113 21:50:57.895"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191113 21:50:57.897" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191113 21:50:57.897" starttime="20191113 21:50:57.896"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 21:50:57.899" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 21:50:57.899" starttime="20191113 21:50:57.898"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 21:50:57.900" starttime="20191113 21:50:57.899"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 21:50:57.901" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 21:50:59.099" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 21:50:59.099" starttime="20191113 21:50:57.900"></status>
</kw>
<status status="PASS" endtime="20191113 21:50:59.100" starttime="20191113 21:50:57.899"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 21:50:59.101" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 21:50:59.115" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191113 21:50:59.116" starttime="20191113 21:50:59.100"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 21:50:59.117" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 21:50:59.194" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 21:50:59.195" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191113 21:50:59.195" starttime="20191113 21:50:59.116"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 21:50:59.310" starttime="20191113 21:50:59.195"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 21:50:59.311" starttime="20191113 21:50:59.310"></status>
</kw>
<status status="PASS" endtime="20191113 21:50:59.311" starttime="20191113 21:50:57.898"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 21:50:59.312" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 21:50:59.312" starttime="20191113 21:50:59.312"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 21:50:59.314" starttime="20191113 21:50:59.314"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 21:50:59.315" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 21:51:00.514" level="INFO">Read output: Last login: Wed Nov 13 21:50:58 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 21:51:00.514" starttime="20191113 21:50:59.314"></status>
</kw>
<status status="PASS" endtime="20191113 21:51:00.514" starttime="20191113 21:50:59.313"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 21:51:00.515" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 21:51:00.529" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 21:51:00.529" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191113 21:51:00.529" starttime="20191113 21:51:00.515"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 21:51:00.530" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191113 21:51:00.530" starttime="20191113 21:51:00.530"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 21:51:00.531" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191113 21:51:00.531" starttime="20191113 21:51:00.530"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 21:51:00.608" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191113 21:51:00.608" starttime="20191113 21:51:00.531"></status>
</kw>
<status status="FAIL" endtime="20191113 21:51:00.609" starttime="20191113 21:50:59.311"></status>
</kw>
<status status="FAIL" endtime="20191113 21:51:00.609" critical="yes" starttime="20191113 21:50:57.894">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:51:00.615" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:51:02.507" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:51:02.507" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:51:02.507" starttime="20191113 21:51:00.613"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:51:02.509" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:51:02.509" starttime="20191113 21:51:02.508"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:51:02.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:51:02.510" starttime="20191113 21:51:02.509"></status>
</kw>
<msg timestamp="20191113 21:51:02.510" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:51:02.510" starttime="20191113 21:51:00.612"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 21:51:02.510" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:51:02.510" starttime="20191113 21:51:02.510"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 21:51:02.511" starttime="20191113 21:51:02.511"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 21:51:02.511" starttime="20191113 21:51:02.511"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 21:51:02.512" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 21:51:02.512" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:51:02.512" starttime="20191113 21:51:02.512"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 21:51:02.513" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 21:51:02.513" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 21:51:02.513" starttime="20191113 21:51:02.512"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 21:51:02.513" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:51:02.513" starttime="20191113 21:51:02.513"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 21:51:02.514" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 21:51:02.514" starttime="20191113 21:51:02.513"></status>
</kw>
<msg timestamp="20191113 21:51:02.514" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:51:02.514" starttime="20191113 21:51:00.611"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 21:51:02.515" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 21:51:02.515" starttime="20191113 21:51:02.515"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 21:51:02.516" starttime="20191113 21:51:02.516"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 21:51:02.517" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 21:51:03.715" level="INFO">Read output: Last login: Wed Nov 13 21:50:54 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 21:51:03.716" starttime="20191113 21:51:02.517"></status>
</kw>
<status status="PASS" endtime="20191113 21:51:03.716" starttime="20191113 21:51:02.515"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 21:51:03.717" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 21:51:03.731" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191113 21:51:03.731" starttime="20191113 21:51:03.716"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 21:51:03.732" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 21:51:03.808" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 21:51:03.808" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191113 21:51:03.808" starttime="20191113 21:51:03.731"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 21:51:03.924" starttime="20191113 21:51:03.809"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 21:51:03.925" starttime="20191113 21:51:03.925"></status>
</kw>
<msg timestamp="20191113 21:51:03.926" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 21:51:03.926" starttime="20191113 21:51:02.514"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:51:03.928" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:51:05.733" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:51:05.734" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:51:05.734" starttime="20191113 21:51:03.927"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:51:05.735" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:51:05.735" starttime="20191113 21:51:05.734"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:51:05.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:51:05.735" starttime="20191113 21:51:05.735"></status>
</kw>
<msg timestamp="20191113 21:51:05.736" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:51:05.736" starttime="20191113 21:51:03.926"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 21:51:05.736" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:51:05.736" starttime="20191113 21:51:05.736"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 21:51:05.737" starttime="20191113 21:51:05.737"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 21:51:05.738" starttime="20191113 21:51:05.737"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 21:51:05.739" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 21:51:05.739" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:51:05.739" starttime="20191113 21:51:05.738"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 21:51:05.740" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 21:51:05.740" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 21:51:05.740" starttime="20191113 21:51:05.739"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 21:51:05.741" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:51:05.741" starttime="20191113 21:51:05.741"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 21:51:05.742" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 21:51:05.742" starttime="20191113 21:51:05.742"></status>
</kw>
<msg timestamp="20191113 21:51:05.743" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:51:05.743" starttime="20191113 21:51:03.926"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191113 21:51:05.743" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191113 21:51:05.744" starttime="20191113 21:51:05.743"></status>
</kw>
<status status="FAIL" endtime="20191113 21:51:05.744" starttime="20191113 21:51:00.611"></status>
</kw>
<status status="FAIL" endtime="20191113 21:51:05.744" starttime="20191113 21:51:00.610"></status>
</kw>
<status status="FAIL" endtime="20191113 21:51:05.744" critical="yes" starttime="20191113 21:51:00.610">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191113 21:51:05.745" starttime="20191113 21:50:39.111"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
