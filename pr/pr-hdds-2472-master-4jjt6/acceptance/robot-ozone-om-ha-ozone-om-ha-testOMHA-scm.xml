<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191114 05:58:59.094" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:58:59.244" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:59:01.768" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:59:01.768" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 05:59:01.768" starttime="20191114 05:58:59.242"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:59:01.769" level="INFO"></msg>
<status status="PASS" endtime="20191114 05:59:01.769" starttime="20191114 05:59:01.768"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:59:01.769" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:59:01.770" starttime="20191114 05:59:01.769"></status>
</kw>
<status status="PASS" endtime="20191114 05:59:01.770" starttime="20191114 05:58:59.242"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:59:01.777" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:59:03.902" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:59:03.903" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 05:59:03.903" starttime="20191114 05:59:01.774"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:59:03.904" level="INFO"></msg>
<status status="PASS" endtime="20191114 05:59:03.905" starttime="20191114 05:59:03.904"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:59:03.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:59:03.906" starttime="20191114 05:59:03.905"></status>
</kw>
<status status="PASS" endtime="20191114 05:59:03.906" starttime="20191114 05:59:01.770"></status>
</kw>
<status status="PASS" endtime="20191114 05:59:03.906" starttime="20191114 05:58:59.241"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 05:59:03.908" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191114 05:59:03.908" starttime="20191114 05:59:03.907"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 05:59:03.909" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191114 05:59:03.909" starttime="20191114 05:59:03.908"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 05:59:03.910" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191114 05:59:03.910" starttime="20191114 05:59:03.910"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 05:59:03.912" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 05:59:03.913" starttime="20191114 05:59:03.910"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:59:03.916" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:59:08.515" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:59:08.515" level="INFO">${output} = 2019-11-14 05:59:06 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 05:59:06 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 05:59:08.515" starttime="20191114 05:59:03.914"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:59:08.516" level="INFO">2019-11-14 05:59:06 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 05:59:06 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 05:59:06 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 05:59:08.516" starttime="20191114 05:59:08.516"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:59:08.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:59:08.517" starttime="20191114 05:59:08.517"></status>
</kw>
<status status="PASS" endtime="20191114 05:59:08.517" starttime="20191114 05:59:03.913"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:59:08.520" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:59:10.570" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:59:10.570" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191114 05:59:10.570" starttime="20191114 05:59:08.519"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:59:10.571" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191114 05:59:10.571" starttime="20191114 05:59:10.570"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:59:10.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:59:10.572" starttime="20191114 05:59:10.571"></status>
</kw>
<msg timestamp="20191114 05:59:10.572" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191114 05:59:10.573" starttime="20191114 05:59:08.518"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 05:59:10.573" starttime="20191114 05:59:10.573"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 05:59:10.574" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 05:59:10.574" starttime="20191114 05:59:10.573"></status>
</kw>
<status status="PASS" endtime="20191114 05:59:10.574" starttime="20191114 05:59:03.906"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:59:10.577" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:59:12.659" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:59:12.659" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:59:12.659" starttime="20191114 05:59:10.576"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:59:12.661" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:59:12.661" starttime="20191114 05:59:12.660"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:59:12.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:59:12.663" starttime="20191114 05:59:12.662"></status>
</kw>
<msg timestamp="20191114 05:59:12.663" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:59:12.663" starttime="20191114 05:59:10.575"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 05:59:12.664" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:59:12.664" starttime="20191114 05:59:12.664"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 05:59:12.666" starttime="20191114 05:59:12.665"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 05:59:12.667" starttime="20191114 05:59:12.666"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 05:59:12.668" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 05:59:12.668" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:59:12.668" starttime="20191114 05:59:12.667"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 05:59:12.669" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 05:59:12.669" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 05:59:12.669" starttime="20191114 05:59:12.668"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 05:59:12.670" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 05:59:12.670" starttime="20191114 05:59:12.670"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 05:59:12.671" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 05:59:12.671" starttime="20191114 05:59:12.670"></status>
</kw>
<msg timestamp="20191114 05:59:12.671" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 05:59:12.671" starttime="20191114 05:59:10.575"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 05:59:12.672" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 05:59:12.672" starttime="20191114 05:59:12.672"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 05:59:12.673" starttime="20191114 05:59:12.673"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 05:59:12.674" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 05:59:13.911" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191114 05:59:13.912" starttime="20191114 05:59:12.674"></status>
</kw>
<status status="PASS" endtime="20191114 05:59:13.912" starttime="20191114 05:59:12.672"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 05:59:13.913" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 05:59:24.058" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 05:59:24.059" starttime="20191114 05:59:13.912"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 05:59:24.060" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 05:59:24.157" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 05:59:24.157" level="INFO">${shutdownMsg} = hadoop     458  0.0  0.0   9556  1168 ?        Ss   05:59   0:00 bash -c sudo ps aux | grep om
hadoop     460  0.0  0.0   9088   668 ?        S    05:59   0:00 grep om</msg>
<status status="PASS" endtime="20191114 05:59:24.157" starttime="20191114 05:59:24.059"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 05:59:24.190" starttime="20191114 05:59:24.157"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 05:59:24.191" starttime="20191114 05:59:24.190"></status>
</kw>
<msg timestamp="20191114 05:59:24.191" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 05:59:24.191" starttime="20191114 05:59:12.671"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:59:24.194" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:59:36.329" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:59:36.329" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 05:59:36.329" starttime="20191114 05:59:24.192"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:59:36.330" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 05:59:36.331" starttime="20191114 05:59:36.330"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:59:36.331" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:59:36.331" starttime="20191114 05:59:36.331"></status>
</kw>
<msg timestamp="20191114 05:59:36.332" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 05:59:36.332" starttime="20191114 05:59:24.192"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 05:59:36.333" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 05:59:36.333" starttime="20191114 05:59:36.332"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 05:59:36.333" starttime="20191114 05:59:36.333"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 05:59:36.334" starttime="20191114 05:59:36.334"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 05:59:36.335" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 05:59:36.335" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191114 05:59:36.335" starttime="20191114 05:59:36.334"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 05:59:36.336" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191114 05:59:36.336" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 05:59:36.336" starttime="20191114 05:59:36.335"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 05:59:36.337" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 05:59:36.337" starttime="20191114 05:59:36.336"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 05:59:36.337" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191114 05:59:36.337" starttime="20191114 05:59:36.337"></status>
</kw>
<msg timestamp="20191114 05:59:36.338" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191114 05:59:36.338" starttime="20191114 05:59:24.191"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 05:59:36.339" starttime="20191114 05:59:36.338"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 05:59:36.340" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191114 05:59:36.340" starttime="20191114 05:59:36.339"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 05:59:36.341" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191114 05:59:36.341" starttime="20191114 05:59:36.340"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 05:59:36.342" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191114 05:59:36.342" starttime="20191114 05:59:36.341"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 05:59:36.344" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 05:59:36.344" starttime="20191114 05:59:36.342"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:59:36.347" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:59:50.755" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:59:50.755" level="INFO">${output} = 2019-11-14 05:59:39 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191114 05:59:50.755" starttime="20191114 05:59:36.345"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:59:50.757" level="INFO">2019-11-14 05:59:39 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 05:59:40 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 05:59:41 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 05:59:42 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 05:59:43 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 05:59:44 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 05:59:45 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 05:59:46 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 05:59:47 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 05:59:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 05:59:48 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-14 05:59:49 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 05:59:49 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 05:59:49 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 05:59:50.757" starttime="20191114 05:59:50.756"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:59:50.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:59:50.758" starttime="20191114 05:59:50.757"></status>
</kw>
<status status="PASS" endtime="20191114 05:59:50.759" starttime="20191114 05:59:36.344"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:59:50.762" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 06:00:02.926" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 06:00:02.926" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191114 06:00:02.927" starttime="20191114 05:59:50.760"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 06:00:02.928" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191114 06:00:02.928" starttime="20191114 06:00:02.927"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 06:00:02.929" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 06:00:02.929" starttime="20191114 06:00:02.928"></status>
</kw>
<msg timestamp="20191114 06:00:02.929" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191114 06:00:02.929" starttime="20191114 05:59:50.759"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 06:00:02.930" starttime="20191114 06:00:02.930"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 06:00:02.931" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 06:00:02.931" starttime="20191114 06:00:02.930"></status>
</kw>
<status status="PASS" endtime="20191114 06:00:02.931" starttime="20191114 05:59:36.339"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 06:00:02.933" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 06:00:02.933" starttime="20191114 06:00:02.932"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 06:00:02.934" starttime="20191114 06:00:02.933"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 06:00:02.935" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 06:00:04.141" level="INFO">Read output: Last login: Thu Nov 14 05:59:12 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash: fork: retry: No child processes</msg>
<status status="PASS" endtime="20191114 06:00:04.142" starttime="20191114 06:00:02.934"></status>
</kw>
<status status="PASS" endtime="20191114 06:00:04.142" starttime="20191114 06:00:02.933"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 06:00:04.143" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 06:00:13.286" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 06:00:13.286" starttime="20191114 06:00:04.143"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 06:00:13.287" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 06:00:13.351" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 06:00:13.351" level="INFO">${startupMsg} = hadoop     578  0.0  0.0   9556  1168 ?        Ss   06:00   0:00 bash -c sudo ps aux | grep om
hadoop     580  0.0  0.0   9088   672 ?        S    06:00   0:00 grep om</msg>
<status status="PASS" endtime="20191114 06:00:13.351" starttime="20191114 06:00:13.286"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 06:00:13.416" starttime="20191114 06:00:13.352"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<msg timestamp="20191114 06:00:13.417" level="FAIL">'hadoop     578  0.0  0.0   9556  1168 ?        Ss   06:00   0:00 bash -c sudo ps aux | grep om
hadoop     580  0.0  0.0   9088   672 ?        S    06:00   0:00 grep om' does not contain 'OzoneManagerStarter'</msg>
<status status="FAIL" endtime="20191114 06:00:13.417" starttime="20191114 06:00:13.416"></status>
</kw>
<status status="FAIL" endtime="20191114 06:00:13.418" starttime="20191114 06:00:02.931"></status>
</kw>
<status status="FAIL" endtime="20191114 06:00:13.418" critical="yes" starttime="20191114 05:58:59.241">'hadoop     578  0.0  0.0   9556  1168 ?        Ss   06:00   0:00 bash -c sudo ps aux | grep om
hadoop     580  0.0  0.0   9088   672 ?        S    06:00   0:00 grep om' does not contain 'OzoneManagerStarter'</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191114 06:00:13.421" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191114 06:00:13.421" starttime="20191114 06:00:13.420"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191114 06:00:13.422" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191114 06:00:13.422" starttime="20191114 06:00:13.421"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 06:00:13.423" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 06:00:13.424" starttime="20191114 06:00:13.423"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 06:00:13.425" starttime="20191114 06:00:13.424"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 06:00:13.425" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 06:00:14.660" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191114 06:00:14.661" starttime="20191114 06:00:13.425"></status>
</kw>
<status status="PASS" endtime="20191114 06:00:14.661" starttime="20191114 06:00:13.424"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 06:00:14.662" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 06:00:24.812" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 06:00:24.813" starttime="20191114 06:00:14.662"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 06:00:24.814" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 06:00:24.911" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 06:00:24.912" level="INFO">${shutdownMsg} = hadoop     460  0.0  0.0   9556  1168 ?        Ss   06:00   0:00 bash -c sudo ps aux | grep om
hadoop     462  0.0  0.0   9088   668 ?        S    06:00   0:00 grep om</msg>
<status status="PASS" endtime="20191114 06:00:24.912" starttime="20191114 06:00:24.813"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 06:00:24.977" starttime="20191114 06:00:24.912"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 06:00:24.978" starttime="20191114 06:00:24.977"></status>
</kw>
<status status="PASS" endtime="20191114 06:00:24.978" starttime="20191114 06:00:13.422"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 06:00:24.980" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 06:00:24.980" starttime="20191114 06:00:24.979"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 06:00:24.982" starttime="20191114 06:00:24.981"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 06:00:24.983" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 06:00:26.187" level="INFO">Read output: Last login: Thu Nov 14 06:00:13 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 06:00:26.187" starttime="20191114 06:00:24.982"></status>
</kw>
<status status="PASS" endtime="20191114 06:00:26.188" starttime="20191114 06:00:24.981"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 06:00:26.188" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 06:00:26.203" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 06:00:26.203" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 06:00:26.203" starttime="20191114 06:00:26.188"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 06:00:26.204" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 06:00:26.204" starttime="20191114 06:00:26.203"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 06:00:26.204" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191114 06:00:26.204" starttime="20191114 06:00:26.204"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 06:00:26.293" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191114 06:00:26.301" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191114 06:00:26.301" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191114 06:00:26.301" starttime="20191114 06:00:26.205"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191114 06:00:26.302" level="INFO">Length is 2</msg>
<msg timestamp="20191114 06:00:26.302" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191114 06:00:26.302" starttime="20191114 06:00:26.301"></status>
</kw>
<msg timestamp="20191114 06:00:26.302" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191114 06:00:26.302" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191114 06:00:26.302" starttime="20191114 06:00:24.978"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 06:00:26.305" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 06:00:48.205" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 06:00:48.205" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 06:00:48.205" starttime="20191114 06:00:26.303"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 06:00:48.206" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 06:00:48.207" starttime="20191114 06:00:48.206"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 06:00:48.207" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 06:00:48.207" starttime="20191114 06:00:48.207"></status>
</kw>
<msg timestamp="20191114 06:00:48.208" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 06:00:48.208" starttime="20191114 06:00:26.303"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 06:00:48.208" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 06:00:48.208" starttime="20191114 06:00:48.208"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 06:00:48.209" starttime="20191114 06:00:48.208"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 06:00:48.209" starttime="20191114 06:00:48.209"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 06:00:48.210" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 06:00:48.210" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191114 06:00:48.210" starttime="20191114 06:00:48.209"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 06:00:48.210" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191114 06:00:48.211" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 06:00:48.211" starttime="20191114 06:00:48.210"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 06:00:48.211" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 06:00:48.211" starttime="20191114 06:00:48.211"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 06:00:48.212" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191114 06:00:48.212" starttime="20191114 06:00:48.211"></status>
</kw>
<msg timestamp="20191114 06:00:48.212" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 06:00:48.212" starttime="20191114 06:00:26.303"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191114 06:00:48.214" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191114 06:00:48.214" starttime="20191114 06:00:48.212"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 06:00:48.216" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191114 06:00:48.216" starttime="20191114 06:00:48.215"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 06:00:48.216" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191114 06:00:48.216" starttime="20191114 06:00:48.216"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 06:00:48.219" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 05:59:46.823" level="INFO">${rc} = 255</msg>
<msg timestamp="20191115 05:59:46.824" level="INFO">${output} = Call From 2a59cb6a22f9/172.18.0.3 to om1:9862 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused</msg>
<status status="PASS" endtime="20191115 05:59:46.824" starttime="20191114 06:00:48.218"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 05:59:46.827" level="INFO">Call From 2a59cb6a22f9/172.18.0.3 to om1:9862 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused</msg>
<status status="PASS" endtime="20191115 05:59:46.827" starttime="20191115 05:59:46.825"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 05:59:46.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191115 05:59:46.830" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191115 05:59:46.830" starttime="20191115 05:59:46.827"></status>
</kw>
<status status="FAIL" endtime="20191115 05:59:46.831" starttime="20191114 06:00:48.217"></status>
</kw>
<status status="FAIL" endtime="20191115 05:59:46.831" starttime="20191114 06:00:48.216"></status>
</kw>
<status status="FAIL" endtime="20191115 05:59:46.831" starttime="20191114 06:00:48.215"></status>
</kw>
<status status="FAIL" endtime="20191115 05:59:46.831" starttime="20191114 06:00:48.215"></status>
</kw>
<status status="FAIL" endtime="20191115 05:59:46.832" starttime="20191114 06:00:48.214"></status>
</kw>
<status status="FAIL" endtime="20191115 05:59:46.832" starttime="20191114 06:00:48.212"></status>
</kw>
<status status="FAIL" endtime="20191115 05:59:46.832" starttime="20191114 06:00:48.212"></status>
</kw>
<status status="FAIL" endtime="20191115 05:59:46.832" critical="yes" starttime="20191114 06:00:13.418">255 != 0</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 05:59:46.839" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 06:01:09.255" level="INFO">${rc} = 255</msg>
<msg timestamp="20191115 06:01:09.255" level="INFO">${output} = Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
jav...</msg>
<status status="PASS" endtime="20191115 06:01:09.255" starttime="20191115 05:59:46.836"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 06:01:09.271" level="INFO">Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
java.net.ConnectException: Call From 2a59cb6a22f9/172.18.0.3 to om2:9862 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.apache.hadoop.net.NetUtils.wrapWithMessage(NetUtils.java:831)
	at org.apache.hadoop.net.NetUtils.wrapException(NetUtils.java:755)
	at org.apache.hadoop.ipc.Client.getRpcResponse(Client.java:1515)
	at org.apache.hadoop.ipc.Client.call(Client.java:1457)
	at org.apache.hadoop.ipc.Client.call(Client.java:1367)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:228)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:116)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:422)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeMethod(RetryInvocationHandler.java:165)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invoke(RetryInvocationHandler.java:157)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeOnce(RetryInvocationHandler.java:95)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:359)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.submitRequest(OzoneManagerProtocolClientSideTranslatorPB.java:361)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.getServiceInfo(OzoneManagerProtocolClientSideTranslatorPB.java:1252)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.hdds.tracing.TraceAllMethod.invoke(TraceAllMethod.java:66)
	at com.sun.proxy.$Proxy17.getServiceInfo(Unknown Source)
	at org.apache.hadoop.ozone.client.rpc.RpcClient.&lt;init&gt;(RpcClient.java:157)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getClientProtocol(OzoneClientFactory.java:256)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getRpcClient(OzoneClientFactory.java:187)
	at org.apache.hadoop.ozone.admin.om.OMAdmin.createClient(OMAdmin.java:59)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:49)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:32)
	at picocli.CommandLine.execute(CommandLine.java:1173)
	at picocli.CommandLine.access$800(CommandLine.java:141)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1367)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1335)
	at picocli.CommandLine$AbstractParseResultHandler.handleParseResult(CommandLine.java:1243)
	at picocli.CommandLine.parseWithHandlers(CommandLine.java:1526)
	at picocli.CommandLine.parseWithHandler(CommandLine.java:1465)
	at org.apache.hadoop.hdds.cli.GenericCli.execute(GenericCli.java:65)
	at org.apache.hadoop.hdds.cli.GenericCli.run(GenericCli.java:56)
	at org.apache.hadoop.ozone.admin.OzoneAdmin.main(OzoneAdmin.java:66)
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:779)
	at org.apache.hadoop.net.SocketIOWithTimeout.connect(SocketIOWithTimeout.java:206)
	at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:531)
	at org.apache.hadoop.ipc.Client$Connection.setupConnection(Client.java:690)
	at org.apache.hadoop.ipc.Client$Connection.setupIOstreams(Client.java:794)
	at org.apache.hadoop.ipc.Client$Connection.access$3700(Client.java:411)
	at org.apache.hadoop.ipc.Client.getConnection(Client.java:1572)
	at org.apache.hadoop.ipc.Client.call(Client.java:1403)
	... 38 more
Connection refused</msg>
<status status="PASS" endtime="20191115 06:01:09.271" starttime="20191115 06:01:09.256"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 06:01:09.272" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191115 06:01:09.273" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191115 06:01:09.273" starttime="20191115 06:01:09.272"></status>
</kw>
<status status="FAIL" endtime="20191115 06:01:09.273" starttime="20191115 05:59:46.836"></status>
</kw>
<status status="FAIL" endtime="20191115 06:01:09.274" starttime="20191115 05:59:46.835"></status>
</kw>
<status status="FAIL" endtime="20191115 06:01:09.274" starttime="20191115 05:59:46.835"></status>
</kw>
<status status="FAIL" endtime="20191115 06:01:09.274" starttime="20191115 05:59:46.834"></status>
</kw>
<status status="FAIL" endtime="20191115 06:01:09.275" critical="yes" starttime="20191115 05:59:46.833">255 != 0</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191115 06:01:09.276" starttime="20191114 05:58:59.094"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
