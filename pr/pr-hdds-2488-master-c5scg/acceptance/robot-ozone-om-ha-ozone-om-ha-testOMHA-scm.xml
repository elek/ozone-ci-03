<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191117 05:02:18.425" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:02:18.574" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:02:21.303" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:02:21.303" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191117 05:02:21.303" starttime="20191117 05:02:18.573"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:02:21.304" level="INFO"></msg>
<status status="PASS" endtime="20191117 05:02:21.304" starttime="20191117 05:02:21.304"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:02:21.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:02:21.305" starttime="20191117 05:02:21.305"></status>
</kw>
<status status="PASS" endtime="20191117 05:02:21.306" starttime="20191117 05:02:18.572"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:02:21.312" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:02:23.524" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:02:23.524" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191117 05:02:23.524" starttime="20191117 05:02:21.310"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:02:23.525" level="INFO"></msg>
<status status="PASS" endtime="20191117 05:02:23.525" starttime="20191117 05:02:23.525"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:02:23.526" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:02:23.526" starttime="20191117 05:02:23.526"></status>
</kw>
<status status="PASS" endtime="20191117 05:02:23.526" starttime="20191117 05:02:21.306"></status>
</kw>
<status status="PASS" endtime="20191117 05:02:23.527" starttime="20191117 05:02:18.572"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191117 05:02:23.528" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191117 05:02:23.528" starttime="20191117 05:02:23.527"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191117 05:02:23.529" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191117 05:02:23.529" starttime="20191117 05:02:23.528"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191117 05:02:23.530" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191117 05:02:23.530" starttime="20191117 05:02:23.529"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:02:23.531" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:02:23.532" starttime="20191117 05:02:23.530"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:02:23.534" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:02:28.605" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:02:28.605" level="INFO">${output} = 2019-11-17 05:02:26 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-17 05:02:26 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191117 05:02:28.606" starttime="20191117 05:02:23.533"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:02:28.608" level="INFO">2019-11-17 05:02:26 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-17 05:02:26 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-17 05:02:26 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191117 05:02:28.608" starttime="20191117 05:02:28.607"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:02:28.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:02:28.609" starttime="20191117 05:02:28.608"></status>
</kw>
<status status="PASS" endtime="20191117 05:02:28.610" starttime="20191117 05:02:23.532"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:02:28.614" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:02:30.860" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:02:30.860" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191117 05:02:30.861" starttime="20191117 05:02:28.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:02:30.862" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191117 05:02:30.862" starttime="20191117 05:02:30.861"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:02:30.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:02:30.863" starttime="20191117 05:02:30.863"></status>
</kw>
<msg timestamp="20191117 05:02:30.864" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191117 05:02:30.864" starttime="20191117 05:02:28.610"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:02:30.865" starttime="20191117 05:02:30.864"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:02:30.866" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:02:30.866" starttime="20191117 05:02:30.865"></status>
</kw>
<status status="PASS" endtime="20191117 05:02:30.866" starttime="20191117 05:02:23.527"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:02:30.870" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:02:32.914" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:02:32.914" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:02:32.914" starttime="20191117 05:02:30.867"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:02:32.916" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:02:32.916" starttime="20191117 05:02:32.915"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:02:32.917" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:02:32.917" starttime="20191117 05:02:32.917"></status>
</kw>
<msg timestamp="20191117 05:02:32.918" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:02:32.918" starttime="20191117 05:02:30.867"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191117 05:02:32.919" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:02:32.919" starttime="20191117 05:02:32.918"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191117 05:02:32.921" starttime="20191117 05:02:32.919"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191117 05:02:32.922" starttime="20191117 05:02:32.921"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191117 05:02:32.923" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191117 05:02:32.923" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:02:32.923" starttime="20191117 05:02:32.922"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191117 05:02:32.924" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191117 05:02:32.924" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191117 05:02:32.924" starttime="20191117 05:02:32.923"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191117 05:02:32.925" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191117 05:02:32.925" starttime="20191117 05:02:32.924"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191117 05:02:32.926" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191117 05:02:32.926" starttime="20191117 05:02:32.925"></status>
</kw>
<msg timestamp="20191117 05:02:32.927" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191117 05:02:32.927" starttime="20191117 05:02:30.866"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:02:32.929" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191117 05:02:32.929" starttime="20191117 05:02:32.928"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:02:32.931" starttime="20191117 05:02:32.930"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:02:32.931" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:02:34.151" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:02:34.151" starttime="20191117 05:02:32.931"></status>
</kw>
<status status="PASS" endtime="20191117 05:02:34.151" starttime="20191117 05:02:32.929"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191117 05:02:34.153" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191117 05:02:44.337" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:02:44.337" starttime="20191117 05:02:34.152"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191117 05:02:44.339" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:02:44.447" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:02:44.448" level="INFO">${shutdownMsg} = hadoop     459  0.0  0.0   9556  1168 ?        Ss   05:02   0:00 bash -c sudo ps aux | grep om
hadoop     461  0.0  0.0   9088   672 ?        S    05:02   0:00 grep om</msg>
<status status="PASS" endtime="20191117 05:02:44.448" starttime="20191117 05:02:44.338"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:02:44.513" starttime="20191117 05:02:44.448"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:02:44.514" starttime="20191117 05:02:44.514"></status>
</kw>
<msg timestamp="20191117 05:02:44.515" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191117 05:02:44.515" starttime="20191117 05:02:32.927"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:02:44.520" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:02:56.853" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:02:56.853" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191117 05:02:56.853" starttime="20191117 05:02:44.517"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:02:56.855" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191117 05:02:56.855" starttime="20191117 05:02:56.854"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:02:56.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:02:56.856" starttime="20191117 05:02:56.855"></status>
</kw>
<msg timestamp="20191117 05:02:56.857" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191117 05:02:56.857" starttime="20191117 05:02:44.516"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191117 05:02:56.857" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191117 05:02:56.858" starttime="20191117 05:02:56.857"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191117 05:02:56.858" starttime="20191117 05:02:56.858"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191117 05:02:56.859" starttime="20191117 05:02:56.859"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191117 05:02:56.860" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191117 05:02:56.860" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191117 05:02:56.860" starttime="20191117 05:02:56.860"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191117 05:02:56.862" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191117 05:02:56.862" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191117 05:02:56.863" starttime="20191117 05:02:56.861"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191117 05:02:56.864" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191117 05:02:56.864" starttime="20191117 05:02:56.863"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191117 05:02:56.865" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191117 05:02:56.865" starttime="20191117 05:02:56.864"></status>
</kw>
<msg timestamp="20191117 05:02:56.865" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191117 05:02:56.865" starttime="20191117 05:02:44.515"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191117 05:02:56.867" starttime="20191117 05:02:56.866"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191117 05:02:56.868" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191117 05:02:56.869" starttime="20191117 05:02:56.868"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191117 05:02:56.870" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191117 05:02:56.870" starttime="20191117 05:02:56.869"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191117 05:02:56.871" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191117 05:02:56.871" starttime="20191117 05:02:56.870"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:02:56.874" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:02:56.874" starttime="20191117 05:02:56.872"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:02:56.878" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:03:11.827" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:03:11.828" level="INFO">${output} = 2019-11-17 05:02:59 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191117 05:03:11.828" starttime="20191117 05:02:56.875"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:03:11.829" level="INFO">2019-11-17 05:02:59 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:03:00 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:03:01 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:03:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:03:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:03:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:03:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:03:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:03:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:03:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:03:09 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-17 05:03:10 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-17 05:03:10 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191117 05:03:11.829" starttime="20191117 05:03:11.828"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:03:11.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:03:11.831" starttime="20191117 05:03:11.830"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:11.831" starttime="20191117 05:02:56.874"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:03:11.834" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:03:24.252" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:03:24.253" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191117 05:03:24.253" starttime="20191117 05:03:11.832"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:03:24.254" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191117 05:03:24.254" starttime="20191117 05:03:24.253"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:03:24.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:03:24.255" starttime="20191117 05:03:24.255"></status>
</kw>
<msg timestamp="20191117 05:03:24.256" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191117 05:03:24.256" starttime="20191117 05:03:11.831"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:03:24.257" starttime="20191117 05:03:24.256"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:03:24.258" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:03:24.258" starttime="20191117 05:03:24.257"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:24.258" starttime="20191117 05:02:56.867"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:03:24.260" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191117 05:03:24.260" starttime="20191117 05:03:24.259"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:03:24.262" starttime="20191117 05:03:24.261"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:03:24.262" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:03:25.468" level="INFO">Read output: Last login: Sun Nov 17 05:02:33 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:03:25.469" starttime="20191117 05:03:24.262"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:25.469" starttime="20191117 05:03:24.260"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191117 05:03:25.470" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191117 05:03:27.634" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:03:27.634" starttime="20191117 05:03:25.469"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191117 05:03:27.636" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:03:27.745" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:03:27.745" level="INFO">${startupMsg} = hadoop     512  363  0.0 34482604 219536 ?     Sl   05:03   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191117 05:03:27.745" starttime="20191117 05:03:27.635"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:03:27.779" starttime="20191117 05:03:27.746"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:03:27.781" starttime="20191117 05:03:27.780"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:27.781" starttime="20191117 05:03:24.258"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:27.782" critical="yes" starttime="20191117 05:02:18.571"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191117 05:03:27.788" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191117 05:03:27.788" starttime="20191117 05:03:27.784"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191117 05:03:27.791" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191117 05:03:27.791" starttime="20191117 05:03:27.789"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:03:27.794" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191117 05:03:27.794" starttime="20191117 05:03:27.793"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:03:27.797" starttime="20191117 05:03:27.795"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:03:27.798" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:03:29.002" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:03:29.003" starttime="20191117 05:03:27.798"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:29.003" starttime="20191117 05:03:27.794"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191117 05:03:29.004" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191117 05:03:39.167" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:03:39.167" starttime="20191117 05:03:29.003"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191117 05:03:39.169" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:03:39.277" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:03:39.278" level="INFO">${shutdownMsg} = hadoop     496  0.0  0.0   9556  1168 ?        Ss   05:03   0:00 bash -c sudo ps aux | grep om
hadoop     498  0.0  0.0   9088   668 ?        S    05:03   0:00 grep om</msg>
<status status="PASS" endtime="20191117 05:03:39.278" starttime="20191117 05:03:39.168"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:03:39.343" starttime="20191117 05:03:39.278"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:03:39.344" starttime="20191117 05:03:39.343"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:39.344" starttime="20191117 05:03:27.792"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:03:39.347" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191117 05:03:39.347" starttime="20191117 05:03:39.346"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:03:39.349" starttime="20191117 05:03:39.348"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:03:39.350" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:03:40.554" level="INFO">Read output: Last login: Sun Nov 17 05:03:28 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:03:40.554" starttime="20191117 05:03:39.349"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:40.555" starttime="20191117 05:03:39.347"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191117 05:03:40.556" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191117 05:03:40.582" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:03:40.582" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191117 05:03:40.583" starttime="20191117 05:03:40.555"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191117 05:03:40.584" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191117 05:03:40.584" starttime="20191117 05:03:40.583"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191117 05:03:40.585" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191117 05:03:40.585" starttime="20191117 05:03:40.584"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191117 05:03:40.634" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191117 05:03:40.647" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191117 05:03:40.647" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191117 05:03:40.647" starttime="20191117 05:03:40.585"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191117 05:03:40.649" level="INFO">Length is 2</msg>
<msg timestamp="20191117 05:03:40.649" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191117 05:03:40.649" starttime="20191117 05:03:40.647"></status>
</kw>
<msg timestamp="20191117 05:03:40.650" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191117 05:03:40.650" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191117 05:03:40.650" starttime="20191117 05:03:39.345"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:03:40.655" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:03:42.871" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:03:42.871" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:03:42.871" starttime="20191117 05:03:40.652"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:03:42.873" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:03:42.874" starttime="20191117 05:03:42.872"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:03:42.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:03:42.875" starttime="20191117 05:03:42.874"></status>
</kw>
<msg timestamp="20191117 05:03:42.875" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:03:42.876" starttime="20191117 05:03:40.651"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191117 05:03:42.876" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:03:42.876" starttime="20191117 05:03:42.876"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191117 05:03:42.878" starttime="20191117 05:03:42.877"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191117 05:03:42.878" starttime="20191117 05:03:42.878"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191117 05:03:42.879" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191117 05:03:42.880" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:03:42.880" starttime="20191117 05:03:42.879"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191117 05:03:42.881" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191117 05:03:42.881" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191117 05:03:42.881" starttime="20191117 05:03:42.880"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191117 05:03:42.882" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191117 05:03:42.882" starttime="20191117 05:03:42.881"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191117 05:03:42.883" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191117 05:03:42.883" starttime="20191117 05:03:42.882"></status>
</kw>
<msg timestamp="20191117 05:03:42.884" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191117 05:03:42.884" starttime="20191117 05:03:40.650"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191117 05:03:42.887" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191117 05:03:42.887" starttime="20191117 05:03:42.885"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191117 05:03:42.890" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191117 05:03:42.890" starttime="20191117 05:03:42.889"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191117 05:03:42.891" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191117 05:03:42.891" starttime="20191117 05:03:42.891"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:03:42.896" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:03:47.397" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:03:47.397" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191117 05:03:47.397" starttime="20191117 05:03:42.894"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:03:47.399" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191117 05:03:47.399" starttime="20191117 05:03:47.398"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:03:47.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:03:47.400" starttime="20191117 05:03:47.399"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:47.401" starttime="20191117 05:03:42.892"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:03:47.407" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:03:49.974" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:03:49.975" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573967025112,
  "modificationTime": 1573967026966,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191117 05:03:49.975" starttime="20191117 05:03:47.404"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:03:49.977" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573967025112,
  "modificationTime": 1573967026966,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103151502957215740,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191117 05:03:49.977" starttime="20191117 05:03:49.976"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:03:49.978" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:03:49.978" starttime="20191117 05:03:49.977"></status>
</kw>
<msg timestamp="20191117 05:03:49.979" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573967025112,
  "modificationTime": 1573967026966,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191117 05:03:49.979" starttime="20191117 05:03:47.401"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191117 05:03:49.980" starttime="20191117 05:03:49.979"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:49.980" starttime="20191117 05:03:42.891"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:49.980" starttime="20191117 05:03:42.889"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191117 05:03:49.982" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191117 05:03:49.982" starttime="20191117 05:03:49.981"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191117 05:03:49.983" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191117 05:03:49.983" starttime="20191117 05:03:49.982"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:03:49.988" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:03:55.066" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:03:55.066" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191117 05:03:55.067" starttime="20191117 05:03:49.986"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:03:55.068" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191117 05:03:55.069" starttime="20191117 05:03:55.067"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:03:55.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:03:55.070" starttime="20191117 05:03:55.069"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:55.070" starttime="20191117 05:03:49.984"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:03:55.075" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:03:57.413" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:03:57.413" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573967032443,
  "modificationTime": 1573967034636,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191117 05:03:57.413" starttime="20191117 05:03:55.073"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:03:57.414" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573967032443,
  "modificationTime": 1573967034636,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103151503438053380,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191117 05:03:57.414" starttime="20191117 05:03:57.414"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:03:57.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:03:57.415" starttime="20191117 05:03:57.415"></status>
</kw>
<msg timestamp="20191117 05:03:57.416" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573967032443,
  "modificationTime": 1573967034636,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191117 05:03:57.416" starttime="20191117 05:03:55.071"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191117 05:03:57.416" starttime="20191117 05:03:57.416"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:57.417" starttime="20191117 05:03:49.983"></status>
</kw>
<status status="PASS" endtime="20191117 05:03:57.417" starttime="20191117 05:03:49.980"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191117 05:03:57.418" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191117 05:03:57.418" starttime="20191117 05:03:57.417"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191117 05:03:57.418" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191117 05:03:57.418" starttime="20191117 05:03:57.418"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:03:57.422" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:04:01.968" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:04:01.968" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191117 05:04:01.968" starttime="20191117 05:03:57.420"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:04:01.969" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191117 05:04:01.970" starttime="20191117 05:04:01.969"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:04:01.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:04:01.971" starttime="20191117 05:04:01.970"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:01.971" starttime="20191117 05:03:57.419"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:04:01.976" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:04:04.492" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:04:04.493" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573967039681,
  "modificationTime": 1573967041554,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191117 05:04:04.493" starttime="20191117 05:04:01.973"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:04:04.494" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573967039681,
  "modificationTime": 1573967041554,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103151503912468480,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191117 05:04:04.494" starttime="20191117 05:04:04.493"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:04:04.495" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:04:04.495" starttime="20191117 05:04:04.494"></status>
</kw>
<msg timestamp="20191117 05:04:04.495" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573967039681,
  "modificationTime": 1573967041554,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191117 05:04:04.495" starttime="20191117 05:04:01.971"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:04.496" starttime="20191117 05:04:04.495"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:04.496" starttime="20191117 05:03:57.418"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:04.496" starttime="20191117 05:03:57.417"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191117 05:04:04.497" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191117 05:04:04.497" starttime="20191117 05:04:04.496"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191117 05:04:04.498" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191117 05:04:04.498" starttime="20191117 05:04:04.497"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:04:04.502" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:04:09.074" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:04:09.074" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191117 05:04:09.074" starttime="20191117 05:04:04.500"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:04:09.076" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191117 05:04:09.076" starttime="20191117 05:04:09.075"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:04:09.077" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:04:09.078" starttime="20191117 05:04:09.077"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:09.078" starttime="20191117 05:04:04.499"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:04:09.083" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:04:11.542" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:04:11.542" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573967046740,
  "modificationTime": 1573967048658,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191117 05:04:11.542" starttime="20191117 05:04:09.080"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:04:11.543" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573967046740,
  "modificationTime": 1573967048658,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103151504375087100,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191117 05:04:11.543" starttime="20191117 05:04:11.543"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:04:11.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:04:11.544" starttime="20191117 05:04:11.543"></status>
</kw>
<msg timestamp="20191117 05:04:11.544" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573967046740,
  "modificationTime": 1573967048658,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191117 05:04:11.544" starttime="20191117 05:04:09.078"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:11.545" starttime="20191117 05:04:11.545"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:11.545" starttime="20191117 05:04:04.498"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:11.545" starttime="20191117 05:04:04.496"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191117 05:04:11.546" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:04:11.546" starttime="20191117 05:04:11.546"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191117 05:04:11.546" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:04:11.547" starttime="20191117 05:04:11.546"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:04:11.550" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:04:15.961" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:04:15.961" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191117 05:04:15.962" starttime="20191117 05:04:11.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:04:15.964" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191117 05:04:15.964" starttime="20191117 05:04:15.963"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:04:15.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:04:15.965" starttime="20191117 05:04:15.964"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:15.966" starttime="20191117 05:04:11.547"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:04:15.972" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:04:18.364" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:04:18.364" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573967053789,
  "modificationTime": 1573967055543,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191117 05:04:18.364" starttime="20191117 05:04:15.969"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:04:18.365" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573967053789,
  "modificationTime": 1573967055543,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103151504836984830,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191117 05:04:18.366" starttime="20191117 05:04:18.365"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:04:18.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:04:18.366" starttime="20191117 05:04:18.366"></status>
</kw>
<msg timestamp="20191117 05:04:18.367" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573967053789,
  "modificationTime": 1573967055543,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191117 05:04:18.367" starttime="20191117 05:04:15.966"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:18.368" starttime="20191117 05:04:18.367"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:18.368" starttime="20191117 05:04:11.547"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:18.368" starttime="20191117 05:04:11.545"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:18.368" starttime="20191117 05:03:42.889"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:18.368" starttime="20191117 05:03:42.888"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:04:18.370" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191117 05:04:18.370" starttime="20191117 05:04:18.369"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:18.371" starttime="20191117 05:04:18.370"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:04:18.372" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:04:19.577" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:04:19.577" starttime="20191117 05:04:18.371"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:19.578" starttime="20191117 05:04:18.370"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191117 05:04:19.579" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191117 05:04:19.605" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:04:19.606" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191117 05:04:19.606" starttime="20191117 05:04:19.578"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191117 05:04:19.607" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191117 05:04:19.607" starttime="20191117 05:04:19.606"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191117 05:04:19.609" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191117 05:04:19.609" starttime="20191117 05:04:19.608"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191117 05:04:19.658" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191117 05:04:19.669" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191117 05:04:19.670" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191117 05:04:19.670" starttime="20191117 05:04:19.609"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191117 05:04:19.671" level="INFO">Length is 3</msg>
<msg timestamp="20191117 05:04:19.671" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191117 05:04:19.671" starttime="20191117 05:04:19.670"></status>
</kw>
<msg timestamp="20191117 05:04:19.672" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191117 05:04:19.672" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191117 05:04:19.672" starttime="20191117 05:04:18.368"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191117 05:04:19.674" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191117 05:04:19.674" starttime="20191117 05:04:19.673"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:19.674" starttime="20191117 05:03:42.884"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:19.674" starttime="20191117 05:03:42.884"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:19.675" starttime="20191117 05:04:19.674"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:04:19.678" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191117 05:04:19.678" starttime="20191117 05:04:19.677"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:19.680" starttime="20191117 05:04:19.679"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:04:19.681" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:04:20.885" level="INFO">Read output: Last login: Sun Nov 17 05:03:39 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:04:20.886" starttime="20191117 05:04:19.680"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:20.886" starttime="20191117 05:04:19.678"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191117 05:04:20.887" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191117 05:04:23.078" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:04:23.078" starttime="20191117 05:04:20.887"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191117 05:04:23.079" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:04:23.177" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:04:23.177" level="INFO">${startupMsg} = hadoop     571  367  0.0 34482828 226648 ?     Sl   05:04   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191117 05:04:23.177" starttime="20191117 05:04:23.079"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:04:23.242" starttime="20191117 05:04:23.178"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:23.243" starttime="20191117 05:04:23.243"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:23.243" starttime="20191117 05:04:19.676"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:04:23.245" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191117 05:04:23.245" starttime="20191117 05:04:23.245"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:23.247" starttime="20191117 05:04:23.246"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:04:23.247" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:04:24.450" level="INFO">Read output: Last login: Sun Nov 17 05:04:19 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:04:24.451" starttime="20191117 05:04:23.247"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:24.451" starttime="20191117 05:04:23.246"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191117 05:04:24.452" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191117 05:04:24.468" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:04:24.469" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191117 05:04:24.469" starttime="20191117 05:04:24.452"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191117 05:04:24.470" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191117 05:04:24.470" starttime="20191117 05:04:24.469"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191117 05:04:24.472" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191117 05:04:24.472" starttime="20191117 05:04:24.471"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191117 05:04:24.551" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191117 05:04:24.560" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191117 05:04:24.561" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191117 05:04:24.561" starttime="20191117 05:04:24.472"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191117 05:04:24.562" level="INFO">Length is 2</msg>
<msg timestamp="20191117 05:04:24.562" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191117 05:04:24.562" starttime="20191117 05:04:24.561"></status>
</kw>
<msg timestamp="20191117 05:04:24.563" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191117 05:04:24.563" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191117 05:04:24.563" starttime="20191117 05:04:23.244"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:24.564" starttime="20191117 05:04:24.563"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191117 05:04:25.565" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191117 05:04:25.565" starttime="20191117 05:04:24.564"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:25.565" starttime="20191117 05:04:23.244"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:04:25.568" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191117 05:04:25.568" starttime="20191117 05:04:25.567"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:25.570" starttime="20191117 05:04:25.569"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:04:25.571" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:04:26.775" level="INFO">Read output: Last login: Sun Nov 17 05:04:23 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:04:26.776" starttime="20191117 05:04:25.570"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:26.776" starttime="20191117 05:04:25.568"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191117 05:04:26.778" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191117 05:04:26.804" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:04:26.804" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191117 05:04:26.804" starttime="20191117 05:04:26.777"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191117 05:04:26.805" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191117 05:04:26.806" starttime="20191117 05:04:26.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191117 05:04:26.807" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191117 05:04:26.807" starttime="20191117 05:04:26.806"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191117 05:04:26.856" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191117 05:04:26.868" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191117 05:04:26.868" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191117 05:04:26.868" starttime="20191117 05:04:26.807"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191117 05:04:26.870" level="INFO">Length is 3</msg>
<msg timestamp="20191117 05:04:26.870" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191117 05:04:26.870" starttime="20191117 05:04:26.869"></status>
</kw>
<msg timestamp="20191117 05:04:26.871" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191117 05:04:26.871" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191117 05:04:26.871" starttime="20191117 05:04:25.566"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191117 05:04:26.873" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191117 05:04:26.873" starttime="20191117 05:04:26.872"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:26.873" starttime="20191117 05:04:25.566"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:26.873" starttime="20191117 05:04:23.244"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:26.875" starttime="20191117 05:04:26.874"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:26.876" starttime="20191117 05:04:26.875"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:26.877" critical="yes" starttime="20191117 05:03:27.783"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:04:26.884" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:04:28.991" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:04:28.991" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:28.991" starttime="20191117 05:04:26.881"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:04:28.993" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:28.993" starttime="20191117 05:04:28.992"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:04:28.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:04:28.994" starttime="20191117 05:04:28.993"></status>
</kw>
<msg timestamp="20191117 05:04:28.995" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:28.995" starttime="20191117 05:04:26.880"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191117 05:04:28.996" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:28.996" starttime="20191117 05:04:28.995"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:28.998" starttime="20191117 05:04:28.997"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:28.999" starttime="20191117 05:04:28.998"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191117 05:04:29.000" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191117 05:04:29.000" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:29.000" starttime="20191117 05:04:28.999"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191117 05:04:29.001" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191117 05:04:29.002" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191117 05:04:29.002" starttime="20191117 05:04:29.001"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191117 05:04:29.003" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191117 05:04:29.003" starttime="20191117 05:04:29.002"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191117 05:04:29.004" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191117 05:04:29.004" starttime="20191117 05:04:29.003"></status>
</kw>
<msg timestamp="20191117 05:04:29.005" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191117 05:04:29.005" starttime="20191117 05:04:26.880"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:04:29.007" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191117 05:04:29.007" starttime="20191117 05:04:29.006"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:29.009" starttime="20191117 05:04:29.008"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:04:29.010" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:04:30.215" level="INFO">Read output: Last login: Sun Nov 17 05:04:18 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:04:30.217" starttime="20191117 05:04:29.009"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:30.218" starttime="20191117 05:04:29.007"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191117 05:04:30.219" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191117 05:04:40.408" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:04:40.410" starttime="20191117 05:04:30.218"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191117 05:04:40.412" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:04:40.522" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:04:40.522" level="INFO">${shutdownMsg} = hadoop     533  0.0  0.0   9556  1168 ?        Ss   05:04   0:00 bash -c sudo ps aux | grep om
hadoop     535  0.0  0.0   9088   668 ?        S    05:04   0:00 grep om</msg>
<status status="PASS" endtime="20191117 05:04:40.522" starttime="20191117 05:04:40.411"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:04:40.588" starttime="20191117 05:04:40.523"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:40.589" starttime="20191117 05:04:40.588"></status>
</kw>
<msg timestamp="20191117 05:04:40.589" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191117 05:04:40.590" starttime="20191117 05:04:29.005"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:04:40.595" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:04:42.771" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:04:42.771" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:42.771" starttime="20191117 05:04:40.592"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:04:42.772" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:42.772" starttime="20191117 05:04:42.772"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:04:42.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:04:42.773" starttime="20191117 05:04:42.773"></status>
</kw>
<msg timestamp="20191117 05:04:42.774" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:42.774" starttime="20191117 05:04:40.591"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191117 05:04:42.774" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:42.774" starttime="20191117 05:04:42.774"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:42.775" starttime="20191117 05:04:42.774"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:42.776" starttime="20191117 05:04:42.775"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191117 05:04:42.776" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191117 05:04:42.776" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:42.776" starttime="20191117 05:04:42.776"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191117 05:04:42.777" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191117 05:04:42.777" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191117 05:04:42.777" starttime="20191117 05:04:42.777"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191117 05:04:42.778" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191117 05:04:42.778" starttime="20191117 05:04:42.777"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191117 05:04:42.779" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191117 05:04:42.779" starttime="20191117 05:04:42.778"></status>
</kw>
<msg timestamp="20191117 05:04:42.779" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191117 05:04:42.779" starttime="20191117 05:04:40.590"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:42.780" starttime="20191117 05:04:42.779"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191117 05:04:42.781" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191117 05:04:42.782" starttime="20191117 05:04:42.781"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191117 05:04:42.783" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191117 05:04:42.783" starttime="20191117 05:04:42.782"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191117 05:04:42.784" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191117 05:04:42.784" starttime="20191117 05:04:42.783"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:04:42.786" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:04:42.786" starttime="20191117 05:04:42.784"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:04:42.789" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:04:47.262" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:04:47.263" level="INFO">${output} = 2019-11-17 05:04:45 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-17 05:04:45 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191117 05:04:47.263" starttime="20191117 05:04:42.787"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:04:47.264" level="INFO">2019-11-17 05:04:45 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-17 05:04:45 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-17 05:04:45 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191117 05:04:47.265" starttime="20191117 05:04:47.263"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:04:47.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:04:47.266" starttime="20191117 05:04:47.265"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:47.266" starttime="20191117 05:04:42.786"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:04:47.270" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:04:49.507" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:04:49.507" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:04:49.507" starttime="20191117 05:04:47.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:04:49.509" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:04:49.509" starttime="20191117 05:04:49.508"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:04:49.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:04:49.510" starttime="20191117 05:04:49.509"></status>
</kw>
<msg timestamp="20191117 05:04:49.510" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:04:49.510" starttime="20191117 05:04:47.266"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:49.512" starttime="20191117 05:04:49.511"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:04:49.514" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:04:49.514" starttime="20191117 05:04:49.512"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:49.514" starttime="20191117 05:04:42.780"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:04:49.517" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191117 05:04:49.517" starttime="20191117 05:04:49.516"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:49.519" starttime="20191117 05:04:49.518"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:04:49.520" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:04:50.726" level="INFO">Read output: Last login: Sun Nov 17 05:04:29 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:04:50.727" starttime="20191117 05:04:49.519"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:50.727" starttime="20191117 05:04:49.517"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191117 05:04:50.728" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191117 05:04:52.918" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:04:52.918" starttime="20191117 05:04:50.728"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191117 05:04:52.919" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:04:53.015" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:04:53.016" level="INFO">${startupMsg} = hadoop     586  400  0.0 34485268 261444 ?     Sl   05:04   0:08 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191117 05:04:53.016" starttime="20191117 05:04:52.919"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:04:53.080" starttime="20191117 05:04:53.016"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:53.081" starttime="20191117 05:04:53.081"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:53.081" starttime="20191117 05:04:49.515"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:53.081" starttime="20191117 05:04:26.879"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:04:53.084" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:04:54.990" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:04:54.990" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:54.990" starttime="20191117 05:04:53.083"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:04:54.991" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:54.991" starttime="20191117 05:04:54.990"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:04:54.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:04:54.992" starttime="20191117 05:04:54.991"></status>
</kw>
<msg timestamp="20191117 05:04:54.992" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:54.992" starttime="20191117 05:04:53.082"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191117 05:04:54.993" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:54.993" starttime="20191117 05:04:54.993"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:54.994" starttime="20191117 05:04:54.993"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:54.994" starttime="20191117 05:04:54.994"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191117 05:04:54.995" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191117 05:04:54.996" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:04:54.996" starttime="20191117 05:04:54.995"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191117 05:04:54.997" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191117 05:04:54.997" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191117 05:04:54.997" starttime="20191117 05:04:54.996"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191117 05:04:54.998" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191117 05:04:54.998" starttime="20191117 05:04:54.997"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191117 05:04:54.999" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191117 05:04:54.999" starttime="20191117 05:04:54.999"></status>
</kw>
<msg timestamp="20191117 05:04:55.000" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191117 05:04:55.000" starttime="20191117 05:04:53.082"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:04:55.001" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191117 05:04:55.002" starttime="20191117 05:04:55.001"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:55.004" starttime="20191117 05:04:55.003"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:04:55.004" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:04:56.193" level="INFO">Read output: Last login: Sun Nov 17 05:03:24 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:04:56.193" starttime="20191117 05:04:55.004"></status>
</kw>
<status status="PASS" endtime="20191117 05:04:56.194" starttime="20191117 05:04:55.002"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191117 05:04:56.195" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191117 05:04:57.364" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:04:57.365" starttime="20191117 05:04:56.194"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191117 05:04:57.366" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:04:57.443" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:04:57.444" level="INFO">${shutdownMsg} = hadoop    1033  0.0  0.0   9556  1164 ?        Ss   05:04   0:00 bash -c sudo ps aux | grep om
hadoop    1035  0.0  0.0   9088   668 ?        S    05:04   0:00 grep om</msg>
<status status="PASS" endtime="20191117 05:04:57.444" starttime="20191117 05:04:57.365"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:04:57.510" starttime="20191117 05:04:57.444"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:04:57.511" starttime="20191117 05:04:57.510"></status>
</kw>
<msg timestamp="20191117 05:04:57.511" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191117 05:04:57.511" starttime="20191117 05:04:55.000"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:04:57.516" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:05:09.917" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:05:09.917" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:09.918" starttime="20191117 05:04:57.513"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:05:09.919" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:09.920" starttime="20191117 05:05:09.918"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:05:09.921" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:05:09.921" starttime="20191117 05:05:09.920"></status>
</kw>
<msg timestamp="20191117 05:05:09.921" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:09.922" starttime="20191117 05:04:57.512"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191117 05:05:09.922" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:09.923" starttime="20191117 05:05:09.922"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:09.924" starttime="20191117 05:05:09.923"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:09.925" starttime="20191117 05:05:09.924"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191117 05:05:09.926" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191117 05:05:09.926" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:09.926" starttime="20191117 05:05:09.925"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191117 05:05:09.927" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191117 05:05:09.927" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191117 05:05:09.927" starttime="20191117 05:05:09.926"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191117 05:05:09.928" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191117 05:05:09.928" starttime="20191117 05:05:09.928"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191117 05:05:09.929" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191117 05:05:09.929" starttime="20191117 05:05:09.929"></status>
</kw>
<msg timestamp="20191117 05:05:09.930" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191117 05:05:09.930" starttime="20191117 05:04:57.511"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:09.931" starttime="20191117 05:05:09.930"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191117 05:05:09.933" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191117 05:05:09.933" starttime="20191117 05:05:09.932"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191117 05:05:09.934" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191117 05:05:09.934" starttime="20191117 05:05:09.933"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191117 05:05:09.935" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191117 05:05:09.936" starttime="20191117 05:05:09.935"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:05:09.938" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:05:09.938" starttime="20191117 05:05:09.936"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:05:09.943" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:05:24.651" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:05:24.651" level="INFO">${output} = 2019-11-17 05:05:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191117 05:05:24.651" starttime="20191117 05:05:09.939"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:05:24.653" level="INFO">2019-11-17 05:05:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:05:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:05:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:05:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:05:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:05:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:05:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:05:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:05:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:05:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:05:22 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-17 05:05:22 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-17 05:05:23 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-17 05:05:23 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191117 05:05:24.653" starttime="20191117 05:05:24.652"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:05:24.654" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:05:24.654" starttime="20191117 05:05:24.653"></status>
</kw>
<status status="PASS" endtime="20191117 05:05:24.655" starttime="20191117 05:05:09.938"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:05:24.659" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:05:37.178" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:05:37.178" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:05:37.178" starttime="20191117 05:05:24.657"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:05:37.180" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:05:37.181" starttime="20191117 05:05:37.179"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:05:37.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:05:37.182" starttime="20191117 05:05:37.181"></status>
</kw>
<msg timestamp="20191117 05:05:37.182" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:05:37.183" starttime="20191117 05:05:24.655"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:37.184" starttime="20191117 05:05:37.183"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:05:37.185" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:05:37.185" starttime="20191117 05:05:37.184"></status>
</kw>
<status status="PASS" endtime="20191117 05:05:37.186" starttime="20191117 05:05:09.931"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:05:37.188" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191117 05:05:37.188" starttime="20191117 05:05:37.187"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:37.190" starttime="20191117 05:05:37.189"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:05:37.191" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:05:38.397" level="INFO">Read output: Last login: Sun Nov 17 05:04:55 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:05:38.398" starttime="20191117 05:05:37.190"></status>
</kw>
<status status="PASS" endtime="20191117 05:05:38.398" starttime="20191117 05:05:37.188"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191117 05:05:38.399" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191117 05:05:40.581" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:05:40.581" starttime="20191117 05:05:38.399"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191117 05:05:40.582" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:05:40.648" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:05:40.648" level="INFO">${startupMsg} = hadoop    1084  353  0.0 34473976 205600 ?     Sl   05:05   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191117 05:05:40.648" starttime="20191117 05:05:40.582"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:05:40.714" starttime="20191117 05:05:40.649"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:40.715" starttime="20191117 05:05:40.714"></status>
</kw>
<status status="PASS" endtime="20191117 05:05:40.715" starttime="20191117 05:05:37.186"></status>
</kw>
<status status="PASS" endtime="20191117 05:05:40.715" starttime="20191117 05:04:53.082"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:05:40.720" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:05:43.219" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:05:43.219" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:43.220" starttime="20191117 05:05:40.717"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:05:43.221" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:43.221" starttime="20191117 05:05:43.220"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:05:43.222" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:05:43.222" starttime="20191117 05:05:43.222"></status>
</kw>
<msg timestamp="20191117 05:05:43.223" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:43.223" starttime="20191117 05:05:40.716"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191117 05:05:43.223" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:43.224" starttime="20191117 05:05:43.223"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:43.225" starttime="20191117 05:05:43.224"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:43.225" starttime="20191117 05:05:43.225"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191117 05:05:43.227" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191117 05:05:43.227" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:43.227" starttime="20191117 05:05:43.226"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191117 05:05:43.228" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191117 05:05:43.228" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191117 05:05:43.228" starttime="20191117 05:05:43.228"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191117 05:05:43.229" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191117 05:05:43.229" starttime="20191117 05:05:43.228"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191117 05:05:43.230" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191117 05:05:43.230" starttime="20191117 05:05:43.229"></status>
</kw>
<msg timestamp="20191117 05:05:43.230" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191117 05:05:43.230" starttime="20191117 05:05:40.716"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:05:43.232" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191117 05:05:43.232" starttime="20191117 05:05:43.231"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:43.233" starttime="20191117 05:05:43.233"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:05:43.234" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:05:44.438" level="INFO">Read output: Last login: Sun Nov 17 05:04:49 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:05:44.439" starttime="20191117 05:05:43.233"></status>
</kw>
<status status="PASS" endtime="20191117 05:05:44.439" starttime="20191117 05:05:43.232"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191117 05:05:44.441" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191117 05:05:45.611" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:05:45.612" starttime="20191117 05:05:44.440"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191117 05:05:45.613" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:05:45.721" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:05:45.722" level="INFO">${shutdownMsg} = hadoop    1088  0.0  0.0   9556  1164 ?        Ss   05:05   0:00 bash -c sudo ps aux | grep om
hadoop    1090  0.0  0.0   9088   668 ?        S    05:05   0:00 grep om</msg>
<status status="PASS" endtime="20191117 05:05:45.722" starttime="20191117 05:05:45.612"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:05:45.787" starttime="20191117 05:05:45.722"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:45.788" starttime="20191117 05:05:45.787"></status>
</kw>
<msg timestamp="20191117 05:05:45.789" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191117 05:05:45.789" starttime="20191117 05:05:43.230"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:05:45.794" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:05:47.917" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:05:47.917" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:47.917" starttime="20191117 05:05:45.791"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:05:47.919" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:47.919" starttime="20191117 05:05:47.918"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:05:47.921" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:05:47.921" starttime="20191117 05:05:47.920"></status>
</kw>
<msg timestamp="20191117 05:05:47.922" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:47.922" starttime="20191117 05:05:45.790"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191117 05:05:47.923" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:47.923" starttime="20191117 05:05:47.922"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:47.924" starttime="20191117 05:05:47.923"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:47.925" starttime="20191117 05:05:47.924"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191117 05:05:47.926" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191117 05:05:47.927" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:05:47.927" starttime="20191117 05:05:47.926"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191117 05:05:47.928" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191117 05:05:47.928" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191117 05:05:47.928" starttime="20191117 05:05:47.927"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191117 05:05:47.929" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191117 05:05:47.929" starttime="20191117 05:05:47.929"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191117 05:05:47.930" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191117 05:05:47.930" starttime="20191117 05:05:47.930"></status>
</kw>
<msg timestamp="20191117 05:05:47.931" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191117 05:05:47.931" starttime="20191117 05:05:45.789"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:47.932" starttime="20191117 05:05:47.931"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191117 05:05:47.935" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191117 05:05:47.935" starttime="20191117 05:05:47.934"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191117 05:05:47.936" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191117 05:05:47.936" starttime="20191117 05:05:47.935"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191117 05:05:47.937" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191117 05:05:47.938" starttime="20191117 05:05:47.937"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:05:47.941" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:05:47.941" starttime="20191117 05:05:47.938"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:05:47.946" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:05:52.418" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:05:52.418" level="INFO">${output} = 2019-11-17 05:05:50 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-17 05:05:51 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191117 05:05:52.418" starttime="20191117 05:05:47.943"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:05:52.420" level="INFO">2019-11-17 05:05:50 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-17 05:05:51 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-17 05:05:51 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191117 05:05:52.420" starttime="20191117 05:05:52.419"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:05:52.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:05:52.421" starttime="20191117 05:05:52.420"></status>
</kw>
<status status="PASS" endtime="20191117 05:05:52.422" starttime="20191117 05:05:47.941"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:05:52.426" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:05:54.838" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:05:54.839" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:05:54.839" starttime="20191117 05:05:52.423"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:05:54.841" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:05:54.841" starttime="20191117 05:05:54.840"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:05:54.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:05:54.842" starttime="20191117 05:05:54.841"></status>
</kw>
<msg timestamp="20191117 05:05:54.843" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:05:54.843" starttime="20191117 05:05:52.422"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:54.844" starttime="20191117 05:05:54.843"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:05:54.845" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:05:54.845" starttime="20191117 05:05:54.844"></status>
</kw>
<status status="PASS" endtime="20191117 05:05:54.845" starttime="20191117 05:05:47.932"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:05:54.847" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191117 05:05:54.848" starttime="20191117 05:05:54.847"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:54.849" starttime="20191117 05:05:54.848"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:05:54.850" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:05:56.056" level="INFO">Read output: Last login: Sun Nov 17 05:05:43 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:05:56.057" starttime="20191117 05:05:54.850"></status>
</kw>
<status status="PASS" endtime="20191117 05:05:56.058" starttime="20191117 05:05:54.848"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191117 05:05:56.059" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191117 05:05:58.241" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:05:58.242" starttime="20191117 05:05:56.058"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191117 05:05:58.243" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:05:58.351" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:05:58.351" level="INFO">${startupMsg} = hadoop    1139  356  0.0 34478000 214088 ?     Sl   05:05   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191117 05:05:58.351" starttime="20191117 05:05:58.242"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:05:58.384" starttime="20191117 05:05:58.352"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:05:58.385" starttime="20191117 05:05:58.385"></status>
</kw>
<status status="PASS" endtime="20191117 05:05:58.386" starttime="20191117 05:05:54.846"></status>
</kw>
<status status="PASS" endtime="20191117 05:05:58.386" starttime="20191117 05:05:40.715"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:05:58.391" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:06:00.303" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:06:00.303" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:00.303" starttime="20191117 05:05:58.388"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:06:00.304" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:00.304" starttime="20191117 05:06:00.304"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:06:00.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:06:00.305" starttime="20191117 05:06:00.305"></status>
</kw>
<msg timestamp="20191117 05:06:00.305" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:00.306" starttime="20191117 05:05:58.387"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191117 05:06:00.306" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:00.306" starttime="20191117 05:06:00.306"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:00.307" starttime="20191117 05:06:00.306"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:00.307" starttime="20191117 05:06:00.307"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191117 05:06:00.308" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191117 05:06:00.308" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:00.308" starttime="20191117 05:06:00.308"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191117 05:06:00.309" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191117 05:06:00.309" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191117 05:06:00.309" starttime="20191117 05:06:00.308"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191117 05:06:00.309" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191117 05:06:00.309" starttime="20191117 05:06:00.309"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191117 05:06:00.310" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191117 05:06:00.310" starttime="20191117 05:06:00.310"></status>
</kw>
<msg timestamp="20191117 05:06:00.310" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191117 05:06:00.310" starttime="20191117 05:05:58.386"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:06:00.312" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191117 05:06:00.312" starttime="20191117 05:06:00.311"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:00.313" starttime="20191117 05:06:00.312"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:06:00.313" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:06:01.512" level="INFO">Read output: Last login: Sun Nov 17 05:05:37 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:06:01.513" starttime="20191117 05:06:00.313"></status>
</kw>
<status status="PASS" endtime="20191117 05:06:01.513" starttime="20191117 05:06:00.312"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191117 05:06:01.514" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191117 05:06:02.654" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:06:02.655" starttime="20191117 05:06:01.514"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191117 05:06:02.656" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:06:02.765" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:06:02.765" level="INFO">${shutdownMsg} = hadoop    1575  0.0  0.0   9556  1168 ?        Ss   05:06   0:00 bash -c sudo ps aux | grep om
hadoop    1577  0.0  0.0   9088   672 ?        S    05:06   0:00 grep om</msg>
<status status="PASS" endtime="20191117 05:06:02.765" starttime="20191117 05:06:02.655"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:06:02.831" starttime="20191117 05:06:02.766"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:02.832" starttime="20191117 05:06:02.831"></status>
</kw>
<msg timestamp="20191117 05:06:02.832" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191117 05:06:02.832" starttime="20191117 05:06:00.310"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:06:02.838" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:06:15.206" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:06:15.207" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:15.207" starttime="20191117 05:06:02.834"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:06:15.208" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:15.209" starttime="20191117 05:06:15.207"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:06:15.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:06:15.210" starttime="20191117 05:06:15.209"></status>
</kw>
<msg timestamp="20191117 05:06:15.210" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:15.210" starttime="20191117 05:06:02.833"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191117 05:06:15.211" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:15.211" starttime="20191117 05:06:15.211"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:15.212" starttime="20191117 05:06:15.212"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:15.213" starttime="20191117 05:06:15.213"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191117 05:06:15.214" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191117 05:06:15.214" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:15.214" starttime="20191117 05:06:15.214"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191117 05:06:15.215" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191117 05:06:15.216" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191117 05:06:15.216" starttime="20191117 05:06:15.215"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191117 05:06:15.217" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191117 05:06:15.217" starttime="20191117 05:06:15.216"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191117 05:06:15.217" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191117 05:06:15.218" starttime="20191117 05:06:15.217"></status>
</kw>
<msg timestamp="20191117 05:06:15.218" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191117 05:06:15.218" starttime="20191117 05:06:02.833"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:15.219" starttime="20191117 05:06:15.218"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191117 05:06:15.221" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191117 05:06:15.221" starttime="20191117 05:06:15.220"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191117 05:06:15.222" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191117 05:06:15.222" starttime="20191117 05:06:15.221"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191117 05:06:15.223" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191117 05:06:15.223" starttime="20191117 05:06:15.222"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:06:15.225" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:06:15.225" starttime="20191117 05:06:15.223"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:06:15.229" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:06:29.788" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:06:29.789" level="INFO">${output} = 2019-11-17 05:06:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191117 05:06:29.789" starttime="20191117 05:06:15.227"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:06:29.790" level="INFO">2019-11-17 05:06:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:06:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:06:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:06:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:06:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:06:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:06:24 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:06:25 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:06:26 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:06:27 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-17 05:06:27 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-17 05:06:28 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-17 05:06:28 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-17 05:06:28 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191117 05:06:29.791" starttime="20191117 05:06:29.789"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:06:29.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:06:29.792" starttime="20191117 05:06:29.791"></status>
</kw>
<status status="PASS" endtime="20191117 05:06:29.792" starttime="20191117 05:06:15.226"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:06:29.796" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:06:42.299" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:06:42.299" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:06:42.299" starttime="20191117 05:06:29.794"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:06:42.300" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:06:42.301" starttime="20191117 05:06:42.300"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:06:42.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:06:42.302" starttime="20191117 05:06:42.301"></status>
</kw>
<msg timestamp="20191117 05:06:42.302" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:06:42.302" starttime="20191117 05:06:29.793"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:42.303" starttime="20191117 05:06:42.302"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:06:42.305" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:06:42.305" starttime="20191117 05:06:42.303"></status>
</kw>
<status status="PASS" endtime="20191117 05:06:42.305" starttime="20191117 05:06:15.219"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:06:42.307" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191117 05:06:42.307" starttime="20191117 05:06:42.306"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:42.309" starttime="20191117 05:06:42.308"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:06:42.309" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:06:43.514" level="INFO">Read output: Last login: Sun Nov 17 05:06:00 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:06:43.514" starttime="20191117 05:06:42.309"></status>
</kw>
<status status="PASS" endtime="20191117 05:06:43.515" starttime="20191117 05:06:42.307"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191117 05:06:43.516" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191117 05:06:45.685" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:06:45.686" starttime="20191117 05:06:43.515"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191117 05:06:45.687" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:06:45.784" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:06:45.785" level="INFO">${startupMsg} = hadoop    1627  346  0.0 34481980 208160 ?     Sl   05:06   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191117 05:06:45.785" starttime="20191117 05:06:45.686"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:06:45.850" starttime="20191117 05:06:45.785"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:45.851" starttime="20191117 05:06:45.850"></status>
</kw>
<status status="PASS" endtime="20191117 05:06:45.851" starttime="20191117 05:06:42.305"></status>
</kw>
<status status="PASS" endtime="20191117 05:06:45.851" starttime="20191117 05:05:58.386"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:06:45.855" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:06:48.250" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:06:48.250" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:48.250" starttime="20191117 05:06:45.853"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:06:48.252" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:48.252" starttime="20191117 05:06:48.251"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:06:48.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:06:48.252" starttime="20191117 05:06:48.252"></status>
</kw>
<msg timestamp="20191117 05:06:48.253" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:48.253" starttime="20191117 05:06:45.852"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191117 05:06:48.253" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:48.253" starttime="20191117 05:06:48.253"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:48.254" starttime="20191117 05:06:48.253"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:48.255" starttime="20191117 05:06:48.254"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191117 05:06:48.255" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191117 05:06:48.255" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:48.255" starttime="20191117 05:06:48.255"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191117 05:06:48.256" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191117 05:06:48.256" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191117 05:06:48.256" starttime="20191117 05:06:48.256"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191117 05:06:48.257" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191117 05:06:48.257" starttime="20191117 05:06:48.257"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191117 05:06:48.258" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191117 05:06:48.258" starttime="20191117 05:06:48.257"></status>
</kw>
<msg timestamp="20191117 05:06:48.258" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191117 05:06:48.258" starttime="20191117 05:06:45.851"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:06:48.260" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191117 05:06:48.260" starttime="20191117 05:06:48.259"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:48.262" starttime="20191117 05:06:48.261"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:06:48.262" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:06:49.451" level="INFO">Read output: Last login: Sun Nov 17 05:05:55 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:06:49.451" starttime="20191117 05:06:48.262"></status>
</kw>
<status status="PASS" endtime="20191117 05:06:49.452" starttime="20191117 05:06:48.260"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191117 05:06:49.453" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191117 05:06:50.624" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:06:50.624" starttime="20191117 05:06:49.452"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191117 05:06:50.626" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:06:50.734" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:06:50.734" level="INFO">${shutdownMsg} = hadoop    1636  0.0  0.0   9556  1168 ?        Ss   05:06   0:00 bash -c sudo ps aux | grep om
hadoop    1638  0.0  0.0   9088   672 ?        S    05:06   0:00 grep om</msg>
<status status="PASS" endtime="20191117 05:06:50.734" starttime="20191117 05:06:50.625"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:06:50.799" starttime="20191117 05:06:50.735"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:50.801" starttime="20191117 05:06:50.800"></status>
</kw>
<msg timestamp="20191117 05:06:50.801" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191117 05:06:50.801" starttime="20191117 05:06:48.259"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:06:50.806" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:06:53.072" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:06:53.072" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:53.072" starttime="20191117 05:06:50.803"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:06:53.074" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:53.074" starttime="20191117 05:06:53.073"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:06:53.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:06:53.076" starttime="20191117 05:06:53.075"></status>
</kw>
<msg timestamp="20191117 05:06:53.077" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:53.077" starttime="20191117 05:06:50.802"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191117 05:06:53.078" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:53.078" starttime="20191117 05:06:53.077"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:53.079" starttime="20191117 05:06:53.078"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:53.081" starttime="20191117 05:06:53.080"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191117 05:06:53.082" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191117 05:06:53.082" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191117 05:06:53.083" starttime="20191117 05:06:53.081"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191117 05:06:53.084" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191117 05:06:53.084" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191117 05:06:53.084" starttime="20191117 05:06:53.083"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191117 05:06:53.085" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191117 05:06:53.085" starttime="20191117 05:06:53.084"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191117 05:06:53.086" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191117 05:06:53.086" starttime="20191117 05:06:53.085"></status>
</kw>
<msg timestamp="20191117 05:06:53.086" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191117 05:06:53.086" starttime="20191117 05:06:50.801"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:53.088" starttime="20191117 05:06:53.087"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191117 05:06:53.089" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191117 05:06:53.090" starttime="20191117 05:06:53.089"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191117 05:06:53.091" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191117 05:06:53.091" starttime="20191117 05:06:53.090"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191117 05:06:53.092" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191117 05:06:53.092" starttime="20191117 05:06:53.091"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:06:53.094" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:06:53.095" starttime="20191117 05:06:53.092"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:06:53.099" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:06:57.637" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:06:57.637" level="INFO">${output} = 2019-11-17 05:06:56 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-17 05:06:56 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191117 05:06:57.637" starttime="20191117 05:06:53.096"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:06:57.639" level="INFO">2019-11-17 05:06:56 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-17 05:06:56 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-17 05:06:56 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191117 05:06:57.639" starttime="20191117 05:06:57.638"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:06:57.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:06:57.640" starttime="20191117 05:06:57.639"></status>
</kw>
<status status="PASS" endtime="20191117 05:06:57.641" starttime="20191117 05:06:53.095"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191117 05:06:57.644" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191117 05:06:59.962" level="INFO">${rc} = 0</msg>
<msg timestamp="20191117 05:06:59.962" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191117 05:06:59.962" starttime="20191117 05:06:57.642"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191117 05:06:59.964" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191117 05:06:59.964" starttime="20191117 05:06:59.963"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191117 05:06:59.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191117 05:06:59.965" starttime="20191117 05:06:59.964"></status>
</kw>
<msg timestamp="20191117 05:06:59.965" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191117 05:06:59.966" starttime="20191117 05:06:57.641"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:59.966" starttime="20191117 05:06:59.966"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191117 05:06:59.967" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191117 05:06:59.968" starttime="20191117 05:06:59.967"></status>
</kw>
<status status="PASS" endtime="20191117 05:06:59.968" starttime="20191117 05:06:53.088"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191117 05:06:59.970" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191117 05:06:59.971" starttime="20191117 05:06:59.969"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191117 05:06:59.973" starttime="20191117 05:06:59.972"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191117 05:06:59.974" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191117 05:07:01.180" level="INFO">Read output: Last login: Sun Nov 17 05:06:48 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191117 05:07:01.180" starttime="20191117 05:06:59.973"></status>
</kw>
<status status="PASS" endtime="20191117 05:07:01.181" starttime="20191117 05:06:59.971"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191117 05:07:01.182" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191117 05:07:03.350" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191117 05:07:03.351" starttime="20191117 05:07:01.181"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191117 05:07:03.352" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191117 05:07:03.450" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191117 05:07:03.450" level="INFO">${startupMsg} = hadoop    1688  349  0.0 34475208 207448 ?     Sl   05:07   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191117 05:07:03.451" starttime="20191117 05:07:03.351"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191117 05:07:03.516" starttime="20191117 05:07:03.451"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191117 05:07:03.518" starttime="20191117 05:07:03.517"></status>
</kw>
<status status="PASS" endtime="20191117 05:07:03.518" starttime="20191117 05:06:59.968"></status>
</kw>
<status status="PASS" endtime="20191117 05:07:03.518" starttime="20191117 05:06:45.851"></status>
</kw>
<status status="PASS" endtime="20191117 05:07:03.518" starttime="20191117 05:04:26.878"></status>
</kw>
<status status="PASS" endtime="20191117 05:07:03.518" critical="yes" starttime="20191117 05:04:26.877"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191117 05:07:03.520" starttime="20191117 05:02:18.425"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
