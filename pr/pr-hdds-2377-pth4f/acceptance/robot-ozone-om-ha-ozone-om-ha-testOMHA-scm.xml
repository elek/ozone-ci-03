<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191107 01:40:14.264" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 01:40:14.401" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 01:40:16.856" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 01:40:16.856" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191107 01:40:16.857" starttime="20191107 01:40:14.399"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 01:40:16.858" level="INFO"></msg>
<status status="PASS" endtime="20191107 01:40:16.858" starttime="20191107 01:40:16.857"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 01:40:16.859" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 01:40:16.859" starttime="20191107 01:40:16.858"></status>
</kw>
<status status="PASS" endtime="20191107 01:40:16.860" starttime="20191107 01:40:14.398"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 01:40:16.867" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 01:40:18.828" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 01:40:18.828" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191107 01:40:18.828" starttime="20191107 01:40:16.865"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 01:40:18.829" level="INFO"></msg>
<status status="PASS" endtime="20191107 01:40:18.829" starttime="20191107 01:40:18.828"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 01:40:18.829" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 01:40:18.830" starttime="20191107 01:40:18.829"></status>
</kw>
<status status="PASS" endtime="20191107 01:40:18.830" starttime="20191107 01:40:16.860"></status>
</kw>
<status status="PASS" endtime="20191107 01:40:18.830" starttime="20191107 01:40:14.398"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 01:40:18.831" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191107 01:40:18.831" starttime="20191107 01:40:18.831"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 01:40:18.832" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191107 01:40:18.832" starttime="20191107 01:40:18.831"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 01:40:18.832" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191107 01:40:18.832" starttime="20191107 01:40:18.832"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 01:40:18.834" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 01:40:18.834" starttime="20191107 01:40:18.832"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 01:40:18.836" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 01:40:23.312" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 01:40:23.312" level="INFO">${output} = 2019-11-07 01:40:21 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 01:40:21 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 01:40:23.312" starttime="20191107 01:40:18.834"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 01:40:23.314" level="INFO">2019-11-07 01:40:21 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 01:40:21 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 01:40:21 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 01:40:23.314" starttime="20191107 01:40:23.313"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 01:40:23.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 01:40:23.315" starttime="20191107 01:40:23.314"></status>
</kw>
<status status="PASS" endtime="20191107 01:40:23.315" starttime="20191107 01:40:18.834"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 01:40:23.319" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 01:40:25.400" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 01:40:25.400" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191107 01:40:25.400" starttime="20191107 01:40:23.317"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 01:40:25.401" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191107 01:40:25.401" starttime="20191107 01:40:25.401"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 01:40:25.402" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 01:40:25.402" starttime="20191107 01:40:25.402"></status>
</kw>
<msg timestamp="20191107 01:40:25.403" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191107 01:40:25.403" starttime="20191107 01:40:23.316"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:25.404" starttime="20191107 01:40:25.403"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 01:40:25.405" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 01:40:25.405" starttime="20191107 01:40:25.404"></status>
</kw>
<status status="PASS" endtime="20191107 01:40:25.405" starttime="20191107 01:40:18.830"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 01:40:25.408" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 01:40:27.195" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 01:40:27.196" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:27.196" starttime="20191107 01:40:25.407"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 01:40:27.197" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:27.197" starttime="20191107 01:40:27.196"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 01:40:27.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 01:40:27.198" starttime="20191107 01:40:27.197"></status>
</kw>
<msg timestamp="20191107 01:40:27.198" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:27.199" starttime="20191107 01:40:25.406"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 01:40:27.199" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:27.199" starttime="20191107 01:40:27.199"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:27.200" starttime="20191107 01:40:27.199"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:27.201" starttime="20191107 01:40:27.201"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 01:40:27.202" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 01:40:27.202" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:27.202" starttime="20191107 01:40:27.201"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 01:40:27.202" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 01:40:27.202" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 01:40:27.203" starttime="20191107 01:40:27.202"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 01:40:27.203" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 01:40:27.203" starttime="20191107 01:40:27.203"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 01:40:27.204" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 01:40:27.204" starttime="20191107 01:40:27.203"></status>
</kw>
<msg timestamp="20191107 01:40:27.204" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 01:40:27.204" starttime="20191107 01:40:25.405"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 01:40:27.206" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 01:40:27.206" starttime="20191107 01:40:27.205"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:27.207" starttime="20191107 01:40:27.206"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 01:40:27.208" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 01:40:28.445" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191107 01:40:28.445" starttime="20191107 01:40:27.207"></status>
</kw>
<status status="PASS" endtime="20191107 01:40:28.446" starttime="20191107 01:40:27.206"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 01:40:28.447" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 01:40:28.463" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191107 01:40:28.463" starttime="20191107 01:40:28.446"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 01:40:28.464" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 01:40:28.541" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191107 01:40:28.541" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191107 01:40:28.541" starttime="20191107 01:40:28.463"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 01:40:28.656" starttime="20191107 01:40:28.542"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:28.658" starttime="20191107 01:40:28.657"></status>
</kw>
<msg timestamp="20191107 01:40:28.658" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 01:40:28.658" starttime="20191107 01:40:27.204"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 01:40:28.663" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 01:40:30.586" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 01:40:30.586" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:30.586" starttime="20191107 01:40:28.660"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 01:40:30.587" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:30.588" starttime="20191107 01:40:30.587"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 01:40:30.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 01:40:30.588" starttime="20191107 01:40:30.588"></status>
</kw>
<msg timestamp="20191107 01:40:30.589" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:30.589" starttime="20191107 01:40:28.659"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 01:40:30.589" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:30.589" starttime="20191107 01:40:30.589"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:30.590" starttime="20191107 01:40:30.589"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:30.590" starttime="20191107 01:40:30.590"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 01:40:30.591" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 01:40:30.591" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:30.591" starttime="20191107 01:40:30.590"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 01:40:30.591" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 01:40:30.592" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 01:40:30.592" starttime="20191107 01:40:30.591"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 01:40:30.592" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 01:40:30.592" starttime="20191107 01:40:30.592"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 01:40:30.592" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 01:40:30.593" starttime="20191107 01:40:30.592"></status>
</kw>
<msg timestamp="20191107 01:40:30.593" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191107 01:40:30.593" starttime="20191107 01:40:28.659"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191107 01:40:30.594" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191107 01:40:30.594" starttime="20191107 01:40:30.593"></status>
</kw>
<status status="FAIL" endtime="20191107 01:40:30.594" critical="yes" starttime="20191107 01:40:14.397">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191107 01:40:30.597" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191107 01:40:30.597" starttime="20191107 01:40:30.596"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191107 01:40:30.599" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191107 01:40:30.599" starttime="20191107 01:40:30.597"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 01:40:30.600" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 01:40:30.600" starttime="20191107 01:40:30.599"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:30.601" starttime="20191107 01:40:30.600"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 01:40:30.602" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 01:40:31.799" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191107 01:40:31.799" starttime="20191107 01:40:30.601"></status>
</kw>
<status status="PASS" endtime="20191107 01:40:31.799" starttime="20191107 01:40:30.600"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 01:40:31.800" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 01:40:31.814" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191107 01:40:31.814" starttime="20191107 01:40:31.800"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 01:40:31.815" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 01:40:31.891" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191107 01:40:31.891" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191107 01:40:31.892" starttime="20191107 01:40:31.814"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 01:40:32.006" starttime="20191107 01:40:31.892"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:32.007" starttime="20191107 01:40:32.007"></status>
</kw>
<status status="PASS" endtime="20191107 01:40:32.008" starttime="20191107 01:40:30.599"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 01:40:32.010" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 01:40:32.010" starttime="20191107 01:40:32.009"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:32.012" starttime="20191107 01:40:32.011"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 01:40:32.012" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 01:40:33.212" level="INFO">Read output: Last login: Thu Nov  7 01:40:30 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191107 01:40:33.212" starttime="20191107 01:40:32.012"></status>
</kw>
<status status="PASS" endtime="20191107 01:40:33.212" starttime="20191107 01:40:32.010"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 01:40:33.213" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 01:40:33.227" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191107 01:40:33.227" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191107 01:40:33.228" starttime="20191107 01:40:33.213"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 01:40:33.228" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191107 01:40:33.228" starttime="20191107 01:40:33.228"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 01:40:33.229" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191107 01:40:33.229" starttime="20191107 01:40:33.229"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 01:40:33.270" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191107 01:40:33.270" starttime="20191107 01:40:33.229"></status>
</kw>
<status status="FAIL" endtime="20191107 01:40:33.270" starttime="20191107 01:40:32.008"></status>
</kw>
<status status="FAIL" endtime="20191107 01:40:33.270" critical="yes" starttime="20191107 01:40:30.595">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 01:40:33.274" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 01:40:35.109" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 01:40:35.109" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:35.109" starttime="20191107 01:40:33.273"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 01:40:35.110" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:35.110" starttime="20191107 01:40:35.110"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 01:40:35.111" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 01:40:35.111" starttime="20191107 01:40:35.111"></status>
</kw>
<msg timestamp="20191107 01:40:35.111" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:35.112" starttime="20191107 01:40:33.272"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 01:40:35.112" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:35.112" starttime="20191107 01:40:35.112"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:35.113" starttime="20191107 01:40:35.112"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:35.113" starttime="20191107 01:40:35.113"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 01:40:35.114" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 01:40:35.114" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:35.114" starttime="20191107 01:40:35.113"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 01:40:35.114" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 01:40:35.114" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 01:40:35.114" starttime="20191107 01:40:35.114"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 01:40:35.115" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 01:40:35.115" starttime="20191107 01:40:35.115"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 01:40:35.115" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 01:40:35.115" starttime="20191107 01:40:35.115"></status>
</kw>
<msg timestamp="20191107 01:40:35.116" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 01:40:35.116" starttime="20191107 01:40:33.272"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 01:40:35.117" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 01:40:35.117" starttime="20191107 01:40:35.116"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:35.118" starttime="20191107 01:40:35.118"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 01:40:35.119" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 01:40:36.306" level="INFO">Read output: Last login: Thu Nov  7 01:40:27 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191107 01:40:36.306" starttime="20191107 01:40:35.118"></status>
</kw>
<status status="PASS" endtime="20191107 01:40:36.307" starttime="20191107 01:40:35.117"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 01:40:36.307" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 01:40:36.322" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191107 01:40:36.322" starttime="20191107 01:40:36.307"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 01:40:36.323" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 01:40:36.399" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191107 01:40:36.399" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191107 01:40:36.400" starttime="20191107 01:40:36.322"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 01:40:36.514" starttime="20191107 01:40:36.400"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:36.515" starttime="20191107 01:40:36.514"></status>
</kw>
<msg timestamp="20191107 01:40:36.515" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 01:40:36.515" starttime="20191107 01:40:35.116"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 01:40:36.518" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 01:40:38.323" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 01:40:38.324" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:38.324" starttime="20191107 01:40:36.516"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 01:40:38.325" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:38.325" starttime="20191107 01:40:38.324"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 01:40:38.325" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 01:40:38.326" starttime="20191107 01:40:38.325"></status>
</kw>
<msg timestamp="20191107 01:40:38.326" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:38.326" starttime="20191107 01:40:36.516"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 01:40:38.326" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:38.327" starttime="20191107 01:40:38.326"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:38.327" starttime="20191107 01:40:38.327"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 01:40:38.328" starttime="20191107 01:40:38.327"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 01:40:38.328" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 01:40:38.328" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 01:40:38.328" starttime="20191107 01:40:38.328"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 01:40:38.329" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 01:40:38.329" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 01:40:38.329" starttime="20191107 01:40:38.329"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 01:40:38.330" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 01:40:38.330" starttime="20191107 01:40:38.329"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 01:40:38.330" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 01:40:38.330" starttime="20191107 01:40:38.330"></status>
</kw>
<msg timestamp="20191107 01:40:38.331" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191107 01:40:38.331" starttime="20191107 01:40:36.515"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191107 01:40:38.331" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191107 01:40:38.332" starttime="20191107 01:40:38.331"></status>
</kw>
<status status="FAIL" endtime="20191107 01:40:38.332" starttime="20191107 01:40:33.272"></status>
</kw>
<status status="FAIL" endtime="20191107 01:40:38.332" starttime="20191107 01:40:33.271"></status>
</kw>
<status status="FAIL" endtime="20191107 01:40:38.332" critical="yes" starttime="20191107 01:40:33.271">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191107 01:40:38.333" starttime="20191107 01:40:14.265"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
