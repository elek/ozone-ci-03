<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191114 09:36:35.909" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:36:36.058" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:36:38.760" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:36:38.760" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 09:36:38.760" starttime="20191114 09:36:36.057"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:36:38.761" level="INFO"></msg>
<status status="PASS" endtime="20191114 09:36:38.762" starttime="20191114 09:36:38.761"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:36:38.762" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:36:38.762" starttime="20191114 09:36:38.762"></status>
</kw>
<status status="PASS" endtime="20191114 09:36:38.763" starttime="20191114 09:36:36.056"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:36:38.767" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:36:40.944" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:36:40.944" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 09:36:40.944" starttime="20191114 09:36:38.766"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:36:40.945" level="INFO"></msg>
<status status="PASS" endtime="20191114 09:36:40.946" starttime="20191114 09:36:40.945"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:36:40.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:36:40.947" starttime="20191114 09:36:40.946"></status>
</kw>
<status status="PASS" endtime="20191114 09:36:40.947" starttime="20191114 09:36:38.763"></status>
</kw>
<status status="PASS" endtime="20191114 09:36:40.947" starttime="20191114 09:36:36.056"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 09:36:40.949" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191114 09:36:40.949" starttime="20191114 09:36:40.948"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 09:36:40.950" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191114 09:36:40.950" starttime="20191114 09:36:40.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 09:36:40.951" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191114 09:36:40.951" starttime="20191114 09:36:40.951"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:36:40.953" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:36:40.954" starttime="20191114 09:36:40.952"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:36:40.957" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:36:45.568" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:36:45.568" level="INFO">${output} = 2019-11-14 09:36:43 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 09:36:43 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 09:36:45.568" starttime="20191114 09:36:40.955"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:36:45.569" level="INFO">2019-11-14 09:36:43 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 09:36:43 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 09:36:43 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 09:36:45.569" starttime="20191114 09:36:45.568"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:36:45.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:36:45.570" starttime="20191114 09:36:45.569"></status>
</kw>
<status status="PASS" endtime="20191114 09:36:45.570" starttime="20191114 09:36:40.954"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:36:45.573" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:36:47.681" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:36:47.681" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191114 09:36:47.681" starttime="20191114 09:36:45.571"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:36:47.683" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191114 09:36:47.683" starttime="20191114 09:36:47.682"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:36:47.684" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:36:47.684" starttime="20191114 09:36:47.683"></status>
</kw>
<msg timestamp="20191114 09:36:47.684" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191114 09:36:47.685" starttime="20191114 09:36:45.570"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:36:47.685" starttime="20191114 09:36:47.685"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:36:47.686" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:36:47.686" starttime="20191114 09:36:47.685"></status>
</kw>
<status status="PASS" endtime="20191114 09:36:47.686" starttime="20191114 09:36:40.947"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:36:47.689" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:36:49.593" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:36:49.594" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:36:49.594" starttime="20191114 09:36:47.688"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:36:49.595" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:36:49.595" starttime="20191114 09:36:49.594"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:36:49.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:36:49.595" starttime="20191114 09:36:49.595"></status>
</kw>
<msg timestamp="20191114 09:36:49.596" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:36:49.596" starttime="20191114 09:36:47.687"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 09:36:49.596" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:36:49.596" starttime="20191114 09:36:49.596"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 09:36:49.597" starttime="20191114 09:36:49.597"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 09:36:49.598" starttime="20191114 09:36:49.597"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 09:36:49.598" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 09:36:49.598" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:36:49.598" starttime="20191114 09:36:49.598"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 09:36:49.599" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 09:36:49.599" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 09:36:49.599" starttime="20191114 09:36:49.599"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 09:36:49.600" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 09:36:49.600" starttime="20191114 09:36:49.599"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 09:36:49.600" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 09:36:49.600" starttime="20191114 09:36:49.600"></status>
</kw>
<msg timestamp="20191114 09:36:49.601" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 09:36:49.601" starttime="20191114 09:36:47.687"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:36:49.602" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 09:36:49.602" starttime="20191114 09:36:49.601"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:36:49.603" starttime="20191114 09:36:49.602"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:36:49.604" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:36:50.869" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:36:50.869" starttime="20191114 09:36:49.603"></status>
</kw>
<status status="PASS" endtime="20191114 09:36:50.870" starttime="20191114 09:36:49.602"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 09:36:50.871" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 09:37:01.008" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:37:01.009" starttime="20191114 09:36:50.870"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 09:37:01.010" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:37:01.118" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:37:01.118" level="INFO">${shutdownMsg} = hadoop     454  0.0  0.0   9556  1168 ?        Ss   09:37   0:00 bash -c sudo ps aux | grep om
hadoop     456  0.0  0.0   9088   672 ?        S    09:37   0:00 grep om</msg>
<status status="PASS" endtime="20191114 09:37:01.118" starttime="20191114 09:37:01.009"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:37:01.183" starttime="20191114 09:37:01.118"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:37:01.185" starttime="20191114 09:37:01.184"></status>
</kw>
<msg timestamp="20191114 09:37:01.185" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 09:37:01.185" starttime="20191114 09:36:49.601"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:37:01.189" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:37:13.362" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:37:13.363" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:37:13.363" starttime="20191114 09:37:01.187"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:37:13.365" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:37:13.365" starttime="20191114 09:37:13.364"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:37:13.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:37:13.366" starttime="20191114 09:37:13.365"></status>
</kw>
<msg timestamp="20191114 09:37:13.367" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:37:13.367" starttime="20191114 09:37:01.186"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 09:37:13.368" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:37:13.368" starttime="20191114 09:37:13.367"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 09:37:13.369" starttime="20191114 09:37:13.368"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 09:37:13.370" starttime="20191114 09:37:13.369"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 09:37:13.371" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 09:37:13.371" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:37:13.371" starttime="20191114 09:37:13.370"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 09:37:13.372" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 09:37:13.372" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 09:37:13.373" starttime="20191114 09:37:13.372"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 09:37:13.374" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 09:37:13.374" starttime="20191114 09:37:13.373"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 09:37:13.374" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 09:37:13.375" starttime="20191114 09:37:13.374"></status>
</kw>
<msg timestamp="20191114 09:37:13.375" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191114 09:37:13.375" starttime="20191114 09:37:01.185"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 09:37:13.376" starttime="20191114 09:37:13.376"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 09:37:13.378" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191114 09:37:13.378" starttime="20191114 09:37:13.377"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 09:37:13.380" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191114 09:37:13.380" starttime="20191114 09:37:13.379"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 09:37:13.381" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191114 09:37:13.381" starttime="20191114 09:37:13.380"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:37:13.383" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:37:13.384" starttime="20191114 09:37:13.381"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:37:13.387" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:37:27.890" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:37:27.890" level="INFO">${output} = 2019-11-14 09:37:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191114 09:37:27.890" starttime="20191114 09:37:13.385"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:37:27.891" level="INFO">2019-11-14 09:37:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:37:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:37:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:37:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:37:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:37:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:37:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:37:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:37:24 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:37:25 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:37:26 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 09:37:26 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 09:37:26 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 09:37:27.892" starttime="20191114 09:37:27.891"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:37:27.892" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:37:27.893" starttime="20191114 09:37:27.892"></status>
</kw>
<status status="PASS" endtime="20191114 09:37:27.894" starttime="20191114 09:37:13.384"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:37:27.897" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:37:40.072" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:37:40.072" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191114 09:37:40.072" starttime="20191114 09:37:27.895"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:37:40.073" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191114 09:37:40.074" starttime="20191114 09:37:40.073"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:37:40.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:37:40.074" starttime="20191114 09:37:40.074"></status>
</kw>
<msg timestamp="20191114 09:37:40.075" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191114 09:37:40.075" starttime="20191114 09:37:27.894"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:37:40.075" starttime="20191114 09:37:40.075"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:37:40.076" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:37:40.076" starttime="20191114 09:37:40.075"></status>
</kw>
<status status="PASS" endtime="20191114 09:37:40.076" starttime="20191114 09:37:13.377"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:37:40.078" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 09:37:40.078" starttime="20191114 09:37:40.077"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:37:40.079" starttime="20191114 09:37:40.078"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:37:40.079" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:37:41.267" level="INFO">Read output: Last login: Thu Nov 14 09:36:49 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:37:41.268" starttime="20191114 09:37:40.079"></status>
</kw>
<status status="PASS" endtime="20191114 09:37:41.268" starttime="20191114 09:37:40.078"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 09:37:41.269" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 09:37:43.438" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:37:43.439" starttime="20191114 09:37:41.269"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 09:37:43.439" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:37:43.526" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:37:43.527" level="INFO">${startupMsg} = hadoop     507  360  0.1 34482740 264220 ?     Sl   09:37   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 09:37:43.527" starttime="20191114 09:37:43.439"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:37:43.592" starttime="20191114 09:37:43.527"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:37:43.593" starttime="20191114 09:37:43.592"></status>
</kw>
<status status="PASS" endtime="20191114 09:37:43.593" starttime="20191114 09:37:40.076"></status>
</kw>
<status status="PASS" endtime="20191114 09:37:43.593" critical="yes" starttime="20191114 09:36:36.055"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191114 09:37:43.597" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191114 09:37:43.597" starttime="20191114 09:37:43.595"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191114 09:37:43.599" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191114 09:37:43.599" starttime="20191114 09:37:43.597"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:37:43.601" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 09:37:43.601" starttime="20191114 09:37:43.600"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:37:43.603" starttime="20191114 09:37:43.602"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:37:43.604" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:37:44.802" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:37:44.802" starttime="20191114 09:37:43.604"></status>
</kw>
<status status="PASS" endtime="20191114 09:37:44.803" starttime="20191114 09:37:43.602"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 09:37:44.803" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 09:37:54.939" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:37:54.939" starttime="20191114 09:37:44.803"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 09:37:54.940" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:37:55.006" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:37:55.006" level="INFO">${shutdownMsg} = hadoop     494  0.0  0.0   9556  1168 ?        Ss   09:37   0:00 bash -c sudo ps aux | grep om
hadoop     496  0.0  0.0   9088   668 ?        S    09:37   0:00 grep om</msg>
<status status="PASS" endtime="20191114 09:37:55.006" starttime="20191114 09:37:54.940"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:37:55.071" starttime="20191114 09:37:55.007"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:37:55.072" starttime="20191114 09:37:55.072"></status>
</kw>
<status status="PASS" endtime="20191114 09:37:55.072" starttime="20191114 09:37:43.600"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:37:55.074" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 09:37:55.074" starttime="20191114 09:37:55.073"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:37:55.075" starttime="20191114 09:37:55.075"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:37:55.076" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:37:56.278" level="INFO">Read output: Last login: Thu Nov 14 09:37:43 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:37:56.279" starttime="20191114 09:37:55.076"></status>
</kw>
<status status="PASS" endtime="20191114 09:37:56.279" starttime="20191114 09:37:55.074"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 09:37:56.280" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 09:37:56.304" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:37:56.304" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 09:37:56.304" starttime="20191114 09:37:56.279"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 09:37:56.305" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 09:37:56.305" starttime="20191114 09:37:56.304"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 09:37:56.306" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191114 09:37:56.306" starttime="20191114 09:37:56.305"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 09:37:56.385" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191114 09:37:56.393" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191114 09:37:56.394" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191114 09:37:56.394" starttime="20191114 09:37:56.306"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191114 09:37:56.395" level="INFO">Length is 2</msg>
<msg timestamp="20191114 09:37:56.395" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191114 09:37:56.395" starttime="20191114 09:37:56.394"></status>
</kw>
<msg timestamp="20191114 09:37:56.396" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191114 09:37:56.396" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191114 09:37:56.396" starttime="20191114 09:37:55.073"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:37:56.400" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:37:58.444" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:37:58.444" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:37:58.444" starttime="20191114 09:37:56.398"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:37:58.446" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:37:58.446" starttime="20191114 09:37:58.445"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:37:58.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:37:58.447" starttime="20191114 09:37:58.446"></status>
</kw>
<msg timestamp="20191114 09:37:58.448" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:37:58.448" starttime="20191114 09:37:56.397"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 09:37:58.449" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:37:58.449" starttime="20191114 09:37:58.448"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 09:37:58.450" starttime="20191114 09:37:58.449"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 09:37:58.450" starttime="20191114 09:37:58.450"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 09:37:58.451" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 09:37:58.451" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:37:58.451" starttime="20191114 09:37:58.451"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 09:37:58.452" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191114 09:37:58.452" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 09:37:58.453" starttime="20191114 09:37:58.452"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 09:37:58.453" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 09:37:58.453" starttime="20191114 09:37:58.453"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 09:37:58.454" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191114 09:37:58.454" starttime="20191114 09:37:58.454"></status>
</kw>
<msg timestamp="20191114 09:37:58.455" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 09:37:58.455" starttime="20191114 09:37:56.396"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191114 09:37:58.458" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191114 09:37:58.458" starttime="20191114 09:37:58.456"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 09:37:58.461" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191114 09:37:58.461" starttime="20191114 09:37:58.460"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 09:37:58.461" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191114 09:37:58.461" starttime="20191114 09:37:58.461"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:37:58.465" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:38:03.149" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:38:03.149" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 09:38:03.149" starttime="20191114 09:37:58.463"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:38:03.150" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 09:38:03.150" starttime="20191114 09:38:03.149"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:38:03.150" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:38:03.151" starttime="20191114 09:38:03.150"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:03.151" starttime="20191114 09:37:58.462"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:38:03.155" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:38:05.360" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:38:05.361" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573724280614,
  "modificationTime": 1573724282735,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 09:38:05.361" starttime="20191114 09:38:03.153"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:38:05.362" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573724280614,
  "modificationTime": 1573724282735,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103135594453860350,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 09:38:05.362" starttime="20191114 09:38:05.361"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:38:05.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:38:05.363" starttime="20191114 09:38:05.362"></status>
</kw>
<msg timestamp="20191114 09:38:05.363" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573724280614,
  "modificationTime": 1573724282735,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 09:38:05.363" starttime="20191114 09:38:03.151"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:05.363" starttime="20191114 09:38:05.363"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:05.364" starttime="20191114 09:37:58.462"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:05.364" starttime="20191114 09:37:58.460"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 09:38:05.364" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191114 09:38:05.364" starttime="20191114 09:38:05.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 09:38:05.365" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191114 09:38:05.365" starttime="20191114 09:38:05.365"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:38:05.368" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:38:10.394" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:38:10.394" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 09:38:10.394" starttime="20191114 09:38:05.366"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:38:10.396" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 09:38:10.396" starttime="20191114 09:38:10.395"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:38:10.396" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:38:10.396" starttime="20191114 09:38:10.396"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:10.397" starttime="20191114 09:38:05.366"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:38:10.399" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:38:12.665" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:38:12.665" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573724287868,
  "modificationTime": 1573724290000,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 09:38:12.665" starttime="20191114 09:38:10.398"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:38:12.667" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573724287868,
  "modificationTime": 1573724290000,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103135594929651710,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 09:38:12.667" starttime="20191114 09:38:12.666"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:38:12.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:38:12.668" starttime="20191114 09:38:12.667"></status>
</kw>
<msg timestamp="20191114 09:38:12.668" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573724287868,
  "modificationTime": 1573724290000,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 09:38:12.668" starttime="20191114 09:38:10.397"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:12.669" starttime="20191114 09:38:12.669"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:12.669" starttime="20191114 09:38:05.365"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:12.669" starttime="20191114 09:38:05.364"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 09:38:12.670" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191114 09:38:12.670" starttime="20191114 09:38:12.670"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 09:38:12.671" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191114 09:38:12.671" starttime="20191114 09:38:12.671"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:38:12.675" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:38:17.187" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:38:17.187" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 09:38:17.188" starttime="20191114 09:38:12.673"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:38:17.189" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 09:38:17.190" starttime="20191114 09:38:17.188"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:38:17.191" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:38:17.191" starttime="20191114 09:38:17.190"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:17.191" starttime="20191114 09:38:12.672"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:38:17.197" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:38:19.610" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:38:19.610" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573724294733,
  "modificationTime": 1573724296779,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 09:38:19.610" starttime="20191114 09:38:17.194"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:38:19.612" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573724294733,
  "modificationTime": 1573724296779,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103135595379556350,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 09:38:19.612" starttime="20191114 09:38:19.611"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:38:19.612" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:38:19.612" starttime="20191114 09:38:19.612"></status>
</kw>
<msg timestamp="20191114 09:38:19.613" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573724294733,
  "modificationTime": 1573724296779,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 09:38:19.613" starttime="20191114 09:38:17.192"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:19.613" starttime="20191114 09:38:19.613"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:19.613" starttime="20191114 09:38:12.671"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:19.613" starttime="20191114 09:38:12.669"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 09:38:19.614" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191114 09:38:19.614" starttime="20191114 09:38:19.614"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 09:38:19.615" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191114 09:38:19.615" starttime="20191114 09:38:19.614"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:38:19.618" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:38:24.233" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:38:24.233" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 09:38:24.233" starttime="20191114 09:38:19.616"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:38:24.234" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 09:38:24.235" starttime="20191114 09:38:24.234"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:38:24.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:38:24.235" starttime="20191114 09:38:24.235"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:24.236" starttime="20191114 09:38:19.616"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:38:24.239" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:38:26.679" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:38:26.679" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573724301738,
  "modificationTime": 1573724303826,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 09:38:26.679" starttime="20191114 09:38:24.237"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:38:26.681" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573724301738,
  "modificationTime": 1573724303826,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103135595838636030,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 09:38:26.681" starttime="20191114 09:38:26.680"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:38:26.681" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:38:26.681" starttime="20191114 09:38:26.681"></status>
</kw>
<msg timestamp="20191114 09:38:26.682" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573724301738,
  "modificationTime": 1573724303826,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 09:38:26.682" starttime="20191114 09:38:24.236"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:26.682" starttime="20191114 09:38:26.682"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:26.683" starttime="20191114 09:38:19.615"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:26.683" starttime="20191114 09:38:19.614"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 09:38:26.684" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:38:26.684" starttime="20191114 09:38:26.683"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 09:38:26.684" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:38:26.684" starttime="20191114 09:38:26.684"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:38:26.687" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:38:31.130" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:38:31.131" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 09:38:31.131" starttime="20191114 09:38:26.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:38:31.132" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 09:38:31.132" starttime="20191114 09:38:31.131"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:38:31.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:38:31.133" starttime="20191114 09:38:31.133"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:31.134" starttime="20191114 09:38:26.685"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:38:31.138" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:38:33.396" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:38:33.396" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573724308914,
  "modificationTime": 1573724310717,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 09:38:33.396" starttime="20191114 09:38:31.136"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:38:33.398" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573724308914,
  "modificationTime": 1573724310717,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103135596308922370,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 09:38:33.398" starttime="20191114 09:38:33.397"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:38:33.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:38:33.400" starttime="20191114 09:38:33.399"></status>
</kw>
<msg timestamp="20191114 09:38:33.400" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573724308914,
  "modificationTime": 1573724310717,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 09:38:33.400" starttime="20191114 09:38:31.134"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:33.401" starttime="20191114 09:38:33.401"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:33.402" starttime="20191114 09:38:26.684"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:33.402" starttime="20191114 09:38:26.683"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:33.402" starttime="20191114 09:37:58.459"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:33.402" starttime="20191114 09:37:58.458"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:38:33.404" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191114 09:38:33.404" starttime="20191114 09:38:33.403"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:33.406" starttime="20191114 09:38:33.405"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:38:33.407" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:38:34.614" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:38:34.615" starttime="20191114 09:38:33.407"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:34.615" starttime="20191114 09:38:33.405"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 09:38:34.616" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 09:38:34.631" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:38:34.631" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 09:38:34.631" starttime="20191114 09:38:34.615"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 09:38:34.632" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 09:38:34.632" starttime="20191114 09:38:34.632"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 09:38:34.633" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191114 09:38:34.634" starttime="20191114 09:38:34.633"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 09:38:34.710" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191114 09:38:34.719" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191114 09:38:34.719" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191114 09:38:34.719" starttime="20191114 09:38:34.634"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191114 09:38:34.720" level="INFO">Length is 3</msg>
<msg timestamp="20191114 09:38:34.720" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191114 09:38:34.720" starttime="20191114 09:38:34.719"></status>
</kw>
<msg timestamp="20191114 09:38:34.721" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191114 09:38:34.721" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191114 09:38:34.721" starttime="20191114 09:38:33.402"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191114 09:38:34.722" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191114 09:38:34.722" starttime="20191114 09:38:34.721"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:34.722" starttime="20191114 09:37:58.455"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:34.722" starttime="20191114 09:37:58.455"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:34.723" starttime="20191114 09:38:34.723"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:38:34.725" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 09:38:34.725" starttime="20191114 09:38:34.724"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:34.727" starttime="20191114 09:38:34.727"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:38:34.728" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:38:35.928" level="INFO">Read output: Last login: Thu Nov 14 09:37:55 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:38:35.928" starttime="20191114 09:38:34.727"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:35.928" starttime="20191114 09:38:34.725"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 09:38:35.929" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 09:38:38.101" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:38:38.101" starttime="20191114 09:38:35.929"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 09:38:38.102" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:38:38.200" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:38:38.201" level="INFO">${startupMsg} = hadoop     569  373  0.0 34480736 226912 ?     Sl   09:38   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 09:38:38.201" starttime="20191114 09:38:38.101"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:38:38.204" starttime="20191114 09:38:38.202"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:38.205" starttime="20191114 09:38:38.204"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:38.205" starttime="20191114 09:38:34.724"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:38:38.208" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 09:38:38.208" starttime="20191114 09:38:38.207"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:38.210" starttime="20191114 09:38:38.209"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:38:38.211" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:38:39.410" level="INFO">Read output: Last login: Thu Nov 14 09:38:34 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:38:39.411" starttime="20191114 09:38:38.210"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:39.411" starttime="20191114 09:38:38.209"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 09:38:39.412" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 09:38:39.428" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:38:39.428" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 09:38:39.428" starttime="20191114 09:38:39.412"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 09:38:39.429" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 09:38:39.430" starttime="20191114 09:38:39.429"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 09:38:39.431" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191114 09:38:39.431" starttime="20191114 09:38:39.430"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 09:38:39.513" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191114 09:38:39.524" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191114 09:38:39.525" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191114 09:38:39.525" starttime="20191114 09:38:39.432"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191114 09:38:39.526" level="INFO">Length is 2</msg>
<msg timestamp="20191114 09:38:39.526" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191114 09:38:39.526" starttime="20191114 09:38:39.525"></status>
</kw>
<msg timestamp="20191114 09:38:39.527" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191114 09:38:39.527" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191114 09:38:39.527" starttime="20191114 09:38:38.206"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:39.528" starttime="20191114 09:38:39.528"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191114 09:38:40.529" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191114 09:38:40.530" starttime="20191114 09:38:39.529"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:40.530" starttime="20191114 09:38:38.206"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:38:40.532" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 09:38:40.533" starttime="20191114 09:38:40.532"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:40.534" starttime="20191114 09:38:40.533"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:38:40.535" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:38:41.734" level="INFO">Read output: Last login: Thu Nov 14 09:38:38 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:38:41.734" starttime="20191114 09:38:40.534"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:41.734" starttime="20191114 09:38:40.533"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 09:38:41.735" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 09:38:41.750" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:38:41.750" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 09:38:41.751" starttime="20191114 09:38:41.735"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 09:38:41.752" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 09:38:41.752" starttime="20191114 09:38:41.751"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 09:38:41.753" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191114 09:38:41.753" starttime="20191114 09:38:41.752"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 09:38:41.833" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191114 09:38:41.843" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191114 09:38:41.844" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191114 09:38:41.844" starttime="20191114 09:38:41.754"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191114 09:38:41.845" level="INFO">Length is 3</msg>
<msg timestamp="20191114 09:38:41.845" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191114 09:38:41.845" starttime="20191114 09:38:41.844"></status>
</kw>
<msg timestamp="20191114 09:38:41.845" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191114 09:38:41.845" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191114 09:38:41.846" starttime="20191114 09:38:40.531"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191114 09:38:41.847" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191114 09:38:41.847" starttime="20191114 09:38:41.846"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:41.847" starttime="20191114 09:38:40.530"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:41.847" starttime="20191114 09:38:38.206"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:41.848" starttime="20191114 09:38:41.847"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:41.849" starttime="20191114 09:38:41.848"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:41.849" critical="yes" starttime="20191114 09:37:43.594"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:38:41.855" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:38:44.004" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:38:44.004" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:38:44.004" starttime="20191114 09:38:41.853"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:38:44.006" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:38:44.006" starttime="20191114 09:38:44.005"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:38:44.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:38:44.007" starttime="20191114 09:38:44.006"></status>
</kw>
<msg timestamp="20191114 09:38:44.008" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:38:44.008" starttime="20191114 09:38:41.852"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 09:38:44.009" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:38:44.009" starttime="20191114 09:38:44.008"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:44.010" starttime="20191114 09:38:44.009"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:44.011" starttime="20191114 09:38:44.010"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 09:38:44.012" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 09:38:44.013" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:38:44.013" starttime="20191114 09:38:44.012"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 09:38:44.014" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191114 09:38:44.014" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 09:38:44.014" starttime="20191114 09:38:44.013"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 09:38:44.015" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 09:38:44.015" starttime="20191114 09:38:44.014"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 09:38:44.016" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191114 09:38:44.016" starttime="20191114 09:38:44.016"></status>
</kw>
<msg timestamp="20191114 09:38:44.017" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 09:38:44.017" starttime="20191114 09:38:41.852"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:38:44.019" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191114 09:38:44.019" starttime="20191114 09:38:44.018"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:44.021" starttime="20191114 09:38:44.020"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:38:44.022" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:38:45.227" level="INFO">Read output: Last login: Thu Nov 14 09:38:33 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:38:45.230" starttime="20191114 09:38:44.021"></status>
</kw>
<status status="PASS" endtime="20191114 09:38:45.230" starttime="20191114 09:38:44.020"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 09:38:45.232" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 09:38:55.414" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:38:55.415" starttime="20191114 09:38:45.231"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 09:38:55.416" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:38:55.514" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:38:55.514" level="INFO">${shutdownMsg} = hadoop     523  0.0  0.0   9556  1168 ?        Ss   09:38   0:00 bash -c sudo ps aux | grep om
hadoop     525  0.0  0.0   9088   668 ?        S    09:38   0:00 grep om</msg>
<status status="PASS" endtime="20191114 09:38:55.514" starttime="20191114 09:38:55.415"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:38:55.580" starttime="20191114 09:38:55.515"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:55.581" starttime="20191114 09:38:55.580"></status>
</kw>
<msg timestamp="20191114 09:38:55.581" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 09:38:55.581" starttime="20191114 09:38:44.017"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:38:55.584" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:38:57.805" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:38:57.806" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:38:57.806" starttime="20191114 09:38:55.582"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:38:57.807" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:38:57.807" starttime="20191114 09:38:57.806"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:38:57.807" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:38:57.808" starttime="20191114 09:38:57.807"></status>
</kw>
<msg timestamp="20191114 09:38:57.808" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:38:57.808" starttime="20191114 09:38:55.582"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 09:38:57.808" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:38:57.809" starttime="20191114 09:38:57.808"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:57.809" starttime="20191114 09:38:57.809"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:57.810" starttime="20191114 09:38:57.809"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 09:38:57.810" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 09:38:57.810" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:38:57.810" starttime="20191114 09:38:57.810"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 09:38:57.811" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 09:38:57.811" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 09:38:57.811" starttime="20191114 09:38:57.811"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 09:38:57.812" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 09:38:57.812" starttime="20191114 09:38:57.811"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 09:38:57.812" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 09:38:57.812" starttime="20191114 09:38:57.812"></status>
</kw>
<msg timestamp="20191114 09:38:57.813" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 09:38:57.813" starttime="20191114 09:38:55.581"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 09:38:57.813" starttime="20191114 09:38:57.813"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 09:38:57.814" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191114 09:38:57.814" starttime="20191114 09:38:57.814"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 09:38:57.815" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191114 09:38:57.815" starttime="20191114 09:38:57.815"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 09:38:57.816" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191114 09:38:57.816" starttime="20191114 09:38:57.815"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:38:57.818" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:38:57.819" starttime="20191114 09:38:57.816"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:38:57.822" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:39:02.382" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:39:02.383" level="INFO">${output} = 2019-11-14 09:39:00 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 09:39:00 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 09:39:02.383" starttime="20191114 09:38:57.820"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:39:02.385" level="INFO">2019-11-14 09:39:00 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 09:39:00 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 09:39:00 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 09:39:02.385" starttime="20191114 09:39:02.384"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:39:02.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:39:02.386" starttime="20191114 09:39:02.385"></status>
</kw>
<status status="PASS" endtime="20191114 09:39:02.387" starttime="20191114 09:38:57.819"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:39:02.392" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:39:04.889" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:39:04.889" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:39:04.889" starttime="20191114 09:39:02.389"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:39:04.891" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:39:04.892" starttime="20191114 09:39:04.890"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:39:04.893" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:39:04.893" starttime="20191114 09:39:04.892"></status>
</kw>
<msg timestamp="20191114 09:39:04.894" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:39:04.894" starttime="20191114 09:39:02.387"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:04.895" starttime="20191114 09:39:04.894"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:39:04.897" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:39:04.898" starttime="20191114 09:39:04.895"></status>
</kw>
<status status="PASS" endtime="20191114 09:39:04.898" starttime="20191114 09:38:57.813"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:39:04.900" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191114 09:39:04.900" starttime="20191114 09:39:04.899"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:04.902" starttime="20191114 09:39:04.901"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:39:04.903" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:39:06.109" level="INFO">Read output: Last login: Thu Nov 14 09:38:44 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:39:06.109" starttime="20191114 09:39:04.903"></status>
</kw>
<status status="PASS" endtime="20191114 09:39:06.110" starttime="20191114 09:39:04.901"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 09:39:06.111" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 09:39:08.305" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:39:08.309" starttime="20191114 09:39:06.110"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 09:39:08.314" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:39:08.390" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:39:08.391" level="INFO">${startupMsg} = hadoop     576  355  0.0 34477884 211416 ?     Sl   09:39   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 09:39:08.391" starttime="20191114 09:39:08.312"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:39:08.425" starttime="20191114 09:39:08.391"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:08.427" starttime="20191114 09:39:08.426"></status>
</kw>
<status status="PASS" endtime="20191114 09:39:08.428" starttime="20191114 09:39:04.898"></status>
</kw>
<status status="PASS" endtime="20191114 09:39:08.428" starttime="20191114 09:38:41.851"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:39:08.436" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:39:10.291" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:39:10.291" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:10.291" starttime="20191114 09:39:08.432"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:39:10.292" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:10.292" starttime="20191114 09:39:10.291"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:39:10.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:39:10.293" starttime="20191114 09:39:10.293"></status>
</kw>
<msg timestamp="20191114 09:39:10.294" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:10.294" starttime="20191114 09:39:08.431"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 09:39:10.294" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:10.294" starttime="20191114 09:39:10.294"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:10.295" starttime="20191114 09:39:10.295"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:10.295" starttime="20191114 09:39:10.295"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 09:39:10.296" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 09:39:10.296" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:10.296" starttime="20191114 09:39:10.296"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 09:39:10.297" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 09:39:10.297" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 09:39:10.297" starttime="20191114 09:39:10.296"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 09:39:10.298" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 09:39:10.298" starttime="20191114 09:39:10.297"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 09:39:10.298" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 09:39:10.298" starttime="20191114 09:39:10.298"></status>
</kw>
<msg timestamp="20191114 09:39:10.298" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 09:39:10.299" starttime="20191114 09:39:08.429"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:39:10.300" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 09:39:10.300" starttime="20191114 09:39:10.299"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:10.302" starttime="20191114 09:39:10.301"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:39:10.302" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:39:11.491" level="INFO">Read output: Last login: Thu Nov 14 09:37:40 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:39:11.492" starttime="20191114 09:39:10.302"></status>
</kw>
<status status="PASS" endtime="20191114 09:39:11.492" starttime="20191114 09:39:10.300"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 09:39:11.493" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 09:39:12.632" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:39:12.633" starttime="20191114 09:39:11.492"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 09:39:12.634" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:39:12.733" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:39:12.733" level="INFO">${shutdownMsg} = hadoop    1047  0.0  0.0   9556  1164 ?        Ss   09:39   0:00 bash -c sudo ps aux | grep om
hadoop    1049  0.0  0.0   9088   672 ?        S    09:39   0:00 grep om</msg>
<status status="PASS" endtime="20191114 09:39:12.733" starttime="20191114 09:39:12.633"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:39:12.798" starttime="20191114 09:39:12.734"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:12.799" starttime="20191114 09:39:12.799"></status>
</kw>
<msg timestamp="20191114 09:39:12.800" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 09:39:12.800" starttime="20191114 09:39:10.299"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:39:12.803" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:39:25.147" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:39:25.147" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:25.147" starttime="20191114 09:39:12.801"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:39:25.149" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:25.149" starttime="20191114 09:39:25.148"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:39:25.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:39:25.150" starttime="20191114 09:39:25.149"></status>
</kw>
<msg timestamp="20191114 09:39:25.150" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:25.150" starttime="20191114 09:39:12.800"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 09:39:25.151" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:25.151" starttime="20191114 09:39:25.151"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:25.152" starttime="20191114 09:39:25.151"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:25.153" starttime="20191114 09:39:25.152"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 09:39:25.153" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 09:39:25.154" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:25.154" starttime="20191114 09:39:25.153"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 09:39:25.155" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 09:39:25.155" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 09:39:25.155" starttime="20191114 09:39:25.154"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 09:39:25.156" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 09:39:25.156" starttime="20191114 09:39:25.155"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 09:39:25.156" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 09:39:25.156" starttime="20191114 09:39:25.156"></status>
</kw>
<msg timestamp="20191114 09:39:25.157" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191114 09:39:25.157" starttime="20191114 09:39:12.800"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:25.158" starttime="20191114 09:39:25.157"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 09:39:25.160" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191114 09:39:25.160" starttime="20191114 09:39:25.159"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 09:39:25.161" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191114 09:39:25.161" starttime="20191114 09:39:25.160"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 09:39:25.162" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191114 09:39:25.162" starttime="20191114 09:39:25.161"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:39:25.164" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:39:25.164" starttime="20191114 09:39:25.162"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:39:25.168" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:39:39.830" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:39:39.830" level="INFO">${output} = 2019-11-14 09:39:28 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191114 09:39:39.830" starttime="20191114 09:39:25.166"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:39:39.831" level="INFO">2019-11-14 09:39:28 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:39:29 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:39:30 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:39:31 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:39:32 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:39:33 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:39:34 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:39:35 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:39:36 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:39:37 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:39:38 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 09:39:38 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 09:39:38 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 09:39:39.831" starttime="20191114 09:39:39.831"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:39:39.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:39:39.832" starttime="20191114 09:39:39.832"></status>
</kw>
<status status="PASS" endtime="20191114 09:39:39.833" starttime="20191114 09:39:25.165"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:39:39.836" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:39:52.117" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:39:52.117" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:39:52.117" starttime="20191114 09:39:39.833"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:39:52.119" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:39:52.119" starttime="20191114 09:39:52.118"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:39:52.120" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:39:52.121" starttime="20191114 09:39:52.120"></status>
</kw>
<msg timestamp="20191114 09:39:52.121" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:39:52.121" starttime="20191114 09:39:39.833"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:52.122" starttime="20191114 09:39:52.122"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:39:52.123" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:39:52.124" starttime="20191114 09:39:52.123"></status>
</kw>
<status status="PASS" endtime="20191114 09:39:52.124" starttime="20191114 09:39:25.158"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:39:52.126" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 09:39:52.126" starttime="20191114 09:39:52.125"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:52.129" starttime="20191114 09:39:52.128"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:39:52.130" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:39:53.335" level="INFO">Read output: Last login: Thu Nov 14 09:39:10 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:39:53.336" starttime="20191114 09:39:52.129"></status>
</kw>
<status status="PASS" endtime="20191114 09:39:53.336" starttime="20191114 09:39:52.127"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 09:39:53.337" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 09:39:55.517" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:39:55.518" starttime="20191114 09:39:53.337"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 09:39:55.519" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:39:55.594" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:39:55.595" level="INFO">${startupMsg} = hadoop    1098  335  0.0 34475436 200848 ?     Sl   09:39   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 09:39:55.595" starttime="20191114 09:39:55.518"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:39:55.660" starttime="20191114 09:39:55.595"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:55.661" starttime="20191114 09:39:55.660"></status>
</kw>
<status status="PASS" endtime="20191114 09:39:55.661" starttime="20191114 09:39:52.124"></status>
</kw>
<status status="PASS" endtime="20191114 09:39:55.661" starttime="20191114 09:39:08.429"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:39:55.665" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:39:58.148" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:39:58.148" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:58.148" starttime="20191114 09:39:55.663"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:39:58.149" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:58.149" starttime="20191114 09:39:58.148"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:39:58.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:39:58.150" starttime="20191114 09:39:58.149"></status>
</kw>
<msg timestamp="20191114 09:39:58.150" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:58.150" starttime="20191114 09:39:55.662"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 09:39:58.150" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:58.151" starttime="20191114 09:39:58.150"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:58.151" starttime="20191114 09:39:58.151"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:58.152" starttime="20191114 09:39:58.151"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 09:39:58.153" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 09:39:58.153" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:39:58.153" starttime="20191114 09:39:58.152"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 09:39:58.154" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 09:39:58.154" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 09:39:58.154" starttime="20191114 09:39:58.153"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 09:39:58.154" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 09:39:58.154" starttime="20191114 09:39:58.154"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 09:39:58.155" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 09:39:58.155" starttime="20191114 09:39:58.155"></status>
</kw>
<msg timestamp="20191114 09:39:58.155" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 09:39:58.155" starttime="20191114 09:39:55.662"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:39:58.156" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 09:39:58.157" starttime="20191114 09:39:58.156"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:39:58.158" starttime="20191114 09:39:58.157"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:39:58.158" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:39:59.358" level="INFO">Read output: Last login: Thu Nov 14 09:38:40 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:39:59.359" starttime="20191114 09:39:58.158"></status>
</kw>
<status status="PASS" endtime="20191114 09:39:59.359" starttime="20191114 09:39:58.157"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 09:39:59.360" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 09:40:00.489" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:40:00.489" starttime="20191114 09:39:59.360"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 09:40:00.490" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:40:00.566" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:40:00.566" level="INFO">${shutdownMsg} = hadoop    1161  0.0  0.0   9556  1168 ?        Ss   09:39   0:00 bash -c sudo ps aux | grep om
hadoop    1163  0.0  0.0   9088   668 ?        S    09:39   0:00 grep om</msg>
<status status="PASS" endtime="20191114 09:40:00.566" starttime="20191114 09:40:00.490"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:40:00.631" starttime="20191114 09:40:00.567"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:00.633" starttime="20191114 09:40:00.632"></status>
</kw>
<msg timestamp="20191114 09:40:00.633" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 09:40:00.633" starttime="20191114 09:39:58.155"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:40:00.638" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:40:02.716" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:40:02.717" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:02.717" starttime="20191114 09:40:00.635"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:40:02.719" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:02.719" starttime="20191114 09:40:02.718"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:40:02.720" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:40:02.720" starttime="20191114 09:40:02.719"></status>
</kw>
<msg timestamp="20191114 09:40:02.721" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:02.721" starttime="20191114 09:40:00.634"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 09:40:02.721" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:02.722" starttime="20191114 09:40:02.721"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:02.723" starttime="20191114 09:40:02.722"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:02.724" starttime="20191114 09:40:02.723"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 09:40:02.724" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 09:40:02.725" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:02.725" starttime="20191114 09:40:02.724"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 09:40:02.726" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191114 09:40:02.726" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 09:40:02.726" starttime="20191114 09:40:02.725"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 09:40:02.727" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 09:40:02.727" starttime="20191114 09:40:02.727"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 09:40:02.728" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191114 09:40:02.728" starttime="20191114 09:40:02.727"></status>
</kw>
<msg timestamp="20191114 09:40:02.729" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191114 09:40:02.729" starttime="20191114 09:40:00.633"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:02.730" starttime="20191114 09:40:02.729"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 09:40:02.732" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191114 09:40:02.732" starttime="20191114 09:40:02.731"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 09:40:02.733" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191114 09:40:02.733" starttime="20191114 09:40:02.733"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 09:40:02.734" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191114 09:40:02.735" starttime="20191114 09:40:02.734"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:40:02.737" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:40:02.737" starttime="20191114 09:40:02.735"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:40:02.741" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:40:07.358" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:40:07.358" level="INFO">${output} = 2019-11-14 09:40:05 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 09:40:05 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 09:40:07.358" starttime="20191114 09:40:02.738"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:40:07.360" level="INFO">2019-11-14 09:40:05 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 09:40:05 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 09:40:05 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 09:40:07.361" starttime="20191114 09:40:07.359"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:40:07.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:40:07.362" starttime="20191114 09:40:07.361"></status>
</kw>
<status status="PASS" endtime="20191114 09:40:07.363" starttime="20191114 09:40:02.737"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:40:07.368" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:40:09.756" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:40:09.756" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:40:09.756" starttime="20191114 09:40:07.365"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:40:09.758" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:40:09.758" starttime="20191114 09:40:09.757"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:40:09.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:40:09.759" starttime="20191114 09:40:09.758"></status>
</kw>
<msg timestamp="20191114 09:40:09.760" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:40:09.760" starttime="20191114 09:40:07.363"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:09.761" starttime="20191114 09:40:09.760"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:40:09.762" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:40:09.763" starttime="20191114 09:40:09.761"></status>
</kw>
<status status="PASS" endtime="20191114 09:40:09.763" starttime="20191114 09:40:02.730"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:40:09.765" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 09:40:09.765" starttime="20191114 09:40:09.764"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:09.767" starttime="20191114 09:40:09.766"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:40:09.768" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:40:10.974" level="INFO">Read output: Last login: Thu Nov 14 09:39:58 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:40:10.974" starttime="20191114 09:40:09.767"></status>
</kw>
<status status="PASS" endtime="20191114 09:40:10.975" starttime="20191114 09:40:09.765"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 09:40:10.976" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 09:40:13.146" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:40:13.146" starttime="20191114 09:40:10.975"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 09:40:13.147" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:40:13.245" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:40:13.245" level="INFO">${startupMsg} = hadoop    1212  364  0.0 34484780 223644 ?     Sl   09:40   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 09:40:13.245" starttime="20191114 09:40:13.147"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:40:13.310" starttime="20191114 09:40:13.246"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:13.311" starttime="20191114 09:40:13.311"></status>
</kw>
<status status="PASS" endtime="20191114 09:40:13.312" starttime="20191114 09:40:09.763"></status>
</kw>
<status status="PASS" endtime="20191114 09:40:13.312" starttime="20191114 09:39:55.662"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:40:13.316" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:40:15.135" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:40:15.135" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:15.135" starttime="20191114 09:40:13.314"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:40:15.136" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:15.136" starttime="20191114 09:40:15.136"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:40:15.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:40:15.137" starttime="20191114 09:40:15.136"></status>
</kw>
<msg timestamp="20191114 09:40:15.137" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:15.137" starttime="20191114 09:40:13.313"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 09:40:15.138" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:15.138" starttime="20191114 09:40:15.137"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:15.138" starttime="20191114 09:40:15.138"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:15.139" starttime="20191114 09:40:15.138"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 09:40:15.139" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 09:40:15.139" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:15.140" starttime="20191114 09:40:15.139"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 09:40:15.140" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191114 09:40:15.140" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 09:40:15.140" starttime="20191114 09:40:15.140"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 09:40:15.141" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 09:40:15.141" starttime="20191114 09:40:15.141"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 09:40:15.141" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191114 09:40:15.141" starttime="20191114 09:40:15.141"></status>
</kw>
<msg timestamp="20191114 09:40:15.142" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 09:40:15.142" starttime="20191114 09:40:13.312"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:40:15.143" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191114 09:40:15.143" starttime="20191114 09:40:15.143"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:15.144" starttime="20191114 09:40:15.144"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:40:15.145" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:40:16.332" level="INFO">Read output: Last login: Thu Nov 14 09:39:05 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:40:16.333" starttime="20191114 09:40:15.144"></status>
</kw>
<status status="PASS" endtime="20191114 09:40:16.333" starttime="20191114 09:40:15.143"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 09:40:16.334" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 09:40:17.494" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:40:17.495" starttime="20191114 09:40:16.334"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 09:40:17.496" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:40:17.573" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:40:17.574" level="INFO">${shutdownMsg} = hadoop    1087  0.0  0.0   9556  1168 ?        Ss   09:40   0:00 bash -c sudo ps aux | grep om
hadoop    1089  0.0  0.0   9088   672 ?        S    09:40   0:00 grep om</msg>
<status status="PASS" endtime="20191114 09:40:17.574" starttime="20191114 09:40:17.495"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:40:17.608" starttime="20191114 09:40:17.575"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:17.609" starttime="20191114 09:40:17.608"></status>
</kw>
<msg timestamp="20191114 09:40:17.609" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 09:40:17.610" starttime="20191114 09:40:15.142"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:40:17.614" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:40:19.812" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:40:19.812" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:19.812" starttime="20191114 09:40:17.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:40:19.813" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:19.814" starttime="20191114 09:40:19.813"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:40:19.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:40:19.814" starttime="20191114 09:40:19.814"></status>
</kw>
<msg timestamp="20191114 09:40:19.815" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:19.815" starttime="20191114 09:40:17.610"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 09:40:19.816" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:19.816" starttime="20191114 09:40:19.815"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:19.816" starttime="20191114 09:40:19.816"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:19.817" starttime="20191114 09:40:19.817"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 09:40:19.818" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 09:40:19.818" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:19.818" starttime="20191114 09:40:19.817"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 09:40:19.819" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 09:40:19.819" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 09:40:19.819" starttime="20191114 09:40:19.818"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 09:40:19.820" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 09:40:19.820" starttime="20191114 09:40:19.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 09:40:19.820" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 09:40:19.821" starttime="20191114 09:40:19.820"></status>
</kw>
<msg timestamp="20191114 09:40:19.821" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 09:40:19.821" starttime="20191114 09:40:17.610"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:19.822" starttime="20191114 09:40:19.821"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 09:40:19.823" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191114 09:40:19.823" starttime="20191114 09:40:19.822"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 09:40:19.824" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191114 09:40:19.824" starttime="20191114 09:40:19.823"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 09:40:19.825" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191114 09:40:19.825" starttime="20191114 09:40:19.824"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:40:19.827" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:40:19.827" starttime="20191114 09:40:19.825"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:40:19.830" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:40:24.366" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:40:24.366" level="INFO">${output} = 2019-11-14 09:40:22 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 09:40:22 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 09:40:24.366" starttime="20191114 09:40:19.828"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:40:24.368" level="INFO">2019-11-14 09:40:22 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 09:40:22 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 09:40:22 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 09:40:24.368" starttime="20191114 09:40:24.367"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:40:24.369" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:40:24.369" starttime="20191114 09:40:24.368"></status>
</kw>
<status status="PASS" endtime="20191114 09:40:24.369" starttime="20191114 09:40:19.827"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:40:24.373" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:40:26.670" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:40:26.670" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:40:26.671" starttime="20191114 09:40:24.371"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:40:26.672" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:40:26.673" starttime="20191114 09:40:26.671"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:40:26.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:40:26.674" starttime="20191114 09:40:26.673"></status>
</kw>
<msg timestamp="20191114 09:40:26.674" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:40:26.674" starttime="20191114 09:40:24.370"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:26.675" starttime="20191114 09:40:26.675"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:40:26.677" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:40:26.678" starttime="20191114 09:40:26.676"></status>
</kw>
<status status="PASS" endtime="20191114 09:40:26.678" starttime="20191114 09:40:19.822"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:40:26.680" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191114 09:40:26.680" starttime="20191114 09:40:26.679"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:26.682" starttime="20191114 09:40:26.681"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:40:26.682" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:40:27.887" level="INFO">Read output: Last login: Thu Nov 14 09:40:15 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:40:27.888" starttime="20191114 09:40:26.682"></status>
</kw>
<status status="PASS" endtime="20191114 09:40:27.888" starttime="20191114 09:40:26.680"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 09:40:27.890" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 09:40:30.040" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:40:30.040" starttime="20191114 09:40:27.889"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 09:40:30.041" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:40:30.149" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:40:30.149" level="INFO">${startupMsg} = hadoop    1138  337  0.0 34476964 206960 ?     Sl   09:40   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 09:40:30.149" starttime="20191114 09:40:30.041"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:40:30.215" starttime="20191114 09:40:30.150"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:30.216" starttime="20191114 09:40:30.215"></status>
</kw>
<status status="PASS" endtime="20191114 09:40:30.216" starttime="20191114 09:40:26.678"></status>
</kw>
<status status="PASS" endtime="20191114 09:40:30.216" starttime="20191114 09:40:13.312"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:40:30.221" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:40:31.975" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:40:31.976" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:31.976" starttime="20191114 09:40:30.218"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:40:31.977" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:31.977" starttime="20191114 09:40:31.976"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:40:31.978" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:40:31.978" starttime="20191114 09:40:31.977"></status>
</kw>
<msg timestamp="20191114 09:40:31.979" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:31.979" starttime="20191114 09:40:30.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 09:40:31.979" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:31.980" starttime="20191114 09:40:31.979"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:31.981" starttime="20191114 09:40:31.980"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:31.981" starttime="20191114 09:40:31.981"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 09:40:31.982" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 09:40:31.982" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:31.983" starttime="20191114 09:40:31.982"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 09:40:31.983" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 09:40:31.984" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 09:40:31.984" starttime="20191114 09:40:31.983"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 09:40:31.984" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 09:40:31.985" starttime="20191114 09:40:31.984"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 09:40:31.985" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 09:40:31.986" starttime="20191114 09:40:31.985"></status>
</kw>
<msg timestamp="20191114 09:40:31.986" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 09:40:31.986" starttime="20191114 09:40:30.217"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:40:31.988" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 09:40:31.988" starttime="20191114 09:40:31.987"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:31.990" starttime="20191114 09:40:31.989"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:40:31.990" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:40:33.177" level="INFO">Read output: Last login: Thu Nov 14 09:39:52 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:40:33.177" starttime="20191114 09:40:31.990"></status>
</kw>
<status status="PASS" endtime="20191114 09:40:33.178" starttime="20191114 09:40:31.988"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 09:40:33.179" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 09:40:34.339" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:40:34.339" starttime="20191114 09:40:33.178"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 09:40:34.340" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:40:34.417" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:40:34.417" level="INFO">${shutdownMsg} = hadoop    1596  0.0  0.0   9556  1168 ?        Ss   09:40   0:00 bash -c sudo ps aux | grep om
hadoop    1598  0.0  0.0   9088   668 ?        S    09:40   0:00 grep om</msg>
<status status="PASS" endtime="20191114 09:40:34.417" starttime="20191114 09:40:34.340"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:40:34.451" starttime="20191114 09:40:34.418"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:34.452" starttime="20191114 09:40:34.451"></status>
</kw>
<msg timestamp="20191114 09:40:34.452" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 09:40:34.452" starttime="20191114 09:40:31.986"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:40:34.457" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:40:46.738" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:40:46.738" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:46.738" starttime="20191114 09:40:34.454"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:40:46.740" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:46.741" starttime="20191114 09:40:46.739"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:40:46.742" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:40:46.742" starttime="20191114 09:40:46.741"></status>
</kw>
<msg timestamp="20191114 09:40:46.743" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:46.743" starttime="20191114 09:40:34.453"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 09:40:46.744" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:46.744" starttime="20191114 09:40:46.743"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:46.745" starttime="20191114 09:40:46.744"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:46.746" starttime="20191114 09:40:46.745"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 09:40:46.747" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 09:40:46.747" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 09:40:46.747" starttime="20191114 09:40:46.746"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 09:40:46.748" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 09:40:46.748" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 09:40:46.748" starttime="20191114 09:40:46.747"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 09:40:46.749" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 09:40:46.749" starttime="20191114 09:40:46.749"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 09:40:46.750" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 09:40:46.751" starttime="20191114 09:40:46.750"></status>
</kw>
<msg timestamp="20191114 09:40:46.751" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191114 09:40:46.751" starttime="20191114 09:40:34.453"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 09:40:46.752" starttime="20191114 09:40:46.751"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 09:40:46.754" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191114 09:40:46.754" starttime="20191114 09:40:46.753"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 09:40:46.755" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191114 09:40:46.756" starttime="20191114 09:40:46.755"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 09:40:46.757" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191114 09:40:46.757" starttime="20191114 09:40:46.756"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:40:46.759" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:40:46.759" starttime="20191114 09:40:46.757"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:40:46.763" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:41:01.517" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:41:01.517" level="INFO">${output} = 2019-11-14 09:40:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191114 09:41:01.517" starttime="20191114 09:40:46.761"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:41:01.519" level="INFO">2019-11-14 09:40:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:40:50 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:40:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:40:52 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:40:53 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:40:54 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:40:55 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:40:56 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:40:57 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:40:58 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 09:40:59 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 09:40:59 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 09:40:59 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 09:41:01.519" starttime="20191114 09:41:01.518"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:41:01.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:41:01.519" starttime="20191114 09:41:01.519"></status>
</kw>
<status status="PASS" endtime="20191114 09:41:01.520" starttime="20191114 09:40:46.759"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 09:41:01.523" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 09:41:13.786" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 09:41:13.786" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:41:13.786" starttime="20191114 09:41:01.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 09:41:13.788" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:41:13.788" starttime="20191114 09:41:13.787"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 09:41:13.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 09:41:13.789" starttime="20191114 09:41:13.788"></status>
</kw>
<msg timestamp="20191114 09:41:13.789" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 09:41:13.789" starttime="20191114 09:41:01.520"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:41:13.790" starttime="20191114 09:41:13.789"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 09:41:13.790" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 09:41:13.790" starttime="20191114 09:41:13.790"></status>
</kw>
<status status="PASS" endtime="20191114 09:41:13.791" starttime="20191114 09:40:46.753"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 09:41:13.792" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 09:41:13.792" starttime="20191114 09:41:13.791"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 09:41:13.793" starttime="20191114 09:41:13.793"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 09:41:13.794" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 09:41:14.983" level="INFO">Read output: Last login: Thu Nov 14 09:40:32 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 09:41:14.984" starttime="20191114 09:41:13.793"></status>
</kw>
<status status="PASS" endtime="20191114 09:41:14.984" starttime="20191114 09:41:13.792"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 09:41:14.985" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 09:41:17.155" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 09:41:17.155" starttime="20191114 09:41:14.985"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 09:41:17.156" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 09:41:17.232" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 09:41:17.232" level="INFO">${startupMsg} = hadoop    1648  337  0.0 34478044 213156 ?     Sl   09:41   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 09:41:17.232" starttime="20191114 09:41:17.156"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 09:41:17.298" starttime="20191114 09:41:17.233"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 09:41:17.299" starttime="20191114 09:41:17.298"></status>
</kw>
<status status="PASS" endtime="20191114 09:41:17.299" starttime="20191114 09:41:13.791"></status>
</kw>
<status status="PASS" endtime="20191114 09:41:17.299" starttime="20191114 09:40:30.216"></status>
</kw>
<status status="PASS" endtime="20191114 09:41:17.299" starttime="20191114 09:38:41.851"></status>
</kw>
<status status="PASS" endtime="20191114 09:41:17.300" critical="yes" starttime="20191114 09:38:41.850"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191114 09:41:17.302" starttime="20191114 09:36:35.910"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
