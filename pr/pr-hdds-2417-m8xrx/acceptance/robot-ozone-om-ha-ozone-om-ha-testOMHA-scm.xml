<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191110 11:23:18.145" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:23:18.290" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:23:21.621" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:23:21.621" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191110 11:23:21.621" starttime="20191110 11:23:18.288"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:23:21.623" level="INFO"></msg>
<status status="PASS" endtime="20191110 11:23:21.623" starttime="20191110 11:23:21.622"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:23:21.624" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:23:21.625" starttime="20191110 11:23:21.624"></status>
</kw>
<status status="PASS" endtime="20191110 11:23:21.625" starttime="20191110 11:23:18.287"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:23:21.633" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:23:23.881" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:23:23.881" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191110 11:23:23.881" starttime="20191110 11:23:21.630"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:23:23.882" level="INFO"></msg>
<status status="PASS" endtime="20191110 11:23:23.883" starttime="20191110 11:23:23.881"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:23:23.884" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:23:23.884" starttime="20191110 11:23:23.883"></status>
</kw>
<status status="PASS" endtime="20191110 11:23:23.884" starttime="20191110 11:23:21.625"></status>
</kw>
<status status="PASS" endtime="20191110 11:23:23.885" starttime="20191110 11:23:18.286"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 11:23:23.886" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191110 11:23:23.887" starttime="20191110 11:23:23.886"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 11:23:23.888" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191110 11:23:23.888" starttime="20191110 11:23:23.887"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 11:23:23.889" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191110 11:23:23.889" starttime="20191110 11:23:23.888"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:23:23.891" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:23:23.891" starttime="20191110 11:23:23.889"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:23:23.895" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:23:29.045" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:23:29.046" level="INFO">${output} = 2019-11-10 11:23:26 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 11:23:27 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191110 11:23:29.046" starttime="20191110 11:23:23.892"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:23:29.047" level="INFO">2019-11-10 11:23:26 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 11:23:27 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 11:23:27 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 11:23:29.047" starttime="20191110 11:23:29.046"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:23:29.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:23:29.048" starttime="20191110 11:23:29.048"></status>
</kw>
<status status="PASS" endtime="20191110 11:23:29.049" starttime="20191110 11:23:23.891"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:23:29.053" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:23:31.452" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:23:31.452" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191110 11:23:31.453" starttime="20191110 11:23:29.050"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:23:31.454" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191110 11:23:31.454" starttime="20191110 11:23:31.453"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:23:31.455" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:23:31.455" starttime="20191110 11:23:31.455"></status>
</kw>
<msg timestamp="20191110 11:23:31.456" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191110 11:23:31.456" starttime="20191110 11:23:29.049"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:23:31.457" starttime="20191110 11:23:31.456"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:23:31.458" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:23:31.458" starttime="20191110 11:23:31.457"></status>
</kw>
<status status="PASS" endtime="20191110 11:23:31.458" starttime="20191110 11:23:23.885"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:23:31.462" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:23:33.493" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:23:33.493" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:23:33.493" starttime="20191110 11:23:31.460"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:23:33.495" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:23:33.495" starttime="20191110 11:23:33.494"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:23:33.496" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:23:33.497" starttime="20191110 11:23:33.496"></status>
</kw>
<msg timestamp="20191110 11:23:33.497" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:23:33.497" starttime="20191110 11:23:31.459"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 11:23:33.498" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:23:33.498" starttime="20191110 11:23:33.498"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 11:23:33.500" starttime="20191110 11:23:33.499"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 11:23:33.501" starttime="20191110 11:23:33.500"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 11:23:33.502" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 11:23:33.502" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:23:33.502" starttime="20191110 11:23:33.501"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 11:23:33.503" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191110 11:23:33.504" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 11:23:33.504" starttime="20191110 11:23:33.503"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 11:23:33.505" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191110 11:23:33.505" starttime="20191110 11:23:33.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 11:23:33.505" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191110 11:23:33.506" starttime="20191110 11:23:33.505"></status>
</kw>
<msg timestamp="20191110 11:23:33.506" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191110 11:23:33.506" starttime="20191110 11:23:31.458"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:23:33.508" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 11:23:33.508" starttime="20191110 11:23:33.507"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:23:33.510" starttime="20191110 11:23:33.509"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:23:33.511" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:23:34.752" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:23:34.752" starttime="20191110 11:23:33.511"></status>
</kw>
<status status="PASS" endtime="20191110 11:23:34.753" starttime="20191110 11:23:33.509"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 11:23:34.754" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 11:23:44.920" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:23:44.921" starttime="20191110 11:23:34.753"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 11:23:44.922" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:23:45.030" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:23:45.031" level="INFO">${shutdownMsg} = hadoop     442  0.0  0.0   9556  1164 ?        Ss   11:23   0:00 bash -c sudo ps aux | grep om
hadoop     444  0.0  0.0   9088   668 ?        S    11:23   0:00 grep om</msg>
<status status="PASS" endtime="20191110 11:23:45.031" starttime="20191110 11:23:44.921"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:23:45.097" starttime="20191110 11:23:45.032"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:23:45.098" starttime="20191110 11:23:45.097"></status>
</kw>
<msg timestamp="20191110 11:23:45.098" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191110 11:23:45.098" starttime="20191110 11:23:33.506"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:23:45.103" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:23:47.400" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:23:47.400" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:23:47.400" starttime="20191110 11:23:45.100"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:23:47.402" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:23:47.402" starttime="20191110 11:23:47.401"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:23:47.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:23:47.404" starttime="20191110 11:23:47.403"></status>
</kw>
<msg timestamp="20191110 11:23:47.404" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:23:47.404" starttime="20191110 11:23:45.099"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 11:23:47.405" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:23:47.406" starttime="20191110 11:23:47.405"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 11:23:47.407" starttime="20191110 11:23:47.406"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 11:23:47.408" starttime="20191110 11:23:47.407"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 11:23:47.408" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 11:23:47.409" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:23:47.409" starttime="20191110 11:23:47.408"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 11:23:47.410" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191110 11:23:47.410" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 11:23:47.410" starttime="20191110 11:23:47.409"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 11:23:47.411" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 11:23:47.411" starttime="20191110 11:23:47.410"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 11:23:47.412" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191110 11:23:47.412" starttime="20191110 11:23:47.411"></status>
</kw>
<msg timestamp="20191110 11:23:47.413" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191110 11:23:47.413" starttime="20191110 11:23:45.099"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191110 11:23:47.414" starttime="20191110 11:23:47.413"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 11:23:47.416" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191110 11:23:47.416" starttime="20191110 11:23:47.415"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 11:23:47.417" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191110 11:23:47.417" starttime="20191110 11:23:47.416"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 11:23:47.418" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191110 11:23:47.418" starttime="20191110 11:23:47.417"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:23:47.420" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:23:47.421" starttime="20191110 11:23:47.418"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:23:47.425" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:23:51.773" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:23:51.773" level="INFO">${output} = 2019-11-10 11:23:50 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 11:23:50 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191110 11:23:51.773" starttime="20191110 11:23:47.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:23:51.774" level="INFO">2019-11-10 11:23:50 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 11:23:50 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 11:23:50 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 11:23:51.774" starttime="20191110 11:23:51.774"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:23:51.775" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:23:51.776" starttime="20191110 11:23:51.774"></status>
</kw>
<status status="PASS" endtime="20191110 11:23:51.776" starttime="20191110 11:23:47.421"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:23:51.780" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:23:53.998" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:23:53.998" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191110 11:23:53.999" starttime="20191110 11:23:51.778"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:23:54.000" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191110 11:23:54.000" starttime="20191110 11:23:53.999"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:23:54.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:23:54.002" starttime="20191110 11:23:54.001"></status>
</kw>
<msg timestamp="20191110 11:23:54.002" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191110 11:23:54.002" starttime="20191110 11:23:51.776"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:23:54.003" starttime="20191110 11:23:54.002"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:23:54.004" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:23:54.004" starttime="20191110 11:23:54.003"></status>
</kw>
<status status="PASS" endtime="20191110 11:23:54.005" starttime="20191110 11:23:47.414"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:23:54.007" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 11:23:54.007" starttime="20191110 11:23:54.006"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:23:54.008" starttime="20191110 11:23:54.008"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:23:54.009" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:23:55.215" level="INFO">Read output: Last login: Sun Nov 10 11:23:33 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:23:55.216" starttime="20191110 11:23:54.009"></status>
</kw>
<status status="PASS" endtime="20191110 11:23:55.216" starttime="20191110 11:23:54.007"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 11:23:55.217" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 11:23:57.396" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:23:57.396" starttime="20191110 11:23:55.216"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 11:23:57.397" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:23:57.505" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:23:57.506" level="INFO">${startupMsg} = hadoop     495  360  0.0 34480188 201808 ?     Sl   11:23   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 11:23:57.506" starttime="20191110 11:23:57.397"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:23:57.571" starttime="20191110 11:23:57.506"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:23:57.572" starttime="20191110 11:23:57.572"></status>
</kw>
<status status="PASS" endtime="20191110 11:23:57.573" starttime="20191110 11:23:54.005"></status>
</kw>
<status status="PASS" endtime="20191110 11:23:57.573" critical="yes" starttime="20191110 11:23:18.285"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191110 11:23:57.576" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191110 11:23:57.576" starttime="20191110 11:23:57.574"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191110 11:23:57.579" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191110 11:23:57.580" starttime="20191110 11:23:57.577"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:23:57.581" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 11:23:57.582" starttime="20191110 11:23:57.581"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:23:57.583" starttime="20191110 11:23:57.582"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:23:57.583" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:23:58.771" level="INFO">Read output: Last login: Sun Nov 10 11:23:54 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:23:58.771" starttime="20191110 11:23:57.583"></status>
</kw>
<status status="PASS" endtime="20191110 11:23:58.771" starttime="20191110 11:23:57.582"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 11:23:58.772" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 11:23:59.931" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:23:59.932" starttime="20191110 11:23:58.772"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 11:23:59.933" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:24:00.000" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:24:00.001" level="INFO">${shutdownMsg} = hadoop     850  0.0  0.0   9556  1168 ?        Ss   11:23   0:00 bash -c sudo ps aux | grep om
hadoop     852  0.0  0.0   9088   668 ?        S    11:23   0:00 grep om</msg>
<status status="PASS" endtime="20191110 11:24:00.001" starttime="20191110 11:23:59.933"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:24:00.065" starttime="20191110 11:24:00.001"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:00.066" starttime="20191110 11:24:00.066"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:00.066" starttime="20191110 11:23:57.580"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:24:00.068" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 11:24:00.068" starttime="20191110 11:24:00.067"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:00.069" starttime="20191110 11:24:00.068"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:24:00.069" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:24:01.273" level="INFO">Read output: Last login: Sun Nov 10 11:23:57 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:24:01.273" starttime="20191110 11:24:00.069"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:01.274" starttime="20191110 11:24:00.068"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191110 11:24:01.275" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191110 11:24:01.301" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:24:01.301" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 11:24:01.301" starttime="20191110 11:24:01.274"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191110 11:24:01.302" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 11:24:01.302" starttime="20191110 11:24:01.301"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191110 11:24:01.303" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191110 11:24:01.304" starttime="20191110 11:24:01.303"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191110 11:24:01.352" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191110 11:24:01.363" level="INFO">1 file:
log_inprogress_0</msg>
<msg timestamp="20191110 11:24:01.364" level="INFO">@{logs} = [ log_inprogress_0 ]</msg>
<status status="PASS" endtime="20191110 11:24:01.364" starttime="20191110 11:24:01.304"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191110 11:24:01.365" level="INFO">Length is 1</msg>
<msg timestamp="20191110 11:24:01.366" level="INFO">${numLogs} = 1</msg>
<status status="PASS" endtime="20191110 11:24:01.366" starttime="20191110 11:24:01.365"></status>
</kw>
<msg timestamp="20191110 11:24:01.367" level="INFO">${numLogsBefore} = 1</msg>
<msg timestamp="20191110 11:24:01.367" level="INFO">@{logsBefore} = [ [u'log_inprogress_0'] ]</msg>
<status status="PASS" endtime="20191110 11:24:01.367" starttime="20191110 11:24:00.066"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:24:01.372" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:24:03.271" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:24:03.271" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:24:03.271" starttime="20191110 11:24:01.369"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:24:03.273" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:24:03.273" starttime="20191110 11:24:03.272"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:24:03.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:24:03.273" starttime="20191110 11:24:03.273"></status>
</kw>
<msg timestamp="20191110 11:24:03.274" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:24:03.274" starttime="20191110 11:24:01.368"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 11:24:03.274" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:24:03.274" starttime="20191110 11:24:03.274"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:03.275" starttime="20191110 11:24:03.275"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:03.276" starttime="20191110 11:24:03.275"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 11:24:03.276" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 11:24:03.276" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:24:03.276" starttime="20191110 11:24:03.276"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 11:24:03.277" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191110 11:24:03.277" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 11:24:03.277" starttime="20191110 11:24:03.277"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 11:24:03.278" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 11:24:03.278" starttime="20191110 11:24:03.277"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 11:24:03.278" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191110 11:24:03.278" starttime="20191110 11:24:03.278"></status>
</kw>
<msg timestamp="20191110 11:24:03.279" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 11:24:03.279" starttime="20191110 11:24:01.367"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191110 11:24:03.281" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191110 11:24:03.281" starttime="20191110 11:24:03.279"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191110 11:24:03.283" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191110 11:24:03.283" starttime="20191110 11:24:03.282"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191110 11:24:03.283" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191110 11:24:03.283" starttime="20191110 11:24:03.283"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:24:03.287" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:24:07.745" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:24:07.745" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191110 11:24:07.745" starttime="20191110 11:24:03.285"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:24:07.747" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 11:24:07.747" starttime="20191110 11:24:07.746"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:24:07.748" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:24:07.748" starttime="20191110 11:24:07.747"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:07.749" starttime="20191110 11:24:03.284"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:24:07.754" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:24:10.177" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:24:10.177" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573385045508,
  "modificationTime": 1573385047332,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 11:24:10.177" starttime="20191110 11:24:07.751"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:24:10.178" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573385045508,
  "modificationTime": 1573385047332,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103113362342346750,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191110 11:24:10.178" starttime="20191110 11:24:10.177"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:24:10.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:24:10.179" starttime="20191110 11:24:10.178"></status>
</kw>
<msg timestamp="20191110 11:24:10.179" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573385045508,
  "modificationTime": 1573385047332,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 11:24:10.179" starttime="20191110 11:24:07.749"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:10.180" starttime="20191110 11:24:10.179"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:10.180" starttime="20191110 11:24:03.284"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:10.180" starttime="20191110 11:24:03.282"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191110 11:24:10.181" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191110 11:24:10.181" starttime="20191110 11:24:10.180"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191110 11:24:10.181" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191110 11:24:10.182" starttime="20191110 11:24:10.181"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:24:10.187" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:24:14.552" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:24:14.552" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191110 11:24:14.552" starttime="20191110 11:24:10.184"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:24:14.554" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 11:24:14.554" starttime="20191110 11:24:14.553"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:24:14.555" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:24:14.556" starttime="20191110 11:24:14.554"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:14.556" starttime="20191110 11:24:10.182"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:24:14.561" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:24:16.834" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:24:16.834" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573385052340,
  "modificationTime": 1573385054119,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 11:24:16.834" starttime="20191110 11:24:14.558"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:24:16.836" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573385052340,
  "modificationTime": 1573385054119,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103113362790088700,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191110 11:24:16.836" starttime="20191110 11:24:16.835"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:24:16.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:24:16.837" starttime="20191110 11:24:16.836"></status>
</kw>
<msg timestamp="20191110 11:24:16.837" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573385052340,
  "modificationTime": 1573385054119,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 11:24:16.837" starttime="20191110 11:24:14.556"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:16.838" starttime="20191110 11:24:16.838"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:16.838" starttime="20191110 11:24:10.182"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:16.838" starttime="20191110 11:24:10.180"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191110 11:24:16.839" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191110 11:24:16.839" starttime="20191110 11:24:16.839"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191110 11:24:16.840" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191110 11:24:16.840" starttime="20191110 11:24:16.840"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:24:16.844" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:24:21.265" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:24:21.265" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191110 11:24:21.265" starttime="20191110 11:24:16.842"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:24:21.267" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 11:24:21.267" starttime="20191110 11:24:21.266"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:24:21.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:24:21.268" starttime="20191110 11:24:21.267"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:21.269" starttime="20191110 11:24:16.841"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:24:21.273" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:24:23.610" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:24:23.610" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573385059059,
  "modificationTime": 1573385060843,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 11:24:23.610" starttime="20191110 11:24:21.271"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:24:23.612" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573385059059,
  "modificationTime": 1573385060843,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 2,
      "localID": 103113363230359550,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191110 11:24:23.612" starttime="20191110 11:24:23.611"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:24:23.612" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:24:23.613" starttime="20191110 11:24:23.612"></status>
</kw>
<msg timestamp="20191110 11:24:23.613" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573385059059,
  "modificationTime": 1573385060843,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 11:24:23.613" starttime="20191110 11:24:21.269"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:23.614" starttime="20191110 11:24:23.614"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:23.614" starttime="20191110 11:24:16.840"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:23.614" starttime="20191110 11:24:16.839"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191110 11:24:23.616" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191110 11:24:23.616" starttime="20191110 11:24:23.615"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191110 11:24:23.617" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191110 11:24:23.617" starttime="20191110 11:24:23.616"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:24:23.621" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:24:27.970" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:24:27.970" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191110 11:24:27.970" starttime="20191110 11:24:23.619"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:24:27.972" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 11:24:27.972" starttime="20191110 11:24:27.971"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:24:27.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:24:27.973" starttime="20191110 11:24:27.972"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:27.974" starttime="20191110 11:24:23.618"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:24:27.978" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:24:30.369" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:24:30.369" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573385065767,
  "modificationTime": 1573385067552,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 11:24:30.369" starttime="20191110 11:24:27.975"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:24:30.371" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573385065767,
  "modificationTime": 1573385067552,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103113363669975040,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191110 11:24:30.371" starttime="20191110 11:24:30.370"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:24:30.372" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:24:30.372" starttime="20191110 11:24:30.372"></status>
</kw>
<msg timestamp="20191110 11:24:30.373" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573385065767,
  "modificationTime": 1573385067552,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 11:24:30.373" starttime="20191110 11:24:27.974"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:30.374" starttime="20191110 11:24:30.373"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:30.375" starttime="20191110 11:24:23.617"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:30.375" starttime="20191110 11:24:23.615"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191110 11:24:30.376" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:24:30.376" starttime="20191110 11:24:30.375"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191110 11:24:30.377" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:24:30.377" starttime="20191110 11:24:30.377"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:24:30.383" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:24:34.662" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:24:34.662" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191110 11:24:34.662" starttime="20191110 11:24:30.380"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:24:34.664" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 11:24:34.664" starttime="20191110 11:24:34.663"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:24:34.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:24:34.665" starttime="20191110 11:24:34.664"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:34.666" starttime="20191110 11:24:30.379"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:24:34.671" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:24:37.296" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:24:37.296" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573385072552,
  "modificationTime": 1573385074236,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 11:24:37.296" starttime="20191110 11:24:34.669"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:24:37.298" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573385072552,
  "modificationTime": 1573385074236,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103113364114702340,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191110 11:24:37.298" starttime="20191110 11:24:37.297"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:24:37.299" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:24:37.299" starttime="20191110 11:24:37.299"></status>
</kw>
<msg timestamp="20191110 11:24:37.300" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573385072552,
  "modificationTime": 1573385074236,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 11:24:37.300" starttime="20191110 11:24:34.666"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:37.301" starttime="20191110 11:24:37.300"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:37.301" starttime="20191110 11:24:30.378"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:37.301" starttime="20191110 11:24:30.375"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:37.301" starttime="20191110 11:24:03.282"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:37.301" starttime="20191110 11:24:03.281"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:24:37.304" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191110 11:24:37.304" starttime="20191110 11:24:37.303"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:37.306" starttime="20191110 11:24:37.305"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:24:37.306" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:24:38.512" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:24:38.512" starttime="20191110 11:24:37.306"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:38.513" starttime="20191110 11:24:37.304"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191110 11:24:38.514" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191110 11:24:38.530" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:24:38.531" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 11:24:38.531" starttime="20191110 11:24:38.513"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191110 11:24:38.533" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 11:24:38.533" starttime="20191110 11:24:38.532"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191110 11:24:38.535" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191110 11:24:38.535" starttime="20191110 11:24:38.534"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191110 11:24:38.618" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191110 11:24:38.629" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191110 11:24:38.630" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191110 11:24:38.630" starttime="20191110 11:24:38.536"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191110 11:24:38.631" level="INFO">Length is 2</msg>
<msg timestamp="20191110 11:24:38.631" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191110 11:24:38.631" starttime="20191110 11:24:38.630"></status>
</kw>
<msg timestamp="20191110 11:24:38.632" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191110 11:24:38.632" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191110 11:24:38.632" starttime="20191110 11:24:37.302"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191110 11:24:38.633" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191110 11:24:38.633" starttime="20191110 11:24:38.632"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:38.633" starttime="20191110 11:24:03.279"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:38.633" starttime="20191110 11:24:03.279"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:38.634" starttime="20191110 11:24:38.634"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:24:38.636" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 11:24:38.636" starttime="20191110 11:24:38.635"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:38.638" starttime="20191110 11:24:38.638"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:24:38.639" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:24:39.843" level="INFO">Read output: Last login: Sun Nov 10 11:24:00 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:24:39.844" starttime="20191110 11:24:38.639"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:39.844" starttime="20191110 11:24:38.637"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 11:24:39.845" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 11:24:42.004" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:24:42.004" starttime="20191110 11:24:39.845"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 11:24:42.005" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:24:42.113" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:24:42.113" level="INFO">${startupMsg} = hadoop     923  370  0.0 34479056 225776 ?     Sl   11:24   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 11:24:42.113" starttime="20191110 11:24:42.005"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:24:42.178" starttime="20191110 11:24:42.113"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:42.179" starttime="20191110 11:24:42.178"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:42.179" starttime="20191110 11:24:38.635"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:24:42.181" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 11:24:42.181" starttime="20191110 11:24:42.180"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:42.182" starttime="20191110 11:24:42.182"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:24:42.183" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:24:43.386" level="INFO">Read output: Last login: Sun Nov 10 11:24:38 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:24:43.386" starttime="20191110 11:24:42.183"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:43.386" starttime="20191110 11:24:42.181"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191110 11:24:43.387" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191110 11:24:43.403" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:24:43.403" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 11:24:43.403" starttime="20191110 11:24:43.387"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191110 11:24:43.403" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 11:24:43.404" starttime="20191110 11:24:43.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191110 11:24:43.404" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191110 11:24:43.404" starttime="20191110 11:24:43.404"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191110 11:24:43.483" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191110 11:24:43.491" level="INFO">1 file:
log_inprogress_0</msg>
<msg timestamp="20191110 11:24:43.491" level="INFO">@{logs} = [ log_inprogress_0 ]</msg>
<status status="PASS" endtime="20191110 11:24:43.491" starttime="20191110 11:24:43.404"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191110 11:24:43.492" level="INFO">Length is 1</msg>
<msg timestamp="20191110 11:24:43.492" level="INFO">${numLogs} = 1</msg>
<status status="PASS" endtime="20191110 11:24:43.492" starttime="20191110 11:24:43.492"></status>
</kw>
<msg timestamp="20191110 11:24:43.493" level="INFO">${numLogsAfter} = 1</msg>
<msg timestamp="20191110 11:24:43.493" level="INFO">@{logsAfter} = [ [u'log_inprogress_0'] ]</msg>
<status status="PASS" endtime="20191110 11:24:43.493" starttime="20191110 11:24:42.179"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:43.493" starttime="20191110 11:24:43.493"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191110 11:24:44.494" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191110 11:24:44.495" starttime="20191110 11:24:43.494"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:44.495" starttime="20191110 11:24:42.179"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:24:44.498" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 11:24:44.498" starttime="20191110 11:24:44.497"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:44.500" starttime="20191110 11:24:44.499"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:24:44.501" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:24:45.705" level="INFO">Read output: Last login: Sun Nov 10 11:24:42 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:24:45.706" starttime="20191110 11:24:44.500"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:45.706" starttime="20191110 11:24:44.498"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191110 11:24:45.708" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191110 11:24:45.722" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:24:45.723" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 11:24:45.723" starttime="20191110 11:24:45.707"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191110 11:24:45.724" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 11:24:45.724" starttime="20191110 11:24:45.723"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191110 11:24:45.725" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191110 11:24:45.725" starttime="20191110 11:24:45.725"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191110 11:24:45.805" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191110 11:24:45.817" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191110 11:24:45.817" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191110 11:24:45.817" starttime="20191110 11:24:45.726"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191110 11:24:45.819" level="INFO">Length is 2</msg>
<msg timestamp="20191110 11:24:45.819" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191110 11:24:45.819" starttime="20191110 11:24:45.818"></status>
</kw>
<msg timestamp="20191110 11:24:45.820" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191110 11:24:45.820" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191110 11:24:45.820" starttime="20191110 11:24:44.495"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191110 11:24:45.821" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191110 11:24:45.821" starttime="20191110 11:24:45.820"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:45.821" starttime="20191110 11:24:44.495"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:45.822" starttime="20191110 11:24:42.179"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:45.823" starttime="20191110 11:24:45.822"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:45.824" starttime="20191110 11:24:45.823"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:45.824" critical="yes" starttime="20191110 11:23:57.574"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:24:45.831" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:24:47.917" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:24:47.917" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:24:47.917" starttime="20191110 11:24:45.828"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:24:47.919" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:24:47.919" starttime="20191110 11:24:47.918"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:24:47.920" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:24:47.920" starttime="20191110 11:24:47.919"></status>
</kw>
<msg timestamp="20191110 11:24:47.920" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:24:47.920" starttime="20191110 11:24:45.827"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 11:24:47.921" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:24:47.921" starttime="20191110 11:24:47.920"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:47.922" starttime="20191110 11:24:47.921"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:47.922" starttime="20191110 11:24:47.922"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 11:24:47.923" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 11:24:47.923" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:24:47.923" starttime="20191110 11:24:47.922"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 11:24:47.925" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191110 11:24:47.925" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 11:24:47.925" starttime="20191110 11:24:47.924"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 11:24:47.926" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 11:24:47.926" starttime="20191110 11:24:47.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 11:24:47.927" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191110 11:24:47.927" starttime="20191110 11:24:47.927"></status>
</kw>
<msg timestamp="20191110 11:24:47.928" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 11:24:47.928" starttime="20191110 11:24:45.827"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:24:47.930" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191110 11:24:47.930" starttime="20191110 11:24:47.929"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:47.932" starttime="20191110 11:24:47.931"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:24:47.933" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:24:49.138" level="INFO">Read output: Last login: Sun Nov 10 11:24:37 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:24:49.141" starttime="20191110 11:24:47.933"></status>
</kw>
<status status="PASS" endtime="20191110 11:24:49.141" starttime="20191110 11:24:47.931"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 11:24:49.142" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 11:24:59.322" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:24:59.323" starttime="20191110 11:24:49.142"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 11:24:59.324" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:24:59.432" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:24:59.433" level="INFO">${shutdownMsg} = hadoop     517  0.0  0.0   9556  1168 ?        Ss   11:24   0:00 bash -c sudo ps aux | grep om
hadoop     519  0.0  0.0   9088   668 ?        S    11:24   0:00 grep om</msg>
<status status="PASS" endtime="20191110 11:24:59.433" starttime="20191110 11:24:59.323"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:24:59.498" starttime="20191110 11:24:59.433"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:24:59.499" starttime="20191110 11:24:59.498"></status>
</kw>
<msg timestamp="20191110 11:24:59.499" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191110 11:24:59.499" starttime="20191110 11:24:47.928"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:24:59.506" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:25:01.729" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:25:01.729" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:01.730" starttime="20191110 11:24:59.501"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:25:01.732" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:01.733" starttime="20191110 11:25:01.731"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:25:01.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:25:01.733" starttime="20191110 11:25:01.733"></status>
</kw>
<msg timestamp="20191110 11:25:01.734" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:01.734" starttime="20191110 11:24:59.500"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 11:25:01.734" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:01.735" starttime="20191110 11:25:01.734"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 11:25:01.735" starttime="20191110 11:25:01.735"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 11:25:01.736" starttime="20191110 11:25:01.735"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 11:25:01.736" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 11:25:01.737" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:01.737" starttime="20191110 11:25:01.736"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 11:25:01.737" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191110 11:25:01.738" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 11:25:01.738" starttime="20191110 11:25:01.737"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 11:25:01.738" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191110 11:25:01.738" starttime="20191110 11:25:01.738"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 11:25:01.739" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191110 11:25:01.739" starttime="20191110 11:25:01.739"></status>
</kw>
<msg timestamp="20191110 11:25:01.739" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191110 11:25:01.739" starttime="20191110 11:24:59.500"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191110 11:25:01.740" starttime="20191110 11:25:01.740"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 11:25:01.742" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191110 11:25:01.742" starttime="20191110 11:25:01.741"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 11:25:01.743" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191110 11:25:01.743" starttime="20191110 11:25:01.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 11:25:01.744" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191110 11:25:01.744" starttime="20191110 11:25:01.744"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:25:01.746" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:25:01.746" starttime="20191110 11:25:01.744"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:25:01.749" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:25:08.757" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:25:08.757" level="INFO">${output} = 2019-11-10 11:25:04 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 11:25:04 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191110 11:25:08.757" starttime="20191110 11:25:01.747"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:25:08.759" level="INFO">2019-11-10 11:25:04 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 11:25:04 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 11:25:04 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 11:25:08.759" starttime="20191110 11:25:08.758"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:25:08.760" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:25:08.761" starttime="20191110 11:25:08.760"></status>
</kw>
<status status="PASS" endtime="20191110 11:25:08.761" starttime="20191110 11:25:01.746"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:25:08.767" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:25:10.986" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:25:10.986" level="INFO">${output} = 1.txt
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:25:10.986" starttime="20191110 11:25:08.763"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:25:10.988" level="INFO">1.txt
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:25:10.988" starttime="20191110 11:25:10.987"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:25:10.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:25:10.989" starttime="20191110 11:25:10.988"></status>
</kw>
<msg timestamp="20191110 11:25:10.990" level="INFO">${result} = 1.txt
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:25:10.990" starttime="20191110 11:25:08.762"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:25:10.991" starttime="20191110 11:25:10.991"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:25:10.994" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:25:10.994" starttime="20191110 11:25:10.992"></status>
</kw>
<status status="PASS" endtime="20191110 11:25:10.994" starttime="20191110 11:25:01.740"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:25:10.996" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191110 11:25:10.997" starttime="20191110 11:25:10.996"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:25:10.999" starttime="20191110 11:25:10.998"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:25:11.000" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:25:12.209" level="INFO">Read output: Last login: Sun Nov 10 11:24:48 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:25:12.209" starttime="20191110 11:25:11.000"></status>
</kw>
<status status="PASS" endtime="20191110 11:25:12.210" starttime="20191110 11:25:10.997"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 11:25:12.211" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 11:25:14.382" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:25:14.383" starttime="20191110 11:25:12.210"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 11:25:14.384" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:25:14.492" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:25:14.492" level="INFO">${startupMsg} = hadoop     570  350  0.0 34479408 213116 ?     Sl   11:25   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 11:25:14.492" starttime="20191110 11:25:14.383"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:25:14.525" starttime="20191110 11:25:14.492"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:25:14.527" starttime="20191110 11:25:14.526"></status>
</kw>
<status status="PASS" endtime="20191110 11:25:14.527" starttime="20191110 11:25:10.995"></status>
</kw>
<status status="PASS" endtime="20191110 11:25:14.527" starttime="20191110 11:24:45.826"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:25:14.533" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:25:16.465" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:25:16.465" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:16.465" starttime="20191110 11:25:14.530"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:25:16.467" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:16.467" starttime="20191110 11:25:16.466"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:25:16.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:25:16.468" starttime="20191110 11:25:16.467"></status>
</kw>
<msg timestamp="20191110 11:25:16.469" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:16.469" starttime="20191110 11:25:14.529"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 11:25:16.469" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:16.470" starttime="20191110 11:25:16.469"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 11:25:16.471" starttime="20191110 11:25:16.470"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 11:25:16.471" starttime="20191110 11:25:16.471"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 11:25:16.472" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 11:25:16.472" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:16.473" starttime="20191110 11:25:16.472"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 11:25:16.474" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191110 11:25:16.474" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 11:25:16.474" starttime="20191110 11:25:16.473"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 11:25:16.475" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191110 11:25:16.475" starttime="20191110 11:25:16.474"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 11:25:16.475" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191110 11:25:16.475" starttime="20191110 11:25:16.475"></status>
</kw>
<msg timestamp="20191110 11:25:16.476" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191110 11:25:16.476" starttime="20191110 11:25:14.528"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:25:16.478" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191110 11:25:16.478" starttime="20191110 11:25:16.477"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:25:16.480" starttime="20191110 11:25:16.479"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:25:16.481" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:25:17.681" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:25:17.682" starttime="20191110 11:25:16.480"></status>
</kw>
<status status="PASS" endtime="20191110 11:25:17.682" starttime="20191110 11:25:16.478"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 11:25:17.683" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 11:25:27.845" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:25:27.845" starttime="20191110 11:25:17.682"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 11:25:27.846" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:25:27.954" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:25:27.954" level="INFO">${shutdownMsg} = hadoop     508  0.0  0.0   9556  1168 ?        Ss   11:25   0:00 bash -c sudo ps aux | grep om
hadoop     510  0.0  0.0   9088   668 ?        S    11:25   0:00 grep om</msg>
<status status="PASS" endtime="20191110 11:25:27.954" starttime="20191110 11:25:27.846"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:25:27.988" starttime="20191110 11:25:27.955"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:25:27.989" starttime="20191110 11:25:27.988"></status>
</kw>
<msg timestamp="20191110 11:25:27.989" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191110 11:25:27.989" starttime="20191110 11:25:16.476"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:25:27.995" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:25:40.276" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:25:40.276" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:40.276" starttime="20191110 11:25:27.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:25:40.278" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:40.278" starttime="20191110 11:25:40.277"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:25:40.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:25:40.279" starttime="20191110 11:25:40.278"></status>
</kw>
<msg timestamp="20191110 11:25:40.280" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:40.280" starttime="20191110 11:25:27.990"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 11:25:40.281" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:40.281" starttime="20191110 11:25:40.280"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 11:25:40.282" starttime="20191110 11:25:40.281"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 11:25:40.283" starttime="20191110 11:25:40.282"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 11:25:40.283" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 11:25:40.284" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:25:40.284" starttime="20191110 11:25:40.283"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 11:25:40.285" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191110 11:25:40.285" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 11:25:40.285" starttime="20191110 11:25:40.284"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 11:25:40.286" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191110 11:25:40.286" starttime="20191110 11:25:40.285"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 11:25:40.287" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191110 11:25:40.287" starttime="20191110 11:25:40.286"></status>
</kw>
<msg timestamp="20191110 11:25:40.287" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191110 11:25:40.287" starttime="20191110 11:25:27.990"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191110 11:25:40.288" starttime="20191110 11:25:40.287"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 11:25:40.290" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191110 11:25:40.290" starttime="20191110 11:25:40.289"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 11:25:40.291" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191110 11:25:40.291" starttime="20191110 11:25:40.290"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 11:25:40.292" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191110 11:25:40.292" starttime="20191110 11:25:40.291"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:25:40.294" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:25:40.294" starttime="20191110 11:25:40.292"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:25:40.298" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:25:54.713" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:25:54.714" level="INFO">${output} = 2019-11-10 11:25:43 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191110 11:25:54.714" starttime="20191110 11:25:40.296"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:25:54.715" level="INFO">2019-11-10 11:25:43 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:25:44 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:25:45 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:25:46 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:25:47 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:25:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:25:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:25:50 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:25:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:25:52 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:25:53 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 11:25:53 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 11:25:53 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 11:25:54.715" starttime="20191110 11:25:54.714"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:25:54.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:25:54.716" starttime="20191110 11:25:54.716"></status>
</kw>
<status status="PASS" endtime="20191110 11:25:54.717" starttime="20191110 11:25:40.295"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:25:54.720" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:26:07.150" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:26:07.150" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:26:07.150" starttime="20191110 11:25:54.718"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:26:07.151" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:26:07.151" starttime="20191110 11:26:07.151"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:26:07.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:26:07.152" starttime="20191110 11:26:07.151"></status>
</kw>
<msg timestamp="20191110 11:26:07.152" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:26:07.152" starttime="20191110 11:25:54.717"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:07.153" starttime="20191110 11:26:07.153"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:26:07.154" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:26:07.154" starttime="20191110 11:26:07.153"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:07.154" starttime="20191110 11:25:40.288"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:26:07.155" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191110 11:26:07.155" starttime="20191110 11:26:07.155"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:07.158" starttime="20191110 11:26:07.157"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:26:07.159" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:26:08.365" level="INFO">Read output: Last login: Sun Nov 10 11:25:16 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:26:08.365" starttime="20191110 11:26:07.159"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:08.366" starttime="20191110 11:26:07.156"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 11:26:08.367" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 11:26:10.547" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:26:10.548" starttime="20191110 11:26:08.366"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 11:26:10.549" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:26:10.656" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:26:10.657" level="INFO">${startupMsg} = hadoop     561  329  0.0 34477284 209264 ?     Sl   11:26   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 11:26:10.657" starttime="20191110 11:26:10.548"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:26:10.690" starttime="20191110 11:26:10.657"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:10.691" starttime="20191110 11:26:10.690"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:10.691" starttime="20191110 11:26:07.154"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:10.691" starttime="20191110 11:25:14.528"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:26:10.696" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:26:13.082" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:26:13.082" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:13.082" starttime="20191110 11:26:10.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:26:13.083" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:13.083" starttime="20191110 11:26:13.083"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:26:13.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:26:13.084" starttime="20191110 11:26:13.084"></status>
</kw>
<msg timestamp="20191110 11:26:13.084" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:13.084" starttime="20191110 11:26:10.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 11:26:13.085" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:13.085" starttime="20191110 11:26:13.085"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:13.086" starttime="20191110 11:26:13.085"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:13.086" starttime="20191110 11:26:13.086"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 11:26:13.087" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 11:26:13.087" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:13.087" starttime="20191110 11:26:13.086"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 11:26:13.088" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191110 11:26:13.088" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 11:26:13.088" starttime="20191110 11:26:13.088"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 11:26:13.089" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191110 11:26:13.089" starttime="20191110 11:26:13.088"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 11:26:13.089" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191110 11:26:13.089" starttime="20191110 11:26:13.089"></status>
</kw>
<msg timestamp="20191110 11:26:13.090" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191110 11:26:13.090" starttime="20191110 11:26:10.692"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:26:13.091" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 11:26:13.091" starttime="20191110 11:26:13.090"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:13.092" starttime="20191110 11:26:13.091"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:26:13.094" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:26:14.294" level="INFO">Read output: Last login: Sun Nov 10 11:24:44 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:26:14.295" starttime="20191110 11:26:13.093"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:14.295" starttime="20191110 11:26:13.091"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 11:26:14.296" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 11:26:15.456" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:26:15.457" starttime="20191110 11:26:14.296"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 11:26:15.458" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:26:15.556" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:26:15.556" level="INFO">${shutdownMsg} = hadoop    1476  0.0  0.0   9556  1168 ?        Ss   11:26   0:00 bash -c sudo ps aux | grep om
hadoop    1478  0.0  0.0   9088   672 ?        S    11:26   0:00 grep om</msg>
<status status="PASS" endtime="20191110 11:26:15.556" starttime="20191110 11:26:15.457"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:26:15.621" starttime="20191110 11:26:15.557"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:15.622" starttime="20191110 11:26:15.622"></status>
</kw>
<msg timestamp="20191110 11:26:15.623" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191110 11:26:15.623" starttime="20191110 11:26:13.090"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:26:15.627" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:26:17.873" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:26:17.873" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:17.873" starttime="20191110 11:26:15.624"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:26:17.875" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:17.875" starttime="20191110 11:26:17.874"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:26:17.876" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:26:17.877" starttime="20191110 11:26:17.876"></status>
</kw>
<msg timestamp="20191110 11:26:17.877" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:17.877" starttime="20191110 11:26:15.624"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 11:26:17.878" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:17.879" starttime="20191110 11:26:17.878"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:17.880" starttime="20191110 11:26:17.879"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:17.881" starttime="20191110 11:26:17.880"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 11:26:17.882" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 11:26:17.882" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:17.882" starttime="20191110 11:26:17.881"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 11:26:17.883" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191110 11:26:17.883" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 11:26:17.883" starttime="20191110 11:26:17.882"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 11:26:17.884" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 11:26:17.884" starttime="20191110 11:26:17.884"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 11:26:17.885" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191110 11:26:17.886" starttime="20191110 11:26:17.885"></status>
</kw>
<msg timestamp="20191110 11:26:17.886" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191110 11:26:17.886" starttime="20191110 11:26:15.623"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:17.887" starttime="20191110 11:26:17.886"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 11:26:17.890" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191110 11:26:17.890" starttime="20191110 11:26:17.889"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 11:26:17.892" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191110 11:26:17.892" starttime="20191110 11:26:17.891"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 11:26:17.893" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191110 11:26:17.893" starttime="20191110 11:26:17.892"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:26:17.895" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:26:17.895" starttime="20191110 11:26:17.893"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:26:17.900" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:26:22.970" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:26:22.970" level="INFO">${output} = 2019-11-10 11:26:20 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 11:26:21 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191110 11:26:22.971" starttime="20191110 11:26:17.897"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:26:22.972" level="INFO">2019-11-10 11:26:20 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 11:26:21 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 11:26:21 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 11:26:22.973" starttime="20191110 11:26:22.971"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:26:22.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:26:22.974" starttime="20191110 11:26:22.973"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:22.974" starttime="20191110 11:26:17.896"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:26:22.979" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:26:25.484" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:26:25.484" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:26:25.484" starttime="20191110 11:26:22.976"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:26:25.485" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:26:25.485" starttime="20191110 11:26:25.485"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:26:25.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:26:25.486" starttime="20191110 11:26:25.486"></status>
</kw>
<msg timestamp="20191110 11:26:25.486" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:26:25.486" starttime="20191110 11:26:22.975"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:25.487" starttime="20191110 11:26:25.487"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:26:25.488" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:26:25.488" starttime="20191110 11:26:25.487"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:25.488" starttime="20191110 11:26:17.888"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:26:25.490" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 11:26:25.490" starttime="20191110 11:26:25.489"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:25.491" starttime="20191110 11:26:25.490"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:26:25.491" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:26:26.697" level="INFO">Read output: Last login: Sun Nov 10 11:26:13 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:26:26.697" starttime="20191110 11:26:25.491"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:26.698" starttime="20191110 11:26:25.490"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 11:26:26.699" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 11:26:28.872" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:26:28.872" starttime="20191110 11:26:26.699"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 11:26:28.874" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:26:28.982" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:26:28.982" level="INFO">${startupMsg} = hadoop    1528  230  0.0 34476468 201204 ?     Sl   11:26   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 11:26:28.982" starttime="20191110 11:26:28.873"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:26:29.048" starttime="20191110 11:26:28.983"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:29.049" starttime="20191110 11:26:29.048"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:29.049" starttime="20191110 11:26:25.488"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:29.049" starttime="20191110 11:26:10.692"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:26:29.053" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:26:30.998" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:26:30.998" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:30.998" starttime="20191110 11:26:29.051"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:26:30.999" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:30.999" starttime="20191110 11:26:30.998"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:26:31.000" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:26:31.000" starttime="20191110 11:26:30.999"></status>
</kw>
<msg timestamp="20191110 11:26:31.000" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:31.000" starttime="20191110 11:26:29.050"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 11:26:31.001" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:31.001" starttime="20191110 11:26:31.000"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:31.001" starttime="20191110 11:26:31.001"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:31.002" starttime="20191110 11:26:31.001"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 11:26:31.002" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 11:26:31.002" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:31.002" starttime="20191110 11:26:31.002"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 11:26:31.003" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191110 11:26:31.003" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 11:26:31.003" starttime="20191110 11:26:31.003"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 11:26:31.004" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 11:26:31.004" starttime="20191110 11:26:31.003"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 11:26:31.004" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191110 11:26:31.004" starttime="20191110 11:26:31.004"></status>
</kw>
<msg timestamp="20191110 11:26:31.005" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 11:26:31.005" starttime="20191110 11:26:29.050"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:26:31.006" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191110 11:26:31.006" starttime="20191110 11:26:31.005"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:31.007" starttime="20191110 11:26:31.007"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:26:31.008" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:26:32.207" level="INFO">Read output: Last login: Sun Nov 10 11:25:11 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:26:32.207" starttime="20191110 11:26:31.007"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:32.208" starttime="20191110 11:26:31.006"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 11:26:32.209" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 11:26:33.359" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:26:33.359" starttime="20191110 11:26:32.208"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 11:26:33.361" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:26:33.470" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:26:33.470" level="INFO">${shutdownMsg} = hadoop    1075  0.0  0.0   9556  1168 ?        Ss   11:26   0:00 bash -c sudo ps aux | grep om
hadoop    1077  0.0  0.0   9088   672 ?        S    11:26   0:00 grep om</msg>
<status status="PASS" endtime="20191110 11:26:33.470" starttime="20191110 11:26:33.360"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:26:33.535" starttime="20191110 11:26:33.470"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:33.536" starttime="20191110 11:26:33.536"></status>
</kw>
<msg timestamp="20191110 11:26:33.537" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191110 11:26:33.537" starttime="20191110 11:26:31.005"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:26:33.540" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:26:35.705" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:26:35.705" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:35.705" starttime="20191110 11:26:33.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:26:35.707" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:35.707" starttime="20191110 11:26:35.706"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:26:35.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:26:35.708" starttime="20191110 11:26:35.707"></status>
</kw>
<msg timestamp="20191110 11:26:35.708" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:35.708" starttime="20191110 11:26:33.537"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 11:26:35.709" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:35.709" starttime="20191110 11:26:35.708"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:35.710" starttime="20191110 11:26:35.709"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:35.710" starttime="20191110 11:26:35.710"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 11:26:35.711" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 11:26:35.711" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:35.711" starttime="20191110 11:26:35.711"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 11:26:35.712" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191110 11:26:35.712" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 11:26:35.712" starttime="20191110 11:26:35.712"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 11:26:35.713" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191110 11:26:35.713" starttime="20191110 11:26:35.713"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 11:26:35.714" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191110 11:26:35.714" starttime="20191110 11:26:35.713"></status>
</kw>
<msg timestamp="20191110 11:26:35.714" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191110 11:26:35.714" starttime="20191110 11:26:33.537"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:35.715" starttime="20191110 11:26:35.715"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 11:26:35.717" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191110 11:26:35.717" starttime="20191110 11:26:35.716"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 11:26:35.718" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191110 11:26:35.718" starttime="20191110 11:26:35.717"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 11:26:35.719" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191110 11:26:35.719" starttime="20191110 11:26:35.718"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:26:35.721" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:26:35.721" starttime="20191110 11:26:35.719"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:26:35.724" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:26:40.343" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:26:40.343" level="INFO">${output} = 2019-11-10 11:26:38 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 11:26:38 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191110 11:26:40.343" starttime="20191110 11:26:35.722"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:26:40.345" level="INFO">2019-11-10 11:26:38 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 11:26:38 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 11:26:38 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 11:26:40.345" starttime="20191110 11:26:40.344"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:26:40.346" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:26:40.346" starttime="20191110 11:26:40.345"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:40.347" starttime="20191110 11:26:35.721"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:26:40.352" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:26:42.682" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:26:42.682" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:26:42.682" starttime="20191110 11:26:40.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:26:42.684" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:26:42.684" starttime="20191110 11:26:42.683"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:26:42.685" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:26:42.686" starttime="20191110 11:26:42.685"></status>
</kw>
<msg timestamp="20191110 11:26:42.686" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:26:42.686" starttime="20191110 11:26:40.347"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:42.687" starttime="20191110 11:26:42.687"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:26:42.689" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:26:42.690" starttime="20191110 11:26:42.688"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:42.690" starttime="20191110 11:26:35.715"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:26:42.692" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191110 11:26:42.692" starttime="20191110 11:26:42.691"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:42.694" starttime="20191110 11:26:42.693"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:26:42.695" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:26:43.900" level="INFO">Read output: Last login: Sun Nov 10 11:26:31 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:26:43.901" starttime="20191110 11:26:42.694"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:43.901" starttime="20191110 11:26:42.692"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 11:26:43.902" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 11:26:46.081" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:26:46.082" starttime="20191110 11:26:43.902"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 11:26:46.083" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:26:46.181" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:26:46.181" level="INFO">${startupMsg} = hadoop    1126  350  0.0 34476192 212908 ?     Sl   11:26   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 11:26:46.182" starttime="20191110 11:26:46.083"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:26:46.247" starttime="20191110 11:26:46.182"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:46.248" starttime="20191110 11:26:46.247"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:46.248" starttime="20191110 11:26:42.690"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:46.248" starttime="20191110 11:26:29.049"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:26:46.251" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:26:48.119" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:26:48.119" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:48.120" starttime="20191110 11:26:46.249"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:26:48.121" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:48.121" starttime="20191110 11:26:48.120"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:26:48.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:26:48.121" starttime="20191110 11:26:48.121"></status>
</kw>
<msg timestamp="20191110 11:26:48.122" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:48.122" starttime="20191110 11:26:46.249"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 11:26:48.122" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:48.122" starttime="20191110 11:26:48.122"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:48.123" starttime="20191110 11:26:48.123"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:48.123" starttime="20191110 11:26:48.123"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 11:26:48.124" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 11:26:48.124" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191110 11:26:48.124" starttime="20191110 11:26:48.124"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 11:26:48.125" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191110 11:26:48.125" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 11:26:48.125" starttime="20191110 11:26:48.124"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 11:26:48.125" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191110 11:26:48.125" starttime="20191110 11:26:48.125"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 11:26:48.126" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191110 11:26:48.126" starttime="20191110 11:26:48.126"></status>
</kw>
<msg timestamp="20191110 11:26:48.126" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191110 11:26:48.126" starttime="20191110 11:26:46.249"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:26:48.127" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191110 11:26:48.128" starttime="20191110 11:26:48.127"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:48.129" starttime="20191110 11:26:48.128"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:26:48.130" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:26:49.317" level="INFO">Read output: Last login: Sun Nov 10 11:26:07 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:26:49.317" starttime="20191110 11:26:48.129"></status>
</kw>
<status status="PASS" endtime="20191110 11:26:49.317" starttime="20191110 11:26:48.128"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 11:26:49.319" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 11:26:50.479" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:26:50.479" starttime="20191110 11:26:49.318"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 11:26:50.481" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:26:50.589" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:26:50.589" level="INFO">${shutdownMsg} = hadoop    1057  0.0  0.0   9556  1168 ?        Ss   11:26   0:00 bash -c sudo ps aux | grep om
hadoop    1059  0.0  0.0   9088   672 ?        S    11:26   0:00 grep om</msg>
<status status="PASS" endtime="20191110 11:26:50.590" starttime="20191110 11:26:50.480"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:26:50.655" starttime="20191110 11:26:50.590"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:26:50.656" starttime="20191110 11:26:50.656"></status>
</kw>
<msg timestamp="20191110 11:26:50.657" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191110 11:26:50.657" starttime="20191110 11:26:48.126"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:26:50.661" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:27:02.875" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:27:02.875" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:27:02.876" starttime="20191110 11:26:50.658"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:27:02.878" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:27:02.878" starttime="20191110 11:27:02.876"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:27:02.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:27:02.879" starttime="20191110 11:27:02.878"></status>
</kw>
<msg timestamp="20191110 11:27:02.880" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:27:02.880" starttime="20191110 11:26:50.658"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 11:27:02.881" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:27:02.881" starttime="20191110 11:27:02.881"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 11:27:02.882" starttime="20191110 11:27:02.882"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 11:27:02.883" starttime="20191110 11:27:02.883"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 11:27:02.884" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 11:27:02.885" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191110 11:27:02.885" starttime="20191110 11:27:02.884"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 11:27:02.886" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191110 11:27:02.886" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 11:27:02.886" starttime="20191110 11:27:02.885"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 11:27:02.887" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191110 11:27:02.887" starttime="20191110 11:27:02.886"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 11:27:02.888" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191110 11:27:02.888" starttime="20191110 11:27:02.888"></status>
</kw>
<msg timestamp="20191110 11:27:02.889" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191110 11:27:02.889" starttime="20191110 11:26:50.657"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191110 11:27:02.890" starttime="20191110 11:27:02.889"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 11:27:02.892" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191110 11:27:02.892" starttime="20191110 11:27:02.891"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 11:27:02.893" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191110 11:27:02.894" starttime="20191110 11:27:02.892"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 11:27:02.895" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191110 11:27:02.895" starttime="20191110 11:27:02.894"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:27:02.898" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:27:02.899" starttime="20191110 11:27:02.895"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:27:02.903" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:27:17.744" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:27:17.744" level="INFO">${output} = 2019-11-10 11:27:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191110 11:27:17.744" starttime="20191110 11:27:02.900"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:27:17.746" level="INFO">2019-11-10 11:27:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:27:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:27:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:27:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:27:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:27:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:27:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:27:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:27:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:27:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 11:27:15 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 11:27:16 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 11:27:16 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 11:27:17.746" starttime="20191110 11:27:17.745"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:27:17.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:27:17.748" starttime="20191110 11:27:17.747"></status>
</kw>
<status status="PASS" endtime="20191110 11:27:17.748" starttime="20191110 11:27:02.899"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 11:27:17.753" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 11:27:30.103" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 11:27:30.104" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:27:30.104" starttime="20191110 11:27:17.750"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 11:27:30.106" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:27:30.106" starttime="20191110 11:27:30.105"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 11:27:30.107" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 11:27:30.107" starttime="20191110 11:27:30.106"></status>
</kw>
<msg timestamp="20191110 11:27:30.108" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 11:27:30.108" starttime="20191110 11:27:17.749"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:27:30.109" starttime="20191110 11:27:30.108"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 11:27:30.110" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 11:27:30.110" starttime="20191110 11:27:30.109"></status>
</kw>
<status status="PASS" endtime="20191110 11:27:30.111" starttime="20191110 11:27:02.890"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 11:27:30.113" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191110 11:27:30.113" starttime="20191110 11:27:30.112"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 11:27:30.115" starttime="20191110 11:27:30.114"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 11:27:30.116" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191110 11:27:31.321" level="INFO">Read output: Last login: Sun Nov 10 11:26:48 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 11:27:31.322" starttime="20191110 11:27:30.115"></status>
</kw>
<status status="PASS" endtime="20191110 11:27:31.322" starttime="20191110 11:27:30.113"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 11:27:31.323" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 11:27:33.493" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 11:27:33.493" starttime="20191110 11:27:31.323"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 11:27:33.494" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 11:27:33.592" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 11:27:33.592" level="INFO">${startupMsg} = hadoop    1108  338  0.0 34475060 207680 ?     Sl   11:27   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 11:27:33.592" starttime="20191110 11:27:33.494"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 11:27:33.657" starttime="20191110 11:27:33.593"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 11:27:33.659" starttime="20191110 11:27:33.658"></status>
</kw>
<status status="PASS" endtime="20191110 11:27:33.659" starttime="20191110 11:27:30.111"></status>
</kw>
<status status="PASS" endtime="20191110 11:27:33.659" starttime="20191110 11:26:46.248"></status>
</kw>
<status status="PASS" endtime="20191110 11:27:33.659" starttime="20191110 11:24:45.825"></status>
</kw>
<status status="PASS" endtime="20191110 11:27:33.659" critical="yes" starttime="20191110 11:24:45.825"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191110 11:27:33.661" starttime="20191110 11:23:18.146"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
