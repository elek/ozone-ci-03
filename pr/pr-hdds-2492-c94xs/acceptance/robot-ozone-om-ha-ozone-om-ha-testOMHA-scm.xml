<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 04:48:33.154" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 04:48:33.324" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 04:48:35.910" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 04:48:35.910" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 04:48:35.911" starttime="20191115 04:48:33.322"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 04:48:35.912" level="INFO"></msg>
<status status="PASS" endtime="20191115 04:48:35.912" starttime="20191115 04:48:35.911"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 04:48:35.913" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 04:48:35.913" starttime="20191115 04:48:35.912"></status>
</kw>
<status status="PASS" endtime="20191115 04:48:35.913" starttime="20191115 04:48:33.321"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 04:48:35.919" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 04:48:37.948" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 04:48:37.948" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 04:48:37.948" starttime="20191115 04:48:35.917"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 04:48:37.949" level="INFO"></msg>
<status status="PASS" endtime="20191115 04:48:37.949" starttime="20191115 04:48:37.949"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 04:48:37.950" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 04:48:37.950" starttime="20191115 04:48:37.949"></status>
</kw>
<status status="PASS" endtime="20191115 04:48:37.950" starttime="20191115 04:48:35.913"></status>
</kw>
<status status="PASS" endtime="20191115 04:48:37.950" starttime="20191115 04:48:33.321"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 04:48:37.951" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191115 04:48:37.951" starttime="20191115 04:48:37.951"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 04:48:37.952" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191115 04:48:37.952" starttime="20191115 04:48:37.952"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 04:48:37.953" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191115 04:48:37.953" starttime="20191115 04:48:37.952"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 04:48:37.954" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 04:48:37.954" starttime="20191115 04:48:37.953"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 04:48:37.957" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 04:48:42.731" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 04:48:42.731" level="INFO">${output} = 2019-11-15 04:48:40 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 04:48:40 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 04:48:42.731" starttime="20191115 04:48:37.955"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 04:48:42.733" level="INFO">2019-11-15 04:48:40 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 04:48:40 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 04:48:40 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 04:48:42.733" starttime="20191115 04:48:42.732"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 04:48:42.734" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 04:48:42.734" starttime="20191115 04:48:42.733"></status>
</kw>
<status status="PASS" endtime="20191115 04:48:42.735" starttime="20191115 04:48:37.955"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 04:48:42.739" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 04:48:44.848" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 04:48:44.848" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191115 04:48:44.849" starttime="20191115 04:48:42.736"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 04:48:44.850" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191115 04:48:44.850" starttime="20191115 04:48:44.849"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 04:48:44.851" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 04:48:44.851" starttime="20191115 04:48:44.850"></status>
</kw>
<msg timestamp="20191115 04:48:44.851" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191115 04:48:44.851" starttime="20191115 04:48:42.735"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:44.852" starttime="20191115 04:48:44.851"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 04:48:44.853" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 04:48:44.853" starttime="20191115 04:48:44.852"></status>
</kw>
<status status="PASS" endtime="20191115 04:48:44.853" starttime="20191115 04:48:37.950"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 04:48:44.856" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 04:48:46.848" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 04:48:46.848" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:46.848" starttime="20191115 04:48:44.854"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 04:48:46.849" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:46.849" starttime="20191115 04:48:46.849"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 04:48:46.850" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 04:48:46.850" starttime="20191115 04:48:46.849"></status>
</kw>
<msg timestamp="20191115 04:48:46.850" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:46.850" starttime="20191115 04:48:44.854"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 04:48:46.851" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:46.851" starttime="20191115 04:48:46.851"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:46.852" starttime="20191115 04:48:46.851"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:46.852" starttime="20191115 04:48:46.852"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 04:48:46.853" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 04:48:46.853" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:46.853" starttime="20191115 04:48:46.853"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 04:48:46.854" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 04:48:46.854" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 04:48:46.854" starttime="20191115 04:48:46.853"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 04:48:46.854" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 04:48:46.854" starttime="20191115 04:48:46.854"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 04:48:46.855" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 04:48:46.855" starttime="20191115 04:48:46.855"></status>
</kw>
<msg timestamp="20191115 04:48:46.855" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 04:48:46.855" starttime="20191115 04:48:44.853"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 04:48:46.856" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 04:48:46.857" starttime="20191115 04:48:46.856"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:46.858" starttime="20191115 04:48:46.857"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 04:48:46.858" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 04:48:48.097" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 04:48:48.098" starttime="20191115 04:48:46.858"></status>
</kw>
<status status="PASS" endtime="20191115 04:48:48.098" starttime="20191115 04:48:46.857"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 04:48:48.099" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 04:48:48.113" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 04:48:48.114" starttime="20191115 04:48:48.098"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 04:48:48.114" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 04:48:48.191" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 04:48:48.191" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 04:48:48.191" starttime="20191115 04:48:48.114"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 04:48:48.306" starttime="20191115 04:48:48.192"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:48.307" starttime="20191115 04:48:48.307"></status>
</kw>
<msg timestamp="20191115 04:48:48.308" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 04:48:48.308" starttime="20191115 04:48:46.855"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 04:48:48.312" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 04:48:50.311" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 04:48:50.311" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:50.311" starttime="20191115 04:48:48.310"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 04:48:50.313" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:50.313" starttime="20191115 04:48:50.312"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 04:48:50.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 04:48:50.314" starttime="20191115 04:48:50.313"></status>
</kw>
<msg timestamp="20191115 04:48:50.314" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:50.314" starttime="20191115 04:48:48.309"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 04:48:50.314" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:50.315" starttime="20191115 04:48:50.314"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:50.315" starttime="20191115 04:48:50.315"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:50.316" starttime="20191115 04:48:50.315"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 04:48:50.316" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 04:48:50.316" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:50.316" starttime="20191115 04:48:50.316"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 04:48:50.317" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 04:48:50.317" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 04:48:50.317" starttime="20191115 04:48:50.317"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 04:48:50.318" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 04:48:50.318" starttime="20191115 04:48:50.317"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 04:48:50.318" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 04:48:50.318" starttime="20191115 04:48:50.318"></status>
</kw>
<msg timestamp="20191115 04:48:50.319" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 04:48:50.319" starttime="20191115 04:48:48.308"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 04:48:50.320" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 04:48:50.320" starttime="20191115 04:48:50.319"></status>
</kw>
<status status="FAIL" endtime="20191115 04:48:50.320" critical="yes" starttime="20191115 04:48:33.320">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 04:48:50.322" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 04:48:50.323" starttime="20191115 04:48:50.321"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 04:48:50.324" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 04:48:50.324" starttime="20191115 04:48:50.323"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 04:48:50.325" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 04:48:50.325" starttime="20191115 04:48:50.325"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:50.327" starttime="20191115 04:48:50.326"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 04:48:50.327" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 04:48:51.532" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 04:48:51.533" starttime="20191115 04:48:50.327"></status>
</kw>
<status status="PASS" endtime="20191115 04:48:51.533" starttime="20191115 04:48:50.325"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 04:48:51.534" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 04:48:51.550" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 04:48:51.550" starttime="20191115 04:48:51.533"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 04:48:51.551" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 04:48:51.628" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 04:48:51.629" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 04:48:51.629" starttime="20191115 04:48:51.550"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 04:48:51.744" starttime="20191115 04:48:51.629"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:51.746" starttime="20191115 04:48:51.745"></status>
</kw>
<status status="PASS" endtime="20191115 04:48:51.746" starttime="20191115 04:48:50.324"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 04:48:51.748" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 04:48:51.748" starttime="20191115 04:48:51.747"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:51.750" starttime="20191115 04:48:51.749"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 04:48:51.751" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 04:48:52.957" level="INFO">Read output: Last login: Fri Nov 15 04:48:50 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 04:48:52.957" starttime="20191115 04:48:51.750"></status>
</kw>
<status status="PASS" endtime="20191115 04:48:52.958" starttime="20191115 04:48:51.748"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 04:48:52.960" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 04:48:52.976" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 04:48:52.977" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191115 04:48:52.977" starttime="20191115 04:48:52.959"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 04:48:52.978" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191115 04:48:52.978" starttime="20191115 04:48:52.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 04:48:52.980" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191115 04:48:52.980" starttime="20191115 04:48:52.979"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 04:48:53.027" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191115 04:48:53.028" starttime="20191115 04:48:52.981"></status>
</kw>
<status status="FAIL" endtime="20191115 04:48:53.028" starttime="20191115 04:48:51.746"></status>
</kw>
<status status="FAIL" endtime="20191115 04:48:53.028" critical="yes" starttime="20191115 04:48:50.320">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 04:48:53.035" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 04:48:55.081" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 04:48:55.081" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:55.081" starttime="20191115 04:48:53.032"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 04:48:55.083" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:55.083" starttime="20191115 04:48:55.082"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 04:48:55.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 04:48:55.085" starttime="20191115 04:48:55.084"></status>
</kw>
<msg timestamp="20191115 04:48:55.085" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:55.086" starttime="20191115 04:48:53.031"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 04:48:55.086" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:55.087" starttime="20191115 04:48:55.086"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:55.088" starttime="20191115 04:48:55.087"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:55.088" starttime="20191115 04:48:55.088"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 04:48:55.089" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 04:48:55.090" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:55.090" starttime="20191115 04:48:55.089"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 04:48:55.091" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 04:48:55.091" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 04:48:55.091" starttime="20191115 04:48:55.090"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 04:48:55.092" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 04:48:55.092" starttime="20191115 04:48:55.091"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 04:48:55.093" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 04:48:55.093" starttime="20191115 04:48:55.092"></status>
</kw>
<msg timestamp="20191115 04:48:55.093" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 04:48:55.093" starttime="20191115 04:48:53.031"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 04:48:55.095" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 04:48:55.096" starttime="20191115 04:48:55.095"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:55.097" starttime="20191115 04:48:55.096"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 04:48:55.098" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 04:48:56.303" level="INFO">Read output: Last login: Fri Nov 15 04:48:47 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 04:48:56.303" starttime="20191115 04:48:55.098"></status>
</kw>
<status status="PASS" endtime="20191115 04:48:56.304" starttime="20191115 04:48:55.096"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 04:48:56.305" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 04:48:56.319" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 04:48:56.319" starttime="20191115 04:48:56.304"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 04:48:56.320" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 04:48:56.397" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 04:48:56.398" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 04:48:56.398" starttime="20191115 04:48:56.320"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 04:48:56.513" starttime="20191115 04:48:56.398"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:56.514" starttime="20191115 04:48:56.513"></status>
</kw>
<msg timestamp="20191115 04:48:56.514" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 04:48:56.514" starttime="20191115 04:48:55.094"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 04:48:56.519" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 04:48:58.527" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 04:48:58.527" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:58.527" starttime="20191115 04:48:56.516"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 04:48:58.528" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:58.528" starttime="20191115 04:48:58.528"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 04:48:58.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 04:48:58.529" starttime="20191115 04:48:58.529"></status>
</kw>
<msg timestamp="20191115 04:48:58.530" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:58.530" starttime="20191115 04:48:56.515"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 04:48:58.530" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:58.531" starttime="20191115 04:48:58.530"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:58.531" starttime="20191115 04:48:58.531"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 04:48:58.532" starttime="20191115 04:48:58.531"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 04:48:58.532" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 04:48:58.533" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 04:48:58.533" starttime="20191115 04:48:58.532"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 04:48:58.533" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 04:48:58.533" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 04:48:58.534" starttime="20191115 04:48:58.533"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 04:48:58.534" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 04:48:58.534" starttime="20191115 04:48:58.534"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 04:48:58.535" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 04:48:58.535" starttime="20191115 04:48:58.534"></status>
</kw>
<msg timestamp="20191115 04:48:58.535" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 04:48:58.535" starttime="20191115 04:48:56.515"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 04:48:58.536" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 04:48:58.537" starttime="20191115 04:48:58.536"></status>
</kw>
<status status="FAIL" endtime="20191115 04:48:58.537" starttime="20191115 04:48:53.030"></status>
</kw>
<status status="FAIL" endtime="20191115 04:48:58.537" starttime="20191115 04:48:53.030"></status>
</kw>
<status status="FAIL" endtime="20191115 04:48:58.537" critical="yes" starttime="20191115 04:48:53.029">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191115 04:48:58.538" starttime="20191115 04:48:33.155"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
