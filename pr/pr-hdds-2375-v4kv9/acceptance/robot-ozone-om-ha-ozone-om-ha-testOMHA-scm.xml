<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191108 16:31:06.153" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:31:06.343" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:31:09.078" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:31:09.078" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191108 16:31:09.078" starttime="20191108 16:31:06.342"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:31:09.080" level="INFO"></msg>
<status status="PASS" endtime="20191108 16:31:09.080" starttime="20191108 16:31:09.079"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:31:09.081" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:31:09.081" starttime="20191108 16:31:09.080"></status>
</kw>
<status status="PASS" endtime="20191108 16:31:09.081" starttime="20191108 16:31:06.341"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:31:09.087" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:31:11.149" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:31:11.149" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191108 16:31:11.149" starttime="20191108 16:31:09.085"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:31:11.150" level="INFO"></msg>
<status status="PASS" endtime="20191108 16:31:11.150" starttime="20191108 16:31:11.150"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:31:11.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:31:11.151" starttime="20191108 16:31:11.151"></status>
</kw>
<status status="PASS" endtime="20191108 16:31:11.151" starttime="20191108 16:31:09.081"></status>
</kw>
<status status="PASS" endtime="20191108 16:31:11.151" starttime="20191108 16:31:06.341"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 16:31:11.153" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191108 16:31:11.153" starttime="20191108 16:31:11.152"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 16:31:11.153" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191108 16:31:11.153" starttime="20191108 16:31:11.153"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 16:31:11.154" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191108 16:31:11.154" starttime="20191108 16:31:11.154"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:31:11.167" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:31:11.167" starttime="20191108 16:31:11.154"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:31:11.171" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:31:16.208" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:31:16.209" level="INFO">${output} = 2019-11-08 16:31:14 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 16:31:14 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191108 16:31:16.209" starttime="20191108 16:31:11.169"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:31:16.210" level="INFO">2019-11-08 16:31:14 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 16:31:14 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 16:31:14 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:31:16.210" starttime="20191108 16:31:16.209"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:31:16.211" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:31:16.211" starttime="20191108 16:31:16.210"></status>
</kw>
<status status="PASS" endtime="20191108 16:31:16.211" starttime="20191108 16:31:11.168"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:31:16.215" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:31:18.577" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:31:18.577" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191108 16:31:18.577" starttime="20191108 16:31:16.212"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:31:18.579" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191108 16:31:18.579" starttime="20191108 16:31:18.578"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:31:18.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:31:18.580" starttime="20191108 16:31:18.579"></status>
</kw>
<msg timestamp="20191108 16:31:18.580" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191108 16:31:18.580" starttime="20191108 16:31:16.211"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:31:18.581" starttime="20191108 16:31:18.581"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:31:18.582" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:31:18.582" starttime="20191108 16:31:18.581"></status>
</kw>
<status status="PASS" endtime="20191108 16:31:18.582" starttime="20191108 16:31:11.152"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:31:18.586" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:31:20.685" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:31:20.685" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:31:20.685" starttime="20191108 16:31:18.584"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:31:20.686" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:31:20.686" starttime="20191108 16:31:20.686"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:31:20.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:31:20.687" starttime="20191108 16:31:20.687"></status>
</kw>
<msg timestamp="20191108 16:31:20.687" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:31:20.687" starttime="20191108 16:31:18.583"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 16:31:20.688" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:31:20.688" starttime="20191108 16:31:20.688"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 16:31:20.689" starttime="20191108 16:31:20.688"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 16:31:20.689" starttime="20191108 16:31:20.689"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 16:31:20.690" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 16:31:20.690" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:31:20.690" starttime="20191108 16:31:20.690"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 16:31:20.691" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 16:31:20.691" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 16:31:20.691" starttime="20191108 16:31:20.690"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 16:31:20.691" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 16:31:20.692" starttime="20191108 16:31:20.691"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 16:31:20.692" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 16:31:20.692" starttime="20191108 16:31:20.692"></status>
</kw>
<msg timestamp="20191108 16:31:20.692" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 16:31:20.692" starttime="20191108 16:31:18.583"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:31:20.694" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 16:31:20.694" starttime="20191108 16:31:20.693"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:31:20.695" starttime="20191108 16:31:20.694"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:31:20.695" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:31:21.948" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:31:21.949" starttime="20191108 16:31:20.695"></status>
</kw>
<status status="PASS" endtime="20191108 16:31:21.949" starttime="20191108 16:31:20.694"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 16:31:21.950" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 16:31:32.118" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:31:32.118" starttime="20191108 16:31:21.950"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 16:31:32.119" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:31:32.227" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:31:32.227" level="INFO">${shutdownMsg} = hadoop     459  0.0  0.0   9556  1164 ?        Ss   16:31   0:00 bash -c sudo ps aux | grep om
hadoop     461  0.0  0.0   9088   672 ?        S    16:31   0:00 grep om</msg>
<status status="PASS" endtime="20191108 16:31:32.228" starttime="20191108 16:31:32.119"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:31:32.261" starttime="20191108 16:31:32.228"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:31:32.262" starttime="20191108 16:31:32.261"></status>
</kw>
<msg timestamp="20191108 16:31:32.262" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 16:31:32.262" starttime="20191108 16:31:20.693"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:31:32.267" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:31:44.429" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:31:44.429" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:31:44.429" starttime="20191108 16:31:32.264"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:31:44.431" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:31:44.431" starttime="20191108 16:31:44.430"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:31:44.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:31:44.432" starttime="20191108 16:31:44.431"></status>
</kw>
<msg timestamp="20191108 16:31:44.432" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:31:44.432" starttime="20191108 16:31:32.263"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 16:31:44.433" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:31:44.433" starttime="20191108 16:31:44.433"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 16:31:44.434" starttime="20191108 16:31:44.434"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 16:31:44.435" starttime="20191108 16:31:44.434"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 16:31:44.436" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 16:31:44.436" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:31:44.436" starttime="20191108 16:31:44.435"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 16:31:44.437" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191108 16:31:44.437" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 16:31:44.437" starttime="20191108 16:31:44.436"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 16:31:44.438" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 16:31:44.438" starttime="20191108 16:31:44.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 16:31:44.439" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191108 16:31:44.439" starttime="20191108 16:31:44.438"></status>
</kw>
<msg timestamp="20191108 16:31:44.439" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191108 16:31:44.439" starttime="20191108 16:31:32.263"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191108 16:31:44.440" starttime="20191108 16:31:44.440"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 16:31:44.442" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191108 16:31:44.442" starttime="20191108 16:31:44.441"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 16:31:44.443" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191108 16:31:44.443" starttime="20191108 16:31:44.442"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 16:31:44.444" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191108 16:31:44.444" starttime="20191108 16:31:44.443"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:31:44.446" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:31:44.446" starttime="20191108 16:31:44.444"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:31:44.450" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:31:59.436" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:31:59.436" level="INFO">${output} = 2019-11-08 16:31:47 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191108 16:31:59.436" starttime="20191108 16:31:44.447"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:31:59.438" level="INFO">2019-11-08 16:31:47 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:31:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:31:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:31:50 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:31:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:31:52 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:31:53 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:31:54 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:31:55 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:31:56 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:31:56 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-08 16:31:57 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 16:31:57 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 16:31:57 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:31:59.438" starttime="20191108 16:31:59.437"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:31:59.439" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:31:59.439" starttime="20191108 16:31:59.438"></status>
</kw>
<status status="PASS" endtime="20191108 16:31:59.440" starttime="20191108 16:31:44.446"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:31:59.444" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:32:11.796" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:32:11.796" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191108 16:32:11.796" starttime="20191108 16:31:59.441"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:32:11.798" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191108 16:32:11.798" starttime="20191108 16:32:11.797"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:32:11.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:32:11.799" starttime="20191108 16:32:11.798"></status>
</kw>
<msg timestamp="20191108 16:32:11.800" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191108 16:32:11.800" starttime="20191108 16:31:59.440"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:32:11.801" starttime="20191108 16:32:11.800"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:32:11.802" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:32:11.802" starttime="20191108 16:32:11.801"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:11.803" starttime="20191108 16:31:44.441"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:32:11.805" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 16:32:11.805" starttime="20191108 16:32:11.804"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:32:11.807" starttime="20191108 16:32:11.806"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:32:11.808" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:32:12.998" level="INFO">Read output: Last login: Fri Nov  8 16:31:20 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:32:12.999" starttime="20191108 16:32:11.807"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:12.999" starttime="20191108 16:32:11.805"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 16:32:13.000" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 16:32:15.179" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:32:15.179" starttime="20191108 16:32:13.000"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 16:32:15.180" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:32:15.245" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:32:15.245" level="INFO">${startupMsg} = hadoop     512  362  0.0 34484704 262780 ?     Sl   16:32   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 16:32:15.245" starttime="20191108 16:32:15.180"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:32:15.278" starttime="20191108 16:32:15.246"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:32:15.279" starttime="20191108 16:32:15.279"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:15.279" starttime="20191108 16:32:11.803"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:15.279" critical="yes" starttime="20191108 16:31:06.340"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191108 16:32:15.282" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191108 16:32:15.282" starttime="20191108 16:32:15.280"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191108 16:32:15.283" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191108 16:32:15.283" starttime="20191108 16:32:15.282"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:32:15.284" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 16:32:15.285" starttime="20191108 16:32:15.284"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:32:15.286" starttime="20191108 16:32:15.285"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:32:15.286" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:32:16.483" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:32:16.483" starttime="20191108 16:32:15.286"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:16.484" starttime="20191108 16:32:15.285"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 16:32:16.485" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 16:32:26.647" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:32:26.647" starttime="20191108 16:32:16.484"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 16:32:26.649" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:32:26.725" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:32:26.725" level="INFO">${shutdownMsg} = hadoop     435  0.0  0.0   9556  1168 ?        Ss   16:32   0:00 bash -c sudo ps aux | grep om
hadoop     437  0.0  0.0   9088   672 ?        S    16:32   0:00 grep om</msg>
<status status="PASS" endtime="20191108 16:32:26.725" starttime="20191108 16:32:26.648"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:32:26.791" starttime="20191108 16:32:26.726"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:32:26.792" starttime="20191108 16:32:26.791"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:26.792" starttime="20191108 16:32:15.283"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:32:26.794" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 16:32:26.795" starttime="20191108 16:32:26.794"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:32:26.796" starttime="20191108 16:32:26.796"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:32:26.797" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:32:28.002" level="INFO">Read output: Last login: Fri Nov  8 16:32:15 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:32:28.003" starttime="20191108 16:32:26.797"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:28.003" starttime="20191108 16:32:26.795"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 16:32:28.004" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 16:32:28.020" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:32:28.021" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 16:32:28.021" starttime="20191108 16:32:28.004"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 16:32:28.022" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 16:32:28.022" starttime="20191108 16:32:28.021"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 16:32:28.023" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191108 16:32:28.024" starttime="20191108 16:32:28.023"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 16:32:28.103" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191108 16:32:28.115" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191108 16:32:28.116" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191108 16:32:28.116" starttime="20191108 16:32:28.024"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191108 16:32:28.118" level="INFO">Length is 2</msg>
<msg timestamp="20191108 16:32:28.118" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191108 16:32:28.118" starttime="20191108 16:32:28.116"></status>
</kw>
<msg timestamp="20191108 16:32:28.118" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191108 16:32:28.119" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191108 16:32:28.119" starttime="20191108 16:32:26.792"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:32:28.123" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:32:30.221" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:32:30.221" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:32:30.221" starttime="20191108 16:32:28.120"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:32:30.222" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:32:30.222" starttime="20191108 16:32:30.222"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:32:30.223" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:32:30.223" starttime="20191108 16:32:30.223"></status>
</kw>
<msg timestamp="20191108 16:32:30.224" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:32:30.224" starttime="20191108 16:32:28.120"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 16:32:30.224" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:32:30.225" starttime="20191108 16:32:30.224"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 16:32:30.225" starttime="20191108 16:32:30.225"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 16:32:30.226" starttime="20191108 16:32:30.226"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 16:32:30.227" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 16:32:30.227" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:32:30.227" starttime="20191108 16:32:30.226"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 16:32:30.228" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191108 16:32:30.228" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 16:32:30.228" starttime="20191108 16:32:30.227"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 16:32:30.229" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 16:32:30.229" starttime="20191108 16:32:30.228"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 16:32:30.229" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191108 16:32:30.230" starttime="20191108 16:32:30.229"></status>
</kw>
<msg timestamp="20191108 16:32:30.230" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 16:32:30.230" starttime="20191108 16:32:28.119"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191108 16:32:30.233" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191108 16:32:30.233" starttime="20191108 16:32:30.231"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:32:30.235" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191108 16:32:30.235" starttime="20191108 16:32:30.234"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:32:30.235" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191108 16:32:30.235" starttime="20191108 16:32:30.235"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:32:30.239" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:32:34.677" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:32:34.677" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:32:34.678" starttime="20191108 16:32:30.237"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:32:34.679" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:32:34.680" starttime="20191108 16:32:34.678"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:32:34.680" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:32:34.681" starttime="20191108 16:32:34.680"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:34.681" starttime="20191108 16:32:30.236"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:32:34.686" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:32:37.058" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:32:37.058" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573230752556,
  "modificationTime": 1573230754261,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:32:37.058" starttime="20191108 16:32:34.684"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:32:37.059" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573230752556,
  "modificationTime": 1573230754261,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103103250599378940,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:32:37.059" starttime="20191108 16:32:37.058"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:32:37.060" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:32:37.060" starttime="20191108 16:32:37.059"></status>
</kw>
<msg timestamp="20191108 16:32:37.060" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573230752556,
  "modificationTime": 1573230754261,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:32:37.060" starttime="20191108 16:32:34.681"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:32:37.061" starttime="20191108 16:32:37.060"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:37.061" starttime="20191108 16:32:30.236"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:37.061" starttime="20191108 16:32:30.234"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:32:37.062" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191108 16:32:37.062" starttime="20191108 16:32:37.061"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:32:37.062" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191108 16:32:37.062" starttime="20191108 16:32:37.062"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:32:37.066" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:32:41.658" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:32:41.658" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:32:41.659" starttime="20191108 16:32:37.064"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:32:41.660" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:32:41.660" starttime="20191108 16:32:41.659"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:32:41.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:32:41.661" starttime="20191108 16:32:41.660"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:41.661" starttime="20191108 16:32:37.063"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:32:41.665" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:32:44.005" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:32:44.005" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573230759361,
  "modificationTime": 1573230761242,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:32:44.005" starttime="20191108 16:32:41.663"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:32:44.006" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573230759361,
  "modificationTime": 1573230761242,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103103251045416960,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:32:44.006" starttime="20191108 16:32:44.005"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:32:44.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:32:44.007" starttime="20191108 16:32:44.006"></status>
</kw>
<msg timestamp="20191108 16:32:44.007" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573230759361,
  "modificationTime": 1573230761242,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:32:44.007" starttime="20191108 16:32:41.662"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:32:44.008" starttime="20191108 16:32:44.007"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:44.008" starttime="20191108 16:32:37.062"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:44.008" starttime="20191108 16:32:37.061"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:32:44.009" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191108 16:32:44.009" starttime="20191108 16:32:44.008"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:32:44.009" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191108 16:32:44.010" starttime="20191108 16:32:44.009"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:32:44.013" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:32:48.261" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:32:48.262" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:32:48.262" starttime="20191108 16:32:44.011"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:32:48.264" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:32:48.264" starttime="20191108 16:32:48.263"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:32:48.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:32:48.265" starttime="20191108 16:32:48.264"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:48.265" starttime="20191108 16:32:44.011"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:32:48.270" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:32:50.519" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:32:50.519" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573230766107,
  "modificationTime": 1573230767848,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:32:50.519" starttime="20191108 16:32:48.268"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:32:50.521" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573230766107,
  "modificationTime": 1573230767848,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 2,
      "localID": 103103251487457280,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:32:50.521" starttime="20191108 16:32:50.520"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:32:50.522" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:32:50.522" starttime="20191108 16:32:50.521"></status>
</kw>
<msg timestamp="20191108 16:32:50.522" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573230766107,
  "modificationTime": 1573230767848,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:32:50.523" starttime="20191108 16:32:48.266"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:32:50.523" starttime="20191108 16:32:50.523"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:50.524" starttime="20191108 16:32:44.010"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:50.524" starttime="20191108 16:32:44.008"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:32:50.525" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191108 16:32:50.525" starttime="20191108 16:32:50.524"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:32:50.525" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191108 16:32:50.526" starttime="20191108 16:32:50.525"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:32:50.530" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:32:55.451" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:32:55.452" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:32:55.452" starttime="20191108 16:32:50.528"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:32:55.453" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:32:55.454" starttime="20191108 16:32:55.452"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:32:55.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:32:55.455" starttime="20191108 16:32:55.454"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:55.455" starttime="20191108 16:32:50.527"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:32:55.459" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:32:57.804" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:32:57.804" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573230772828,
  "modificationTime": 1573230775026,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:32:57.805" starttime="20191108 16:32:55.457"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:32:57.806" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573230772828,
  "modificationTime": 1573230775026,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103103251927924740,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:32:57.806" starttime="20191108 16:32:57.805"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:32:57.807" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:32:57.807" starttime="20191108 16:32:57.806"></status>
</kw>
<msg timestamp="20191108 16:32:57.808" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573230772828,
  "modificationTime": 1573230775026,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:32:57.808" starttime="20191108 16:32:55.455"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:32:57.808" starttime="20191108 16:32:57.808"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:57.809" starttime="20191108 16:32:50.526"></status>
</kw>
<status status="PASS" endtime="20191108 16:32:57.809" starttime="20191108 16:32:50.524"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:32:57.810" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191108 16:32:57.810" starttime="20191108 16:32:57.809"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:32:57.810" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191108 16:32:57.810" starttime="20191108 16:32:57.810"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:32:57.814" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:02.314" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:02.314" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:33:02.315" starttime="20191108 16:32:57.812"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:02.316" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:33:02.316" starttime="20191108 16:33:02.315"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:02.317" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:02.317" starttime="20191108 16:33:02.316"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:02.318" starttime="20191108 16:32:57.811"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:02.322" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:04.655" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:04.655" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573230780046,
  "modificationTime": 1573230781910,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:04.655" starttime="20191108 16:33:02.320"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:04.656" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573230780046,
  "modificationTime": 1573230781910,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103103252401029120,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:33:04.656" starttime="20191108 16:33:04.656"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:04.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:04.657" starttime="20191108 16:33:04.657"></status>
</kw>
<msg timestamp="20191108 16:33:04.657" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573230780046,
  "modificationTime": 1573230781910,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:04.657" starttime="20191108 16:33:02.318"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:33:04.658" starttime="20191108 16:33:04.658"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:04.658" starttime="20191108 16:32:57.811"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:04.658" starttime="20191108 16:32:57.809"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:04.658" starttime="20191108 16:32:30.234"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:04.659" starttime="20191108 16:32:30.233"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:33:04.660" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 16:33:04.660" starttime="20191108 16:33:04.659"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:33:04.661" starttime="20191108 16:33:04.661"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:33:04.662" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:33:05.862" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:33:05.862" starttime="20191108 16:33:04.662"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:05.863" starttime="20191108 16:33:04.660"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 16:33:05.864" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 16:33:05.890" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:33:05.891" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 16:33:05.891" starttime="20191108 16:33:05.863"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 16:33:05.892" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 16:33:05.892" starttime="20191108 16:33:05.891"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 16:33:05.893" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191108 16:33:05.894" starttime="20191108 16:33:05.893"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 16:33:05.942" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191108 16:33:05.953" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191108 16:33:05.954" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191108 16:33:05.954" starttime="20191108 16:33:05.894"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191108 16:33:05.955" level="INFO">Length is 2</msg>
<msg timestamp="20191108 16:33:05.955" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191108 16:33:05.955" starttime="20191108 16:33:05.954"></status>
</kw>
<msg timestamp="20191108 16:33:05.955" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191108 16:33:05.956" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191108 16:33:05.956" starttime="20191108 16:33:04.659"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:33:05.957" starttime="20191108 16:33:05.956"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:05.957" starttime="20191108 16:32:30.230"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191108 16:33:05.958" level="INFO">${keyPrefix} = testOMRestart_1</msg>
<status status="PASS" endtime="20191108 16:33:05.958" starttime="20191108 16:33:05.957"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:33:05.961" level="INFO">${tmpKey} = testOMRestart_1_0</msg>
<status status="PASS" endtime="20191108 16:33:05.962" starttime="20191108 16:33:05.960"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:33:05.962" level="INFO">testOMRestart_1_0</msg>
<status status="PASS" endtime="20191108 16:33:05.963" starttime="20191108 16:33:05.962"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:05.967" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:10.340" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:10.340" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:33:10.340" starttime="20191108 16:33:05.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:10.341" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:33:10.341" starttime="20191108 16:33:10.340"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:10.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:10.342" starttime="20191108 16:33:10.341"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:10.342" starttime="20191108 16:33:05.964"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:10.345" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:12.781" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:12.781" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573230788197,
  "modificationTime": 1573230789876,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:12.782" starttime="20191108 16:33:10.344"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:12.783" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573230788197,
  "modificationTime": 1573230789876,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103103252935147520,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:33:12.784" starttime="20191108 16:33:12.782"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:12.785" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:12.785" starttime="20191108 16:33:12.784"></status>
</kw>
<msg timestamp="20191108 16:33:12.785" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573230788197,
  "modificationTime": 1573230789876,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:12.785" starttime="20191108 16:33:10.342"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:33:12.786" starttime="20191108 16:33:12.786"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:12.787" starttime="20191108 16:33:05.963"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:12.787" starttime="20191108 16:33:05.960"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:33:12.788" level="INFO">${tmpKey} = testOMRestart_1_1</msg>
<status status="PASS" endtime="20191108 16:33:12.788" starttime="20191108 16:33:12.787"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:33:12.789" level="INFO">testOMRestart_1_1</msg>
<status status="PASS" endtime="20191108 16:33:12.789" starttime="20191108 16:33:12.789"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:12.794" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:17.102" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:17.102" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:33:17.102" starttime="20191108 16:33:12.792"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:17.104" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:33:17.104" starttime="20191108 16:33:17.103"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:17.104" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:17.104" starttime="20191108 16:33:17.104"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:17.105" starttime="20191108 16:33:12.791"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:17.108" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:19.379" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:19.380" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573230794926,
  "modificationTime": 1573230796700,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:19.380" starttime="20191108 16:33:17.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:19.381" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573230794926,
  "modificationTime": 1573230796700,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103103253376204800,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:33:19.381" starttime="20191108 16:33:19.380"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:19.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:19.382" starttime="20191108 16:33:19.382"></status>
</kw>
<msg timestamp="20191108 16:33:19.383" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573230794926,
  "modificationTime": 1573230796700,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:19.383" starttime="20191108 16:33:17.105"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:33:19.384" starttime="20191108 16:33:19.383"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:19.385" starttime="20191108 16:33:12.789"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:19.385" starttime="20191108 16:33:12.787"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:33:19.386" level="INFO">${tmpKey} = testOMRestart_1_2</msg>
<status status="PASS" endtime="20191108 16:33:19.386" starttime="20191108 16:33:19.385"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:33:19.387" level="INFO">testOMRestart_1_2</msg>
<status status="PASS" endtime="20191108 16:33:19.387" starttime="20191108 16:33:19.386"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:19.391" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:23.715" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:23.716" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:33:23.716" starttime="20191108 16:33:19.389"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:23.718" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:33:23.718" starttime="20191108 16:33:23.717"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:23.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:23.719" starttime="20191108 16:33:23.718"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:23.720" starttime="20191108 16:33:19.388"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:23.725" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:26.061" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:26.061" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573230801585,
  "modificationTime": 1573230803295,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:26.061" starttime="20191108 16:33:23.722"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:26.063" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573230801585,
  "modificationTime": 1573230803295,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103103253812609040,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:33:26.063" starttime="20191108 16:33:26.062"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:26.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:26.064" starttime="20191108 16:33:26.063"></status>
</kw>
<msg timestamp="20191108 16:33:26.064" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573230801585,
  "modificationTime": 1573230803295,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:26.065" starttime="20191108 16:33:23.720"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:33:26.065" starttime="20191108 16:33:26.065"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:26.066" starttime="20191108 16:33:19.387"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:26.066" starttime="20191108 16:33:19.385"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:33:26.067" level="INFO">${tmpKey} = testOMRestart_1_3</msg>
<status status="PASS" endtime="20191108 16:33:26.067" starttime="20191108 16:33:26.066"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:33:26.068" level="INFO">testOMRestart_1_3</msg>
<status status="PASS" endtime="20191108 16:33:26.068" starttime="20191108 16:33:26.067"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:26.072" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:30.437" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:30.437" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:33:30.437" starttime="20191108 16:33:26.070"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:30.439" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:33:30.439" starttime="20191108 16:33:30.438"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:30.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:30.440" starttime="20191108 16:33:30.440"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:30.441" starttime="20191108 16:33:26.069"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:30.445" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:32.829" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:32.829" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573230808335,
  "modificationTime": 1573230810029,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:32.829" starttime="20191108 16:33:30.443"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:32.830" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573230808335,
  "modificationTime": 1573230810029,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 8,
      "localID": 103103254254977040,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:33:32.830" starttime="20191108 16:33:32.830"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:32.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:32.832" starttime="20191108 16:33:32.831"></status>
</kw>
<msg timestamp="20191108 16:33:32.832" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573230808335,
  "modificationTime": 1573230810029,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:32.832" starttime="20191108 16:33:30.441"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:33:32.833" starttime="20191108 16:33:32.832"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:32.833" starttime="20191108 16:33:26.068"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:32.833" starttime="20191108 16:33:26.066"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:33:32.834" level="INFO">${tmpKey} = testOMRestart_1_4</msg>
<status status="PASS" endtime="20191108 16:33:32.834" starttime="20191108 16:33:32.833"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:33:32.834" level="INFO">testOMRestart_1_4</msg>
<status status="PASS" endtime="20191108 16:33:32.834" starttime="20191108 16:33:32.834"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:32.837" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:37.421" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:37.421" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:33:37.421" starttime="20191108 16:33:32.836"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:37.423" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:33:37.424" starttime="20191108 16:33:37.422"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:37.425" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:37.425" starttime="20191108 16:33:37.424"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:37.425" starttime="20191108 16:33:32.835"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:37.431" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:39.777" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:39.777" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573230815073,
  "modificationTime": 1573230816998,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:39.777" starttime="20191108 16:33:37.428"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:39.778" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573230815073,
  "modificationTime": 1573230816998,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 9,
      "localID": 103103254696558610,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:33:39.779" starttime="20191108 16:33:39.778"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:39.779" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:39.779" starttime="20191108 16:33:39.779"></status>
</kw>
<msg timestamp="20191108 16:33:39.780" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573230815073,
  "modificationTime": 1573230816998,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:39.780" starttime="20191108 16:33:37.426"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:33:39.780" starttime="20191108 16:33:39.780"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:39.780" starttime="20191108 16:33:32.834"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:39.780" starttime="20191108 16:33:32.833"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:39.781" starttime="20191108 16:33:05.960"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:39.781" starttime="20191108 16:33:05.959"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:33:39.782" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 16:33:39.782" starttime="20191108 16:33:39.782"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:33:39.783" starttime="20191108 16:33:39.783"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:33:39.784" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:33:40.990" level="INFO">Read output: Last login: Fri Nov  8 16:33:04 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:33:40.990" starttime="20191108 16:33:39.783"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:40.990" starttime="20191108 16:33:39.782"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 16:33:40.992" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 16:33:41.008" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:33:41.008" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 16:33:41.008" starttime="20191108 16:33:40.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 16:33:41.009" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 16:33:41.009" starttime="20191108 16:33:41.009"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 16:33:41.011" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191108 16:33:41.011" starttime="20191108 16:33:41.010"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 16:33:41.092" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191108 16:33:41.101" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191108 16:33:41.101" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191108 16:33:41.101" starttime="20191108 16:33:41.011"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191108 16:33:41.102" level="INFO">Length is 2</msg>
<msg timestamp="20191108 16:33:41.102" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191108 16:33:41.102" starttime="20191108 16:33:41.102"></status>
</kw>
<msg timestamp="20191108 16:33:41.103" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191108 16:33:41.103" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191108 16:33:41.103" starttime="20191108 16:33:39.781"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:33:41.104" starttime="20191108 16:33:41.103"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:41.104" starttime="20191108 16:33:05.957"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191108 16:33:41.105" level="INFO">${keyPrefix} = testOMRestart_2</msg>
<status status="PASS" endtime="20191108 16:33:41.105" starttime="20191108 16:33:41.105"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:33:41.108" level="INFO">${tmpKey} = testOMRestart_2_0</msg>
<status status="PASS" endtime="20191108 16:33:41.108" starttime="20191108 16:33:41.107"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:33:41.108" level="INFO">testOMRestart_2_0</msg>
<status status="PASS" endtime="20191108 16:33:41.108" starttime="20191108 16:33:41.108"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:41.113" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:45.501" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:45.501" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:33:45.502" starttime="20191108 16:33:41.110"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:45.504" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:33:45.504" starttime="20191108 16:33:45.503"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:45.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:45.505" starttime="20191108 16:33:45.504"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:45.506" starttime="20191108 16:33:41.109"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:45.511" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:47.956" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:47.956" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573230823338,
  "modificationTime": 1573230825083,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:47.957" starttime="20191108 16:33:45.508"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:47.958" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573230823338,
  "modificationTime": 1573230825083,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 2,
      "localID": 103103255238148110,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:33:47.958" starttime="20191108 16:33:47.957"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:47.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:47.959" starttime="20191108 16:33:47.958"></status>
</kw>
<msg timestamp="20191108 16:33:47.960" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573230823338,
  "modificationTime": 1573230825083,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:47.960" starttime="20191108 16:33:45.506"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:33:47.960" starttime="20191108 16:33:47.960"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:47.961" starttime="20191108 16:33:41.109"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:47.961" starttime="20191108 16:33:41.107"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:33:47.962" level="INFO">${tmpKey} = testOMRestart_2_1</msg>
<status status="PASS" endtime="20191108 16:33:47.962" starttime="20191108 16:33:47.961"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:33:47.962" level="INFO">testOMRestart_2_1</msg>
<status status="PASS" endtime="20191108 16:33:47.963" starttime="20191108 16:33:47.962"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:47.967" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:52.231" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:52.231" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:33:52.231" starttime="20191108 16:33:47.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:52.233" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:33:52.233" starttime="20191108 16:33:52.232"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:52.234" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:52.235" starttime="20191108 16:33:52.234"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:52.235" starttime="20191108 16:33:47.964"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:52.240" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:54.567" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:54.567" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573230830174,
  "modificationTime": 1573230831813,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:54.568" starttime="20191108 16:33:52.237"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:54.569" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573230830174,
  "modificationTime": 1573230831813,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103103255686152210,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:33:54.569" starttime="20191108 16:33:54.568"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:54.569" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:54.570" starttime="20191108 16:33:54.569"></status>
</kw>
<msg timestamp="20191108 16:33:54.570" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573230830174,
  "modificationTime": 1573230831813,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:33:54.570" starttime="20191108 16:33:52.235"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:33:54.571" starttime="20191108 16:33:54.570"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:54.571" starttime="20191108 16:33:47.963"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:54.571" starttime="20191108 16:33:47.961"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:33:54.572" level="INFO">${tmpKey} = testOMRestart_2_2</msg>
<status status="PASS" endtime="20191108 16:33:54.572" starttime="20191108 16:33:54.571"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:33:54.572" level="INFO">testOMRestart_2_2</msg>
<status status="PASS" endtime="20191108 16:33:54.572" starttime="20191108 16:33:54.572"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:54.576" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:33:58.954" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:33:58.955" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:33:58.956" starttime="20191108 16:33:54.574"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:33:58.962" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:33:58.962" starttime="20191108 16:33:58.959"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:33:58.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:33:58.964" starttime="20191108 16:33:58.963"></status>
</kw>
<status status="PASS" endtime="20191108 16:33:58.965" starttime="20191108 16:33:54.573"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:33:58.970" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:34:01.352" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:34:01.353" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573230836863,
  "modificationTime": 1573230838537,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:34:01.353" starttime="20191108 16:33:58.967"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:34:01.354" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573230836863,
  "modificationTime": 1573230838537,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103103256124522510,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:34:01.355" starttime="20191108 16:34:01.354"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:34:01.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:34:01.356" starttime="20191108 16:34:01.355"></status>
</kw>
<msg timestamp="20191108 16:34:01.356" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573230836863,
  "modificationTime": 1573230838537,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:34:01.356" starttime="20191108 16:33:58.965"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:01.357" starttime="20191108 16:34:01.357"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:01.358" starttime="20191108 16:33:54.572"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:01.358" starttime="20191108 16:33:54.571"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:34:01.359" level="INFO">${tmpKey} = testOMRestart_2_3</msg>
<status status="PASS" endtime="20191108 16:34:01.359" starttime="20191108 16:34:01.358"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:34:01.359" level="INFO">testOMRestart_2_3</msg>
<status status="PASS" endtime="20191108 16:34:01.359" starttime="20191108 16:34:01.359"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:34:01.364" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:34:05.689" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:34:05.689" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:34:05.690" starttime="20191108 16:34:01.362"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:34:05.691" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:34:05.691" starttime="20191108 16:34:05.690"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:34:05.692" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:34:05.693" starttime="20191108 16:34:05.692"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:05.693" starttime="20191108 16:34:01.361"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:34:05.697" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:34:08.089" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:34:08.089" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573230843500,
  "modificationTime": 1573230845269,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:34:08.089" starttime="20191108 16:34:05.695"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:34:08.091" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573230843500,
  "modificationTime": 1573230845269,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103103256559616020,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:34:08.091" starttime="20191108 16:34:08.090"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:34:08.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:34:08.092" starttime="20191108 16:34:08.092"></status>
</kw>
<msg timestamp="20191108 16:34:08.093" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573230843500,
  "modificationTime": 1573230845269,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:34:08.093" starttime="20191108 16:34:05.693"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:08.094" starttime="20191108 16:34:08.093"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:08.094" starttime="20191108 16:34:01.360"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:08.094" starttime="20191108 16:34:01.358"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 16:34:08.096" level="INFO">${tmpKey} = testOMRestart_2_4</msg>
<status status="PASS" endtime="20191108 16:34:08.096" starttime="20191108 16:34:08.095"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 16:34:08.097" level="INFO">testOMRestart_2_4</msg>
<status status="PASS" endtime="20191108 16:34:08.097" starttime="20191108 16:34:08.096"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:34:08.102" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:34:12.407" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:34:12.407" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 16:34:12.407" starttime="20191108 16:34:08.099"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:34:12.409" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:34:12.409" starttime="20191108 16:34:12.408"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:34:12.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:34:12.410" starttime="20191108 16:34:12.410"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:12.411" starttime="20191108 16:34:08.098"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:34:12.415" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:34:14.729" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:34:14.729" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573230850309,
  "modificationTime": 1573230852004,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:34:14.729" starttime="20191108 16:34:12.413"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:34:14.731" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573230850309,
  "modificationTime": 1573230852004,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 2,
      "localID": 103103257005719570,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 16:34:14.731" starttime="20191108 16:34:14.730"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:34:14.732" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:34:14.732" starttime="20191108 16:34:14.731"></status>
</kw>
<msg timestamp="20191108 16:34:14.732" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573230850309,
  "modificationTime": 1573230852004,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 16:34:14.733" starttime="20191108 16:34:12.411"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:14.733" starttime="20191108 16:34:14.733"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:14.734" starttime="20191108 16:34:08.097"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:14.734" starttime="20191108 16:34:08.095"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:14.734" starttime="20191108 16:33:41.106"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:14.734" starttime="20191108 16:33:41.106"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:34:14.736" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 16:34:14.736" starttime="20191108 16:34:14.735"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:14.741" starttime="20191108 16:34:14.737"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:34:14.742" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:34:15.951" level="INFO">Read output: Last login: Fri Nov  8 16:33:39 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:34:15.952" starttime="20191108 16:34:14.741"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:15.952" starttime="20191108 16:34:14.737"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 16:34:15.954" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 16:34:15.980" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:34:15.981" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 16:34:15.981" starttime="20191108 16:34:15.953"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 16:34:15.982" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 16:34:15.982" starttime="20191108 16:34:15.981"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 16:34:15.983" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191108 16:34:15.984" starttime="20191108 16:34:15.983"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 16:34:16.032" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191108 16:34:16.045" level="INFO">3 files:
log_0-10
log_11-74
log_inprogress_75</msg>
<msg timestamp="20191108 16:34:16.045" level="INFO">@{logs} = [ log_0-10 | log_11-74 | log_inprogress_75 ]</msg>
<status status="PASS" endtime="20191108 16:34:16.045" starttime="20191108 16:34:15.984"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191108 16:34:16.046" level="INFO">Length is 3</msg>
<msg timestamp="20191108 16:34:16.046" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191108 16:34:16.047" starttime="20191108 16:34:16.046"></status>
</kw>
<msg timestamp="20191108 16:34:16.047" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191108 16:34:16.048" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-74', u'log_inprogress_75'] ]</msg>
<status status="PASS" endtime="20191108 16:34:16.048" starttime="20191108 16:34:14.734"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191108 16:34:16.049" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191108 16:34:16.049" starttime="20191108 16:34:16.048"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:16.049" starttime="20191108 16:33:41.104"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:16.049" starttime="20191108 16:32:30.230"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:16.050" starttime="20191108 16:34:16.050"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:34:16.052" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 16:34:16.052" starttime="20191108 16:34:16.052"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:16.054" starttime="20191108 16:34:16.053"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:34:16.055" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:34:17.260" level="INFO">Read output: Last login: Fri Nov  8 16:32:27 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:34:17.261" starttime="20191108 16:34:16.054"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:17.261" starttime="20191108 16:34:16.053"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 16:34:17.262" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 16:34:19.422" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:34:19.423" starttime="20191108 16:34:17.262"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 16:34:19.424" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:34:19.521" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:34:19.522" level="INFO">${startupMsg} = hadoop     510  386  0.0 34482964 224928 ?     Sl   16:34   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 16:34:19.522" starttime="20191108 16:34:19.423"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:34:19.587" starttime="20191108 16:34:19.522"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:19.588" starttime="20191108 16:34:19.587"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:19.588" starttime="20191108 16:34:16.051"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:34:19.590" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 16:34:19.590" starttime="20191108 16:34:19.589"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:19.591" starttime="20191108 16:34:19.590"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:34:19.591" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:34:20.778" level="INFO">Read output: Last login: Fri Nov  8 16:34:16 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:34:20.778" starttime="20191108 16:34:19.591"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:20.779" starttime="20191108 16:34:19.590"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 16:34:20.780" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 16:34:20.795" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:34:20.795" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 16:34:20.795" starttime="20191108 16:34:20.779"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 16:34:20.796" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 16:34:20.796" starttime="20191108 16:34:20.795"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 16:34:20.797" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191108 16:34:20.797" starttime="20191108 16:34:20.796"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 16:34:20.876" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191108 16:34:20.886" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191108 16:34:20.887" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191108 16:34:20.887" starttime="20191108 16:34:20.797"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191108 16:34:20.888" level="INFO">Length is 2</msg>
<msg timestamp="20191108 16:34:20.889" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191108 16:34:20.889" starttime="20191108 16:34:20.888"></status>
</kw>
<msg timestamp="20191108 16:34:20.889" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191108 16:34:20.889" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191108 16:34:20.889" starttime="20191108 16:34:19.588"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:20.890" starttime="20191108 16:34:20.889"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191108 16:34:21.891" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191108 16:34:21.891" starttime="20191108 16:34:20.890"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:21.891" starttime="20191108 16:34:19.588"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:34:21.894" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 16:34:21.894" starttime="20191108 16:34:21.893"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:21.897" starttime="20191108 16:34:21.896"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:34:21.898" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:34:23.103" level="INFO">Read output: Last login: Fri Nov  8 16:34:19 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:34:23.103" starttime="20191108 16:34:21.897"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:23.104" starttime="20191108 16:34:21.895"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 16:34:23.105" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 16:34:23.120" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:34:23.121" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 16:34:23.121" starttime="20191108 16:34:23.104"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 16:34:23.122" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 16:34:23.122" starttime="20191108 16:34:23.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 16:34:23.123" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191108 16:34:23.123" starttime="20191108 16:34:23.122"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 16:34:23.203" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191108 16:34:23.213" level="INFO">3 files:
log_0-10
log_11-74
log_inprogress_75</msg>
<msg timestamp="20191108 16:34:23.213" level="INFO">@{logs} = [ log_0-10 | log_11-74 | log_inprogress_75 ]</msg>
<status status="PASS" endtime="20191108 16:34:23.214" starttime="20191108 16:34:23.123"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191108 16:34:23.214" level="INFO">Length is 3</msg>
<msg timestamp="20191108 16:34:23.215" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191108 16:34:23.215" starttime="20191108 16:34:23.214"></status>
</kw>
<msg timestamp="20191108 16:34:23.215" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191108 16:34:23.216" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-74', u'log_inprogress_75'] ]</msg>
<status status="PASS" endtime="20191108 16:34:23.216" starttime="20191108 16:34:21.892"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191108 16:34:23.217" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191108 16:34:23.217" starttime="20191108 16:34:23.216"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:23.217" starttime="20191108 16:34:21.892"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:23.217" starttime="20191108 16:34:19.588"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:23.218" starttime="20191108 16:34:23.217"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:23.219" starttime="20191108 16:34:23.219"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:23.220" critical="yes" starttime="20191108 16:32:15.280"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:34:23.225" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:34:25.236" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:34:25.237" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:25.237" starttime="20191108 16:34:23.223"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:34:25.238" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:25.238" starttime="20191108 16:34:25.237"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:34:25.239" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:34:25.239" starttime="20191108 16:34:25.238"></status>
</kw>
<msg timestamp="20191108 16:34:25.239" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:25.240" starttime="20191108 16:34:23.222"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 16:34:25.240" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:25.240" starttime="20191108 16:34:25.240"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:25.241" starttime="20191108 16:34:25.241"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:25.242" starttime="20191108 16:34:25.241"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 16:34:25.243" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 16:34:25.243" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:25.243" starttime="20191108 16:34:25.243"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 16:34:25.244" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191108 16:34:25.244" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 16:34:25.244" starttime="20191108 16:34:25.244"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 16:34:25.245" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 16:34:25.245" starttime="20191108 16:34:25.245"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 16:34:25.246" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191108 16:34:25.246" starttime="20191108 16:34:25.245"></status>
</kw>
<msg timestamp="20191108 16:34:25.246" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 16:34:25.246" starttime="20191108 16:34:23.222"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:34:25.248" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 16:34:25.248" starttime="20191108 16:34:25.247"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:25.249" starttime="20191108 16:34:25.249"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:34:25.250" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:34:26.454" level="INFO">Read output: Last login: Fri Nov  8 16:34:14 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:34:26.454" starttime="20191108 16:34:25.249"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:26.455" starttime="20191108 16:34:25.248"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 16:34:26.456" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 16:34:36.646" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:34:36.647" starttime="20191108 16:34:26.455"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 16:34:36.648" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:34:36.724" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:34:36.724" level="INFO">${shutdownMsg} = hadoop     595  0.0  0.0   9556  1168 ?        Ss   16:34   0:00 bash -c sudo ps aux | grep om
hadoop     597  0.0  0.0   9088   672 ?        S    16:34   0:00 grep om</msg>
<status status="PASS" endtime="20191108 16:34:36.724" starttime="20191108 16:34:36.647"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:34:36.790" starttime="20191108 16:34:36.725"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:36.791" starttime="20191108 16:34:36.790"></status>
</kw>
<msg timestamp="20191108 16:34:36.791" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 16:34:36.791" starttime="20191108 16:34:25.247"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:34:36.796" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:34:38.899" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:34:38.900" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:38.900" starttime="20191108 16:34:36.793"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:34:38.902" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:38.902" starttime="20191108 16:34:38.901"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:34:38.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:34:38.903" starttime="20191108 16:34:38.902"></status>
</kw>
<msg timestamp="20191108 16:34:38.904" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:38.904" starttime="20191108 16:34:36.792"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 16:34:38.905" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:38.905" starttime="20191108 16:34:38.904"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:38.906" starttime="20191108 16:34:38.906"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:38.907" starttime="20191108 16:34:38.907"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 16:34:38.908" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 16:34:38.909" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:38.909" starttime="20191108 16:34:38.908"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 16:34:38.910" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191108 16:34:38.910" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 16:34:38.910" starttime="20191108 16:34:38.909"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 16:34:38.912" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191108 16:34:38.912" starttime="20191108 16:34:38.911"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 16:34:38.913" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191108 16:34:38.913" starttime="20191108 16:34:38.912"></status>
</kw>
<msg timestamp="20191108 16:34:38.914" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191108 16:34:38.914" starttime="20191108 16:34:36.791"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:38.916" starttime="20191108 16:34:38.915"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 16:34:38.920" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191108 16:34:38.920" starttime="20191108 16:34:38.918"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 16:34:38.923" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191108 16:34:38.923" starttime="20191108 16:34:38.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 16:34:38.925" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191108 16:34:38.926" starttime="20191108 16:34:38.924"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:34:38.930" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:34:38.930" starttime="20191108 16:34:38.926"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:34:38.936" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:34:43.370" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:34:43.370" level="INFO">${output} = 2019-11-08 16:34:41 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 16:34:41 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191108 16:34:43.371" starttime="20191108 16:34:38.933"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:34:43.373" level="INFO">2019-11-08 16:34:41 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 16:34:41 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 16:34:41 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:34:43.373" starttime="20191108 16:34:43.372"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:34:43.374" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:34:43.374" starttime="20191108 16:34:43.373"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:43.375" starttime="20191108 16:34:38.931"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:34:43.379" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:34:45.700" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:34:45.700" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOM...</msg>
<status status="PASS" endtime="20191108 16:34:45.700" starttime="20191108 16:34:43.376"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:34:45.702" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191108 16:34:45.702" starttime="20191108 16:34:45.701"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:34:45.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:34:45.703" starttime="20191108 16:34:45.702"></status>
</kw>
<msg timestamp="20191108 16:34:45.704" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOM...</msg>
<status status="PASS" endtime="20191108 16:34:45.704" starttime="20191108 16:34:43.375"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:45.705" starttime="20191108 16:34:45.704"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:34:45.706" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:34:45.707" starttime="20191108 16:34:45.705"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:45.707" starttime="20191108 16:34:38.917"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:34:45.709" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 16:34:45.709" starttime="20191108 16:34:45.708"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:45.711" starttime="20191108 16:34:45.710"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:34:45.712" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:34:46.918" level="INFO">Read output: Last login: Fri Nov  8 16:34:25 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:34:46.918" starttime="20191108 16:34:45.711"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:46.918" starttime="20191108 16:34:45.709"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 16:34:46.920" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 16:34:49.080" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:34:49.080" starttime="20191108 16:34:46.919"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 16:34:49.081" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:34:49.178" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:34:49.178" level="INFO">${startupMsg} = hadoop     648  363  0.0 34481756 257852 ?     Sl   16:34   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 16:34:49.178" starttime="20191108 16:34:49.080"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:34:49.243" starttime="20191108 16:34:49.179"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:49.244" starttime="20191108 16:34:49.244"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:49.245" starttime="20191108 16:34:45.707"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:49.245" starttime="20191108 16:34:23.221"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:34:49.248" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:34:51.145" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:34:51.145" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:51.145" starttime="20191108 16:34:49.246"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:34:51.146" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:51.147" starttime="20191108 16:34:51.146"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:34:51.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:34:51.147" starttime="20191108 16:34:51.147"></status>
</kw>
<msg timestamp="20191108 16:34:51.148" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:51.148" starttime="20191108 16:34:49.245"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 16:34:51.148" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:51.148" starttime="20191108 16:34:51.148"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:51.149" starttime="20191108 16:34:51.148"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:51.149" starttime="20191108 16:34:51.149"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 16:34:51.150" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 16:34:51.150" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:51.150" starttime="20191108 16:34:51.150"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 16:34:51.151" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191108 16:34:51.151" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 16:34:51.151" starttime="20191108 16:34:51.150"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 16:34:51.152" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191108 16:34:51.152" starttime="20191108 16:34:51.152"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 16:34:51.152" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191108 16:34:51.153" starttime="20191108 16:34:51.152"></status>
</kw>
<msg timestamp="20191108 16:34:51.153" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191108 16:34:51.153" starttime="20191108 16:34:49.245"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:34:51.155" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 16:34:51.155" starttime="20191108 16:34:51.154"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:51.156" starttime="20191108 16:34:51.155"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:34:51.157" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:34:52.356" level="INFO">Read output: Last login: Fri Nov  8 16:34:22 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:34:52.357" starttime="20191108 16:34:51.156"></status>
</kw>
<status status="PASS" endtime="20191108 16:34:52.357" starttime="20191108 16:34:51.155"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 16:34:52.358" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 16:34:53.518" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:34:53.518" starttime="20191108 16:34:52.358"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 16:34:53.520" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:34:53.649" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:34:53.649" level="INFO">${shutdownMsg} = hadoop    1054  0.0  0.0   9556  1168 ?        Ss   16:34   0:00 bash -c sudo ps aux | grep om
hadoop    1056  0.0  0.0   9088   668 ?        S    16:34   0:00 grep om</msg>
<status status="PASS" endtime="20191108 16:34:53.649" starttime="20191108 16:34:53.519"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:34:53.683" starttime="20191108 16:34:53.650"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:53.684" starttime="20191108 16:34:53.683"></status>
</kw>
<msg timestamp="20191108 16:34:53.684" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 16:34:53.684" starttime="20191108 16:34:51.153"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:34:53.689" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:34:55.900" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:34:55.900" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:55.900" starttime="20191108 16:34:53.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:34:55.902" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:55.903" starttime="20191108 16:34:55.901"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:34:55.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:34:55.904" starttime="20191108 16:34:55.903"></status>
</kw>
<msg timestamp="20191108 16:34:55.904" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:55.905" starttime="20191108 16:34:53.685"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 16:34:55.905" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:55.906" starttime="20191108 16:34:55.905"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:55.907" starttime="20191108 16:34:55.906"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:55.908" starttime="20191108 16:34:55.907"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 16:34:55.909" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 16:34:55.909" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:34:55.910" starttime="20191108 16:34:55.908"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 16:34:55.911" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 16:34:55.911" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 16:34:55.911" starttime="20191108 16:34:55.910"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 16:34:55.912" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 16:34:55.913" starttime="20191108 16:34:55.912"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 16:34:55.914" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 16:34:55.914" starttime="20191108 16:34:55.913"></status>
</kw>
<msg timestamp="20191108 16:34:55.914" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191108 16:34:55.914" starttime="20191108 16:34:53.685"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191108 16:34:55.916" starttime="20191108 16:34:55.915"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 16:34:55.918" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191108 16:34:55.918" starttime="20191108 16:34:55.917"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 16:34:55.920" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191108 16:34:55.920" starttime="20191108 16:34:55.919"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 16:34:55.921" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191108 16:34:55.922" starttime="20191108 16:34:55.920"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:34:55.924" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:34:55.924" starttime="20191108 16:34:55.922"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:34:55.928" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:35:00.402" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:35:00.402" level="INFO">${output} = 2019-11-08 16:34:58 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 16:34:59 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191108 16:35:00.402" starttime="20191108 16:34:55.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:35:00.404" level="INFO">2019-11-08 16:34:58 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 16:34:59 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 16:34:59 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:35:00.404" starttime="20191108 16:35:00.403"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:35:00.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:35:00.405" starttime="20191108 16:35:00.404"></status>
</kw>
<status status="PASS" endtime="20191108 16:35:00.405" starttime="20191108 16:34:55.924"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:35:00.409" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:35:02.727" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:35:02.728" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_...</msg>
<status status="PASS" endtime="20191108 16:35:02.728" starttime="20191108 16:35:00.407"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:35:02.729" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191108 16:35:02.730" starttime="20191108 16:35:02.729"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:35:02.731" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:35:02.731" starttime="20191108 16:35:02.730"></status>
</kw>
<msg timestamp="20191108 16:35:02.731" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_...</msg>
<status status="PASS" endtime="20191108 16:35:02.731" starttime="20191108 16:35:00.406"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:02.732" starttime="20191108 16:35:02.732"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:35:02.734" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:35:02.735" starttime="20191108 16:35:02.732"></status>
</kw>
<status status="PASS" endtime="20191108 16:35:02.735" starttime="20191108 16:34:55.916"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:35:02.738" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 16:35:02.739" starttime="20191108 16:35:02.737"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:02.741" starttime="20191108 16:35:02.740"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:35:02.742" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:35:03.947" level="INFO">Read output: Last login: Fri Nov  8 16:34:51 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:35:03.948" starttime="20191108 16:35:02.741"></status>
</kw>
<status status="PASS" endtime="20191108 16:35:03.948" starttime="20191108 16:35:02.739"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 16:35:03.950" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 16:35:06.100" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:35:06.100" starttime="20191108 16:35:03.949"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 16:35:06.101" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:35:06.199" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:35:06.199" level="INFO">${startupMsg} = hadoop    1105  350  0.0 34484776 223912 ?     Sl   16:35   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 16:35:06.199" starttime="20191108 16:35:06.101"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:35:06.264" starttime="20191108 16:35:06.199"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:06.265" starttime="20191108 16:35:06.264"></status>
</kw>
<status status="PASS" endtime="20191108 16:35:06.265" starttime="20191108 16:35:02.736"></status>
</kw>
<status status="PASS" endtime="20191108 16:35:06.265" starttime="20191108 16:34:49.245"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:35:06.270" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:35:08.205" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:35:08.205" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:08.205" starttime="20191108 16:35:06.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:35:08.206" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:08.206" starttime="20191108 16:35:08.206"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:35:08.207" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:35:08.207" starttime="20191108 16:35:08.207"></status>
</kw>
<msg timestamp="20191108 16:35:08.208" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:08.208" starttime="20191108 16:35:06.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 16:35:08.208" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:08.208" starttime="20191108 16:35:08.208"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:08.209" starttime="20191108 16:35:08.208"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:08.210" starttime="20191108 16:35:08.209"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 16:35:08.210" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 16:35:08.210" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:08.210" starttime="20191108 16:35:08.210"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 16:35:08.211" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 16:35:08.211" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 16:35:08.211" starttime="20191108 16:35:08.211"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 16:35:08.212" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 16:35:08.212" starttime="20191108 16:35:08.211"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 16:35:08.212" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 16:35:08.212" starttime="20191108 16:35:08.212"></status>
</kw>
<msg timestamp="20191108 16:35:08.213" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 16:35:08.213" starttime="20191108 16:35:06.266"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:35:08.214" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 16:35:08.214" starttime="20191108 16:35:08.214"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:08.216" starttime="20191108 16:35:08.215"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:35:08.217" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:35:09.416" level="INFO">Read output: Last login: Fri Nov  8 16:32:11 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:35:09.417" starttime="20191108 16:35:08.216"></status>
</kw>
<status status="PASS" endtime="20191108 16:35:09.417" starttime="20191108 16:35:08.215"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 16:35:09.419" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 16:35:10.578" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:35:10.579" starttime="20191108 16:35:09.418"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 16:35:10.580" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:35:10.656" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:35:10.656" level="INFO">${shutdownMsg} = hadoop    1056  0.0  0.0   9556  1168 ?        Ss   16:35   0:00 bash -c sudo ps aux | grep om
hadoop    1058  0.0  0.0   9088   672 ?        S    16:35   0:00 grep om</msg>
<status status="PASS" endtime="20191108 16:35:10.657" starttime="20191108 16:35:10.579"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:35:10.690" starttime="20191108 16:35:10.657"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:10.692" starttime="20191108 16:35:10.691"></status>
</kw>
<msg timestamp="20191108 16:35:10.692" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 16:35:10.692" starttime="20191108 16:35:08.213"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:35:10.696" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:35:22.949" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:35:22.949" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:22.949" starttime="20191108 16:35:10.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:35:22.951" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:22.951" starttime="20191108 16:35:22.950"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:35:22.953" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:35:22.953" starttime="20191108 16:35:22.952"></status>
</kw>
<msg timestamp="20191108 16:35:22.953" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:22.954" starttime="20191108 16:35:10.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 16:35:22.954" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:22.955" starttime="20191108 16:35:22.954"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:22.956" starttime="20191108 16:35:22.955"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:22.956" starttime="20191108 16:35:22.956"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 16:35:22.957" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 16:35:22.958" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:22.958" starttime="20191108 16:35:22.957"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 16:35:22.959" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191108 16:35:22.959" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 16:35:22.959" starttime="20191108 16:35:22.958"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 16:35:22.960" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 16:35:22.960" starttime="20191108 16:35:22.959"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 16:35:22.961" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191108 16:35:22.961" starttime="20191108 16:35:22.960"></status>
</kw>
<msg timestamp="20191108 16:35:22.961" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191108 16:35:22.961" starttime="20191108 16:35:10.693"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:22.962" starttime="20191108 16:35:22.961"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 16:35:22.964" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191108 16:35:22.964" starttime="20191108 16:35:22.963"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 16:35:22.965" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191108 16:35:22.965" starttime="20191108 16:35:22.964"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 16:35:22.966" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191108 16:35:22.966" starttime="20191108 16:35:22.966"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:35:22.969" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:35:22.969" starttime="20191108 16:35:22.967"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:35:22.972" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:35:37.597" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:35:37.597" level="INFO">${output} = 2019-11-08 16:35:25 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191108 16:35:37.597" starttime="20191108 16:35:22.970"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:35:37.599" level="INFO">2019-11-08 16:35:25 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:35:26 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:35:27 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:35:28 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:35:29 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:35:30 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:35:31 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:35:32 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:35:33 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:35:34 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:35:35 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-08 16:35:35 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 16:35:36 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 16:35:36 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:35:37.599" starttime="20191108 16:35:37.598"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:35:37.600" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:35:37.600" starttime="20191108 16:35:37.599"></status>
</kw>
<status status="PASS" endtime="20191108 16:35:37.601" starttime="20191108 16:35:22.969"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:35:37.605" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:35:50.005" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:35:50.006" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestar...</msg>
<status status="PASS" endtime="20191108 16:35:50.006" starttime="20191108 16:35:37.602"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:35:50.007" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191108 16:35:50.007" starttime="20191108 16:35:50.006"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:35:50.008" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:35:50.008" starttime="20191108 16:35:50.007"></status>
</kw>
<msg timestamp="20191108 16:35:50.009" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestar...</msg>
<status status="PASS" endtime="20191108 16:35:50.009" starttime="20191108 16:35:37.601"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:50.009" starttime="20191108 16:35:50.009"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:35:50.010" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:35:50.010" starttime="20191108 16:35:50.010"></status>
</kw>
<status status="PASS" endtime="20191108 16:35:50.011" starttime="20191108 16:35:22.962"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:35:50.012" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 16:35:50.012" starttime="20191108 16:35:50.012"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:50.014" starttime="20191108 16:35:50.013"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:35:50.014" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:35:51.203" level="INFO">Read output: Last login: Fri Nov  8 16:35:08 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:35:51.203" starttime="20191108 16:35:50.014"></status>
</kw>
<status status="PASS" endtime="20191108 16:35:51.204" starttime="20191108 16:35:50.012"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 16:35:51.205" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 16:35:53.375" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:35:53.376" starttime="20191108 16:35:51.204"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 16:35:53.377" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:35:53.485" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:35:53.486" level="INFO">${startupMsg} = hadoop    1107  338  0.0 34477496 228248 ?     Sl   16:35   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 16:35:53.486" starttime="20191108 16:35:53.376"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:35:53.519" starttime="20191108 16:35:53.486"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:53.520" starttime="20191108 16:35:53.519"></status>
</kw>
<status status="PASS" endtime="20191108 16:35:53.520" starttime="20191108 16:35:50.011"></status>
</kw>
<status status="PASS" endtime="20191108 16:35:53.520" starttime="20191108 16:35:06.266"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:35:53.524" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:35:55.686" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:35:55.687" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:55.687" starttime="20191108 16:35:53.522"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:35:55.688" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:55.688" starttime="20191108 16:35:55.687"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:35:55.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:35:55.689" starttime="20191108 16:35:55.688"></status>
</kw>
<msg timestamp="20191108 16:35:55.689" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:55.689" starttime="20191108 16:35:53.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 16:35:55.689" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:55.690" starttime="20191108 16:35:55.689"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:55.690" starttime="20191108 16:35:55.690"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:55.691" starttime="20191108 16:35:55.690"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 16:35:55.692" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 16:35:55.692" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191108 16:35:55.692" starttime="20191108 16:35:55.691"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 16:35:55.692" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191108 16:35:55.693" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 16:35:55.693" starttime="20191108 16:35:55.692"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 16:35:55.693" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 16:35:55.693" starttime="20191108 16:35:55.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 16:35:55.694" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191108 16:35:55.694" starttime="20191108 16:35:55.693"></status>
</kw>
<msg timestamp="20191108 16:35:55.694" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 16:35:55.694" starttime="20191108 16:35:53.521"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:35:55.695" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 16:35:55.695" starttime="20191108 16:35:55.695"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:55.696" starttime="20191108 16:35:55.696"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:35:55.697" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:35:56.896" level="INFO">Read output: Last login: Fri Nov  8 16:34:45 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:35:56.896" starttime="20191108 16:35:55.696"></status>
</kw>
<status status="PASS" endtime="20191108 16:35:56.897" starttime="20191108 16:35:55.695"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 16:35:56.898" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 16:35:58.049" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:35:58.049" starttime="20191108 16:35:56.897"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 16:35:58.050" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:35:58.159" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:35:58.159" level="INFO">${shutdownMsg} = hadoop    1150  0.0  0.0   9556  1168 ?        Ss   16:35   0:00 bash -c sudo ps aux | grep om
hadoop    1152  0.0  0.0   9088   668 ?        S    16:35   0:00 grep om</msg>
<status status="PASS" endtime="20191108 16:35:58.159" starttime="20191108 16:35:58.050"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:35:58.225" starttime="20191108 16:35:58.160"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:35:58.226" starttime="20191108 16:35:58.225"></status>
</kw>
<msg timestamp="20191108 16:35:58.226" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 16:35:58.226" starttime="20191108 16:35:55.694"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:35:58.231" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:36:00.239" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:36:00.239" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:00.239" starttime="20191108 16:35:58.228"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:36:00.241" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:00.241" starttime="20191108 16:36:00.240"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:36:00.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:36:00.242" starttime="20191108 16:36:00.241"></status>
</kw>
<msg timestamp="20191108 16:36:00.243" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:00.243" starttime="20191108 16:35:58.227"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 16:36:00.243" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:00.244" starttime="20191108 16:36:00.243"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:00.244" starttime="20191108 16:36:00.244"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:00.245" starttime="20191108 16:36:00.245"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 16:36:00.246" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 16:36:00.246" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:00.246" starttime="20191108 16:36:00.246"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 16:36:00.247" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 16:36:00.248" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 16:36:00.248" starttime="20191108 16:36:00.247"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 16:36:00.248" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 16:36:00.249" starttime="20191108 16:36:00.248"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 16:36:00.249" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 16:36:00.249" starttime="20191108 16:36:00.249"></status>
</kw>
<msg timestamp="20191108 16:36:00.250" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191108 16:36:00.250" starttime="20191108 16:35:58.227"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:00.251" starttime="20191108 16:36:00.250"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 16:36:00.253" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191108 16:36:00.253" starttime="20191108 16:36:00.252"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 16:36:00.254" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191108 16:36:00.255" starttime="20191108 16:36:00.254"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 16:36:00.256" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191108 16:36:00.256" starttime="20191108 16:36:00.255"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:36:00.258" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:36:00.258" starttime="20191108 16:36:00.256"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:36:00.261" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:36:04.700" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:36:04.701" level="INFO">${output} = 2019-11-08 16:36:03 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 16:36:03 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191108 16:36:04.701" starttime="20191108 16:36:00.259"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:36:04.703" level="INFO">2019-11-08 16:36:03 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 16:36:03 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 16:36:03 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:36:04.703" starttime="20191108 16:36:04.702"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:36:04.705" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:36:04.705" starttime="20191108 16:36:04.704"></status>
</kw>
<status status="PASS" endtime="20191108 16:36:04.706" starttime="20191108 16:36:00.258"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:36:04.711" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:36:07.027" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:36:07.027" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRest...</msg>
<status status="PASS" endtime="20191108 16:36:07.027" starttime="20191108 16:36:04.708"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:36:07.029" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191108 16:36:07.029" starttime="20191108 16:36:07.028"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:36:07.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:36:07.031" starttime="20191108 16:36:07.030"></status>
</kw>
<msg timestamp="20191108 16:36:07.031" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRest...</msg>
<status status="PASS" endtime="20191108 16:36:07.031" starttime="20191108 16:36:04.706"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:07.032" starttime="20191108 16:36:07.032"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:36:07.033" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:36:07.033" starttime="20191108 16:36:07.032"></status>
</kw>
<status status="PASS" endtime="20191108 16:36:07.034" starttime="20191108 16:36:00.251"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:36:07.036" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 16:36:07.036" starttime="20191108 16:36:07.035"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:07.038" starttime="20191108 16:36:07.037"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:36:07.039" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:36:08.245" level="INFO">Read output: Last login: Fri Nov  8 16:35:55 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:36:08.246" starttime="20191108 16:36:07.038"></status>
</kw>
<status status="PASS" endtime="20191108 16:36:08.246" starttime="20191108 16:36:07.036"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 16:36:08.247" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 16:36:10.376" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:36:10.376" starttime="20191108 16:36:08.246"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 16:36:10.378" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:36:10.443" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:36:10.443" level="INFO">${startupMsg} = hadoop    1201  345  0.0 34476588 214188 ?     Sl   16:36   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 16:36:10.443" starttime="20191108 16:36:10.377"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:36:10.508" starttime="20191108 16:36:10.444"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:10.510" starttime="20191108 16:36:10.509"></status>
</kw>
<status status="PASS" endtime="20191108 16:36:10.510" starttime="20191108 16:36:07.034"></status>
</kw>
<status status="PASS" endtime="20191108 16:36:10.510" starttime="20191108 16:35:53.520"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:36:10.516" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:36:12.351" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:36:12.351" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:12.351" starttime="20191108 16:36:10.513"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:36:12.353" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:12.353" starttime="20191108 16:36:12.352"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:36:12.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:36:12.354" starttime="20191108 16:36:12.353"></status>
</kw>
<msg timestamp="20191108 16:36:12.354" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:12.354" starttime="20191108 16:36:10.512"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 16:36:12.354" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:12.354" starttime="20191108 16:36:12.354"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:12.355" starttime="20191108 16:36:12.355"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:12.356" starttime="20191108 16:36:12.355"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 16:36:12.356" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 16:36:12.356" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:12.356" starttime="20191108 16:36:12.356"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 16:36:12.357" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 16:36:12.357" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 16:36:12.357" starttime="20191108 16:36:12.356"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 16:36:12.358" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 16:36:12.358" starttime="20191108 16:36:12.357"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 16:36:12.358" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 16:36:12.358" starttime="20191108 16:36:12.358"></status>
</kw>
<msg timestamp="20191108 16:36:12.358" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 16:36:12.359" starttime="20191108 16:36:10.511"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:36:12.360" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 16:36:12.361" starttime="20191108 16:36:12.360"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:12.362" starttime="20191108 16:36:12.362"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:36:12.363" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:36:13.551" level="INFO">Read output: Last login: Fri Nov  8 16:35:50 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:36:13.551" starttime="20191108 16:36:12.363"></status>
</kw>
<status status="PASS" endtime="20191108 16:36:13.551" starttime="20191108 16:36:12.361"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 16:36:13.552" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 16:36:14.721" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:36:14.722" starttime="20191108 16:36:13.552"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 16:36:14.723" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:36:14.800" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:36:14.800" level="INFO">${shutdownMsg} = hadoop    1602  0.0  0.0   9556  1168 ?        Ss   16:36   0:00 bash -c sudo ps aux | grep om
hadoop    1604  0.0  0.0   9088   672 ?        S    16:36   0:00 grep om</msg>
<status status="PASS" endtime="20191108 16:36:14.800" starttime="20191108 16:36:14.722"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:36:14.866" starttime="20191108 16:36:14.801"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:14.867" starttime="20191108 16:36:14.866"></status>
</kw>
<msg timestamp="20191108 16:36:14.867" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 16:36:14.867" starttime="20191108 16:36:12.359"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:36:14.871" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:36:26.985" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:36:26.985" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:26.985" starttime="20191108 16:36:14.868"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:36:26.987" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:26.987" starttime="20191108 16:36:26.986"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:36:26.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:36:26.988" starttime="20191108 16:36:26.988"></status>
</kw>
<msg timestamp="20191108 16:36:26.989" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:26.989" starttime="20191108 16:36:14.868"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 16:36:26.990" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:26.990" starttime="20191108 16:36:26.989"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:26.991" starttime="20191108 16:36:26.990"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:26.992" starttime="20191108 16:36:26.991"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 16:36:26.992" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 16:36:26.993" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191108 16:36:26.993" starttime="20191108 16:36:26.992"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 16:36:26.994" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191108 16:36:26.994" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 16:36:26.994" starttime="20191108 16:36:26.993"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 16:36:26.995" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191108 16:36:26.995" starttime="20191108 16:36:26.994"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 16:36:26.995" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191108 16:36:26.996" starttime="20191108 16:36:26.995"></status>
</kw>
<msg timestamp="20191108 16:36:26.996" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191108 16:36:26.996" starttime="20191108 16:36:14.867"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:26.997" starttime="20191108 16:36:26.996"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 16:36:26.999" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191108 16:36:26.999" starttime="20191108 16:36:26.998"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 16:36:27.000" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191108 16:36:27.000" starttime="20191108 16:36:26.999"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 16:36:27.001" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191108 16:36:27.001" starttime="20191108 16:36:27.000"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:36:27.003" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:36:27.003" starttime="20191108 16:36:27.001"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:36:27.007" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:36:41.516" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:36:41.517" level="INFO">${output} = 2019-11-08 16:36:29 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191108 16:36:41.517" starttime="20191108 16:36:27.004"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:36:41.518" level="INFO">2019-11-08 16:36:29 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:36:30 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:36:31 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:36:32 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:36:33 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:36:34 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:36:35 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:36:36 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:36:37 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:36:38 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 16:36:39 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 16:36:39 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 16:36:39 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 16:36:41.519" starttime="20191108 16:36:41.518"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:36:41.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:36:41.520" starttime="20191108 16:36:41.519"></status>
</kw>
<status status="PASS" endtime="20191108 16:36:41.520" starttime="20191108 16:36:27.003"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 16:36:41.524" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 16:36:53.961" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 16:36:53.962" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
te...</msg>
<status status="PASS" endtime="20191108 16:36:53.962" starttime="20191108 16:36:41.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 16:36:53.963" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191108 16:36:53.963" starttime="20191108 16:36:53.962"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 16:36:53.964" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 16:36:53.964" starttime="20191108 16:36:53.963"></status>
</kw>
<msg timestamp="20191108 16:36:53.965" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
te...</msg>
<status status="PASS" endtime="20191108 16:36:53.965" starttime="20191108 16:36:41.520"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:53.965" starttime="20191108 16:36:53.965"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 16:36:53.967" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 16:36:53.967" starttime="20191108 16:36:53.966"></status>
</kw>
<status status="PASS" endtime="20191108 16:36:53.967" starttime="20191108 16:36:26.997"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 16:36:53.968" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 16:36:53.968" starttime="20191108 16:36:53.968"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:53.970" starttime="20191108 16:36:53.969"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 16:36:53.970" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 16:36:55.170" level="INFO">Read output: Last login: Fri Nov  8 16:36:12 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 16:36:55.171" starttime="20191108 16:36:53.970"></status>
</kw>
<status status="PASS" endtime="20191108 16:36:55.171" starttime="20191108 16:36:53.969"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 16:36:55.172" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 16:36:57.352" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 16:36:57.353" starttime="20191108 16:36:55.172"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 16:36:57.354" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 16:36:57.451" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 16:36:57.452" level="INFO">${startupMsg} = hadoop    1654  364  0.0 34483968 225136 ?     Sl   16:36   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 16:36:57.452" starttime="20191108 16:36:57.353"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 16:36:57.485" starttime="20191108 16:36:57.452"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 16:36:57.486" starttime="20191108 16:36:57.485"></status>
</kw>
<status status="PASS" endtime="20191108 16:36:57.486" starttime="20191108 16:36:53.967"></status>
</kw>
<status status="PASS" endtime="20191108 16:36:57.486" starttime="20191108 16:36:10.510"></status>
</kw>
<status status="PASS" endtime="20191108 16:36:57.486" starttime="20191108 16:34:23.221"></status>
</kw>
<status status="PASS" endtime="20191108 16:36:57.486" critical="yes" starttime="20191108 16:34:23.220"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191108 16:36:57.488" starttime="20191108 16:31:06.154"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
