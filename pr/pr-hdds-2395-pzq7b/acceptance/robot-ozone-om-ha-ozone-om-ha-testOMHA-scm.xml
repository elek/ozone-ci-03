<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191107 06:54:57.508" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:54:57.652" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:55:00.391" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:55:00.391" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191107 06:55:00.391" starttime="20191107 06:54:57.649"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:55:00.392" level="INFO"></msg>
<status status="PASS" endtime="20191107 06:55:00.392" starttime="20191107 06:55:00.392"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:55:00.393" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:55:00.393" starttime="20191107 06:55:00.393"></status>
</kw>
<status status="PASS" endtime="20191107 06:55:00.393" starttime="20191107 06:54:57.648"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:55:00.399" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:55:02.480" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:55:02.480" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191107 06:55:02.480" starttime="20191107 06:55:00.397"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:55:02.482" level="INFO"></msg>
<status status="PASS" endtime="20191107 06:55:02.482" starttime="20191107 06:55:02.481"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:55:02.482" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:55:02.482" starttime="20191107 06:55:02.482"></status>
</kw>
<status status="PASS" endtime="20191107 06:55:02.483" starttime="20191107 06:55:00.394"></status>
</kw>
<status status="PASS" endtime="20191107 06:55:02.483" starttime="20191107 06:54:57.648"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 06:55:02.484" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191107 06:55:02.484" starttime="20191107 06:55:02.484"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 06:55:02.485" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191107 06:55:02.485" starttime="20191107 06:55:02.484"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 06:55:02.486" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191107 06:55:02.486" starttime="20191107 06:55:02.485"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:55:02.487" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:55:02.487" starttime="20191107 06:55:02.486"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:55:02.490" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:55:07.223" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:55:07.223" level="INFO">${output} = 2019-11-07 06:55:05 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 06:55:05 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 06:55:07.223" starttime="20191107 06:55:02.488"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:55:07.224" level="INFO">2019-11-07 06:55:05 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 06:55:05 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 06:55:05 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 06:55:07.224" starttime="20191107 06:55:07.223"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:55:07.225" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:55:07.225" starttime="20191107 06:55:07.224"></status>
</kw>
<status status="PASS" endtime="20191107 06:55:07.225" starttime="20191107 06:55:02.487"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:55:07.228" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:55:09.551" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:55:09.551" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191107 06:55:09.551" starttime="20191107 06:55:07.226"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:55:09.552" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191107 06:55:09.552" starttime="20191107 06:55:09.552"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:55:09.553" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:55:09.553" starttime="20191107 06:55:09.552"></status>
</kw>
<msg timestamp="20191107 06:55:09.553" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191107 06:55:09.553" starttime="20191107 06:55:07.225"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:55:09.554" starttime="20191107 06:55:09.554"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:55:09.555" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:55:09.555" starttime="20191107 06:55:09.554"></status>
</kw>
<status status="PASS" endtime="20191107 06:55:09.555" starttime="20191107 06:55:02.483"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:55:09.558" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:55:11.557" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:55:11.557" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:55:11.557" starttime="20191107 06:55:09.556"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:55:11.559" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:55:11.559" starttime="20191107 06:55:11.558"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:55:11.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:55:11.559" starttime="20191107 06:55:11.559"></status>
</kw>
<msg timestamp="20191107 06:55:11.560" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:55:11.560" starttime="20191107 06:55:09.555"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 06:55:11.560" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:55:11.560" starttime="20191107 06:55:11.560"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 06:55:11.561" starttime="20191107 06:55:11.561"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 06:55:11.562" starttime="20191107 06:55:11.562"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 06:55:11.562" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 06:55:11.563" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:55:11.563" starttime="20191107 06:55:11.562"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 06:55:11.563" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 06:55:11.563" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 06:55:11.563" starttime="20191107 06:55:11.563"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 06:55:11.564" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 06:55:11.564" starttime="20191107 06:55:11.563"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 06:55:11.564" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 06:55:11.564" starttime="20191107 06:55:11.564"></status>
</kw>
<msg timestamp="20191107 06:55:11.565" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 06:55:11.565" starttime="20191107 06:55:09.555"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:55:11.566" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 06:55:11.566" starttime="20191107 06:55:11.565"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:55:11.567" starttime="20191107 06:55:11.567"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:55:11.568" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:55:12.808" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:55:12.809" starttime="20191107 06:55:11.567"></status>
</kw>
<status status="PASS" endtime="20191107 06:55:12.809" starttime="20191107 06:55:11.566"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 06:55:12.810" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 06:55:22.960" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:55:22.960" starttime="20191107 06:55:12.809"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 06:55:22.962" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:55:23.060" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:55:23.061" level="INFO">${shutdownMsg} = hadoop     454  0.0  0.0   9556  1168 ?        Ss   06:55   0:00 bash -c sudo ps aux | grep om
hadoop     456  0.0  0.0   9088   672 ?        S    06:55   0:00 grep om</msg>
<status status="PASS" endtime="20191107 06:55:23.061" starttime="20191107 06:55:22.961"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:55:23.126" starttime="20191107 06:55:23.061"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:55:23.127" starttime="20191107 06:55:23.126"></status>
</kw>
<msg timestamp="20191107 06:55:23.128" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 06:55:23.128" starttime="20191107 06:55:11.565"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:55:23.132" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:55:35.263" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:55:35.263" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:55:35.263" starttime="20191107 06:55:23.130"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:55:35.264" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:55:35.264" starttime="20191107 06:55:35.263"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:55:35.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:55:35.265" starttime="20191107 06:55:35.264"></status>
</kw>
<msg timestamp="20191107 06:55:35.265" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:55:35.265" starttime="20191107 06:55:23.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 06:55:35.266" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:55:35.266" starttime="20191107 06:55:35.265"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 06:55:35.266" starttime="20191107 06:55:35.266"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 06:55:35.267" starttime="20191107 06:55:35.266"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 06:55:35.267" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 06:55:35.267" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:55:35.267" starttime="20191107 06:55:35.267"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 06:55:35.268" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 06:55:35.268" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 06:55:35.268" starttime="20191107 06:55:35.268"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 06:55:35.269" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 06:55:35.269" starttime="20191107 06:55:35.268"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 06:55:35.269" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 06:55:35.269" starttime="20191107 06:55:35.269"></status>
</kw>
<msg timestamp="20191107 06:55:35.270" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191107 06:55:35.270" starttime="20191107 06:55:23.128"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 06:55:35.270" starttime="20191107 06:55:35.270"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 06:55:35.271" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191107 06:55:35.271" starttime="20191107 06:55:35.271"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 06:55:35.272" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191107 06:55:35.272" starttime="20191107 06:55:35.272"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 06:55:35.273" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191107 06:55:35.273" starttime="20191107 06:55:35.272"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:55:35.286" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:55:35.286" starttime="20191107 06:55:35.273"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:55:35.289" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:55:50.223" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:55:50.223" level="INFO">${output} = 2019-11-07 06:55:38 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191107 06:55:50.223" starttime="20191107 06:55:35.287"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:55:50.226" level="INFO">2019-11-07 06:55:38 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:55:39 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:55:40 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:55:41 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:55:42 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:55:43 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:55:44 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:55:45 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:55:46 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:55:47 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:55:48 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 06:55:48 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 06:55:48 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 06:55:50.226" starttime="20191107 06:55:50.224"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:55:50.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:55:50.228" starttime="20191107 06:55:50.226"></status>
</kw>
<status status="PASS" endtime="20191107 06:55:50.229" starttime="20191107 06:55:35.286"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:55:50.233" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:56:02.523" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:56:02.523" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191107 06:56:02.523" starttime="20191107 06:55:50.230"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:56:02.525" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191107 06:56:02.525" starttime="20191107 06:56:02.524"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:56:02.526" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:56:02.526" starttime="20191107 06:56:02.525"></status>
</kw>
<msg timestamp="20191107 06:56:02.526" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191107 06:56:02.527" starttime="20191107 06:55:50.229"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:02.527" starttime="20191107 06:56:02.527"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:56:02.528" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:56:02.529" starttime="20191107 06:56:02.528"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:02.529" starttime="20191107 06:55:35.270"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:56:02.531" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 06:56:02.531" starttime="20191107 06:56:02.530"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:02.533" starttime="20191107 06:56:02.532"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:56:02.533" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:56:03.740" level="INFO">Read output: Last login: Thu Nov  7 06:55:11 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:56:03.740" starttime="20191107 06:56:02.533"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:03.741" starttime="20191107 06:56:02.531"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 06:56:03.742" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 06:56:05.912" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:56:05.912" starttime="20191107 06:56:03.741"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 06:56:05.913" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:56:06.021" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:56:06.021" level="INFO">${startupMsg} = hadoop     507  370  0.0 34485280 230000 ?     Sl   06:56   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 06:56:06.021" starttime="20191107 06:56:05.912"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:56:06.086" starttime="20191107 06:56:06.022"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:06.088" starttime="20191107 06:56:06.087"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:06.088" starttime="20191107 06:56:02.529"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:06.088" critical="yes" starttime="20191107 06:54:57.646"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191107 06:56:06.093" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191107 06:56:06.093" starttime="20191107 06:56:06.090"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191107 06:56:06.095" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191107 06:56:06.095" starttime="20191107 06:56:06.093"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:56:06.097" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 06:56:06.097" starttime="20191107 06:56:06.096"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:06.099" starttime="20191107 06:56:06.098"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:56:06.100" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:56:07.288" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:56:07.288" starttime="20191107 06:56:06.100"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:07.288" starttime="20191107 06:56:06.098"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 06:56:07.289" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 06:56:17.440" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:56:17.441" starttime="20191107 06:56:07.289"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 06:56:17.442" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:56:17.508" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:56:17.508" level="INFO">${shutdownMsg} = hadoop     501  0.0  0.0   9556  1168 ?        Ss   06:56   0:00 bash -c sudo ps aux | grep om
hadoop     503  0.0  0.0   9088   668 ?        S    06:56   0:00 grep om</msg>
<status status="PASS" endtime="20191107 06:56:17.508" starttime="20191107 06:56:17.441"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:56:17.574" starttime="20191107 06:56:17.509"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:17.575" starttime="20191107 06:56:17.575"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:17.576" starttime="20191107 06:56:06.096"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:56:17.577" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 06:56:17.578" starttime="20191107 06:56:17.577"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:17.579" starttime="20191107 06:56:17.578"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:56:17.580" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:56:18.785" level="INFO">Read output: Last login: Thu Nov  7 06:56:06 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:56:18.785" starttime="20191107 06:56:17.579"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:18.786" starttime="20191107 06:56:17.578"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 06:56:18.787" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 06:56:18.803" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:56:18.803" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 06:56:18.803" starttime="20191107 06:56:18.786"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 06:56:18.804" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 06:56:18.805" starttime="20191107 06:56:18.804"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 06:56:18.806" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 06:56:18.806" starttime="20191107 06:56:18.805"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 06:56:18.887" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 06:56:18.900" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191107 06:56:18.900" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191107 06:56:18.900" starttime="20191107 06:56:18.806"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 06:56:18.902" level="INFO">Length is 2</msg>
<msg timestamp="20191107 06:56:18.902" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191107 06:56:18.902" starttime="20191107 06:56:18.901"></status>
</kw>
<msg timestamp="20191107 06:56:18.903" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191107 06:56:18.903" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191107 06:56:18.903" starttime="20191107 06:56:17.576"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:56:18.908" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:56:21.057" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:56:21.057" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:56:21.057" starttime="20191107 06:56:18.905"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:56:21.058" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:56:21.058" starttime="20191107 06:56:21.058"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:56:21.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:56:21.059" starttime="20191107 06:56:21.059"></status>
</kw>
<msg timestamp="20191107 06:56:21.060" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:56:21.060" starttime="20191107 06:56:18.904"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 06:56:21.060" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:56:21.060" starttime="20191107 06:56:21.060"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:21.061" starttime="20191107 06:56:21.061"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:21.062" starttime="20191107 06:56:21.061"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 06:56:21.062" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 06:56:21.062" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:56:21.062" starttime="20191107 06:56:21.062"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 06:56:21.063" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 06:56:21.063" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 06:56:21.063" starttime="20191107 06:56:21.063"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 06:56:21.064" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 06:56:21.064" starttime="20191107 06:56:21.064"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 06:56:21.065" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 06:56:21.065" starttime="20191107 06:56:21.064"></status>
</kw>
<msg timestamp="20191107 06:56:21.065" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 06:56:21.065" starttime="20191107 06:56:18.903"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191107 06:56:21.068" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191107 06:56:21.068" starttime="20191107 06:56:21.066"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 06:56:21.070" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191107 06:56:21.070" starttime="20191107 06:56:21.069"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 06:56:21.070" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191107 06:56:21.070" starttime="20191107 06:56:21.070"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:56:21.074" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:56:25.677" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:56:25.677" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 06:56:25.678" starttime="20191107 06:56:21.072"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:56:25.679" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 06:56:25.679" starttime="20191107 06:56:25.678"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:56:25.680" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:56:25.680" starttime="20191107 06:56:25.679"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:25.681" starttime="20191107 06:56:21.071"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:56:25.685" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:56:28.046" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:56:28.047" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573109783394,
  "modificationTime": 1573109785256,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 06:56:28.047" starttime="20191107 06:56:25.683"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:56:28.048" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573109783394,
  "modificationTime": 1573109785256,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103095322763919360,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 06:56:28.048" starttime="20191107 06:56:28.047"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:56:28.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:56:28.049" starttime="20191107 06:56:28.048"></status>
</kw>
<msg timestamp="20191107 06:56:28.049" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573109783394,
  "modificationTime": 1573109785256,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 06:56:28.049" starttime="20191107 06:56:25.681"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:28.050" starttime="20191107 06:56:28.050"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:28.050" starttime="20191107 06:56:21.071"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:28.050" starttime="20191107 06:56:21.069"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 06:56:28.051" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191107 06:56:28.051" starttime="20191107 06:56:28.051"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 06:56:28.052" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191107 06:56:28.052" starttime="20191107 06:56:28.052"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:56:28.056" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:56:32.815" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:56:32.816" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 06:56:32.816" starttime="20191107 06:56:28.054"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:56:32.817" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 06:56:32.817" starttime="20191107 06:56:32.816"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:56:32.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:56:32.818" starttime="20191107 06:56:32.817"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:32.818" starttime="20191107 06:56:28.053"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:56:32.822" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:56:35.078" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:56:35.078" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573109790291,
  "modificationTime": 1573109792403,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 06:56:35.078" starttime="20191107 06:56:32.820"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:56:35.079" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573109790291,
  "modificationTime": 1573109792403,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103095323216379900,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 06:56:35.080" starttime="20191107 06:56:35.078"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:56:35.081" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:56:35.081" starttime="20191107 06:56:35.080"></status>
</kw>
<msg timestamp="20191107 06:56:35.082" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573109790291,
  "modificationTime": 1573109792403,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 06:56:35.082" starttime="20191107 06:56:32.819"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:35.083" starttime="20191107 06:56:35.082"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:35.083" starttime="20191107 06:56:28.052"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:35.083" starttime="20191107 06:56:28.050"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 06:56:35.085" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191107 06:56:35.085" starttime="20191107 06:56:35.084"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 06:56:35.086" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191107 06:56:35.086" starttime="20191107 06:56:35.085"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:56:35.091" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:56:39.537" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:56:39.538" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 06:56:39.538" starttime="20191107 06:56:35.089"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:56:39.540" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 06:56:39.541" starttime="20191107 06:56:39.539"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:56:39.542" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:56:39.542" starttime="20191107 06:56:39.541"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:39.542" starttime="20191107 06:56:35.087"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:56:39.549" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:56:41.860" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:56:41.861" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573109797274,
  "modificationTime": 1573109799127,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 06:56:41.861" starttime="20191107 06:56:39.546"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:56:41.863" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573109797274,
  "modificationTime": 1573109799127,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103095323674017800,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 06:56:41.863" starttime="20191107 06:56:41.862"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:56:41.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:56:41.864" starttime="20191107 06:56:41.863"></status>
</kw>
<msg timestamp="20191107 06:56:41.865" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573109797274,
  "modificationTime": 1573109799127,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 06:56:41.865" starttime="20191107 06:56:39.543"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:41.866" starttime="20191107 06:56:41.865"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:41.866" starttime="20191107 06:56:35.086"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:41.866" starttime="20191107 06:56:35.084"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 06:56:41.868" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191107 06:56:41.868" starttime="20191107 06:56:41.867"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 06:56:41.869" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191107 06:56:41.869" starttime="20191107 06:56:41.868"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:56:41.874" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:56:46.402" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:56:46.402" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 06:56:46.402" starttime="20191107 06:56:41.871"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:56:46.404" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 06:56:46.405" starttime="20191107 06:56:46.403"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:56:46.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:56:46.406" starttime="20191107 06:56:46.405"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:46.406" starttime="20191107 06:56:41.870"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:56:46.412" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:56:48.644" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:56:48.645" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573109804044,
  "modificationTime": 1573109805988,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 06:56:48.645" starttime="20191107 06:56:46.408"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:56:48.647" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573109804044,
  "modificationTime": 1573109805988,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103095324117762050,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 06:56:48.647" starttime="20191107 06:56:48.646"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:56:48.648" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:56:48.648" starttime="20191107 06:56:48.647"></status>
</kw>
<msg timestamp="20191107 06:56:48.649" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573109804044,
  "modificationTime": 1573109805988,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 06:56:48.649" starttime="20191107 06:56:46.407"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:48.650" starttime="20191107 06:56:48.649"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:48.650" starttime="20191107 06:56:41.869"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:48.650" starttime="20191107 06:56:41.867"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 06:56:48.652" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:56:48.652" starttime="20191107 06:56:48.651"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 06:56:48.653" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:56:48.653" starttime="20191107 06:56:48.652"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:56:48.658" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:56:53.139" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:56:53.140" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 06:56:53.140" starttime="20191107 06:56:48.656"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:56:53.142" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 06:56:53.142" starttime="20191107 06:56:53.141"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:56:53.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:56:53.143" starttime="20191107 06:56:53.142"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:53.143" starttime="20191107 06:56:48.654"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:56:53.149" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:56:55.409" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:56:55.409" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573109810888,
  "modificationTime": 1573109812733,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 06:56:55.409" starttime="20191107 06:56:53.146"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:56:55.411" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573109810888,
  "modificationTime": 1573109812733,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103095324566290430,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 06:56:55.411" starttime="20191107 06:56:55.410"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:56:55.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:56:55.412" starttime="20191107 06:56:55.411"></status>
</kw>
<msg timestamp="20191107 06:56:55.412" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573109810888,
  "modificationTime": 1573109812733,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 06:56:55.412" starttime="20191107 06:56:53.144"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:55.413" starttime="20191107 06:56:55.412"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:55.413" starttime="20191107 06:56:48.653"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:55.413" starttime="20191107 06:56:48.651"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:55.413" starttime="20191107 06:56:21.069"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:55.414" starttime="20191107 06:56:21.068"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:56:55.415" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 06:56:55.415" starttime="20191107 06:56:55.415"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:55.417" starttime="20191107 06:56:55.416"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:56:55.417" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:56:56.623" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:56:56.623" starttime="20191107 06:56:55.417"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:56.623" starttime="20191107 06:56:55.415"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 06:56:56.625" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 06:56:56.640" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:56:56.640" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 06:56:56.640" starttime="20191107 06:56:56.624"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 06:56:56.641" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 06:56:56.641" starttime="20191107 06:56:56.641"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 06:56:56.642" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 06:56:56.643" starttime="20191107 06:56:56.642"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 06:56:56.723" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 06:56:56.734" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191107 06:56:56.734" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191107 06:56:56.734" starttime="20191107 06:56:56.643"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 06:56:56.735" level="INFO">Length is 3</msg>
<msg timestamp="20191107 06:56:56.735" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191107 06:56:56.736" starttime="20191107 06:56:56.735"></status>
</kw>
<msg timestamp="20191107 06:56:56.736" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191107 06:56:56.736" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191107 06:56:56.736" starttime="20191107 06:56:55.414"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191107 06:56:56.737" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191107 06:56:56.738" starttime="20191107 06:56:56.737"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:56.738" starttime="20191107 06:56:21.066"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:56.738" starttime="20191107 06:56:21.065"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:56.739" starttime="20191107 06:56:56.738"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:56:56.741" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 06:56:56.741" starttime="20191107 06:56:56.740"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:56:56.743" starttime="20191107 06:56:56.742"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:56:56.744" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:56:57.949" level="INFO">Read output: Last login: Thu Nov  7 06:56:17 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:56:57.949" starttime="20191107 06:56:56.743"></status>
</kw>
<status status="PASS" endtime="20191107 06:56:57.950" starttime="20191107 06:56:56.741"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 06:56:57.951" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 06:57:00.130" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:57:00.131" starttime="20191107 06:56:57.950"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 06:57:00.132" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:57:00.229" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:57:00.229" level="INFO">${startupMsg} = hadoop     576  392  0.0 34480816 229592 ?     Sl   06:56   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 06:57:00.230" starttime="20191107 06:57:00.131"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:57:00.294" starttime="20191107 06:57:00.230"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:00.295" starttime="20191107 06:57:00.295"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:00.295" starttime="20191107 06:56:56.739"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:57:00.297" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 06:57:00.297" starttime="20191107 06:57:00.296"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:00.298" starttime="20191107 06:57:00.298"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:57:00.299" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:57:01.486" level="INFO">Read output: Last login: Thu Nov  7 06:56:56 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:57:01.486" starttime="20191107 06:57:00.298"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:01.486" starttime="20191107 06:57:00.297"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 06:57:01.487" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 06:57:01.502" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:57:01.502" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 06:57:01.502" starttime="20191107 06:57:01.487"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 06:57:01.503" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 06:57:01.503" starttime="20191107 06:57:01.502"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 06:57:01.504" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 06:57:01.504" starttime="20191107 06:57:01.503"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 06:57:01.584" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 06:57:01.596" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191107 06:57:01.596" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191107 06:57:01.596" starttime="20191107 06:57:01.504"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 06:57:01.597" level="INFO">Length is 2</msg>
<msg timestamp="20191107 06:57:01.597" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191107 06:57:01.597" starttime="20191107 06:57:01.596"></status>
</kw>
<msg timestamp="20191107 06:57:01.597" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191107 06:57:01.597" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191107 06:57:01.597" starttime="20191107 06:57:00.296"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:01.598" starttime="20191107 06:57:01.598"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191107 06:57:02.599" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191107 06:57:02.599" starttime="20191107 06:57:01.598"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:02.600" starttime="20191107 06:57:00.296"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:57:02.602" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 06:57:02.602" starttime="20191107 06:57:02.601"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:02.604" starttime="20191107 06:57:02.603"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:57:02.605" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:57:03.792" level="INFO">Read output: Last login: Thu Nov  7 06:57:00 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:57:03.793" starttime="20191107 06:57:02.604"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:03.793" starttime="20191107 06:57:02.602"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 06:57:03.794" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 06:57:03.809" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:57:03.810" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 06:57:03.810" starttime="20191107 06:57:03.794"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 06:57:03.811" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 06:57:03.811" starttime="20191107 06:57:03.810"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 06:57:03.812" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 06:57:03.812" starttime="20191107 06:57:03.811"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 06:57:03.891" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 06:57:03.898" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191107 06:57:03.899" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191107 06:57:03.899" starttime="20191107 06:57:03.812"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 06:57:03.899" level="INFO">Length is 3</msg>
<msg timestamp="20191107 06:57:03.899" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191107 06:57:03.899" starttime="20191107 06:57:03.899"></status>
</kw>
<msg timestamp="20191107 06:57:03.900" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191107 06:57:03.900" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191107 06:57:03.900" starttime="20191107 06:57:02.600"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191107 06:57:03.901" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191107 06:57:03.901" starttime="20191107 06:57:03.900"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:03.901" starttime="20191107 06:57:02.600"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:03.901" starttime="20191107 06:57:00.295"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:03.902" starttime="20191107 06:57:03.902"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:03.903" starttime="20191107 06:57:03.902"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:03.903" critical="yes" starttime="20191107 06:56:06.089"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:57:03.908" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:57:05.943" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:57:05.944" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:05.944" starttime="20191107 06:57:03.906"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:57:05.945" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:05.945" starttime="20191107 06:57:05.944"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:57:05.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:57:05.946" starttime="20191107 06:57:05.945"></status>
</kw>
<msg timestamp="20191107 06:57:05.946" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:05.946" starttime="20191107 06:57:03.905"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 06:57:05.947" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:05.947" starttime="20191107 06:57:05.946"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:05.947" starttime="20191107 06:57:05.947"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:05.948" starttime="20191107 06:57:05.947"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 06:57:05.948" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 06:57:05.948" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:05.949" starttime="20191107 06:57:05.948"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 06:57:05.949" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 06:57:05.949" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 06:57:05.949" starttime="20191107 06:57:05.949"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 06:57:05.950" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 06:57:05.950" starttime="20191107 06:57:05.949"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 06:57:05.950" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 06:57:05.951" starttime="20191107 06:57:05.950"></status>
</kw>
<msg timestamp="20191107 06:57:05.951" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 06:57:05.951" starttime="20191107 06:57:03.905"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:57:05.952" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 06:57:05.953" starttime="20191107 06:57:05.952"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:05.954" starttime="20191107 06:57:05.953"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:57:05.954" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:57:07.159" level="INFO">Read output: Last login: Thu Nov  7 06:56:55 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:57:07.161" starttime="20191107 06:57:05.954"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:07.161" starttime="20191107 06:57:05.953"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 06:57:07.162" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 06:57:17.323" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:57:17.324" starttime="20191107 06:57:07.162"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 06:57:17.325" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:57:17.402" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:57:17.402" level="INFO">${shutdownMsg} = hadoop     535  0.0  0.0   9556  1164 ?        Ss   06:57   0:00 bash -c sudo ps aux | grep om
hadoop     537  0.0  0.0   9088   668 ?        S    06:57   0:00 grep om</msg>
<status status="PASS" endtime="20191107 06:57:17.402" starttime="20191107 06:57:17.324"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:57:17.436" starttime="20191107 06:57:17.403"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:17.437" starttime="20191107 06:57:17.436"></status>
</kw>
<msg timestamp="20191107 06:57:17.437" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 06:57:17.437" starttime="20191107 06:57:05.951"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:57:17.443" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:57:19.686" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:57:19.686" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:19.686" starttime="20191107 06:57:17.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:57:19.687" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:19.687" starttime="20191107 06:57:19.687"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:57:19.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:57:19.688" starttime="20191107 06:57:19.688"></status>
</kw>
<msg timestamp="20191107 06:57:19.689" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:19.689" starttime="20191107 06:57:17.438"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 06:57:19.689" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:19.689" starttime="20191107 06:57:19.689"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:19.690" starttime="20191107 06:57:19.689"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:19.690" starttime="20191107 06:57:19.690"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 06:57:19.691" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 06:57:19.691" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:19.691" starttime="20191107 06:57:19.691"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 06:57:19.692" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 06:57:19.692" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 06:57:19.692" starttime="20191107 06:57:19.691"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 06:57:19.692" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 06:57:19.693" starttime="20191107 06:57:19.692"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 06:57:19.693" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 06:57:19.693" starttime="20191107 06:57:19.693"></status>
</kw>
<msg timestamp="20191107 06:57:19.694" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191107 06:57:19.694" starttime="20191107 06:57:17.438"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:19.694" starttime="20191107 06:57:19.694"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 06:57:19.695" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191107 06:57:19.695" starttime="20191107 06:57:19.695"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 06:57:19.696" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191107 06:57:19.696" starttime="20191107 06:57:19.696"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 06:57:19.697" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191107 06:57:19.697" starttime="20191107 06:57:19.696"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:57:19.698" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:57:19.698" starttime="20191107 06:57:19.697"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:57:19.701" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:57:24.179" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:57:24.179" level="INFO">${output} = 2019-11-07 06:57:22 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 06:57:22 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 06:57:24.180" starttime="20191107 06:57:19.699"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:57:24.181" level="INFO">2019-11-07 06:57:22 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 06:57:22 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 06:57:22 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 06:57:24.182" starttime="20191107 06:57:24.180"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:57:24.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:57:24.183" starttime="20191107 06:57:24.182"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:24.183" starttime="20191107 06:57:19.699"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:57:24.196" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:57:26.666" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:57:26.666" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:57:26.666" starttime="20191107 06:57:24.188"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:57:26.670" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:57:26.670" starttime="20191107 06:57:26.668"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:57:26.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:57:26.671" starttime="20191107 06:57:26.670"></status>
</kw>
<msg timestamp="20191107 06:57:26.673" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:57:26.673" starttime="20191107 06:57:24.183"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:26.674" starttime="20191107 06:57:26.673"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:57:26.677" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:57:26.677" starttime="20191107 06:57:26.674"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:26.678" starttime="20191107 06:57:19.694"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:57:26.681" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 06:57:26.681" starttime="20191107 06:57:26.680"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:26.684" starttime="20191107 06:57:26.682"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:57:26.685" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:57:27.894" level="INFO">Read output: Last login: Thu Nov  7 06:57:06 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:57:27.894" starttime="20191107 06:57:26.684"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:27.895" starttime="20191107 06:57:26.681"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 06:57:27.896" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 06:57:30.066" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:57:30.067" starttime="20191107 06:57:27.895"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 06:57:30.068" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:57:30.166" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:57:30.166" level="INFO">${startupMsg} = hadoop     588  344  0.0 34473472 210220 ?     Sl   06:57   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 06:57:30.167" starttime="20191107 06:57:30.067"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:57:30.232" starttime="20191107 06:57:30.167"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:30.233" starttime="20191107 06:57:30.233"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:30.234" starttime="20191107 06:57:26.678"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:30.234" starttime="20191107 06:57:03.905"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:57:30.239" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:57:32.163" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:57:32.163" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:32.163" starttime="20191107 06:57:30.236"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:57:32.165" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:32.165" starttime="20191107 06:57:32.164"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:57:32.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:57:32.166" starttime="20191107 06:57:32.165"></status>
</kw>
<msg timestamp="20191107 06:57:32.167" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:32.167" starttime="20191107 06:57:30.235"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 06:57:32.168" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:32.168" starttime="20191107 06:57:32.167"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:32.169" starttime="20191107 06:57:32.168"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:32.170" starttime="20191107 06:57:32.169"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 06:57:32.171" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 06:57:32.171" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:32.171" starttime="20191107 06:57:32.170"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 06:57:32.173" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 06:57:32.173" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 06:57:32.173" starttime="20191107 06:57:32.172"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 06:57:32.174" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 06:57:32.174" starttime="20191107 06:57:32.173"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 06:57:32.175" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 06:57:32.175" starttime="20191107 06:57:32.174"></status>
</kw>
<msg timestamp="20191107 06:57:32.175" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 06:57:32.175" starttime="20191107 06:57:30.235"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:57:32.178" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 06:57:32.178" starttime="20191107 06:57:32.177"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:32.180" starttime="20191107 06:57:32.179"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:57:32.181" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:57:33.381" level="INFO">Read output: Last login: Thu Nov  7 06:57:02 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:57:33.381" starttime="20191107 06:57:32.180"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:33.382" starttime="20191107 06:57:32.178"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 06:57:33.383" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 06:57:34.533" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:57:34.534" starttime="20191107 06:57:33.382"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 06:57:34.536" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:57:34.634" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:57:34.634" level="INFO">${shutdownMsg} = hadoop    1114  0.0  0.0   9556  1168 ?        Ss   06:57   0:00 bash -c sudo ps aux | grep om
hadoop    1116  0.0  0.0   9088   668 ?        S    06:57   0:00 grep om</msg>
<status status="PASS" endtime="20191107 06:57:34.634" starttime="20191107 06:57:34.535"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:57:34.700" starttime="20191107 06:57:34.635"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:34.701" starttime="20191107 06:57:34.700"></status>
</kw>
<msg timestamp="20191107 06:57:34.701" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 06:57:34.701" starttime="20191107 06:57:32.176"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:57:34.705" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:57:47.006" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:57:47.006" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:47.006" starttime="20191107 06:57:34.703"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:57:47.008" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:47.008" starttime="20191107 06:57:47.007"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:57:47.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:57:47.009" starttime="20191107 06:57:47.008"></status>
</kw>
<msg timestamp="20191107 06:57:47.009" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:47.009" starttime="20191107 06:57:34.702"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 06:57:47.010" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:47.010" starttime="20191107 06:57:47.010"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:47.011" starttime="20191107 06:57:47.011"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:47.012" starttime="20191107 06:57:47.011"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 06:57:47.013" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 06:57:47.013" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:47.013" starttime="20191107 06:57:47.012"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 06:57:47.014" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 06:57:47.014" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 06:57:47.014" starttime="20191107 06:57:47.013"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 06:57:47.015" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 06:57:47.015" starttime="20191107 06:57:47.014"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 06:57:47.016" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 06:57:47.016" starttime="20191107 06:57:47.015"></status>
</kw>
<msg timestamp="20191107 06:57:47.016" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191107 06:57:47.016" starttime="20191107 06:57:34.701"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:47.018" starttime="20191107 06:57:47.017"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 06:57:47.020" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191107 06:57:47.020" starttime="20191107 06:57:47.019"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 06:57:47.022" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191107 06:57:47.022" starttime="20191107 06:57:47.021"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 06:57:47.023" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191107 06:57:47.023" starttime="20191107 06:57:47.022"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:57:47.025" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:57:47.025" starttime="20191107 06:57:47.023"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:57:47.029" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:57:51.439" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:57:51.439" level="INFO">${output} = 2019-11-07 06:57:49 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 06:57:49 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 06:57:51.439" starttime="20191107 06:57:47.027"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:57:51.441" level="INFO">2019-11-07 06:57:49 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 06:57:49 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 06:57:49 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 06:57:51.441" starttime="20191107 06:57:51.440"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:57:51.442" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:57:51.443" starttime="20191107 06:57:51.442"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:51.443" starttime="20191107 06:57:47.026"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:57:51.447" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:57:53.673" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:57:53.673" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:57:53.673" starttime="20191107 06:57:51.444"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:57:53.675" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:57:53.675" starttime="20191107 06:57:53.674"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:57:53.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:57:53.677" starttime="20191107 06:57:53.676"></status>
</kw>
<msg timestamp="20191107 06:57:53.677" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:57:53.677" starttime="20191107 06:57:51.443"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:53.678" starttime="20191107 06:57:53.678"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:57:53.680" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:57:53.680" starttime="20191107 06:57:53.679"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:53.680" starttime="20191107 06:57:47.018"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:57:53.682" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 06:57:53.682" starttime="20191107 06:57:53.681"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:53.684" starttime="20191107 06:57:53.683"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:57:53.684" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:57:54.873" level="INFO">Read output: Last login: Thu Nov  7 06:57:32 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:57:54.874" starttime="20191107 06:57:53.684"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:54.874" starttime="20191107 06:57:53.682"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 06:57:54.876" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 06:57:57.055" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:57:57.055" starttime="20191107 06:57:54.875"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 06:57:57.056" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:57:57.111" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:57:57.111" level="INFO">${startupMsg} = hadoop    1165  360  0.0 34479612 225352 ?     Sl   06:57   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 06:57:57.111" starttime="20191107 06:57:57.055"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:57:57.176" starttime="20191107 06:57:57.112"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:57.177" starttime="20191107 06:57:57.177"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:57.177" starttime="20191107 06:57:53.680"></status>
</kw>
<status status="PASS" endtime="20191107 06:57:57.177" starttime="20191107 06:57:30.234"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:57:57.181" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:57:59.028" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:57:59.028" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:59.028" starttime="20191107 06:57:57.179"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:57:59.029" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:59.029" starttime="20191107 06:57:59.029"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:57:59.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:57:59.030" starttime="20191107 06:57:59.029"></status>
</kw>
<msg timestamp="20191107 06:57:59.030" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:59.030" starttime="20191107 06:57:57.178"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 06:57:59.031" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:59.031" starttime="20191107 06:57:59.031"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:59.032" starttime="20191107 06:57:59.031"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:59.032" starttime="20191107 06:57:59.032"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 06:57:59.033" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 06:57:59.033" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:57:59.033" starttime="20191107 06:57:59.032"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 06:57:59.034" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 06:57:59.034" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 06:57:59.034" starttime="20191107 06:57:59.034"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 06:57:59.035" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 06:57:59.035" starttime="20191107 06:57:59.034"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 06:57:59.035" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 06:57:59.035" starttime="20191107 06:57:59.035"></status>
</kw>
<msg timestamp="20191107 06:57:59.036" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 06:57:59.036" starttime="20191107 06:57:57.178"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:57:59.037" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 06:57:59.037" starttime="20191107 06:57:59.036"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:57:59.038" starttime="20191107 06:57:59.038"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:57:59.039" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:58:00.237" level="INFO">Read output: Last login: Thu Nov  7 06:57:26 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:58:00.237" starttime="20191107 06:57:59.038"></status>
</kw>
<status status="PASS" endtime="20191107 06:58:00.238" starttime="20191107 06:57:59.037"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 06:58:00.239" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 06:58:01.410" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:58:01.410" starttime="20191107 06:58:00.238"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 06:58:01.411" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:58:01.477" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:58:01.477" level="INFO">${shutdownMsg} = hadoop    1089  0.0  0.0   9556  1168 ?        Ss   06:58   0:00 bash -c sudo ps aux | grep om
hadoop    1091  0.0  0.0   9088   668 ?        S    06:58   0:00 grep om</msg>
<status status="PASS" endtime="20191107 06:58:01.477" starttime="20191107 06:58:01.411"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:58:01.542" starttime="20191107 06:58:01.478"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:01.544" starttime="20191107 06:58:01.543"></status>
</kw>
<msg timestamp="20191107 06:58:01.544" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 06:58:01.544" starttime="20191107 06:57:59.036"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:58:01.549" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:58:13.773" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:58:13.773" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:13.773" starttime="20191107 06:58:01.546"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:58:13.774" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:13.774" starttime="20191107 06:58:13.773"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:58:13.775" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:58:13.775" starttime="20191107 06:58:13.774"></status>
</kw>
<msg timestamp="20191107 06:58:13.775" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:13.775" starttime="20191107 06:58:01.545"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 06:58:13.776" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:13.776" starttime="20191107 06:58:13.776"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:13.777" starttime="20191107 06:58:13.776"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:13.777" starttime="20191107 06:58:13.777"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 06:58:13.778" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 06:58:13.778" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:13.778" starttime="20191107 06:58:13.777"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 06:58:13.779" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 06:58:13.779" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 06:58:13.779" starttime="20191107 06:58:13.778"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 06:58:13.779" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 06:58:13.780" starttime="20191107 06:58:13.779"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 06:58:13.780" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 06:58:13.780" starttime="20191107 06:58:13.780"></status>
</kw>
<msg timestamp="20191107 06:58:13.780" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191107 06:58:13.781" starttime="20191107 06:58:01.544"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:13.781" starttime="20191107 06:58:13.781"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 06:58:13.784" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191107 06:58:13.784" starttime="20191107 06:58:13.783"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 06:58:13.785" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191107 06:58:13.785" starttime="20191107 06:58:13.784"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 06:58:13.785" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191107 06:58:13.786" starttime="20191107 06:58:13.785"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:58:13.787" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:58:13.787" starttime="20191107 06:58:13.786"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:58:13.790" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:58:18.228" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:58:18.228" level="INFO">${output} = 2019-11-07 06:58:16 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 06:58:16 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 06:58:18.228" starttime="20191107 06:58:13.788"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:58:18.230" level="INFO">2019-11-07 06:58:16 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 06:58:16 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 06:58:16 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 06:58:18.230" starttime="20191107 06:58:18.229"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:58:18.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:58:18.231" starttime="20191107 06:58:18.230"></status>
</kw>
<status status="PASS" endtime="20191107 06:58:18.232" starttime="20191107 06:58:13.787"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:58:18.235" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:58:20.741" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:58:20.742" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:58:20.742" starttime="20191107 06:58:18.233"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:58:20.744" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:58:20.744" starttime="20191107 06:58:20.743"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:58:20.745" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:58:20.745" starttime="20191107 06:58:20.744"></status>
</kw>
<msg timestamp="20191107 06:58:20.746" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:58:20.746" starttime="20191107 06:58:18.232"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:20.747" starttime="20191107 06:58:20.746"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:58:20.748" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:58:20.748" starttime="20191107 06:58:20.747"></status>
</kw>
<status status="PASS" endtime="20191107 06:58:20.748" starttime="20191107 06:58:13.781"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:58:20.750" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 06:58:20.751" starttime="20191107 06:58:20.750"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:20.752" starttime="20191107 06:58:20.751"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:58:20.753" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:58:21.943" level="INFO">Read output: Last login: Thu Nov  7 06:57:59 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:58:21.944" starttime="20191107 06:58:20.753"></status>
</kw>
<status status="PASS" endtime="20191107 06:58:21.944" starttime="20191107 06:58:20.751"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 06:58:21.945" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 06:58:24.116" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:58:24.117" starttime="20191107 06:58:21.945"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 06:58:24.117" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:58:24.215" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:58:24.215" level="INFO">${startupMsg} = hadoop    1140  337  0.0 34474924 206712 ?     Sl   06:58   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 06:58:24.216" starttime="20191107 06:58:24.117"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:58:24.281" starttime="20191107 06:58:24.216"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:24.282" starttime="20191107 06:58:24.281"></status>
</kw>
<status status="PASS" endtime="20191107 06:58:24.282" starttime="20191107 06:58:20.749"></status>
</kw>
<status status="PASS" endtime="20191107 06:58:24.282" starttime="20191107 06:57:57.177"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:58:24.285" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:58:26.140" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:58:26.140" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:26.140" starttime="20191107 06:58:24.283"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:58:26.141" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:26.141" starttime="20191107 06:58:26.140"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:58:26.141" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:58:26.142" starttime="20191107 06:58:26.141"></status>
</kw>
<msg timestamp="20191107 06:58:26.142" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:26.142" starttime="20191107 06:58:24.283"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 06:58:26.142" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:26.142" starttime="20191107 06:58:26.142"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:26.143" starttime="20191107 06:58:26.143"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:26.143" starttime="20191107 06:58:26.143"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 06:58:26.144" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 06:58:26.144" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:26.144" starttime="20191107 06:58:26.144"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 06:58:26.145" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 06:58:26.145" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 06:58:26.145" starttime="20191107 06:58:26.144"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 06:58:26.145" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 06:58:26.145" starttime="20191107 06:58:26.145"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 06:58:26.146" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 06:58:26.146" starttime="20191107 06:58:26.145"></status>
</kw>
<msg timestamp="20191107 06:58:26.146" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 06:58:26.146" starttime="20191107 06:58:24.282"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:58:26.147" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 06:58:26.147" starttime="20191107 06:58:26.147"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:26.148" starttime="20191107 06:58:26.148"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:58:26.149" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:58:27.336" level="INFO">Read output: Last login: Thu Nov  7 06:56:02 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:58:27.336" starttime="20191107 06:58:26.148"></status>
</kw>
<status status="PASS" endtime="20191107 06:58:27.337" starttime="20191107 06:58:26.147"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 06:58:27.338" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 06:58:28.497" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:58:28.498" starttime="20191107 06:58:27.337"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 06:58:28.498" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:58:28.596" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:58:28.596" level="INFO">${shutdownMsg} = hadoop    1052  0.0  0.0   9556  1164 ?        Ss   06:58   0:00 bash -c sudo ps aux | grep om
hadoop    1054  0.0  0.0   9088   668 ?        S    06:58   0:00 grep om</msg>
<status status="PASS" endtime="20191107 06:58:28.596" starttime="20191107 06:58:28.498"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:58:28.711" starttime="20191107 06:58:28.597"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:28.713" starttime="20191107 06:58:28.712"></status>
</kw>
<msg timestamp="20191107 06:58:28.713" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 06:58:28.713" starttime="20191107 06:58:26.146"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:58:28.717" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:58:40.874" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:58:40.874" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:40.874" starttime="20191107 06:58:28.715"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:58:40.876" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:40.877" starttime="20191107 06:58:40.875"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:58:40.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:58:40.878" starttime="20191107 06:58:40.877"></status>
</kw>
<msg timestamp="20191107 06:58:40.878" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:40.879" starttime="20191107 06:58:28.714"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 06:58:40.879" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:40.880" starttime="20191107 06:58:40.879"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:40.881" starttime="20191107 06:58:40.880"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:40.881" starttime="20191107 06:58:40.881"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 06:58:40.883" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 06:58:40.883" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:58:40.883" starttime="20191107 06:58:40.882"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 06:58:40.884" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 06:58:40.884" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 06:58:40.884" starttime="20191107 06:58:40.883"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 06:58:40.885" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 06:58:40.885" starttime="20191107 06:58:40.884"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 06:58:40.886" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 06:58:40.886" starttime="20191107 06:58:40.886"></status>
</kw>
<msg timestamp="20191107 06:58:40.887" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191107 06:58:40.887" starttime="20191107 06:58:28.713"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 06:58:40.888" starttime="20191107 06:58:40.887"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 06:58:40.890" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191107 06:58:40.890" starttime="20191107 06:58:40.889"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 06:58:40.891" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191107 06:58:40.891" starttime="20191107 06:58:40.890"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 06:58:40.892" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191107 06:58:40.892" starttime="20191107 06:58:40.891"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:58:40.894" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:58:40.895" starttime="20191107 06:58:40.893"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:58:40.899" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:58:55.386" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:58:55.386" level="INFO">${output} = 2019-11-07 06:58:43 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191107 06:58:55.386" starttime="20191107 06:58:40.896"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:58:55.388" level="INFO">2019-11-07 06:58:43 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:58:44 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:58:45 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:58:46 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:58:47 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:58:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:58:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:58:50 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:58:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:58:52 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 06:58:53 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 06:58:53 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 06:58:53 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 06:58:55.388" starttime="20191107 06:58:55.387"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:58:55.389" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:58:55.389" starttime="20191107 06:58:55.388"></status>
</kw>
<status status="PASS" endtime="20191107 06:58:55.389" starttime="20191107 06:58:40.895"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:58:55.393" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:59:07.811" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:59:07.811" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:59:07.812" starttime="20191107 06:58:55.391"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:59:07.814" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:59:07.814" starttime="20191107 06:59:07.813"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:59:07.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:59:07.815" starttime="20191107 06:59:07.814"></status>
</kw>
<msg timestamp="20191107 06:59:07.816" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:59:07.816" starttime="20191107 06:58:55.390"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:59:07.817" starttime="20191107 06:59:07.816"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:59:07.819" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:59:07.820" starttime="20191107 06:59:07.817"></status>
</kw>
<status status="PASS" endtime="20191107 06:59:07.820" starttime="20191107 06:58:40.888"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:59:07.823" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 06:59:07.823" starttime="20191107 06:59:07.822"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:59:07.825" starttime="20191107 06:59:07.824"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:59:07.826" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:59:09.032" level="INFO">Read output: Last login: Thu Nov  7 06:58:26 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:59:09.032" starttime="20191107 06:59:07.825"></status>
</kw>
<status status="PASS" endtime="20191107 06:59:09.033" starttime="20191107 06:59:07.823"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 06:59:09.034" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 06:59:11.187" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:59:11.188" starttime="20191107 06:59:09.033"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 06:59:11.188" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:59:11.286" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:59:11.286" level="INFO">${startupMsg} = hadoop    1103  347  0.0 34474532 212040 ?     Sl   06:59   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 06:59:11.286" starttime="20191107 06:59:11.188"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:59:11.352" starttime="20191107 06:59:11.287"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:59:11.353" starttime="20191107 06:59:11.352"></status>
</kw>
<status status="PASS" endtime="20191107 06:59:11.353" starttime="20191107 06:59:07.821"></status>
</kw>
<status status="PASS" endtime="20191107 06:59:11.353" starttime="20191107 06:58:24.282"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:59:11.357" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:59:13.597" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:59:13.597" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:59:13.597" starttime="20191107 06:59:11.355"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:59:13.598" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:59:13.598" starttime="20191107 06:59:13.598"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:59:13.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:59:13.599" starttime="20191107 06:59:13.599"></status>
</kw>
<msg timestamp="20191107 06:59:13.599" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:59:13.599" starttime="20191107 06:59:11.354"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 06:59:13.600" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:59:13.600" starttime="20191107 06:59:13.600"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 06:59:13.601" starttime="20191107 06:59:13.600"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 06:59:13.601" starttime="20191107 06:59:13.601"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 06:59:13.602" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 06:59:13.602" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 06:59:13.602" starttime="20191107 06:59:13.601"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 06:59:13.602" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 06:59:13.603" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 06:59:13.603" starttime="20191107 06:59:13.602"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 06:59:13.603" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 06:59:13.603" starttime="20191107 06:59:13.603"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 06:59:13.604" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 06:59:13.604" starttime="20191107 06:59:13.603"></status>
</kw>
<msg timestamp="20191107 06:59:13.604" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 06:59:13.604" starttime="20191107 06:59:11.354"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:59:13.605" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 06:59:13.606" starttime="20191107 06:59:13.605"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:59:13.607" starttime="20191107 06:59:13.606"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:59:13.608" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:59:14.812" level="INFO">Read output: Last login: Thu Nov  7 06:57:53 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:59:14.813" starttime="20191107 06:59:13.607"></status>
</kw>
<status status="PASS" endtime="20191107 06:59:14.813" starttime="20191107 06:59:13.606"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 06:59:14.815" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 06:59:15.985" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:59:15.985" starttime="20191107 06:59:14.814"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 06:59:15.986" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:59:16.051" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:59:16.052" level="INFO">${shutdownMsg} = hadoop    1688  0.0  0.0   9556  1164 ?        Ss   06:59   0:00 bash -c sudo ps aux | grep om
hadoop    1690  0.0  0.0   9088   668 ?        S    06:59   0:00 grep om</msg>
<status status="PASS" endtime="20191107 06:59:16.052" starttime="20191107 06:59:15.986"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:59:16.117" starttime="20191107 06:59:16.052"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:59:16.118" starttime="20191107 06:59:16.118"></status>
</kw>
<msg timestamp="20191107 06:59:16.119" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 06:59:16.119" starttime="20191107 06:59:13.604"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:59:16.122" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:59:18.263" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:59:18.263" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:59:18.263" starttime="20191107 06:59:16.120"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:59:18.265" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:59:18.265" starttime="20191107 06:59:18.264"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:59:18.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:59:18.266" starttime="20191107 06:59:18.265"></status>
</kw>
<msg timestamp="20191107 06:59:18.267" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:59:18.267" starttime="20191107 06:59:16.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 06:59:18.268" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:59:18.268" starttime="20191107 06:59:18.267"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 06:59:18.269" starttime="20191107 06:59:18.268"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 06:59:18.270" starttime="20191107 06:59:18.269"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 06:59:18.271" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 06:59:18.271" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 06:59:18.271" starttime="20191107 06:59:18.270"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 06:59:18.272" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 06:59:18.272" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 06:59:18.272" starttime="20191107 06:59:18.271"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 06:59:18.273" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 06:59:18.274" starttime="20191107 06:59:18.273"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 06:59:18.275" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 06:59:18.276" starttime="20191107 06:59:18.274"></status>
</kw>
<msg timestamp="20191107 06:59:18.276" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191107 06:59:18.277" starttime="20191107 06:59:16.119"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 06:59:18.278" starttime="20191107 06:59:18.277"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 06:59:18.280" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191107 06:59:18.280" starttime="20191107 06:59:18.279"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 06:59:18.281" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191107 06:59:18.281" starttime="20191107 06:59:18.280"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 06:59:18.282" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191107 06:59:18.282" starttime="20191107 06:59:18.281"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:59:18.284" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:59:18.285" starttime="20191107 06:59:18.282"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:59:18.289" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:59:22.860" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:59:22.861" level="INFO">${output} = 2019-11-07 06:59:21 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 06:59:21 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 06:59:22.861" starttime="20191107 06:59:18.286"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:59:22.862" level="INFO">2019-11-07 06:59:21 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 06:59:21 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 06:59:21 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 06:59:22.862" starttime="20191107 06:59:22.861"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:59:22.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:59:22.863" starttime="20191107 06:59:22.862"></status>
</kw>
<status status="PASS" endtime="20191107 06:59:22.863" starttime="20191107 06:59:18.285"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 06:59:22.867" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 06:59:25.137" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 06:59:25.137" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:59:25.137" starttime="20191107 06:59:22.864"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 06:59:25.139" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:59:25.139" starttime="20191107 06:59:25.138"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 06:59:25.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 06:59:25.140" starttime="20191107 06:59:25.139"></status>
</kw>
<msg timestamp="20191107 06:59:25.140" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 06:59:25.140" starttime="20191107 06:59:22.863"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:59:25.141" starttime="20191107 06:59:25.141"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 06:59:25.142" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 06:59:25.143" starttime="20191107 06:59:25.142"></status>
</kw>
<status status="PASS" endtime="20191107 06:59:25.143" starttime="20191107 06:59:18.278"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 06:59:25.145" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 06:59:25.145" starttime="20191107 06:59:25.144"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 06:59:25.147" starttime="20191107 06:59:25.146"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 06:59:25.147" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 06:59:26.352" level="INFO">Read output: Last login: Thu Nov  7 06:59:13 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 06:59:26.353" starttime="20191107 06:59:25.147"></status>
</kw>
<status status="PASS" endtime="20191107 06:59:26.353" starttime="20191107 06:59:25.145"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 06:59:26.354" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 06:59:28.533" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 06:59:28.534" starttime="20191107 06:59:26.354"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 06:59:28.534" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 06:59:28.600" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 06:59:28.601" level="INFO">${startupMsg} = hadoop    1740  340  0.0 34484592 221484 ?     Sl   06:59   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 06:59:28.601" starttime="20191107 06:59:28.534"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 06:59:28.666" starttime="20191107 06:59:28.601"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 06:59:28.668" starttime="20191107 06:59:28.667"></status>
</kw>
<status status="PASS" endtime="20191107 06:59:28.668" starttime="20191107 06:59:25.143"></status>
</kw>
<status status="PASS" endtime="20191107 06:59:28.668" starttime="20191107 06:59:11.353"></status>
</kw>
<status status="PASS" endtime="20191107 06:59:28.668" starttime="20191107 06:57:03.904"></status>
</kw>
<status status="PASS" endtime="20191107 06:59:28.668" critical="yes" starttime="20191107 06:57:03.903"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191107 06:59:28.672" starttime="20191107 06:54:57.509"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
