<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 15:15:16.018" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 15:15:16.154" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 15:15:18.709" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 15:15:18.709" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 15:15:18.709" starttime="20191115 15:15:16.153"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 15:15:18.711" level="INFO"></msg>
<status status="PASS" endtime="20191115 15:15:18.711" starttime="20191115 15:15:18.710"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 15:15:18.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 15:15:18.712" starttime="20191115 15:15:18.711"></status>
</kw>
<status status="PASS" endtime="20191115 15:15:18.712" starttime="20191115 15:15:16.152"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 15:15:18.719" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 15:15:20.881" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 15:15:20.881" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 15:15:20.881" starttime="20191115 15:15:18.717"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 15:15:20.883" level="INFO"></msg>
<status status="PASS" endtime="20191115 15:15:20.883" starttime="20191115 15:15:20.882"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 15:15:20.883" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 15:15:20.883" starttime="20191115 15:15:20.883"></status>
</kw>
<status status="PASS" endtime="20191115 15:15:20.884" starttime="20191115 15:15:18.713"></status>
</kw>
<status status="PASS" endtime="20191115 15:15:20.884" starttime="20191115 15:15:16.152"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 15:15:20.885" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191115 15:15:20.885" starttime="20191115 15:15:20.885"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 15:15:20.886" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191115 15:15:20.886" starttime="20191115 15:15:20.885"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 15:15:20.887" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191115 15:15:20.887" starttime="20191115 15:15:20.886"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 15:15:20.888" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 15:15:20.888" starttime="20191115 15:15:20.887"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 15:15:20.891" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 15:15:25.359" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 15:15:25.359" level="INFO">${output} = 2019-11-15 15:15:23 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 15:15:23 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 15:15:25.359" starttime="20191115 15:15:20.889"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 15:15:25.361" level="INFO">2019-11-15 15:15:23 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 15:15:23 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 15:15:23 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 15:15:25.361" starttime="20191115 15:15:25.360"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 15:15:25.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 15:15:25.362" starttime="20191115 15:15:25.361"></status>
</kw>
<status status="PASS" endtime="20191115 15:15:25.362" starttime="20191115 15:15:20.888"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 15:15:25.366" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 15:15:27.514" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 15:15:27.514" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191115 15:15:27.514" starttime="20191115 15:15:25.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 15:15:27.516" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191115 15:15:27.516" starttime="20191115 15:15:27.515"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 15:15:27.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 15:15:27.517" starttime="20191115 15:15:27.516"></status>
</kw>
<msg timestamp="20191115 15:15:27.517" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191115 15:15:27.518" starttime="20191115 15:15:25.363"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:27.518" starttime="20191115 15:15:27.518"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 15:15:27.519" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 15:15:27.520" starttime="20191115 15:15:27.519"></status>
</kw>
<status status="PASS" endtime="20191115 15:15:27.520" starttime="20191115 15:15:20.884"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 15:15:27.524" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 15:15:29.574" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 15:15:29.574" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:29.574" starttime="20191115 15:15:27.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 15:15:29.575" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:29.575" starttime="20191115 15:15:29.575"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 15:15:29.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 15:15:29.576" starttime="20191115 15:15:29.576"></status>
</kw>
<msg timestamp="20191115 15:15:29.577" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:29.577" starttime="20191115 15:15:27.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 15:15:29.577" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:29.578" starttime="20191115 15:15:29.577"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:29.579" starttime="20191115 15:15:29.578"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:29.579" starttime="20191115 15:15:29.579"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 15:15:29.580" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 15:15:29.580" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:29.580" starttime="20191115 15:15:29.580"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 15:15:29.581" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 15:15:29.581" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 15:15:29.581" starttime="20191115 15:15:29.580"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 15:15:29.582" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 15:15:29.582" starttime="20191115 15:15:29.581"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 15:15:29.582" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 15:15:29.583" starttime="20191115 15:15:29.582"></status>
</kw>
<msg timestamp="20191115 15:15:29.583" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 15:15:29.583" starttime="20191115 15:15:27.520"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 15:15:29.584" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 15:15:29.585" starttime="20191115 15:15:29.584"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:29.586" starttime="20191115 15:15:29.585"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 15:15:29.587" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 15:15:30.843" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 15:15:30.844" starttime="20191115 15:15:29.586"></status>
</kw>
<status status="PASS" endtime="20191115 15:15:30.844" starttime="20191115 15:15:29.585"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 15:15:30.845" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 15:15:30.860" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 15:15:30.860" starttime="20191115 15:15:30.845"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 15:15:30.861" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 15:15:30.938" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 15:15:30.938" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 15:15:30.938" starttime="20191115 15:15:30.860"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 15:15:31.053" starttime="20191115 15:15:30.939"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:31.055" starttime="20191115 15:15:31.054"></status>
</kw>
<msg timestamp="20191115 15:15:31.055" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 15:15:31.055" starttime="20191115 15:15:29.583"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 15:15:31.059" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 15:15:32.988" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 15:15:32.989" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:32.989" starttime="20191115 15:15:31.057"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 15:15:32.990" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:32.990" starttime="20191115 15:15:32.989"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 15:15:32.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 15:15:32.991" starttime="20191115 15:15:32.990"></status>
</kw>
<msg timestamp="20191115 15:15:32.991" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:32.991" starttime="20191115 15:15:31.056"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 15:15:32.992" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:32.992" starttime="20191115 15:15:32.991"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:32.992" starttime="20191115 15:15:32.992"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:32.993" starttime="20191115 15:15:32.992"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 15:15:32.993" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 15:15:32.993" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:32.993" starttime="20191115 15:15:32.993"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 15:15:32.994" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 15:15:32.994" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 15:15:32.994" starttime="20191115 15:15:32.994"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 15:15:32.995" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 15:15:32.995" starttime="20191115 15:15:32.994"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 15:15:32.995" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 15:15:32.995" starttime="20191115 15:15:32.995"></status>
</kw>
<msg timestamp="20191115 15:15:32.996" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 15:15:32.996" starttime="20191115 15:15:31.055"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 15:15:32.997" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 15:15:32.997" starttime="20191115 15:15:32.996"></status>
</kw>
<status status="FAIL" endtime="20191115 15:15:32.997" critical="yes" starttime="20191115 15:15:16.151">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 15:15:33.000" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 15:15:33.000" starttime="20191115 15:15:32.998"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 15:15:33.001" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 15:15:33.001" starttime="20191115 15:15:33.000"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 15:15:33.002" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 15:15:33.002" starttime="20191115 15:15:33.002"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:33.004" starttime="20191115 15:15:33.003"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 15:15:33.004" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 15:15:34.191" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 15:15:34.192" starttime="20191115 15:15:33.004"></status>
</kw>
<status status="PASS" endtime="20191115 15:15:34.192" starttime="20191115 15:15:33.003"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 15:15:34.192" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 15:15:34.206" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 15:15:34.206" starttime="20191115 15:15:34.192"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 15:15:34.207" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 15:15:34.284" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 15:15:34.284" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 15:15:34.284" starttime="20191115 15:15:34.207"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 15:15:34.399" starttime="20191115 15:15:34.285"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:34.400" starttime="20191115 15:15:34.400"></status>
</kw>
<status status="PASS" endtime="20191115 15:15:34.401" starttime="20191115 15:15:33.001"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 15:15:34.403" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 15:15:34.403" starttime="20191115 15:15:34.402"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:34.404" starttime="20191115 15:15:34.404"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 15:15:34.405" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 15:15:35.609" level="INFO">Read output: Last login: Fri Nov 15 15:15:33 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 15:15:35.609" starttime="20191115 15:15:34.405"></status>
</kw>
<status status="PASS" endtime="20191115 15:15:35.610" starttime="20191115 15:15:34.403"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 15:15:35.611" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 15:15:35.626" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 15:15:35.627" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191115 15:15:35.627" starttime="20191115 15:15:35.610"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 15:15:35.627" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191115 15:15:35.628" starttime="20191115 15:15:35.627"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 15:15:35.629" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191115 15:15:35.629" starttime="20191115 15:15:35.628"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 15:15:35.674" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191115 15:15:35.674" starttime="20191115 15:15:35.629"></status>
</kw>
<status status="FAIL" endtime="20191115 15:15:35.674" starttime="20191115 15:15:34.401"></status>
</kw>
<status status="FAIL" endtime="20191115 15:15:35.674" critical="yes" starttime="20191115 15:15:32.998">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 15:15:35.680" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 15:15:37.700" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 15:15:37.701" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:37.701" starttime="20191115 15:15:35.678"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 15:15:37.702" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:37.702" starttime="20191115 15:15:37.701"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 15:15:37.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 15:15:37.703" starttime="20191115 15:15:37.702"></status>
</kw>
<msg timestamp="20191115 15:15:37.703" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:37.703" starttime="20191115 15:15:35.677"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 15:15:37.704" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:37.704" starttime="20191115 15:15:37.703"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:37.704" starttime="20191115 15:15:37.704"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:37.705" starttime="20191115 15:15:37.705"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 15:15:37.706" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 15:15:37.706" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:37.706" starttime="20191115 15:15:37.705"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 15:15:37.706" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 15:15:37.706" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 15:15:37.706" starttime="20191115 15:15:37.706"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 15:15:37.707" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 15:15:37.707" starttime="20191115 15:15:37.707"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 15:15:37.708" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 15:15:37.708" starttime="20191115 15:15:37.707"></status>
</kw>
<msg timestamp="20191115 15:15:37.708" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 15:15:37.708" starttime="20191115 15:15:35.676"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 15:15:37.709" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 15:15:37.709" starttime="20191115 15:15:37.709"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:37.710" starttime="20191115 15:15:37.710"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 15:15:37.711" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 15:15:38.915" level="INFO">Read output: Last login: Fri Nov 15 15:15:29 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 15:15:38.916" starttime="20191115 15:15:37.711"></status>
</kw>
<status status="PASS" endtime="20191115 15:15:38.916" starttime="20191115 15:15:37.709"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 15:15:38.917" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 15:15:38.932" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 15:15:38.932" starttime="20191115 15:15:38.916"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 15:15:38.933" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 15:15:39.011" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 15:15:39.011" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 15:15:39.011" starttime="20191115 15:15:38.933"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 15:15:39.126" starttime="20191115 15:15:39.012"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:39.128" starttime="20191115 15:15:39.127"></status>
</kw>
<msg timestamp="20191115 15:15:39.128" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 15:15:39.128" starttime="20191115 15:15:37.708"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 15:15:39.132" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 15:15:41.030" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 15:15:41.030" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:41.030" starttime="20191115 15:15:39.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 15:15:41.031" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:41.031" starttime="20191115 15:15:41.031"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 15:15:41.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 15:15:41.032" starttime="20191115 15:15:41.032"></status>
</kw>
<msg timestamp="20191115 15:15:41.032" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:41.033" starttime="20191115 15:15:39.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 15:15:41.033" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:41.033" starttime="20191115 15:15:41.033"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:41.034" starttime="20191115 15:15:41.033"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 15:15:41.034" starttime="20191115 15:15:41.034"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 15:15:41.035" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 15:15:41.035" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 15:15:41.035" starttime="20191115 15:15:41.034"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 15:15:41.036" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 15:15:41.036" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 15:15:41.036" starttime="20191115 15:15:41.035"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 15:15:41.036" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 15:15:41.036" starttime="20191115 15:15:41.036"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 15:15:41.037" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 15:15:41.037" starttime="20191115 15:15:41.036"></status>
</kw>
<msg timestamp="20191115 15:15:41.037" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 15:15:41.037" starttime="20191115 15:15:39.128"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 15:15:41.038" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 15:15:41.038" starttime="20191115 15:15:41.037"></status>
</kw>
<status status="FAIL" endtime="20191115 15:15:41.038" starttime="20191115 15:15:35.676"></status>
</kw>
<status status="FAIL" endtime="20191115 15:15:41.038" starttime="20191115 15:15:35.676"></status>
</kw>
<status status="FAIL" endtime="20191115 15:15:41.039" critical="yes" starttime="20191115 15:15:35.675">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191115 15:15:41.040" starttime="20191115 15:15:16.019"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
