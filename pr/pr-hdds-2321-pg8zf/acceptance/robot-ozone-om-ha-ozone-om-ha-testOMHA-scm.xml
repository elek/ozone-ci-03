<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191105 02:55:18.143" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 02:55:18.355" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 02:55:20.993" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 02:55:20.993" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191105 02:55:20.993" starttime="20191105 02:55:18.352"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 02:55:20.995" level="INFO"></msg>
<status status="PASS" endtime="20191105 02:55:20.995" starttime="20191105 02:55:20.994"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 02:55:20.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 02:55:20.995" starttime="20191105 02:55:20.995"></status>
</kw>
<status status="PASS" endtime="20191105 02:55:20.996" starttime="20191105 02:55:18.350"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 02:55:21.000" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 02:55:23.023" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 02:55:23.023" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191105 02:55:23.023" starttime="20191105 02:55:20.999"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 02:55:23.025" level="INFO"></msg>
<status status="PASS" endtime="20191105 02:55:23.025" starttime="20191105 02:55:23.024"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 02:55:23.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 02:55:23.026" starttime="20191105 02:55:23.025"></status>
</kw>
<status status="PASS" endtime="20191105 02:55:23.027" starttime="20191105 02:55:20.996"></status>
</kw>
<status status="PASS" endtime="20191105 02:55:23.027" starttime="20191105 02:55:18.350"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191105 02:55:23.029" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191105 02:55:23.029" starttime="20191105 02:55:23.028"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191105 02:55:23.030" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191105 02:55:23.030" starttime="20191105 02:55:23.029"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191105 02:55:23.031" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191105 02:55:23.031" starttime="20191105 02:55:23.030"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 02:55:23.045" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 02:55:23.045" starttime="20191105 02:55:23.032"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 02:55:23.048" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 02:55:27.251" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 02:55:27.251" level="INFO">${output} = 2019-11-05 02:55:25 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 02:55:25 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191105 02:55:27.251" starttime="20191105 02:55:23.046"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 02:55:27.252" level="INFO">2019-11-05 02:55:25 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 02:55:25 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-05 02:55:25 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 02:55:27.252" starttime="20191105 02:55:27.252"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 02:55:27.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 02:55:27.253" starttime="20191105 02:55:27.253"></status>
</kw>
<status status="PASS" endtime="20191105 02:55:27.253" starttime="20191105 02:55:23.045"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 02:55:27.256" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 02:55:29.464" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 02:55:29.464" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191105 02:55:29.465" starttime="20191105 02:55:27.254"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 02:55:29.466" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191105 02:55:29.466" starttime="20191105 02:55:29.465"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 02:55:29.466" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 02:55:29.466" starttime="20191105 02:55:29.466"></status>
</kw>
<msg timestamp="20191105 02:55:29.467" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191105 02:55:29.467" starttime="20191105 02:55:27.254"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191105 02:55:29.467" starttime="20191105 02:55:29.467"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 02:55:29.468" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 02:55:29.469" starttime="20191105 02:55:29.468"></status>
</kw>
<status status="PASS" endtime="20191105 02:55:29.469" starttime="20191105 02:55:23.027"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 02:55:29.473" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 02:55:31.319" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 02:55:31.320" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 02:55:31.320" starttime="20191105 02:55:29.470"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 02:55:31.321" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 02:55:31.321" starttime="20191105 02:55:31.320"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 02:55:31.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 02:55:31.321" starttime="20191105 02:55:31.321"></status>
</kw>
<msg timestamp="20191105 02:55:31.322" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 02:55:31.322" starttime="20191105 02:55:29.470"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 02:55:31.322" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 02:55:31.322" starttime="20191105 02:55:31.322"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 02:55:31.323" starttime="20191105 02:55:31.322"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 02:55:31.323" starttime="20191105 02:55:31.323"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 02:55:31.324" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 02:55:31.324" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191105 02:55:31.324" starttime="20191105 02:55:31.324"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 02:55:31.325" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191105 02:55:31.325" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 02:55:31.325" starttime="20191105 02:55:31.324"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 02:55:31.325" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191105 02:55:31.325" starttime="20191105 02:55:31.325"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 02:55:31.326" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191105 02:55:31.326" starttime="20191105 02:55:31.325"></status>
</kw>
<msg timestamp="20191105 02:55:31.326" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191105 02:55:31.326" starttime="20191105 02:55:29.469"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 02:55:31.327" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 02:55:31.327" starttime="20191105 02:55:31.327"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 02:55:31.328" starttime="20191105 02:55:31.328"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 02:55:31.329" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 02:55:32.570" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191105 02:55:32.570" starttime="20191105 02:55:31.328"></status>
</kw>
<status status="PASS" endtime="20191105 02:55:32.570" starttime="20191105 02:55:31.327"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 02:55:32.571" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 02:55:57.715" level="INFO">Command exited with return code 254.</msg>
<status status="PASS" endtime="20191105 02:55:57.715" starttime="20191105 02:55:32.571"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 02:55:57.716" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 02:55:57.794" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 02:55:57.795" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 02:55:57.795" starttime="20191105 02:55:57.716"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 02:55:57.911" starttime="20191105 02:55:57.796"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 02:55:57.912" starttime="20191105 02:55:57.911"></status>
</kw>
<msg timestamp="20191105 02:55:57.912" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191105 02:55:57.912" starttime="20191105 02:55:31.326"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 02:55:57.917" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 02:56:01.943" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 02:56:01.943" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:01.943" starttime="20191105 02:55:57.914"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 02:56:01.944" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:01.944" starttime="20191105 02:56:01.944"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 02:56:01.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 02:56:01.946" starttime="20191105 02:56:01.945"></status>
</kw>
<msg timestamp="20191105 02:56:01.946" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:01.946" starttime="20191105 02:55:57.913"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 02:56:01.946" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:01.947" starttime="20191105 02:56:01.946"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:01.947" starttime="20191105 02:56:01.947"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:01.947" starttime="20191105 02:56:01.947"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 02:56:01.948" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 02:56:01.948" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:01.948" starttime="20191105 02:56:01.948"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 02:56:01.949" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 02:56:01.949" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 02:56:01.949" starttime="20191105 02:56:01.948"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 02:56:01.949" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 02:56:01.949" starttime="20191105 02:56:01.949"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 02:56:01.950" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 02:56:01.950" starttime="20191105 02:56:01.949"></status>
</kw>
<msg timestamp="20191105 02:56:01.950" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191105 02:56:01.950" starttime="20191105 02:55:57.912"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:01.951" starttime="20191105 02:56:01.950"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191105 02:56:01.952" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191105 02:56:01.952" starttime="20191105 02:56:01.951"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191105 02:56:01.952" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191105 02:56:01.952" starttime="20191105 02:56:01.952"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191105 02:56:02.107" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191105 02:56:02.107" starttime="20191105 02:56:01.952"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 02:56:02.109" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 02:56:02.110" starttime="20191105 02:56:02.107"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 02:56:02.114" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 02:56:16.478" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 02:56:16.479" level="INFO">${output} = 2019-11-05 02:56:04 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 02:56:04 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191105 02:56:16.479" starttime="20191105 02:56:02.111"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 02:56:16.480" level="INFO">2019-11-05 02:56:04 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 02:56:04 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-05 02:56:04 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 02:56:16.480" starttime="20191105 02:56:16.479"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 02:56:16.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 02:56:16.481" starttime="20191105 02:56:16.480"></status>
</kw>
<status status="PASS" endtime="20191105 02:56:16.481" starttime="20191105 02:56:02.110"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 02:56:16.484" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 02:56:18.631" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 02:56:18.632" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191105 02:56:18.632" starttime="20191105 02:56:16.482"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 02:56:18.633" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191105 02:56:18.633" starttime="20191105 02:56:18.633"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 02:56:18.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 02:56:18.634" starttime="20191105 02:56:18.634"></status>
</kw>
<msg timestamp="20191105 02:56:18.635" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191105 02:56:18.635" starttime="20191105 02:56:16.482"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:18.636" starttime="20191105 02:56:18.635"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 02:56:18.637" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 02:56:18.637" starttime="20191105 02:56:18.636"></status>
</kw>
<status status="PASS" endtime="20191105 02:56:18.637" starttime="20191105 02:56:01.951"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 02:56:18.639" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 02:56:18.639" starttime="20191105 02:56:18.638"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:18.640" starttime="20191105 02:56:18.640"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 02:56:18.641" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 02:56:19.844" level="INFO">Read output: Last login: Tue Nov  5 02:55:31 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 02:56:19.845" starttime="20191105 02:56:18.641"></status>
</kw>
<status status="PASS" endtime="20191105 02:56:19.845" starttime="20191105 02:56:18.639"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191105 02:56:19.846" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191105 02:56:19.860" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 02:56:19.861" starttime="20191105 02:56:19.846"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191105 02:56:19.862" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 02:56:19.919" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 02:56:19.920" level="INFO">${startupMsg} = </msg>
<status status="PASS" endtime="20191105 02:56:19.920" starttime="20191105 02:56:19.861"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 02:56:20.035" starttime="20191105 02:56:19.920"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<msg timestamp="20191105 02:56:20.036" level="FAIL">'' does not contain 'OzoneManagerStarter'</msg>
<status status="FAIL" endtime="20191105 02:56:20.036" starttime="20191105 02:56:20.035"></status>
</kw>
<status status="FAIL" endtime="20191105 02:56:20.036" starttime="20191105 02:56:18.637"></status>
</kw>
<status status="FAIL" endtime="20191105 02:56:20.037" critical="yes" starttime="20191105 02:55:18.349">'' does not contain 'OzoneManagerStarter'</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191105 02:56:20.039" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191105 02:56:20.039" starttime="20191105 02:56:20.038"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191105 02:56:20.041" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191105 02:56:20.041" starttime="20191105 02:56:20.039"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 02:56:20.042" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 02:56:20.042" starttime="20191105 02:56:20.042"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:20.044" starttime="20191105 02:56:20.043"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 02:56:20.044" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 02:56:21.316" level="INFO">Read output: Last login: Tue Nov  5 02:56:18 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 02:56:21.317" starttime="20191105 02:56:20.044"></status>
</kw>
<status status="PASS" endtime="20191105 02:56:21.317" starttime="20191105 02:56:20.042"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 02:56:21.318" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 02:56:21.334" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 02:56:21.334" starttime="20191105 02:56:21.317"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 02:56:21.335" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 02:56:21.412" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 02:56:21.412" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 02:56:21.412" starttime="20191105 02:56:21.335"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 02:56:21.527" starttime="20191105 02:56:21.412"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:21.527" starttime="20191105 02:56:21.527"></status>
</kw>
<status status="PASS" endtime="20191105 02:56:21.528" starttime="20191105 02:56:20.041"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 02:56:21.529" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 02:56:21.529" starttime="20191105 02:56:21.528"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:21.530" starttime="20191105 02:56:21.530"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 02:56:21.531" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 02:56:22.728" level="INFO">Read output: Last login: Tue Nov  5 02:56:20 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 02:56:22.729" starttime="20191105 02:56:21.530"></status>
</kw>
<status status="PASS" endtime="20191105 02:56:22.729" starttime="20191105 02:56:21.529"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191105 02:56:22.730" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191105 02:56:22.743" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 02:56:22.743" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191105 02:56:22.743" starttime="20191105 02:56:22.729"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191105 02:56:22.744" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191105 02:56:22.744" starttime="20191105 02:56:22.744"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191105 02:56:22.745" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191105 02:56:22.745" starttime="20191105 02:56:22.745"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191105 02:56:22.820" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191105 02:56:22.820" starttime="20191105 02:56:22.745"></status>
</kw>
<status status="FAIL" endtime="20191105 02:56:22.820" starttime="20191105 02:56:21.528"></status>
</kw>
<status status="FAIL" endtime="20191105 02:56:22.820" critical="yes" starttime="20191105 02:56:20.037">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 02:56:22.825" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 02:56:24.766" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 02:56:24.766" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:24.766" starttime="20191105 02:56:22.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 02:56:24.767" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:24.767" starttime="20191105 02:56:24.766"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 02:56:24.767" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 02:56:24.768" starttime="20191105 02:56:24.767"></status>
</kw>
<msg timestamp="20191105 02:56:24.768" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:24.768" starttime="20191105 02:56:22.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 02:56:24.769" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:24.769" starttime="20191105 02:56:24.768"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:24.769" starttime="20191105 02:56:24.769"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:24.770" starttime="20191105 02:56:24.769"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 02:56:24.770" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 02:56:24.770" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:24.770" starttime="20191105 02:56:24.770"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 02:56:24.771" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 02:56:24.771" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 02:56:24.771" starttime="20191105 02:56:24.771"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 02:56:24.771" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 02:56:24.772" starttime="20191105 02:56:24.771"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 02:56:24.772" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 02:56:24.772" starttime="20191105 02:56:24.772"></status>
</kw>
<msg timestamp="20191105 02:56:24.772" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 02:56:24.772" starttime="20191105 02:56:22.822"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 02:56:24.774" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191105 02:56:24.774" starttime="20191105 02:56:24.773"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:24.775" starttime="20191105 02:56:24.774"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 02:56:24.775" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191105 02:56:25.973" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 02:56:25.974" starttime="20191105 02:56:24.775"></status>
</kw>
<status status="PASS" endtime="20191105 02:56:25.974" starttime="20191105 02:56:24.774"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 02:56:25.974" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 02:56:25.989" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 02:56:25.989" starttime="20191105 02:56:25.974"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 02:56:25.990" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 02:56:26.066" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 02:56:26.067" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 02:56:26.067" starttime="20191105 02:56:25.989"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 02:56:26.181" starttime="20191105 02:56:26.067"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:26.227" starttime="20191105 02:56:26.182"></status>
</kw>
<msg timestamp="20191105 02:56:26.227" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191105 02:56:26.227" starttime="20191105 02:56:24.773"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 02:56:26.231" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 02:56:28.063" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 02:56:28.063" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:28.063" starttime="20191105 02:56:26.229"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 02:56:28.064" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:28.064" starttime="20191105 02:56:28.064"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 02:56:28.065" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 02:56:28.065" starttime="20191105 02:56:28.064"></status>
</kw>
<msg timestamp="20191105 02:56:28.065" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:28.065" starttime="20191105 02:56:26.228"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 02:56:28.066" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:28.066" starttime="20191105 02:56:28.065"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:28.066" starttime="20191105 02:56:28.066"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 02:56:28.067" starttime="20191105 02:56:28.066"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 02:56:28.067" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 02:56:28.067" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 02:56:28.067" starttime="20191105 02:56:28.067"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 02:56:28.068" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 02:56:28.068" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 02:56:28.068" starttime="20191105 02:56:28.067"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 02:56:28.068" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 02:56:28.068" starttime="20191105 02:56:28.068"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 02:56:28.069" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 02:56:28.069" starttime="20191105 02:56:28.069"></status>
</kw>
<msg timestamp="20191105 02:56:28.069" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191105 02:56:28.069" starttime="20191105 02:56:26.227"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191105 02:56:28.070" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191105 02:56:28.070" starttime="20191105 02:56:28.069"></status>
</kw>
<status status="FAIL" endtime="20191105 02:56:28.070" starttime="20191105 02:56:22.822"></status>
</kw>
<status status="FAIL" endtime="20191105 02:56:28.070" starttime="20191105 02:56:22.821"></status>
</kw>
<status status="FAIL" endtime="20191105 02:56:28.071" critical="yes" starttime="20191105 02:56:22.821">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191105 02:56:28.072" starttime="20191105 02:55:18.144"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
