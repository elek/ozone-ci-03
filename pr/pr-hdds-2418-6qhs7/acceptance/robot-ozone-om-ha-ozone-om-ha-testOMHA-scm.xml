<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191111 20:13:41.852" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:13:42.024" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:13:44.515" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:13:44.515" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191111 20:13:44.515" starttime="20191111 20:13:42.023"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:13:44.517" level="INFO"></msg>
<status status="PASS" endtime="20191111 20:13:44.517" starttime="20191111 20:13:44.516"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:13:44.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:13:44.517" starttime="20191111 20:13:44.517"></status>
</kw>
<status status="PASS" endtime="20191111 20:13:44.518" starttime="20191111 20:13:42.022"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:13:44.525" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:13:46.747" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:13:46.747" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191111 20:13:46.747" starttime="20191111 20:13:44.523"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:13:46.749" level="INFO"></msg>
<status status="PASS" endtime="20191111 20:13:46.749" starttime="20191111 20:13:46.748"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:13:46.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:13:46.750" starttime="20191111 20:13:46.750"></status>
</kw>
<status status="PASS" endtime="20191111 20:13:46.751" starttime="20191111 20:13:44.518"></status>
</kw>
<status status="PASS" endtime="20191111 20:13:46.751" starttime="20191111 20:13:42.022"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 20:13:46.753" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191111 20:13:46.753" starttime="20191111 20:13:46.752"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 20:13:46.755" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191111 20:13:46.755" starttime="20191111 20:13:46.754"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 20:13:46.756" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191111 20:13:46.756" starttime="20191111 20:13:46.755"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:13:46.759" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:13:46.759" starttime="20191111 20:13:46.756"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:13:46.763" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:13:51.595" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:13:51.595" level="INFO">${output} = 2019-11-11 20:13:49 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 20:13:49 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191111 20:13:51.595" starttime="20191111 20:13:46.760"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:13:51.597" level="INFO">2019-11-11 20:13:49 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 20:13:49 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 20:13:49 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 20:13:51.597" starttime="20191111 20:13:51.596"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:13:51.598" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:13:51.598" starttime="20191111 20:13:51.598"></status>
</kw>
<status status="PASS" endtime="20191111 20:13:51.599" starttime="20191111 20:13:46.759"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:13:51.603" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:13:53.806" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:13:53.806" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191111 20:13:53.806" starttime="20191111 20:13:51.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:13:53.808" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191111 20:13:53.808" starttime="20191111 20:13:53.807"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:13:53.809" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:13:53.809" starttime="20191111 20:13:53.808"></status>
</kw>
<msg timestamp="20191111 20:13:53.809" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191111 20:13:53.810" starttime="20191111 20:13:51.599"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:13:53.810" starttime="20191111 20:13:53.810"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:13:53.811" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:13:53.811" starttime="20191111 20:13:53.811"></status>
</kw>
<status status="PASS" endtime="20191111 20:13:53.812" starttime="20191111 20:13:46.752"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:13:53.815" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:13:55.759" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:13:55.759" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:13:55.760" starttime="20191111 20:13:53.813"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:13:55.761" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:13:55.761" starttime="20191111 20:13:55.760"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:13:55.762" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:13:55.762" starttime="20191111 20:13:55.761"></status>
</kw>
<msg timestamp="20191111 20:13:55.762" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:13:55.762" starttime="20191111 20:13:53.813"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 20:13:55.763" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:13:55.763" starttime="20191111 20:13:55.763"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 20:13:55.764" starttime="20191111 20:13:55.763"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 20:13:55.765" starttime="20191111 20:13:55.764"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 20:13:55.765" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 20:13:55.765" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:13:55.765" starttime="20191111 20:13:55.765"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 20:13:55.766" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 20:13:55.766" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 20:13:55.766" starttime="20191111 20:13:55.766"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 20:13:55.767" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 20:13:55.767" starttime="20191111 20:13:55.766"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 20:13:55.767" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 20:13:55.767" starttime="20191111 20:13:55.767"></status>
</kw>
<msg timestamp="20191111 20:13:55.768" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 20:13:55.768" starttime="20191111 20:13:53.812"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:13:55.769" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 20:13:55.769" starttime="20191111 20:13:55.769"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:13:55.770" starttime="20191111 20:13:55.770"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:13:55.771" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:13:57.048" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:13:57.048" starttime="20191111 20:13:55.771"></status>
</kw>
<status status="PASS" endtime="20191111 20:13:57.048" starttime="20191111 20:13:55.769"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 20:13:57.049" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 20:14:07.220" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:14:07.220" starttime="20191111 20:13:57.049"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 20:14:07.221" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:14:07.330" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:14:07.330" level="INFO">${shutdownMsg} = hadoop     457  0.0  0.0   9556  1164 ?        Ss   20:14   0:00 bash -c sudo ps aux | grep om
hadoop     459  0.0  0.0   9088   668 ?        S    20:14   0:00 grep om</msg>
<status status="PASS" endtime="20191111 20:14:07.331" starttime="20191111 20:14:07.221"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:14:07.396" starttime="20191111 20:14:07.331"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:14:07.397" starttime="20191111 20:14:07.396"></status>
</kw>
<msg timestamp="20191111 20:14:07.398" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 20:14:07.398" starttime="20191111 20:13:55.768"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:14:07.403" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:14:19.777" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:14:19.777" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:14:19.778" starttime="20191111 20:14:07.400"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:14:19.779" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:14:19.779" starttime="20191111 20:14:19.778"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:14:19.779" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:14:19.779" starttime="20191111 20:14:19.779"></status>
</kw>
<msg timestamp="20191111 20:14:19.780" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:14:19.780" starttime="20191111 20:14:07.399"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 20:14:19.780" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:14:19.780" starttime="20191111 20:14:19.780"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 20:14:19.781" starttime="20191111 20:14:19.781"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 20:14:19.781" starttime="20191111 20:14:19.781"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 20:14:19.782" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 20:14:19.782" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:14:19.782" starttime="20191111 20:14:19.782"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 20:14:19.783" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 20:14:19.783" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 20:14:19.783" starttime="20191111 20:14:19.782"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 20:14:19.783" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 20:14:19.783" starttime="20191111 20:14:19.783"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 20:14:19.784" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 20:14:19.784" starttime="20191111 20:14:19.784"></status>
</kw>
<msg timestamp="20191111 20:14:19.784" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191111 20:14:19.784" starttime="20191111 20:14:07.398"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 20:14:19.785" starttime="20191111 20:14:19.785"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 20:14:19.786" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191111 20:14:19.786" starttime="20191111 20:14:19.786"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 20:14:19.787" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191111 20:14:19.787" starttime="20191111 20:14:19.786"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 20:14:19.787" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191111 20:14:19.788" starttime="20191111 20:14:19.787"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:14:19.789" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:14:19.789" starttime="20191111 20:14:19.788"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:14:19.792" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:14:34.752" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:14:34.752" level="INFO">${output} = 2019-11-11 20:14:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191111 20:14:34.752" starttime="20191111 20:14:19.790"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:14:34.754" level="INFO">2019-11-11 20:14:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:14:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:14:24 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:14:25 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:14:26 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:14:27 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:14:28 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:14:29 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:14:30 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:14:31 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:14:32 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 20:14:32 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 20:14:32 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 20:14:34.754" starttime="20191111 20:14:34.753"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:14:34.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:14:34.756" starttime="20191111 20:14:34.755"></status>
</kw>
<status status="PASS" endtime="20191111 20:14:34.757" starttime="20191111 20:14:19.789"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:14:34.761" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:14:47.105" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:14:47.105" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191111 20:14:47.105" starttime="20191111 20:14:34.758"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:14:47.106" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191111 20:14:47.106" starttime="20191111 20:14:47.106"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:14:47.107" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:14:47.107" starttime="20191111 20:14:47.107"></status>
</kw>
<msg timestamp="20191111 20:14:47.107" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191111 20:14:47.108" starttime="20191111 20:14:34.757"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:14:47.108" starttime="20191111 20:14:47.108"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:14:47.109" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:14:47.109" starttime="20191111 20:14:47.108"></status>
</kw>
<status status="PASS" endtime="20191111 20:14:47.109" starttime="20191111 20:14:19.785"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:14:47.110" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 20:14:47.111" starttime="20191111 20:14:47.110"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:14:47.112" starttime="20191111 20:14:47.111"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:14:47.112" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:14:48.317" level="INFO">Read output: Last login: Mon Nov 11 20:13:56 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:14:48.318" starttime="20191111 20:14:47.112"></status>
</kw>
<status status="PASS" endtime="20191111 20:14:48.318" starttime="20191111 20:14:47.111"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 20:14:48.319" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 20:14:50.478" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:14:50.478" starttime="20191111 20:14:48.319"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 20:14:50.479" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:14:50.577" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:14:50.577" level="INFO">${startupMsg} = hadoop     510  335  0.0 34477352 212656 ?     Sl   20:14   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 20:14:50.577" starttime="20191111 20:14:50.479"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:14:50.580" starttime="20191111 20:14:50.577"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:14:50.580" starttime="20191111 20:14:50.580"></status>
</kw>
<status status="PASS" endtime="20191111 20:14:50.580" starttime="20191111 20:14:47.109"></status>
</kw>
<status status="PASS" endtime="20191111 20:14:50.581" critical="yes" starttime="20191111 20:13:42.021"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191111 20:14:50.583" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191111 20:14:50.583" starttime="20191111 20:14:50.582"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191111 20:14:50.584" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191111 20:14:50.584" starttime="20191111 20:14:50.583"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:14:50.586" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 20:14:50.586" starttime="20191111 20:14:50.585"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:14:50.587" starttime="20191111 20:14:50.586"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:14:50.588" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:14:51.774" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:14:51.775" starttime="20191111 20:14:50.587"></status>
</kw>
<status status="PASS" endtime="20191111 20:14:51.775" starttime="20191111 20:14:50.586"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 20:14:51.776" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 20:15:01.937" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:15:01.937" starttime="20191111 20:14:51.775"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 20:15:01.938" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:15:02.036" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:15:02.036" level="INFO">${shutdownMsg} = hadoop     496  0.0  0.0   9556  1168 ?        Ss   20:15   0:00 bash -c sudo ps aux | grep om
hadoop     498  0.0  0.0   9088   668 ?        S    20:15   0:00 grep om</msg>
<status status="PASS" endtime="20191111 20:15:02.036" starttime="20191111 20:15:01.938"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:15:02.101" starttime="20191111 20:15:02.036"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:02.102" starttime="20191111 20:15:02.102"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:02.103" starttime="20191111 20:14:50.585"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:15:02.105" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 20:15:02.105" starttime="20191111 20:15:02.104"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:02.107" starttime="20191111 20:15:02.106"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:15:02.108" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:15:03.312" level="INFO">Read output: Last login: Mon Nov 11 20:14:50 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:15:03.312" starttime="20191111 20:15:02.107"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:03.313" starttime="20191111 20:15:02.105"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191111 20:15:03.314" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191111 20:15:03.329" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:15:03.329" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 20:15:03.330" starttime="20191111 20:15:03.313"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191111 20:15:03.330" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 20:15:03.331" starttime="20191111 20:15:03.330"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191111 20:15:03.332" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191111 20:15:03.332" starttime="20191111 20:15:03.331"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191111 20:15:03.412" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191111 20:15:03.424" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191111 20:15:03.425" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191111 20:15:03.425" starttime="20191111 20:15:03.332"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191111 20:15:03.427" level="INFO">Length is 2</msg>
<msg timestamp="20191111 20:15:03.427" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191111 20:15:03.427" starttime="20191111 20:15:03.425"></status>
</kw>
<msg timestamp="20191111 20:15:03.428" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191111 20:15:03.428" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191111 20:15:03.428" starttime="20191111 20:15:02.103"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:15:03.433" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:15:15.707" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:15:15.707" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:15:15.707" starttime="20191111 20:15:03.430"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:15:15.708" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:15:15.709" starttime="20191111 20:15:15.708"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:15:15.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:15:15.709" starttime="20191111 20:15:15.709"></status>
</kw>
<msg timestamp="20191111 20:15:15.710" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:15:15.710" starttime="20191111 20:15:03.429"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 20:15:15.710" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:15:15.711" starttime="20191111 20:15:15.710"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:15.711" starttime="20191111 20:15:15.711"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:15.712" starttime="20191111 20:15:15.711"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 20:15:15.713" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 20:15:15.713" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:15:15.713" starttime="20191111 20:15:15.712"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 20:15:15.714" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191111 20:15:15.714" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 20:15:15.714" starttime="20191111 20:15:15.713"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 20:15:15.715" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 20:15:15.715" starttime="20191111 20:15:15.714"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 20:15:15.716" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191111 20:15:15.716" starttime="20191111 20:15:15.715"></status>
</kw>
<msg timestamp="20191111 20:15:15.716" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 20:15:15.717" starttime="20191111 20:15:03.428"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191111 20:15:15.720" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191111 20:15:15.720" starttime="20191111 20:15:15.718"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 20:15:15.723" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191111 20:15:15.723" starttime="20191111 20:15:15.722"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 20:15:15.723" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191111 20:15:15.723" starttime="20191111 20:15:15.723"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:15:15.727" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:15:20.610" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:15:20.610" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 20:15:20.610" starttime="20191111 20:15:15.725"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:15:20.612" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 20:15:20.612" starttime="20191111 20:15:20.611"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:15:20.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:15:20.613" starttime="20191111 20:15:20.612"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:20.613" starttime="20191111 20:15:15.724"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:15:20.618" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:15:23.116" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:15:23.116" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573503317994,
  "modificationTime": 1573503320187,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 20:15:23.116" starttime="20191111 20:15:20.616"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:15:23.118" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573503317994,
  "modificationTime": 1573503320187,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103121113447661570,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 20:15:23.118" starttime="20191111 20:15:23.117"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:15:23.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:15:23.119" starttime="20191111 20:15:23.118"></status>
</kw>
<msg timestamp="20191111 20:15:23.119" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573503317994,
  "modificationTime": 1573503320187,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 20:15:23.119" starttime="20191111 20:15:20.614"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:23.120" starttime="20191111 20:15:23.120"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:23.120" starttime="20191111 20:15:15.723"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:23.121" starttime="20191111 20:15:15.722"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 20:15:23.122" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191111 20:15:23.122" starttime="20191111 20:15:23.121"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 20:15:23.122" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191111 20:15:23.123" starttime="20191111 20:15:23.122"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:15:23.127" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:15:27.528" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:15:27.528" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 20:15:27.528" starttime="20191111 20:15:23.125"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:15:27.530" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 20:15:27.530" starttime="20191111 20:15:27.529"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:15:27.531" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:15:27.531" starttime="20191111 20:15:27.531"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:27.532" starttime="20191111 20:15:23.124"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:15:27.537" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:15:29.858" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:15:29.858" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573503325378,
  "modificationTime": 1573503327109,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 20:15:29.858" starttime="20191111 20:15:27.534"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:15:29.860" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573503325378,
  "modificationTime": 1573503327109,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103121113931841540,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 20:15:29.860" starttime="20191111 20:15:29.859"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:15:29.861" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:15:29.862" starttime="20191111 20:15:29.861"></status>
</kw>
<msg timestamp="20191111 20:15:29.862" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573503325378,
  "modificationTime": 1573503327109,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 20:15:29.862" starttime="20191111 20:15:27.532"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:29.863" starttime="20191111 20:15:29.863"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:29.864" starttime="20191111 20:15:23.123"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:29.864" starttime="20191111 20:15:23.121"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 20:15:29.865" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191111 20:15:29.865" starttime="20191111 20:15:29.864"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 20:15:29.866" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191111 20:15:29.866" starttime="20191111 20:15:29.866"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:15:29.872" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:15:34.295" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:15:34.295" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 20:15:34.295" starttime="20191111 20:15:29.869"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:15:34.297" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 20:15:34.297" starttime="20191111 20:15:34.296"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:15:34.298" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:15:34.298" starttime="20191111 20:15:34.297"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:34.299" starttime="20191111 20:15:29.868"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:15:34.304" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:15:36.632" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:15:36.632" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573503332072,
  "modificationTime": 1573503333880,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 20:15:36.632" starttime="20191111 20:15:34.301"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:15:36.634" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573503332072,
  "modificationTime": 1573503333880,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103121114370539520,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 20:15:36.634" starttime="20191111 20:15:36.633"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:15:36.635" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:15:36.635" starttime="20191111 20:15:36.635"></status>
</kw>
<msg timestamp="20191111 20:15:36.636" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573503332072,
  "modificationTime": 1573503333880,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 20:15:36.636" starttime="20191111 20:15:34.299"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:36.637" starttime="20191111 20:15:36.636"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:36.637" starttime="20191111 20:15:29.867"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:36.637" starttime="20191111 20:15:29.864"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 20:15:36.639" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191111 20:15:36.639" starttime="20191111 20:15:36.638"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 20:15:36.640" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191111 20:15:36.640" starttime="20191111 20:15:36.639"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:15:36.645" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:15:41.101" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:15:41.102" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 20:15:41.102" starttime="20191111 20:15:36.642"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:15:41.103" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 20:15:41.104" starttime="20191111 20:15:41.103"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:15:41.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:15:41.105" starttime="20191111 20:15:41.104"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:41.105" starttime="20191111 20:15:36.641"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:15:41.109" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:15:43.495" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:15:43.495" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573503338927,
  "modificationTime": 1573503340670,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 20:15:43.496" starttime="20191111 20:15:41.107"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:15:43.497" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573503338927,
  "modificationTime": 1573503340670,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103121114819854340,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 20:15:43.497" starttime="20191111 20:15:43.496"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:15:43.498" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:15:43.498" starttime="20191111 20:15:43.498"></status>
</kw>
<msg timestamp="20191111 20:15:43.499" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573503338927,
  "modificationTime": 1573503340670,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 20:15:43.499" starttime="20191111 20:15:41.106"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:43.500" starttime="20191111 20:15:43.499"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:43.500" starttime="20191111 20:15:36.640"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:43.500" starttime="20191111 20:15:36.638"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 20:15:43.501" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:15:43.501" starttime="20191111 20:15:43.500"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 20:15:43.502" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:15:43.502" starttime="20191111 20:15:43.501"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:15:43.506" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:15:47.875" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:15:47.875" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 20:15:47.875" starttime="20191111 20:15:43.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:15:47.877" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 20:15:47.877" starttime="20191111 20:15:47.876"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:15:47.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:15:47.878" starttime="20191111 20:15:47.878"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:47.879" starttime="20191111 20:15:43.503"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:15:47.885" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:15:50.226" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:15:50.227" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573503345632,
  "modificationTime": 1573503347448,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 20:15:50.227" starttime="20191111 20:15:47.882"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:15:50.228" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573503345632,
  "modificationTime": 1573503347448,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103121115259273220,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 20:15:50.228" starttime="20191111 20:15:50.227"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:15:50.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:15:50.229" starttime="20191111 20:15:50.229"></status>
</kw>
<msg timestamp="20191111 20:15:50.230" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573503345632,
  "modificationTime": 1573503347448,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 20:15:50.230" starttime="20191111 20:15:47.879"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:50.231" starttime="20191111 20:15:50.230"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:50.231" starttime="20191111 20:15:43.502"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:50.231" starttime="20191111 20:15:43.500"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:50.231" starttime="20191111 20:15:15.721"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:50.231" starttime="20191111 20:15:15.721"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:15:50.233" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191111 20:15:50.233" starttime="20191111 20:15:50.233"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:50.235" starttime="20191111 20:15:50.234"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:15:50.236" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:15:51.442" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:15:51.443" starttime="20191111 20:15:50.235"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:51.443" starttime="20191111 20:15:50.234"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191111 20:15:51.444" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191111 20:15:51.460" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:15:51.460" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 20:15:51.461" starttime="20191111 20:15:51.444"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191111 20:15:51.461" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 20:15:51.462" starttime="20191111 20:15:51.461"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191111 20:15:51.463" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191111 20:15:51.463" starttime="20191111 20:15:51.462"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191111 20:15:51.541" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191111 20:15:51.552" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191111 20:15:51.553" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191111 20:15:51.553" starttime="20191111 20:15:51.463"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191111 20:15:51.554" level="INFO">Length is 3</msg>
<msg timestamp="20191111 20:15:51.554" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191111 20:15:51.554" starttime="20191111 20:15:51.553"></status>
</kw>
<msg timestamp="20191111 20:15:51.555" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191111 20:15:51.555" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191111 20:15:51.555" starttime="20191111 20:15:50.232"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191111 20:15:51.556" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191111 20:15:51.556" starttime="20191111 20:15:51.555"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:51.557" starttime="20191111 20:15:15.717"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:51.557" starttime="20191111 20:15:15.717"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:51.558" starttime="20191111 20:15:51.557"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:15:51.560" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 20:15:51.560" starttime="20191111 20:15:51.559"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:51.562" starttime="20191111 20:15:51.561"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:15:51.563" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:15:52.767" level="INFO">Read output: Last login: Mon Nov 11 20:15:02 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:15:52.767" starttime="20191111 20:15:51.562"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:52.768" starttime="20191111 20:15:51.560"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 20:15:52.769" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 20:15:54.957" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:15:54.958" starttime="20191111 20:15:52.768"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 20:15:54.958" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:15:55.057" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:15:55.057" level="INFO">${startupMsg} = hadoop     571  359  0.0 34477380 229748 ?     Sl   20:15   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 20:15:55.057" starttime="20191111 20:15:54.958"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:15:55.122" starttime="20191111 20:15:55.057"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:55.123" starttime="20191111 20:15:55.122"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:55.123" starttime="20191111 20:15:51.558"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:15:55.125" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 20:15:55.125" starttime="20191111 20:15:55.125"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:55.126" starttime="20191111 20:15:55.126"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:15:55.127" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:15:56.314" level="INFO">Read output: Last login: Mon Nov 11 20:15:51 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:15:56.314" starttime="20191111 20:15:55.127"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:56.315" starttime="20191111 20:15:55.125"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191111 20:15:56.316" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191111 20:15:56.331" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:15:56.332" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 20:15:56.332" starttime="20191111 20:15:56.315"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191111 20:15:56.333" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 20:15:56.333" starttime="20191111 20:15:56.332"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191111 20:15:56.334" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191111 20:15:56.334" starttime="20191111 20:15:56.333"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191111 20:15:56.413" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191111 20:15:56.423" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191111 20:15:56.423" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191111 20:15:56.423" starttime="20191111 20:15:56.334"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191111 20:15:56.425" level="INFO">Length is 2</msg>
<msg timestamp="20191111 20:15:56.425" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191111 20:15:56.425" starttime="20191111 20:15:56.424"></status>
</kw>
<msg timestamp="20191111 20:15:56.426" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191111 20:15:56.426" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191111 20:15:56.426" starttime="20191111 20:15:55.124"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:56.427" starttime="20191111 20:15:56.426"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191111 20:15:57.428" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191111 20:15:57.428" starttime="20191111 20:15:56.427"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:57.428" starttime="20191111 20:15:55.124"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:15:57.430" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 20:15:57.430" starttime="20191111 20:15:57.430"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:57.431" starttime="20191111 20:15:57.431"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:15:57.432" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:15:58.635" level="INFO">Read output: Last login: Mon Nov 11 20:15:55 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:15:58.636" starttime="20191111 20:15:57.431"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:58.636" starttime="20191111 20:15:57.430"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191111 20:15:58.638" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191111 20:15:58.654" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:15:58.654" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 20:15:58.654" starttime="20191111 20:15:58.637"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191111 20:15:58.656" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 20:15:58.656" starttime="20191111 20:15:58.655"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191111 20:15:58.658" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191111 20:15:58.658" starttime="20191111 20:15:58.657"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191111 20:15:58.738" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191111 20:15:58.750" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191111 20:15:58.750" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191111 20:15:58.750" starttime="20191111 20:15:58.658"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191111 20:15:58.751" level="INFO">Length is 3</msg>
<msg timestamp="20191111 20:15:58.752" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191111 20:15:58.752" starttime="20191111 20:15:58.751"></status>
</kw>
<msg timestamp="20191111 20:15:58.752" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191111 20:15:58.753" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191111 20:15:58.753" starttime="20191111 20:15:57.429"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191111 20:15:58.754" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191111 20:15:58.754" starttime="20191111 20:15:58.753"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:58.754" starttime="20191111 20:15:57.429"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:58.754" starttime="20191111 20:15:55.124"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:58.756" starttime="20191111 20:15:58.755"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:15:58.757" starttime="20191111 20:15:58.756"></status>
</kw>
<status status="PASS" endtime="20191111 20:15:58.757" critical="yes" starttime="20191111 20:14:50.581"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:15:58.765" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:16:00.816" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:16:00.816" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:00.816" starttime="20191111 20:15:58.762"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:16:00.817" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:00.818" starttime="20191111 20:16:00.817"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:16:00.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:16:00.818" starttime="20191111 20:16:00.818"></status>
</kw>
<msg timestamp="20191111 20:16:00.819" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:00.819" starttime="20191111 20:15:58.761"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 20:16:00.820" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:00.820" starttime="20191111 20:16:00.819"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:00.821" starttime="20191111 20:16:00.820"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:00.821" starttime="20191111 20:16:00.821"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 20:16:00.822" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 20:16:00.822" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:00.822" starttime="20191111 20:16:00.821"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 20:16:00.823" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191111 20:16:00.823" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 20:16:00.823" starttime="20191111 20:16:00.823"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 20:16:00.824" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 20:16:00.824" starttime="20191111 20:16:00.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 20:16:00.825" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191111 20:16:00.825" starttime="20191111 20:16:00.824"></status>
</kw>
<msg timestamp="20191111 20:16:00.825" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 20:16:00.825" starttime="20191111 20:15:58.760"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:16:00.827" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191111 20:16:00.827" starttime="20191111 20:16:00.826"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:00.829" starttime="20191111 20:16:00.828"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:16:00.829" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:16:02.036" level="INFO">Read output: Last login: Mon Nov 11 20:15:50 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:16:02.037" starttime="20191111 20:16:00.829"></status>
</kw>
<status status="PASS" endtime="20191111 20:16:02.037" starttime="20191111 20:16:00.827"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 20:16:02.038" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 20:16:12.205" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:16:12.205" starttime="20191111 20:16:02.038"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 20:16:12.206" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:16:12.314" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:16:12.315" level="INFO">${shutdownMsg} = hadoop     599  0.0  0.0   9556  1168 ?        Ss   20:16   0:00 bash -c sudo ps aux | grep om
hadoop     601  0.0  0.0   9088   668 ?        S    20:16   0:00 grep om</msg>
<status status="PASS" endtime="20191111 20:16:12.315" starttime="20191111 20:16:12.206"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:16:12.380" starttime="20191111 20:16:12.315"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:12.381" starttime="20191111 20:16:12.381"></status>
</kw>
<msg timestamp="20191111 20:16:12.382" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 20:16:12.382" starttime="20191111 20:16:00.826"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:16:12.386" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:16:14.511" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:16:14.511" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:14.511" starttime="20191111 20:16:12.384"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:16:14.512" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:14.512" starttime="20191111 20:16:14.512"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:16:14.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:16:14.513" starttime="20191111 20:16:14.513"></status>
</kw>
<msg timestamp="20191111 20:16:14.513" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:14.514" starttime="20191111 20:16:12.383"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 20:16:14.514" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:14.514" starttime="20191111 20:16:14.514"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:14.515" starttime="20191111 20:16:14.514"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:14.515" starttime="20191111 20:16:14.515"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 20:16:14.516" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 20:16:14.516" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:14.516" starttime="20191111 20:16:14.515"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 20:16:14.517" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 20:16:14.517" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 20:16:14.517" starttime="20191111 20:16:14.516"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 20:16:14.517" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 20:16:14.517" starttime="20191111 20:16:14.517"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 20:16:14.518" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 20:16:14.518" starttime="20191111 20:16:14.518"></status>
</kw>
<msg timestamp="20191111 20:16:14.518" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191111 20:16:14.518" starttime="20191111 20:16:12.382"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:14.519" starttime="20191111 20:16:14.519"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 20:16:14.520" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191111 20:16:14.520" starttime="20191111 20:16:14.520"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 20:16:14.521" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191111 20:16:14.521" starttime="20191111 20:16:14.520"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 20:16:14.522" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191111 20:16:14.522" starttime="20191111 20:16:14.521"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:16:14.523" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:16:14.523" starttime="20191111 20:16:14.522"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:16:14.526" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:16:19.036" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:16:19.036" level="INFO">${output} = 2019-11-11 20:16:17 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 20:16:17 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191111 20:16:19.036" starttime="20191111 20:16:14.524"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:16:19.037" level="INFO">2019-11-11 20:16:17 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 20:16:17 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 20:16:17 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 20:16:19.038" starttime="20191111 20:16:19.037"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:16:19.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:16:19.038" starttime="20191111 20:16:19.038"></status>
</kw>
<status status="PASS" endtime="20191111 20:16:19.039" starttime="20191111 20:16:14.524"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:16:19.043" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:16:21.351" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:16:21.353" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:16:21.355" starttime="20191111 20:16:19.040"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:16:21.361" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:16:21.361" starttime="20191111 20:16:21.358"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:16:21.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:16:21.362" starttime="20191111 20:16:21.362"></status>
</kw>
<msg timestamp="20191111 20:16:21.364" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:16:21.364" starttime="20191111 20:16:19.039"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:21.365" starttime="20191111 20:16:21.364"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:16:21.367" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:16:21.367" starttime="20191111 20:16:21.365"></status>
</kw>
<status status="PASS" endtime="20191111 20:16:21.368" starttime="20191111 20:16:14.519"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:16:21.370" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191111 20:16:21.370" starttime="20191111 20:16:21.369"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:21.372" starttime="20191111 20:16:21.371"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:16:21.373" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:16:22.582" level="INFO">Read output: Last login: Mon Nov 11 20:16:01 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:16:22.582" starttime="20191111 20:16:21.373"></status>
</kw>
<status status="PASS" endtime="20191111 20:16:22.582" starttime="20191111 20:16:21.371"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 20:16:22.583" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 20:16:24.741" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:16:24.742" starttime="20191111 20:16:22.583"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 20:16:24.743" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:16:24.829" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:16:24.829" level="INFO">${startupMsg} = hadoop     652  242  0.0 34484872 226096 ?     Sl   20:16   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 20:16:24.829" starttime="20191111 20:16:24.742"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:16:24.894" starttime="20191111 20:16:24.830"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:24.895" starttime="20191111 20:16:24.895"></status>
</kw>
<status status="PASS" endtime="20191111 20:16:24.895" starttime="20191111 20:16:21.368"></status>
</kw>
<status status="PASS" endtime="20191111 20:16:24.895" starttime="20191111 20:15:58.760"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:16:24.900" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:16:26.892" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:16:26.893" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:26.893" starttime="20191111 20:16:24.897"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:16:26.894" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:26.894" starttime="20191111 20:16:26.893"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:16:26.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:16:26.895" starttime="20191111 20:16:26.894"></status>
</kw>
<msg timestamp="20191111 20:16:26.895" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:26.895" starttime="20191111 20:16:24.897"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 20:16:26.896" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:26.896" starttime="20191111 20:16:26.895"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:26.897" starttime="20191111 20:16:26.896"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:26.898" starttime="20191111 20:16:26.897"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 20:16:26.898" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 20:16:26.899" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:26.899" starttime="20191111 20:16:26.898"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 20:16:26.900" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 20:16:26.900" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 20:16:26.900" starttime="20191111 20:16:26.899"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 20:16:26.901" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 20:16:26.901" starttime="20191111 20:16:26.900"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 20:16:26.901" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 20:16:26.902" starttime="20191111 20:16:26.901"></status>
</kw>
<msg timestamp="20191111 20:16:26.902" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 20:16:26.902" starttime="20191111 20:16:24.896"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:16:26.904" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 20:16:26.904" starttime="20191111 20:16:26.903"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:26.905" starttime="20191111 20:16:26.905"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:16:26.906" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:16:28.093" level="INFO">Read output: Last login: Mon Nov 11 20:15:57 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:16:28.093" starttime="20191111 20:16:26.905"></status>
</kw>
<status status="PASS" endtime="20191111 20:16:28.094" starttime="20191111 20:16:26.904"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 20:16:28.095" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 20:16:29.243" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:16:29.244" starttime="20191111 20:16:28.094"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 20:16:29.245" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:16:29.320" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:16:29.321" level="INFO">${shutdownMsg} = hadoop    1114  0.0  0.0   9556  1164 ?        Ss   20:16   0:00 bash -c sudo ps aux | grep om
hadoop    1116  0.0  0.0   9088   668 ?        S    20:16   0:00 grep om</msg>
<status status="PASS" endtime="20191111 20:16:29.321" starttime="20191111 20:16:29.244"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:16:29.353" starttime="20191111 20:16:29.321"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:29.354" starttime="20191111 20:16:29.354"></status>
</kw>
<msg timestamp="20191111 20:16:29.355" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 20:16:29.355" starttime="20191111 20:16:26.902"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:16:29.358" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:16:31.474" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:16:31.474" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:31.474" starttime="20191111 20:16:29.356"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:16:31.475" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:31.476" starttime="20191111 20:16:31.475"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:16:31.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:16:31.476" starttime="20191111 20:16:31.476"></status>
</kw>
<msg timestamp="20191111 20:16:31.477" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:31.477" starttime="20191111 20:16:29.355"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 20:16:31.477" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:31.477" starttime="20191111 20:16:31.477"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:31.478" starttime="20191111 20:16:31.478"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:31.479" starttime="20191111 20:16:31.478"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 20:16:31.479" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 20:16:31.479" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:31.479" starttime="20191111 20:16:31.479"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 20:16:31.480" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 20:16:31.480" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 20:16:31.480" starttime="20191111 20:16:31.480"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 20:16:31.481" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 20:16:31.481" starttime="20191111 20:16:31.480"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 20:16:31.481" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 20:16:31.481" starttime="20191111 20:16:31.481"></status>
</kw>
<msg timestamp="20191111 20:16:31.482" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191111 20:16:31.482" starttime="20191111 20:16:29.355"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:31.483" starttime="20191111 20:16:31.482"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 20:16:31.484" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191111 20:16:31.484" starttime="20191111 20:16:31.483"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 20:16:31.485" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191111 20:16:31.485" starttime="20191111 20:16:31.484"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 20:16:31.485" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191111 20:16:31.486" starttime="20191111 20:16:31.485"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:16:31.487" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:16:31.487" starttime="20191111 20:16:31.486"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:16:31.490" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:16:36.054" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:16:36.054" level="INFO">${output} = 2019-11-11 20:16:34 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 20:16:34 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191111 20:16:36.054" starttime="20191111 20:16:31.488"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:16:36.056" level="INFO">2019-11-11 20:16:34 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 20:16:34 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 20:16:34 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 20:16:36.056" starttime="20191111 20:16:36.055"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:16:36.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:16:36.057" starttime="20191111 20:16:36.057"></status>
</kw>
<status status="PASS" endtime="20191111 20:16:36.058" starttime="20191111 20:16:31.487"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:16:36.061" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:16:38.479" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:16:38.479" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:16:38.480" starttime="20191111 20:16:36.059"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:16:38.481" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:16:38.481" starttime="20191111 20:16:38.480"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:16:38.482" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:16:38.482" starttime="20191111 20:16:38.482"></status>
</kw>
<msg timestamp="20191111 20:16:38.483" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:16:38.483" starttime="20191111 20:16:36.058"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:38.484" starttime="20191111 20:16:38.483"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:16:38.485" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:16:38.485" starttime="20191111 20:16:38.484"></status>
</kw>
<status status="PASS" endtime="20191111 20:16:38.485" starttime="20191111 20:16:31.483"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:16:38.487" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 20:16:38.487" starttime="20191111 20:16:38.486"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:38.489" starttime="20191111 20:16:38.488"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:16:38.490" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:16:39.695" level="INFO">Read output: Last login: Mon Nov 11 20:16:27 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:16:39.695" starttime="20191111 20:16:38.489"></status>
</kw>
<status status="PASS" endtime="20191111 20:16:39.696" starttime="20191111 20:16:38.487"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 20:16:39.697" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 20:16:41.845" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:16:41.845" starttime="20191111 20:16:39.696"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 20:16:41.846" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:16:41.921" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:16:41.921" level="INFO">${startupMsg} = hadoop    1165  349  0.0 34473664 198192 ?     Sl   20:16   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 20:16:41.921" starttime="20191111 20:16:41.845"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:16:41.986" starttime="20191111 20:16:41.921"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:41.987" starttime="20191111 20:16:41.986"></status>
</kw>
<status status="PASS" endtime="20191111 20:16:41.987" starttime="20191111 20:16:38.485"></status>
</kw>
<status status="PASS" endtime="20191111 20:16:41.987" starttime="20191111 20:16:24.896"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:16:41.990" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:16:43.830" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:16:43.830" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:43.830" starttime="20191111 20:16:41.988"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:16:43.832" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:43.832" starttime="20191111 20:16:43.831"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:16:43.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:16:43.833" starttime="20191111 20:16:43.832"></status>
</kw>
<msg timestamp="20191111 20:16:43.833" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:43.833" starttime="20191111 20:16:41.988"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 20:16:43.834" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:43.834" starttime="20191111 20:16:43.833"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:43.835" starttime="20191111 20:16:43.834"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:43.835" starttime="20191111 20:16:43.835"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 20:16:43.836" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 20:16:43.836" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:43.836" starttime="20191111 20:16:43.835"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 20:16:43.837" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 20:16:43.838" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 20:16:43.838" starttime="20191111 20:16:43.836"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 20:16:43.838" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 20:16:43.838" starttime="20191111 20:16:43.838"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 20:16:43.839" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 20:16:43.839" starttime="20191111 20:16:43.838"></status>
</kw>
<msg timestamp="20191111 20:16:43.839" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 20:16:43.839" starttime="20191111 20:16:41.987"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:16:43.840" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 20:16:43.840" starttime="20191111 20:16:43.840"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:43.841" starttime="20191111 20:16:43.841"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:16:43.842" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:16:45.040" level="INFO">Read output: Last login: Mon Nov 11 20:14:47 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:16:45.040" starttime="20191111 20:16:43.842"></status>
</kw>
<status status="PASS" endtime="20191111 20:16:45.041" starttime="20191111 20:16:43.840"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 20:16:45.042" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 20:16:46.181" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:16:46.181" starttime="20191111 20:16:45.041"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 20:16:46.182" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:16:46.280" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:16:46.280" level="INFO">${shutdownMsg} = hadoop    1093  0.0  0.0   9556  1168 ?        Ss   20:16   0:00 bash -c sudo ps aux | grep om
hadoop    1095  0.0  0.0   9088   668 ?        S    20:16   0:00 grep om</msg>
<status status="PASS" endtime="20191111 20:16:46.280" starttime="20191111 20:16:46.182"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:16:46.345" starttime="20191111 20:16:46.281"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:46.346" starttime="20191111 20:16:46.346"></status>
</kw>
<msg timestamp="20191111 20:16:46.347" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 20:16:46.347" starttime="20191111 20:16:43.839"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:16:46.350" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:16:58.511" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:16:58.511" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:58.511" starttime="20191111 20:16:46.348"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:16:58.512" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:58.513" starttime="20191111 20:16:58.512"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:16:58.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:16:58.513" starttime="20191111 20:16:58.513"></status>
</kw>
<msg timestamp="20191111 20:16:58.514" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:58.514" starttime="20191111 20:16:46.347"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 20:16:58.514" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:58.514" starttime="20191111 20:16:58.514"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:58.515" starttime="20191111 20:16:58.515"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:58.516" starttime="20191111 20:16:58.515"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 20:16:58.516" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 20:16:58.516" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:16:58.516" starttime="20191111 20:16:58.516"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 20:16:58.517" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191111 20:16:58.517" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 20:16:58.517" starttime="20191111 20:16:58.517"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 20:16:58.518" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 20:16:58.518" starttime="20191111 20:16:58.517"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 20:16:58.518" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191111 20:16:58.518" starttime="20191111 20:16:58.518"></status>
</kw>
<msg timestamp="20191111 20:16:58.519" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191111 20:16:58.519" starttime="20191111 20:16:46.347"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 20:16:58.519" starttime="20191111 20:16:58.519"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 20:16:58.521" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191111 20:16:58.521" starttime="20191111 20:16:58.520"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 20:16:58.522" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191111 20:16:58.522" starttime="20191111 20:16:58.521"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 20:16:58.523" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191111 20:16:58.523" starttime="20191111 20:16:58.522"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:16:58.524" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:16:58.524" starttime="20191111 20:16:58.523"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:16:58.527" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:17:13.228" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:17:13.229" level="INFO">${output} = 2019-11-11 20:17:01 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191111 20:17:13.229" starttime="20191111 20:16:58.525"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:17:13.230" level="INFO">2019-11-11 20:17:01 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:17:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:17:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:17:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:17:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:17:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:17:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:17:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:17:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:17:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 20:17:10 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-11 20:17:11 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 20:17:11 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 20:17:11 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 20:17:13.230" starttime="20191111 20:17:13.229"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:17:13.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:17:13.232" starttime="20191111 20:17:13.231"></status>
</kw>
<status status="PASS" endtime="20191111 20:17:13.232" starttime="20191111 20:16:58.524"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:17:13.238" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:17:25.528" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:17:25.528" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:17:25.528" starttime="20191111 20:17:13.234"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:17:25.530" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:17:25.530" starttime="20191111 20:17:25.529"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:17:25.531" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:17:25.531" starttime="20191111 20:17:25.530"></status>
</kw>
<msg timestamp="20191111 20:17:25.532" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:17:25.532" starttime="20191111 20:17:13.233"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:25.533" starttime="20191111 20:17:25.532"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:17:25.534" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:17:25.534" starttime="20191111 20:17:25.533"></status>
</kw>
<status status="PASS" endtime="20191111 20:17:25.534" starttime="20191111 20:16:58.520"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:17:25.536" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 20:17:25.536" starttime="20191111 20:17:25.536"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:25.538" starttime="20191111 20:17:25.537"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:17:25.539" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:17:26.745" level="INFO">Read output: Last login: Mon Nov 11 20:16:44 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:17:26.746" starttime="20191111 20:17:25.539"></status>
</kw>
<status status="PASS" endtime="20191111 20:17:26.746" starttime="20191111 20:17:25.537"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 20:17:26.748" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 20:17:28.919" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:17:28.919" starttime="20191111 20:17:26.747"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 20:17:28.921" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:17:29.029" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:17:29.029" level="INFO">${startupMsg} = hadoop    1144  337  0.0 34479180 213528 ?     Sl   20:17   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 20:17:29.030" starttime="20191111 20:17:28.919"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:17:29.063" starttime="20191111 20:17:29.030"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:29.065" starttime="20191111 20:17:29.064"></status>
</kw>
<status status="PASS" endtime="20191111 20:17:29.065" starttime="20191111 20:17:25.535"></status>
</kw>
<status status="PASS" endtime="20191111 20:17:29.065" starttime="20191111 20:16:41.987"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:17:29.070" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:17:31.495" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:17:31.495" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:31.495" starttime="20191111 20:17:29.067"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:17:31.497" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:31.497" starttime="20191111 20:17:31.496"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:17:31.498" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:17:31.498" starttime="20191111 20:17:31.497"></status>
</kw>
<msg timestamp="20191111 20:17:31.499" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:31.499" starttime="20191111 20:17:29.066"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 20:17:31.499" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:31.500" starttime="20191111 20:17:31.499"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:31.500" starttime="20191111 20:17:31.500"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:31.501" starttime="20191111 20:17:31.501"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 20:17:31.502" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 20:17:31.502" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:31.502" starttime="20191111 20:17:31.501"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 20:17:31.503" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191111 20:17:31.503" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 20:17:31.503" starttime="20191111 20:17:31.502"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 20:17:31.504" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 20:17:31.504" starttime="20191111 20:17:31.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 20:17:31.505" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191111 20:17:31.505" starttime="20191111 20:17:31.504"></status>
</kw>
<msg timestamp="20191111 20:17:31.505" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 20:17:31.505" starttime="20191111 20:17:29.066"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:17:31.507" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191111 20:17:31.507" starttime="20191111 20:17:31.506"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:31.509" starttime="20191111 20:17:31.508"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:17:31.509" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:17:32.714" level="INFO">Read output: Last login: Mon Nov 11 20:16:21 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:17:32.715" starttime="20191111 20:17:31.509"></status>
</kw>
<status status="PASS" endtime="20191111 20:17:32.715" starttime="20191111 20:17:31.507"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 20:17:32.716" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 20:17:33.885" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:17:33.886" starttime="20191111 20:17:32.716"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 20:17:33.887" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:17:33.953" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:17:33.953" level="INFO">${shutdownMsg} = hadoop    1150  0.0  0.0   9556  1168 ?        Ss   20:17   0:00 bash -c sudo ps aux | grep om
hadoop    1152  0.0  0.0   9088   668 ?        S    20:17   0:00 grep om</msg>
<status status="PASS" endtime="20191111 20:17:33.953" starttime="20191111 20:17:33.886"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:17:34.018" starttime="20191111 20:17:33.954"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:34.019" starttime="20191111 20:17:34.019"></status>
</kw>
<msg timestamp="20191111 20:17:34.020" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 20:17:34.020" starttime="20191111 20:17:31.506"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:17:34.024" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:17:36.277" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:17:36.278" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:36.278" starttime="20191111 20:17:34.021"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:17:36.280" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:36.280" starttime="20191111 20:17:36.279"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:17:36.281" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:17:36.282" starttime="20191111 20:17:36.281"></status>
</kw>
<msg timestamp="20191111 20:17:36.283" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:36.283" starttime="20191111 20:17:34.021"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 20:17:36.284" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:36.284" starttime="20191111 20:17:36.283"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:36.286" starttime="20191111 20:17:36.285"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:36.287" starttime="20191111 20:17:36.286"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 20:17:36.288" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 20:17:36.289" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:36.289" starttime="20191111 20:17:36.288"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 20:17:36.290" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 20:17:36.290" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 20:17:36.291" starttime="20191111 20:17:36.289"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 20:17:36.292" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 20:17:36.292" starttime="20191111 20:17:36.291"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 20:17:36.293" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 20:17:36.293" starttime="20191111 20:17:36.292"></status>
</kw>
<msg timestamp="20191111 20:17:36.294" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191111 20:17:36.294" starttime="20191111 20:17:34.020"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:36.296" starttime="20191111 20:17:36.294"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 20:17:36.298" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191111 20:17:36.298" starttime="20191111 20:17:36.297"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 20:17:36.300" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191111 20:17:36.300" starttime="20191111 20:17:36.298"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 20:17:36.301" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191111 20:17:36.301" starttime="20191111 20:17:36.300"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:17:36.303" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:17:36.303" starttime="20191111 20:17:36.301"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:17:36.306" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:17:40.816" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:17:40.816" level="INFO">${output} = 2019-11-11 20:17:39 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 20:17:39 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191111 20:17:40.816" starttime="20191111 20:17:36.304"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:17:40.818" level="INFO">2019-11-11 20:17:39 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 20:17:39 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 20:17:39 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 20:17:40.819" starttime="20191111 20:17:40.817"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:17:40.819" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:17:40.820" starttime="20191111 20:17:40.819"></status>
</kw>
<status status="PASS" endtime="20191111 20:17:40.820" starttime="20191111 20:17:36.303"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:17:40.824" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:17:43.104" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:17:43.104" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:17:43.104" starttime="20191111 20:17:40.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:17:43.106" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:17:43.106" starttime="20191111 20:17:43.105"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:17:43.106" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:17:43.107" starttime="20191111 20:17:43.106"></status>
</kw>
<msg timestamp="20191111 20:17:43.107" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:17:43.107" starttime="20191111 20:17:40.820"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:43.108" starttime="20191111 20:17:43.107"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:17:43.109" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:17:43.110" starttime="20191111 20:17:43.108"></status>
</kw>
<status status="PASS" endtime="20191111 20:17:43.110" starttime="20191111 20:17:36.296"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:17:43.111" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191111 20:17:43.111" starttime="20191111 20:17:43.111"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:43.113" starttime="20191111 20:17:43.112"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:17:43.113" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:17:44.301" level="INFO">Read output: Last login: Mon Nov 11 20:17:31 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:17:44.301" starttime="20191111 20:17:43.113"></status>
</kw>
<status status="PASS" endtime="20191111 20:17:44.302" starttime="20191111 20:17:43.112"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 20:17:44.303" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 20:17:46.434" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:17:46.434" starttime="20191111 20:17:44.302"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 20:17:46.435" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:17:46.532" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:17:46.533" level="INFO">${startupMsg} = hadoop    1201  345  0.0 34474512 208372 ?     Sl   20:17   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 20:17:46.533" starttime="20191111 20:17:46.434"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:17:46.598" starttime="20191111 20:17:46.533"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:46.599" starttime="20191111 20:17:46.598"></status>
</kw>
<status status="PASS" endtime="20191111 20:17:46.599" starttime="20191111 20:17:43.110"></status>
</kw>
<status status="PASS" endtime="20191111 20:17:46.599" starttime="20191111 20:17:29.065"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:17:46.604" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:17:48.437" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:17:48.437" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:48.437" starttime="20191111 20:17:46.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:17:48.438" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:48.438" starttime="20191111 20:17:48.438"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:17:48.439" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:17:48.439" starttime="20191111 20:17:48.438"></status>
</kw>
<msg timestamp="20191111 20:17:48.439" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:48.439" starttime="20191111 20:17:46.600"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 20:17:48.440" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:48.440" starttime="20191111 20:17:48.439"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:48.440" starttime="20191111 20:17:48.440"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:48.441" starttime="20191111 20:17:48.441"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 20:17:48.442" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 20:17:48.442" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 20:17:48.442" starttime="20191111 20:17:48.441"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 20:17:48.442" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 20:17:48.442" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 20:17:48.443" starttime="20191111 20:17:48.442"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 20:17:48.443" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 20:17:48.443" starttime="20191111 20:17:48.443"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 20:17:48.444" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 20:17:48.444" starttime="20191111 20:17:48.443"></status>
</kw>
<msg timestamp="20191111 20:17:48.444" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 20:17:48.444" starttime="20191111 20:17:46.600"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:17:48.445" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 20:17:48.445" starttime="20191111 20:17:48.445"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:48.447" starttime="20191111 20:17:48.446"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:17:48.447" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:17:49.634" level="INFO">Read output: Last login: Mon Nov 11 20:16:38 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:17:49.635" starttime="20191111 20:17:48.447"></status>
</kw>
<status status="PASS" endtime="20191111 20:17:49.635" starttime="20191111 20:17:48.445"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 20:17:49.636" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 20:17:50.795" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:17:50.796" starttime="20191111 20:17:49.636"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 20:17:50.797" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:17:50.873" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:17:50.873" level="INFO">${shutdownMsg} = hadoop    1668  0.0  0.0   9556  1168 ?        Ss   20:17   0:00 bash -c sudo ps aux | grep om
hadoop    1670  0.0  0.0   9088   672 ?        S    20:17   0:00 grep om</msg>
<status status="PASS" endtime="20191111 20:17:50.874" starttime="20191111 20:17:50.796"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:17:50.907" starttime="20191111 20:17:50.874"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:17:50.908" starttime="20191111 20:17:50.907"></status>
</kw>
<msg timestamp="20191111 20:17:50.908" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 20:17:50.908" starttime="20191111 20:17:48.444"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:17:50.913" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:18:03.080" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:18:03.080" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:18:03.080" starttime="20191111 20:17:50.910"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:18:03.081" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:18:03.082" starttime="20191111 20:18:03.081"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:18:03.082" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:18:03.082" starttime="20191111 20:18:03.082"></status>
</kw>
<msg timestamp="20191111 20:18:03.083" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:18:03.083" starttime="20191111 20:17:50.909"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 20:18:03.083" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:18:03.083" starttime="20191111 20:18:03.083"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 20:18:03.084" starttime="20191111 20:18:03.084"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 20:18:03.085" starttime="20191111 20:18:03.084"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 20:18:03.085" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 20:18:03.085" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 20:18:03.085" starttime="20191111 20:18:03.085"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 20:18:03.086" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 20:18:03.086" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 20:18:03.086" starttime="20191111 20:18:03.086"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 20:18:03.087" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 20:18:03.087" starttime="20191111 20:18:03.086"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 20:18:03.087" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 20:18:03.087" starttime="20191111 20:18:03.087"></status>
</kw>
<msg timestamp="20191111 20:18:03.088" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191111 20:18:03.088" starttime="20191111 20:17:50.909"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 20:18:03.088" starttime="20191111 20:18:03.088"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 20:18:03.090" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191111 20:18:03.090" starttime="20191111 20:18:03.089"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 20:18:03.091" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191111 20:18:03.091" starttime="20191111 20:18:03.090"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 20:18:03.091" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191111 20:18:03.092" starttime="20191111 20:18:03.091"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:18:03.093" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:18:03.093" starttime="20191111 20:18:03.092"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:18:03.096" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:18:07.640" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:18:07.640" level="INFO">${output} = 2019-11-11 20:18:06 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 20:18:06 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191111 20:18:07.640" starttime="20191111 20:18:03.094"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:18:07.642" level="INFO">2019-11-11 20:18:06 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 20:18:06 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 20:18:06 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 20:18:07.642" starttime="20191111 20:18:07.641"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:18:07.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:18:07.643" starttime="20191111 20:18:07.642"></status>
</kw>
<status status="PASS" endtime="20191111 20:18:07.644" starttime="20191111 20:18:03.093"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 20:18:07.648" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 20:18:09.915" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 20:18:09.915" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:18:09.915" starttime="20191111 20:18:07.645"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 20:18:09.917" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:18:09.917" starttime="20191111 20:18:09.916"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 20:18:09.918" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 20:18:09.918" starttime="20191111 20:18:09.918"></status>
</kw>
<msg timestamp="20191111 20:18:09.919" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 20:18:09.919" starttime="20191111 20:18:07.644"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:18:09.920" starttime="20191111 20:18:09.919"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 20:18:09.921" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 20:18:09.921" starttime="20191111 20:18:09.920"></status>
</kw>
<status status="PASS" endtime="20191111 20:18:09.922" starttime="20191111 20:18:03.089"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 20:18:09.923" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 20:18:09.924" starttime="20191111 20:18:09.923"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 20:18:09.925" starttime="20191111 20:18:09.925"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 20:18:09.926" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 20:18:11.130" level="INFO">Read output: Last login: Mon Nov 11 20:17:48 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 20:18:11.131" starttime="20191111 20:18:09.926"></status>
</kw>
<status status="PASS" endtime="20191111 20:18:11.131" starttime="20191111 20:18:09.924"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 20:18:11.133" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 20:18:13.292" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 20:18:13.292" starttime="20191111 20:18:11.132"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 20:18:13.293" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 20:18:13.391" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 20:18:13.391" level="INFO">${startupMsg} = hadoop    1720  363  0.0 34476156 206952 ?     Sl   20:18   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 20:18:13.391" starttime="20191111 20:18:13.293"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 20:18:13.456" starttime="20191111 20:18:13.391"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 20:18:13.457" starttime="20191111 20:18:13.457"></status>
</kw>
<status status="PASS" endtime="20191111 20:18:13.457" starttime="20191111 20:18:09.922"></status>
</kw>
<status status="PASS" endtime="20191111 20:18:13.458" starttime="20191111 20:17:46.599"></status>
</kw>
<status status="PASS" endtime="20191111 20:18:13.458" starttime="20191111 20:15:58.759"></status>
</kw>
<status status="PASS" endtime="20191111 20:18:13.458" critical="yes" starttime="20191111 20:15:58.758"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191111 20:18:13.460" starttime="20191111 20:13:41.852"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
