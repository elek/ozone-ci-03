<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191107 09:19:23.940" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:19:24.089" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:19:26.841" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:19:26.841" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191107 09:19:26.841" starttime="20191107 09:19:24.087"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:19:26.843" level="INFO"></msg>
<status status="PASS" endtime="20191107 09:19:26.843" starttime="20191107 09:19:26.842"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:19:26.843" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:19:26.844" starttime="20191107 09:19:26.843"></status>
</kw>
<status status="PASS" endtime="20191107 09:19:26.844" starttime="20191107 09:19:24.087"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:19:26.850" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:19:29.043" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:19:29.044" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191107 09:19:29.044" starttime="20191107 09:19:26.848"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:19:29.045" level="INFO"></msg>
<status status="PASS" endtime="20191107 09:19:29.045" starttime="20191107 09:19:29.044"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:19:29.046" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:19:29.046" starttime="20191107 09:19:29.046"></status>
</kw>
<status status="PASS" endtime="20191107 09:19:29.047" starttime="20191107 09:19:26.844"></status>
</kw>
<status status="PASS" endtime="20191107 09:19:29.047" starttime="20191107 09:19:24.087"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 09:19:29.049" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191107 09:19:29.049" starttime="20191107 09:19:29.048"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 09:19:29.050" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191107 09:19:29.050" starttime="20191107 09:19:29.049"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 09:19:29.051" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191107 09:19:29.051" starttime="20191107 09:19:29.050"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:19:29.064" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:19:29.064" starttime="20191107 09:19:29.051"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:19:29.067" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:19:33.684" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:19:33.684" level="INFO">${output} = 2019-11-07 09:19:31 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 09:19:31 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 09:19:33.684" starttime="20191107 09:19:29.065"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:19:33.686" level="INFO">2019-11-07 09:19:31 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 09:19:31 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 09:19:31 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 09:19:33.686" starttime="20191107 09:19:33.685"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:19:33.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:19:33.687" starttime="20191107 09:19:33.686"></status>
</kw>
<status status="PASS" endtime="20191107 09:19:33.687" starttime="20191107 09:19:29.064"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:19:33.691" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:19:35.967" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:19:35.967" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191107 09:19:35.967" starttime="20191107 09:19:33.689"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:19:35.969" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191107 09:19:35.970" starttime="20191107 09:19:35.968"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:19:35.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:19:35.971" starttime="20191107 09:19:35.970"></status>
</kw>
<msg timestamp="20191107 09:19:35.972" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191107 09:19:35.972" starttime="20191107 09:19:33.688"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:19:35.973" starttime="20191107 09:19:35.972"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:19:35.974" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:19:35.974" starttime="20191107 09:19:35.973"></status>
</kw>
<status status="PASS" endtime="20191107 09:19:35.975" starttime="20191107 09:19:29.047"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:19:35.979" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:19:38.086" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:19:38.086" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:19:38.087" starttime="20191107 09:19:35.977"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:19:38.088" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:19:38.089" starttime="20191107 09:19:38.087"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:19:38.089" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:19:38.090" starttime="20191107 09:19:38.089"></status>
</kw>
<msg timestamp="20191107 09:19:38.090" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:19:38.090" starttime="20191107 09:19:35.976"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 09:19:38.091" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:19:38.091" starttime="20191107 09:19:38.091"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 09:19:38.093" starttime="20191107 09:19:38.092"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 09:19:38.094" starttime="20191107 09:19:38.093"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 09:19:38.094" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 09:19:38.095" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:19:38.095" starttime="20191107 09:19:38.094"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 09:19:38.096" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 09:19:38.096" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 09:19:38.096" starttime="20191107 09:19:38.095"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 09:19:38.097" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 09:19:38.097" starttime="20191107 09:19:38.096"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 09:19:38.097" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 09:19:38.097" starttime="20191107 09:19:38.097"></status>
</kw>
<msg timestamp="20191107 09:19:38.098" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 09:19:38.098" starttime="20191107 09:19:35.975"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:19:38.100" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 09:19:38.100" starttime="20191107 09:19:38.099"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:19:38.101" starttime="20191107 09:19:38.101"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:19:38.102" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:19:39.343" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:19:39.344" starttime="20191107 09:19:38.102"></status>
</kw>
<status status="PASS" endtime="20191107 09:19:39.344" starttime="20191107 09:19:38.100"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 09:19:39.346" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 09:19:49.488" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:19:49.488" starttime="20191107 09:19:39.345"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 09:19:49.490" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:19:49.598" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:19:49.598" level="INFO">${shutdownMsg} = hadoop     453  0.0  0.0   9556  1164 ?        Ss   09:19   0:00 bash -c sudo ps aux | grep om
hadoop     455  0.0  0.0   9088   672 ?        S    09:19   0:00 grep om</msg>
<status status="PASS" endtime="20191107 09:19:49.599" starttime="20191107 09:19:49.489"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:19:49.665" starttime="20191107 09:19:49.600"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:19:49.666" starttime="20191107 09:19:49.665"></status>
</kw>
<msg timestamp="20191107 09:19:49.666" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 09:19:49.666" starttime="20191107 09:19:38.098"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:19:49.669" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:20:01.854" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:20:01.854" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:20:01.854" starttime="20191107 09:19:49.667"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:20:01.855" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:20:01.855" starttime="20191107 09:20:01.855"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:20:01.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:20:01.856" starttime="20191107 09:20:01.856"></status>
</kw>
<msg timestamp="20191107 09:20:01.856" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:20:01.857" starttime="20191107 09:19:49.667"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 09:20:01.857" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:20:01.857" starttime="20191107 09:20:01.857"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 09:20:01.858" starttime="20191107 09:20:01.857"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 09:20:01.858" starttime="20191107 09:20:01.858"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 09:20:01.859" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 09:20:01.859" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:20:01.859" starttime="20191107 09:20:01.859"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 09:20:01.860" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 09:20:01.860" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 09:20:01.860" starttime="20191107 09:20:01.859"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 09:20:01.860" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 09:20:01.860" starttime="20191107 09:20:01.860"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 09:20:01.861" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 09:20:01.861" starttime="20191107 09:20:01.861"></status>
</kw>
<msg timestamp="20191107 09:20:01.861" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191107 09:20:01.861" starttime="20191107 09:19:49.666"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 09:20:01.862" starttime="20191107 09:20:01.862"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 09:20:01.863" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191107 09:20:01.863" starttime="20191107 09:20:01.863"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 09:20:01.864" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191107 09:20:01.864" starttime="20191107 09:20:01.864"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 09:20:01.865" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191107 09:20:01.865" starttime="20191107 09:20:01.864"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:20:01.866" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:20:01.867" starttime="20191107 09:20:01.865"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:20:01.869" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:20:16.498" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:20:16.498" level="INFO">${output} = 2019-11-07 09:20:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191107 09:20:16.498" starttime="20191107 09:20:01.867"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:20:16.500" level="INFO">2019-11-07 09:20:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:20:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:20:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:20:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:20:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:20:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:20:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:20:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:20:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:20:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:20:14 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 09:20:14 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 09:20:14 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 09:20:16.500" starttime="20191107 09:20:16.499"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:20:16.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:20:16.502" starttime="20191107 09:20:16.501"></status>
</kw>
<status status="PASS" endtime="20191107 09:20:16.503" starttime="20191107 09:20:01.867"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:20:16.508" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:20:28.874" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:20:28.874" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191107 09:20:28.875" starttime="20191107 09:20:16.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:20:28.876" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191107 09:20:28.877" starttime="20191107 09:20:28.875"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:20:28.877" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:20:28.878" starttime="20191107 09:20:28.877"></status>
</kw>
<msg timestamp="20191107 09:20:28.878" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191107 09:20:28.878" starttime="20191107 09:20:16.503"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:20:28.879" starttime="20191107 09:20:28.879"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:20:28.880" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:20:28.880" starttime="20191107 09:20:28.880"></status>
</kw>
<status status="PASS" endtime="20191107 09:20:28.881" starttime="20191107 09:20:01.862"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:20:28.883" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 09:20:28.883" starttime="20191107 09:20:28.882"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:20:28.885" starttime="20191107 09:20:28.884"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:20:28.886" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:20:30.088" level="INFO">Read output: Last login: Thu Nov  7 09:19:38 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:20:30.089" starttime="20191107 09:20:28.885"></status>
</kw>
<status status="PASS" endtime="20191107 09:20:30.089" starttime="20191107 09:20:28.883"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 09:20:30.091" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 09:20:32.271" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:20:32.271" starttime="20191107 09:20:30.090"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 09:20:32.272" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:20:32.370" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:20:32.371" level="INFO">${startupMsg} = hadoop     506  384  0.0 34481720 226296 ?     Sl   09:20   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 09:20:32.371" starttime="20191107 09:20:32.272"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:20:32.437" starttime="20191107 09:20:32.372"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:20:32.439" starttime="20191107 09:20:32.438"></status>
</kw>
<status status="PASS" endtime="20191107 09:20:32.439" starttime="20191107 09:20:28.881"></status>
</kw>
<status status="PASS" endtime="20191107 09:20:32.440" critical="yes" starttime="20191107 09:19:24.086"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191107 09:20:32.445" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191107 09:20:32.445" starttime="20191107 09:20:32.442"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191107 09:20:32.449" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191107 09:20:32.449" starttime="20191107 09:20:32.446"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:20:32.451" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 09:20:32.452" starttime="20191107 09:20:32.450"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:20:32.454" starttime="20191107 09:20:32.453"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:20:32.456" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:20:33.660" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:20:33.660" starttime="20191107 09:20:32.455"></status>
</kw>
<status status="PASS" endtime="20191107 09:20:33.660" starttime="20191107 09:20:32.452"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 09:20:33.661" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 09:20:43.820" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:20:43.820" starttime="20191107 09:20:33.661"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 09:20:43.821" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:20:43.896" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:20:43.896" level="INFO">${shutdownMsg} = hadoop     497  0.0  0.0   9556  1164 ?        Ss   09:20   0:00 bash -c sudo ps aux | grep om
hadoop     499  0.0  0.0   9088   672 ?        S    09:20   0:00 grep om</msg>
<status status="PASS" endtime="20191107 09:20:43.896" starttime="20191107 09:20:43.821"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:20:43.929" starttime="20191107 09:20:43.897"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:20:43.930" starttime="20191107 09:20:43.929"></status>
</kw>
<status status="PASS" endtime="20191107 09:20:43.930" starttime="20191107 09:20:32.449"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:20:43.932" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 09:20:43.932" starttime="20191107 09:20:43.931"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:20:43.933" starttime="20191107 09:20:43.933"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:20:43.934" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:20:45.121" level="INFO">Read output: Last login: Thu Nov  7 09:20:32 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:20:45.122" starttime="20191107 09:20:43.933"></status>
</kw>
<status status="PASS" endtime="20191107 09:20:45.122" starttime="20191107 09:20:43.932"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 09:20:45.123" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 09:20:45.138" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:20:45.138" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 09:20:45.139" starttime="20191107 09:20:45.123"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 09:20:45.139" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 09:20:45.139" starttime="20191107 09:20:45.139"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 09:20:45.140" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 09:20:45.140" starttime="20191107 09:20:45.140"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 09:20:45.219" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 09:20:45.230" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191107 09:20:45.230" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191107 09:20:45.230" starttime="20191107 09:20:45.141"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 09:20:45.232" level="INFO">Length is 2</msg>
<msg timestamp="20191107 09:20:45.232" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191107 09:20:45.232" starttime="20191107 09:20:45.231"></status>
</kw>
<msg timestamp="20191107 09:20:45.233" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191107 09:20:45.233" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191107 09:20:45.233" starttime="20191107 09:20:43.930"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:20:45.238" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:20:47.438" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:20:47.438" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:20:47.438" starttime="20191107 09:20:45.235"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:20:47.440" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:20:47.440" starttime="20191107 09:20:47.439"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:20:47.441" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:20:47.442" starttime="20191107 09:20:47.441"></status>
</kw>
<msg timestamp="20191107 09:20:47.442" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:20:47.442" starttime="20191107 09:20:45.234"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 09:20:47.443" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:20:47.443" starttime="20191107 09:20:47.443"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 09:20:47.444" starttime="20191107 09:20:47.444"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 09:20:47.445" starttime="20191107 09:20:47.444"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 09:20:47.446" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 09:20:47.446" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:20:47.446" starttime="20191107 09:20:47.445"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 09:20:47.447" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 09:20:47.447" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 09:20:47.447" starttime="20191107 09:20:47.446"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 09:20:47.448" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 09:20:47.448" starttime="20191107 09:20:47.448"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 09:20:47.449" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 09:20:47.449" starttime="20191107 09:20:47.449"></status>
</kw>
<msg timestamp="20191107 09:20:47.450" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 09:20:47.450" starttime="20191107 09:20:45.233"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191107 09:20:47.453" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191107 09:20:47.453" starttime="20191107 09:20:47.451"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 09:20:47.456" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191107 09:20:47.456" starttime="20191107 09:20:47.455"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 09:20:47.457" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191107 09:20:47.457" starttime="20191107 09:20:47.456"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:20:47.461" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:20:52.137" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:20:52.137" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 09:20:52.138" starttime="20191107 09:20:47.459"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:20:52.139" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 09:20:52.140" starttime="20191107 09:20:52.138"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:20:52.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:20:52.141" starttime="20191107 09:20:52.140"></status>
</kw>
<status status="PASS" endtime="20191107 09:20:52.141" starttime="20191107 09:20:47.458"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:20:52.147" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:20:54.371" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:20:54.372" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573118449797,
  "modificationTime": 1573118451695,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 09:20:54.372" starttime="20191107 09:20:52.144"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:20:54.374" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573118449797,
  "modificationTime": 1573118451695,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103095890725437440,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 09:20:54.374" starttime="20191107 09:20:54.373"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:20:54.375" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:20:54.375" starttime="20191107 09:20:54.374"></status>
</kw>
<msg timestamp="20191107 09:20:54.376" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573118449797,
  "modificationTime": 1573118451695,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 09:20:54.376" starttime="20191107 09:20:52.142"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 09:20:54.377" starttime="20191107 09:20:54.376"></status>
</kw>
<status status="PASS" endtime="20191107 09:20:54.377" starttime="20191107 09:20:47.457"></status>
</kw>
<status status="PASS" endtime="20191107 09:20:54.377" starttime="20191107 09:20:47.455"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 09:20:54.378" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191107 09:20:54.378" starttime="20191107 09:20:54.378"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 09:20:54.379" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191107 09:20:54.379" starttime="20191107 09:20:54.379"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:20:54.385" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:20:59.135" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:20:59.135" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 09:20:59.135" starttime="20191107 09:20:54.382"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:20:59.137" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 09:20:59.137" starttime="20191107 09:20:59.136"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:20:59.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:20:59.138" starttime="20191107 09:20:59.137"></status>
</kw>
<status status="PASS" endtime="20191107 09:20:59.138" starttime="20191107 09:20:54.381"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:20:59.142" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:21:01.466" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:21:01.466" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573118456574,
  "modificationTime": 1573118458715,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 09:21:01.466" starttime="20191107 09:20:59.139"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:21:01.468" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573118456574,
  "modificationTime": 1573118458715,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103095891169902600,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 09:21:01.468" starttime="20191107 09:21:01.467"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:21:01.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:21:01.469" starttime="20191107 09:21:01.468"></status>
</kw>
<msg timestamp="20191107 09:21:01.469" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573118456574,
  "modificationTime": 1573118458715,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 09:21:01.469" starttime="20191107 09:20:59.138"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:01.470" starttime="20191107 09:21:01.470"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:01.471" starttime="20191107 09:20:54.380"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:01.471" starttime="20191107 09:20:54.377"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 09:21:01.472" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191107 09:21:01.472" starttime="20191107 09:21:01.471"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 09:21:01.473" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191107 09:21:01.473" starttime="20191107 09:21:01.472"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:21:01.477" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:21:05.984" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:21:05.984" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 09:21:05.985" starttime="20191107 09:21:01.475"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:21:05.986" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 09:21:05.987" starttime="20191107 09:21:05.985"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:21:05.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:21:05.988" starttime="20191107 09:21:05.987"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:05.988" starttime="20191107 09:21:01.474"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:21:05.994" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:21:08.321" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:21:08.321" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573118463696,
  "modificationTime": 1573118465567,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 09:21:08.321" starttime="20191107 09:21:05.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:21:08.323" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573118463696,
  "modificationTime": 1573118465567,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103095891636715520,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 09:21:08.323" starttime="20191107 09:21:08.322"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:21:08.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:21:08.324" starttime="20191107 09:21:08.323"></status>
</kw>
<msg timestamp="20191107 09:21:08.325" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573118463696,
  "modificationTime": 1573118465567,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 09:21:08.325" starttime="20191107 09:21:05.989"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:08.326" starttime="20191107 09:21:08.325"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:08.326" starttime="20191107 09:21:01.473"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:08.326" starttime="20191107 09:21:01.471"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 09:21:08.328" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191107 09:21:08.328" starttime="20191107 09:21:08.327"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 09:21:08.329" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191107 09:21:08.329" starttime="20191107 09:21:08.328"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:21:08.334" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:21:12.817" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:21:12.817" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 09:21:12.817" starttime="20191107 09:21:08.331"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:21:12.819" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 09:21:12.819" starttime="20191107 09:21:12.818"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:21:12.820" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:21:12.820" starttime="20191107 09:21:12.820"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:12.821" starttime="20191107 09:21:08.330"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:21:12.825" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:21:15.041" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:21:15.041" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573118470480,
  "modificationTime": 1573118472386,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 09:21:15.041" starttime="20191107 09:21:12.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:21:15.042" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573118470480,
  "modificationTime": 1573118472386,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103095892081246200,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 09:21:15.042" starttime="20191107 09:21:15.042"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:21:15.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:21:15.043" starttime="20191107 09:21:15.042"></status>
</kw>
<msg timestamp="20191107 09:21:15.043" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573118470480,
  "modificationTime": 1573118472386,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 09:21:15.043" starttime="20191107 09:21:12.821"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:15.044" starttime="20191107 09:21:15.044"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:15.044" starttime="20191107 09:21:08.329"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:15.044" starttime="20191107 09:21:08.326"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 09:21:15.045" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:21:15.045" starttime="20191107 09:21:15.044"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 09:21:15.045" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:21:15.046" starttime="20191107 09:21:15.045"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:21:15.049" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:21:19.940" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:21:19.941" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 09:21:19.941" starttime="20191107 09:21:15.047"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:21:19.942" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 09:21:19.943" starttime="20191107 09:21:19.942"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:21:19.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:21:19.944" starttime="20191107 09:21:19.943"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:19.944" starttime="20191107 09:21:15.046"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:21:19.949" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:21:22.288" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:21:22.288" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573118477407,
  "modificationTime": 1573118479512,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 09:21:22.289" starttime="20191107 09:21:19.947"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:21:22.290" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573118477407,
  "modificationTime": 1573118479512,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103095892535279620,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 09:21:22.290" starttime="20191107 09:21:22.289"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:21:22.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:21:22.290" starttime="20191107 09:21:22.290"></status>
</kw>
<msg timestamp="20191107 09:21:22.291" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573118477407,
  "modificationTime": 1573118479512,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 09:21:22.291" starttime="20191107 09:21:19.944"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:22.291" starttime="20191107 09:21:22.291"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:22.292" starttime="20191107 09:21:15.046"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:22.292" starttime="20191107 09:21:15.044"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:22.292" starttime="20191107 09:20:47.455"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:22.292" starttime="20191107 09:20:47.454"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:21:22.293" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 09:21:22.293" starttime="20191107 09:21:22.293"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:22.294" starttime="20191107 09:21:22.294"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:21:22.295" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:21:23.500" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:21:23.501" starttime="20191107 09:21:22.295"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:23.501" starttime="20191107 09:21:22.293"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 09:21:23.503" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 09:21:23.529" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:21:23.530" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 09:21:23.530" starttime="20191107 09:21:23.502"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 09:21:23.531" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 09:21:23.531" starttime="20191107 09:21:23.530"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 09:21:23.532" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 09:21:23.532" starttime="20191107 09:21:23.531"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 09:21:23.580" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 09:21:23.591" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191107 09:21:23.592" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191107 09:21:23.592" starttime="20191107 09:21:23.533"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 09:21:23.593" level="INFO">Length is 3</msg>
<msg timestamp="20191107 09:21:23.593" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191107 09:21:23.593" starttime="20191107 09:21:23.592"></status>
</kw>
<msg timestamp="20191107 09:21:23.594" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191107 09:21:23.594" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191107 09:21:23.594" starttime="20191107 09:21:22.292"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191107 09:21:23.596" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191107 09:21:23.596" starttime="20191107 09:21:23.595"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:23.596" starttime="20191107 09:20:47.450"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:23.596" starttime="20191107 09:20:47.450"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:23.598" starttime="20191107 09:21:23.597"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:21:23.600" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 09:21:23.600" starttime="20191107 09:21:23.599"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:23.602" starttime="20191107 09:21:23.601"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:21:23.603" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:21:24.791" level="INFO">Read output: Last login: Thu Nov  7 09:20:44 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:21:24.791" starttime="20191107 09:21:23.602"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:24.792" starttime="20191107 09:21:23.600"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 09:21:24.792" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 09:21:26.931" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:21:26.932" starttime="20191107 09:21:24.792"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 09:21:26.933" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:21:27.031" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:21:27.031" level="INFO">${startupMsg} = hadoop     572  349  0.0 34482652 224860 ?     Sl   09:21   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 09:21:27.031" starttime="20191107 09:21:26.932"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:21:27.096" starttime="20191107 09:21:27.032"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:27.097" starttime="20191107 09:21:27.097"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:27.098" starttime="20191107 09:21:23.598"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:21:27.100" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 09:21:27.100" starttime="20191107 09:21:27.099"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:27.101" starttime="20191107 09:21:27.100"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:21:27.102" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:21:28.301" level="INFO">Read output: Last login: Thu Nov  7 09:21:23 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:21:28.301" starttime="20191107 09:21:27.101"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:28.302" starttime="20191107 09:21:27.100"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 09:21:28.303" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 09:21:28.318" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:21:28.318" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 09:21:28.318" starttime="20191107 09:21:28.302"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 09:21:28.319" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 09:21:28.319" starttime="20191107 09:21:28.318"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 09:21:28.320" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 09:21:28.320" starttime="20191107 09:21:28.319"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 09:21:28.398" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 09:21:28.407" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191107 09:21:28.408" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191107 09:21:28.408" starttime="20191107 09:21:28.320"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 09:21:28.409" level="INFO">Length is 2</msg>
<msg timestamp="20191107 09:21:28.409" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191107 09:21:28.409" starttime="20191107 09:21:28.408"></status>
</kw>
<msg timestamp="20191107 09:21:28.409" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191107 09:21:28.410" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191107 09:21:28.410" starttime="20191107 09:21:27.098"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:28.411" starttime="20191107 09:21:28.410"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191107 09:21:29.412" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191107 09:21:29.412" starttime="20191107 09:21:28.411"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:29.412" starttime="20191107 09:21:27.098"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:21:29.415" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 09:21:29.415" starttime="20191107 09:21:29.414"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:29.416" starttime="20191107 09:21:29.415"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:21:29.416" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:21:30.620" level="INFO">Read output: Last login: Thu Nov  7 09:21:27 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:21:30.620" starttime="20191107 09:21:29.416"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:30.621" starttime="20191107 09:21:29.415"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 09:21:30.622" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 09:21:30.639" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:21:30.639" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 09:21:30.639" starttime="20191107 09:21:30.621"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 09:21:30.641" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 09:21:30.641" starttime="20191107 09:21:30.640"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 09:21:30.643" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 09:21:30.643" starttime="20191107 09:21:30.641"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 09:21:30.725" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 09:21:30.738" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191107 09:21:30.738" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191107 09:21:30.738" starttime="20191107 09:21:30.643"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 09:21:30.739" level="INFO">Length is 3</msg>
<msg timestamp="20191107 09:21:30.740" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191107 09:21:30.740" starttime="20191107 09:21:30.739"></status>
</kw>
<msg timestamp="20191107 09:21:30.740" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191107 09:21:30.740" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191107 09:21:30.741" starttime="20191107 09:21:29.413"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191107 09:21:30.742" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191107 09:21:30.742" starttime="20191107 09:21:30.741"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:30.742" starttime="20191107 09:21:29.412"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:30.742" starttime="20191107 09:21:27.098"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:30.744" starttime="20191107 09:21:30.743"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:30.745" starttime="20191107 09:21:30.744"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:30.745" critical="yes" starttime="20191107 09:20:32.440"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:21:30.753" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:21:32.751" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:21:32.751" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:32.751" starttime="20191107 09:21:30.750"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:21:32.753" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:32.753" starttime="20191107 09:21:32.752"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:21:32.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:21:32.754" starttime="20191107 09:21:32.753"></status>
</kw>
<msg timestamp="20191107 09:21:32.754" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:32.754" starttime="20191107 09:21:30.749"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 09:21:32.755" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:32.755" starttime="20191107 09:21:32.754"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:32.755" starttime="20191107 09:21:32.755"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:32.756" starttime="20191107 09:21:32.756"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 09:21:32.757" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 09:21:32.757" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:32.757" starttime="20191107 09:21:32.756"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 09:21:32.758" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 09:21:32.758" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 09:21:32.758" starttime="20191107 09:21:32.757"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 09:21:32.759" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 09:21:32.759" starttime="20191107 09:21:32.758"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 09:21:32.760" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 09:21:32.760" starttime="20191107 09:21:32.759"></status>
</kw>
<msg timestamp="20191107 09:21:32.760" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 09:21:32.760" starttime="20191107 09:21:30.748"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:21:32.762" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 09:21:32.762" starttime="20191107 09:21:32.761"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:32.763" starttime="20191107 09:21:32.763"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:21:32.764" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:21:33.969" level="INFO">Read output: Last login: Thu Nov  7 09:21:22 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:21:33.971" starttime="20191107 09:21:32.763"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:33.971" starttime="20191107 09:21:32.762"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 09:21:33.972" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 09:21:44.107" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:21:44.108" starttime="20191107 09:21:33.972"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 09:21:44.109" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:21:44.207" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:21:44.207" level="INFO">${shutdownMsg} = hadoop     533  0.0  0.0   9556  1164 ?        Ss   09:21   0:00 bash -c sudo ps aux | grep om
hadoop     535  0.0  0.0   9088   672 ?        S    09:21   0:00 grep om</msg>
<status status="PASS" endtime="20191107 09:21:44.208" starttime="20191107 09:21:44.109"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:21:44.273" starttime="20191107 09:21:44.208"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:44.273" starttime="20191107 09:21:44.273"></status>
</kw>
<msg timestamp="20191107 09:21:44.274" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 09:21:44.274" starttime="20191107 09:21:32.760"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:21:44.277" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:21:46.377" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:21:46.377" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:46.377" starttime="20191107 09:21:44.275"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:21:46.379" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:46.379" starttime="20191107 09:21:46.378"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:21:46.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:21:46.380" starttime="20191107 09:21:46.379"></status>
</kw>
<msg timestamp="20191107 09:21:46.380" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:46.380" starttime="20191107 09:21:44.275"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 09:21:46.380" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:46.381" starttime="20191107 09:21:46.380"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:46.381" starttime="20191107 09:21:46.381"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:46.382" starttime="20191107 09:21:46.381"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 09:21:46.383" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 09:21:46.383" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:46.383" starttime="20191107 09:21:46.382"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 09:21:46.383" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 09:21:46.383" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 09:21:46.384" starttime="20191107 09:21:46.383"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 09:21:46.384" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 09:21:46.384" starttime="20191107 09:21:46.384"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 09:21:46.385" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 09:21:46.385" starttime="20191107 09:21:46.385"></status>
</kw>
<msg timestamp="20191107 09:21:46.385" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191107 09:21:46.385" starttime="20191107 09:21:44.274"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:46.386" starttime="20191107 09:21:46.386"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 09:21:46.387" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191107 09:21:46.387" starttime="20191107 09:21:46.387"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 09:21:46.388" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191107 09:21:46.388" starttime="20191107 09:21:46.388"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 09:21:46.389" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191107 09:21:46.389" starttime="20191107 09:21:46.389"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:21:46.391" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:21:46.391" starttime="20191107 09:21:46.389"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:21:46.394" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:21:51.011" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:21:51.011" level="INFO">${output} = 2019-11-07 09:21:49 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 09:21:49 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 09:21:51.011" starttime="20191107 09:21:46.392"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:21:51.013" level="INFO">2019-11-07 09:21:49 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 09:21:49 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 09:21:49 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 09:21:51.013" starttime="20191107 09:21:51.012"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:21:51.014" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:21:51.014" starttime="20191107 09:21:51.013"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:51.014" starttime="20191107 09:21:46.391"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:21:51.018" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:21:53.358" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:21:53.358" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:21:53.358" starttime="20191107 09:21:51.016"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:21:53.360" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:21:53.360" starttime="20191107 09:21:53.359"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:21:53.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:21:53.362" starttime="20191107 09:21:53.361"></status>
</kw>
<msg timestamp="20191107 09:21:53.363" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:21:53.363" starttime="20191107 09:21:51.015"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:53.364" starttime="20191107 09:21:53.363"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:21:53.366" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:21:53.367" starttime="20191107 09:21:53.364"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:53.367" starttime="20191107 09:21:46.386"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:21:53.369" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 09:21:53.369" starttime="20191107 09:21:53.368"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:53.371" starttime="20191107 09:21:53.370"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:21:53.372" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:21:54.579" level="INFO">Read output: Last login: Thu Nov  7 09:21:32 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:21:54.579" starttime="20191107 09:21:53.371"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:54.580" starttime="20191107 09:21:53.369"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 09:21:54.581" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 09:21:56.752" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:21:56.753" starttime="20191107 09:21:54.580"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 09:21:56.754" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:21:56.851" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:21:56.852" level="INFO">${startupMsg} = hadoop     586  218  0.0 34475592 205684 ?     Sl   09:21   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 09:21:56.852" starttime="20191107 09:21:56.753"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:21:56.917" starttime="20191107 09:21:56.852"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:56.919" starttime="20191107 09:21:56.918"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:56.919" starttime="20191107 09:21:53.367"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:56.919" starttime="20191107 09:21:30.748"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:21:56.925" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:21:58.774" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:21:58.774" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:58.775" starttime="20191107 09:21:56.922"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:21:58.776" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:58.776" starttime="20191107 09:21:58.775"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:21:58.776" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:21:58.776" starttime="20191107 09:21:58.776"></status>
</kw>
<msg timestamp="20191107 09:21:58.777" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:58.777" starttime="20191107 09:21:56.921"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 09:21:58.777" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:58.777" starttime="20191107 09:21:58.777"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:58.778" starttime="20191107 09:21:58.778"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:58.779" starttime="20191107 09:21:58.778"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 09:21:58.779" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 09:21:58.780" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 09:21:58.780" starttime="20191107 09:21:58.779"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 09:21:58.780" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 09:21:58.781" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 09:21:58.781" starttime="20191107 09:21:58.780"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 09:21:58.781" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 09:21:58.781" starttime="20191107 09:21:58.781"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 09:21:58.782" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 09:21:58.782" starttime="20191107 09:21:58.781"></status>
</kw>
<msg timestamp="20191107 09:21:58.782" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 09:21:58.782" starttime="20191107 09:21:56.920"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:21:58.783" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 09:21:58.784" starttime="20191107 09:21:58.783"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:21:58.785" starttime="20191107 09:21:58.784"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:21:58.786" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:21:59.984" level="INFO">Read output: Last login: Thu Nov  7 09:20:29 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:21:59.985" starttime="20191107 09:21:58.785"></status>
</kw>
<status status="PASS" endtime="20191107 09:21:59.985" starttime="20191107 09:21:58.784"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 09:21:59.986" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 09:22:01.134" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:22:01.134" starttime="20191107 09:21:59.985"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 09:22:01.135" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:22:01.201" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:22:01.202" level="INFO">${shutdownMsg} = hadoop    1051  0.0  0.0   9556  1164 ?        Ss   09:22   0:00 bash -c sudo ps aux | grep om
hadoop    1053  0.0  0.0   9088   672 ?        S    09:22   0:00 grep om</msg>
<status status="PASS" endtime="20191107 09:22:01.202" starttime="20191107 09:22:01.135"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:22:01.267" starttime="20191107 09:22:01.202"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:01.268" starttime="20191107 09:22:01.268"></status>
</kw>
<msg timestamp="20191107 09:22:01.269" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 09:22:01.269" starttime="20191107 09:21:58.782"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:22:01.274" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:22:13.584" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:22:13.584" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:13.584" starttime="20191107 09:22:01.271"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:22:13.586" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:13.586" starttime="20191107 09:22:13.585"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:22:13.587" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:22:13.587" starttime="20191107 09:22:13.586"></status>
</kw>
<msg timestamp="20191107 09:22:13.588" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:13.588" starttime="20191107 09:22:01.270"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 09:22:13.588" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:13.589" starttime="20191107 09:22:13.588"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:13.589" starttime="20191107 09:22:13.589"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:13.590" starttime="20191107 09:22:13.590"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 09:22:13.591" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 09:22:13.591" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:13.591" starttime="20191107 09:22:13.590"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 09:22:13.592" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 09:22:13.592" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 09:22:13.592" starttime="20191107 09:22:13.591"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 09:22:13.593" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 09:22:13.593" starttime="20191107 09:22:13.592"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 09:22:13.594" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 09:22:13.594" starttime="20191107 09:22:13.593"></status>
</kw>
<msg timestamp="20191107 09:22:13.594" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191107 09:22:13.594" starttime="20191107 09:22:01.269"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:13.595" starttime="20191107 09:22:13.595"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 09:22:13.597" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191107 09:22:13.597" starttime="20191107 09:22:13.596"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 09:22:13.598" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191107 09:22:13.598" starttime="20191107 09:22:13.597"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 09:22:13.599" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191107 09:22:13.599" starttime="20191107 09:22:13.598"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:22:13.601" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:22:13.601" starttime="20191107 09:22:13.599"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:22:13.604" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:22:28.285" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:22:28.285" level="INFO">${output} = 2019-11-07 09:22:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191107 09:22:28.285" starttime="20191107 09:22:13.602"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:22:28.287" level="INFO">2019-11-07 09:22:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:22:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:22:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:22:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:22:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:22:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:22:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:22:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:22:24 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:22:25 INFO  Client:948 - Retrying connect to server: om1/172.18.0.4:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 09:22:26 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 09:22:26 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 09:22:26 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 09:22:28.288" starttime="20191107 09:22:28.286"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:22:28.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:22:28.288" starttime="20191107 09:22:28.288"></status>
</kw>
<status status="PASS" endtime="20191107 09:22:28.289" starttime="20191107 09:22:13.601"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:22:28.292" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:22:40.630" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:22:40.630" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:22:40.630" starttime="20191107 09:22:28.290"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:22:40.632" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:22:40.632" starttime="20191107 09:22:40.631"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:22:40.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:22:40.633" starttime="20191107 09:22:40.632"></status>
</kw>
<msg timestamp="20191107 09:22:40.634" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:22:40.634" starttime="20191107 09:22:28.289"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:40.635" starttime="20191107 09:22:40.634"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:22:40.636" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:22:40.636" starttime="20191107 09:22:40.635"></status>
</kw>
<status status="PASS" endtime="20191107 09:22:40.636" starttime="20191107 09:22:13.596"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:22:40.638" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 09:22:40.638" starttime="20191107 09:22:40.637"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:40.640" starttime="20191107 09:22:40.639"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:22:40.641" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:22:41.848" level="INFO">Read output: Last login: Thu Nov  7 09:21:58 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:22:41.848" starttime="20191107 09:22:40.640"></status>
</kw>
<status status="PASS" endtime="20191107 09:22:41.849" starttime="20191107 09:22:40.638"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 09:22:41.850" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 09:22:44.029" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:22:44.030" starttime="20191107 09:22:41.849"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 09:22:44.031" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:22:44.096" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:22:44.097" level="INFO">${startupMsg} = hadoop    1102  355  0.0 34479180 228372 ?     Sl   09:22   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 09:22:44.097" starttime="20191107 09:22:44.030"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:22:44.162" starttime="20191107 09:22:44.097"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:44.163" starttime="20191107 09:22:44.162"></status>
</kw>
<status status="PASS" endtime="20191107 09:22:44.163" starttime="20191107 09:22:40.636"></status>
</kw>
<status status="PASS" endtime="20191107 09:22:44.163" starttime="20191107 09:21:56.920"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:22:44.167" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:22:46.426" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:22:46.426" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:46.426" starttime="20191107 09:22:44.165"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:22:46.427" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:46.427" starttime="20191107 09:22:46.426"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:22:46.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:22:46.428" starttime="20191107 09:22:46.427"></status>
</kw>
<msg timestamp="20191107 09:22:46.428" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:46.428" starttime="20191107 09:22:44.164"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 09:22:46.429" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:46.429" starttime="20191107 09:22:46.428"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:46.429" starttime="20191107 09:22:46.429"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:46.430" starttime="20191107 09:22:46.429"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 09:22:46.430" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 09:22:46.431" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:46.431" starttime="20191107 09:22:46.430"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 09:22:46.432" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 09:22:46.432" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 09:22:46.432" starttime="20191107 09:22:46.431"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 09:22:46.432" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 09:22:46.433" starttime="20191107 09:22:46.432"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 09:22:46.433" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 09:22:46.433" starttime="20191107 09:22:46.433"></status>
</kw>
<msg timestamp="20191107 09:22:46.433" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 09:22:46.433" starttime="20191107 09:22:44.164"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:22:46.435" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 09:22:46.435" starttime="20191107 09:22:46.434"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:46.436" starttime="20191107 09:22:46.435"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:22:46.436" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:22:47.640" level="INFO">Read output: Last login: Thu Nov  7 09:21:29 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:22:47.641" starttime="20191107 09:22:46.436"></status>
</kw>
<status status="PASS" endtime="20191107 09:22:47.641" starttime="20191107 09:22:46.435"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 09:22:47.642" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 09:22:48.811" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:22:48.812" starttime="20191107 09:22:47.642"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 09:22:48.813" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:22:48.911" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:22:48.912" level="INFO">${shutdownMsg} = hadoop    1156  0.0  0.0   9556  1168 ?        Ss   09:22   0:00 bash -c sudo ps aux | grep om
hadoop    1158  0.0  0.0   9088   672 ?        S    09:22   0:00 grep om</msg>
<status status="PASS" endtime="20191107 09:22:48.912" starttime="20191107 09:22:48.812"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:22:48.977" starttime="20191107 09:22:48.912"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:48.978" starttime="20191107 09:22:48.977"></status>
</kw>
<msg timestamp="20191107 09:22:48.978" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 09:22:48.978" starttime="20191107 09:22:46.434"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:22:48.981" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:22:51.193" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:22:51.193" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:51.193" starttime="20191107 09:22:48.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:22:51.195" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:51.195" starttime="20191107 09:22:51.194"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:22:51.195" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:22:51.196" starttime="20191107 09:22:51.195"></status>
</kw>
<msg timestamp="20191107 09:22:51.196" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:51.196" starttime="20191107 09:22:48.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 09:22:51.197" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:51.197" starttime="20191107 09:22:51.196"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:51.197" starttime="20191107 09:22:51.197"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:51.198" starttime="20191107 09:22:51.197"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 09:22:51.198" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 09:22:51.199" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:22:51.199" starttime="20191107 09:22:51.198"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 09:22:51.199" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 09:22:51.200" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 09:22:51.200" starttime="20191107 09:22:51.199"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 09:22:51.200" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 09:22:51.200" starttime="20191107 09:22:51.200"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 09:22:51.201" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 09:22:51.201" starttime="20191107 09:22:51.201"></status>
</kw>
<msg timestamp="20191107 09:22:51.202" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191107 09:22:51.202" starttime="20191107 09:22:48.978"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:51.203" starttime="20191107 09:22:51.202"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 09:22:51.204" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191107 09:22:51.204" starttime="20191107 09:22:51.203"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 09:22:51.205" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191107 09:22:51.205" starttime="20191107 09:22:51.204"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 09:22:51.206" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191107 09:22:51.206" starttime="20191107 09:22:51.205"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:22:51.207" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:22:51.207" starttime="20191107 09:22:51.206"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:22:51.210" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:22:55.706" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:22:55.706" level="INFO">${output} = 2019-11-07 09:22:54 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 09:22:54 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 09:22:55.706" starttime="20191107 09:22:51.208"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:22:55.708" level="INFO">2019-11-07 09:22:54 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 09:22:54 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 09:22:54 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 09:22:55.708" starttime="20191107 09:22:55.707"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:22:55.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:22:55.709" starttime="20191107 09:22:55.708"></status>
</kw>
<status status="PASS" endtime="20191107 09:22:55.709" starttime="20191107 09:22:51.207"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:22:55.714" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:22:57.843" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:22:57.843" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:22:57.844" starttime="20191107 09:22:55.711"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:22:57.845" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:22:57.846" starttime="20191107 09:22:57.844"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:22:57.846" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:22:57.847" starttime="20191107 09:22:57.846"></status>
</kw>
<msg timestamp="20191107 09:22:57.847" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:22:57.848" starttime="20191107 09:22:55.710"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:57.849" starttime="20191107 09:22:57.848"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:22:57.849" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:22:57.850" starttime="20191107 09:22:57.849"></status>
</kw>
<status status="PASS" endtime="20191107 09:22:57.850" starttime="20191107 09:22:51.203"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:22:57.852" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 09:22:57.852" starttime="20191107 09:22:57.851"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:22:57.853" starttime="20191107 09:22:57.852"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:22:57.854" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:22:59.058" level="INFO">Read output: Last login: Thu Nov  7 09:22:46 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:22:59.058" starttime="20191107 09:22:57.853"></status>
</kw>
<status status="PASS" endtime="20191107 09:22:59.059" starttime="20191107 09:22:57.852"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 09:22:59.060" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 09:23:01.238" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:23:01.238" starttime="20191107 09:22:59.059"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 09:23:01.240" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:23:01.337" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:23:01.338" level="INFO">${startupMsg} = hadoop    1207  359  0.0 34485320 228024 ?     Sl   09:22   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 09:23:01.338" starttime="20191107 09:23:01.239"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:23:01.403" starttime="20191107 09:23:01.338"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:01.404" starttime="20191107 09:23:01.403"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:01.404" starttime="20191107 09:22:57.850"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:01.404" starttime="20191107 09:22:44.163"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:23:01.409" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:23:03.295" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:23:03.295" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:03.295" starttime="20191107 09:23:01.406"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:23:03.296" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:03.296" starttime="20191107 09:23:03.296"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:23:03.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:23:03.297" starttime="20191107 09:23:03.297"></status>
</kw>
<msg timestamp="20191107 09:23:03.297" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:03.297" starttime="20191107 09:23:01.406"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 09:23:03.298" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:03.298" starttime="20191107 09:23:03.298"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:03.299" starttime="20191107 09:23:03.298"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:03.299" starttime="20191107 09:23:03.299"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 09:23:03.300" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 09:23:03.300" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:03.300" starttime="20191107 09:23:03.299"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 09:23:03.301" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 09:23:03.301" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 09:23:03.301" starttime="20191107 09:23:03.300"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 09:23:03.302" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 09:23:03.302" starttime="20191107 09:23:03.301"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 09:23:03.302" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 09:23:03.302" starttime="20191107 09:23:03.302"></status>
</kw>
<msg timestamp="20191107 09:23:03.303" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 09:23:03.303" starttime="20191107 09:23:01.405"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:23:03.304" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 09:23:03.304" starttime="20191107 09:23:03.304"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:03.305" starttime="20191107 09:23:03.305"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:23:03.306" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:23:04.507" level="INFO">Read output: Last login: Thu Nov  7 09:21:53 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:23:04.507" starttime="20191107 09:23:03.305"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:04.508" starttime="20191107 09:23:03.304"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 09:23:04.509" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 09:23:05.668" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:23:05.669" starttime="20191107 09:23:04.508"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 09:23:05.670" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:23:05.780" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:23:05.780" level="INFO">${shutdownMsg} = hadoop    1102  0.0  0.0   9556  1168 ?        Ss   09:23   0:00 bash -c sudo ps aux | grep om
hadoop    1104  0.0  0.0   9088   672 ?        S    09:23   0:00 grep om</msg>
<status status="PASS" endtime="20191107 09:23:05.780" starttime="20191107 09:23:05.670"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:23:05.813" starttime="20191107 09:23:05.780"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:05.814" starttime="20191107 09:23:05.813"></status>
</kw>
<msg timestamp="20191107 09:23:05.814" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 09:23:05.814" starttime="20191107 09:23:03.303"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:23:05.820" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:23:08.148" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:23:08.149" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:08.149" starttime="20191107 09:23:05.816"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:23:08.151" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:08.151" starttime="20191107 09:23:08.150"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:23:08.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:23:08.152" starttime="20191107 09:23:08.151"></status>
</kw>
<msg timestamp="20191107 09:23:08.153" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:08.153" starttime="20191107 09:23:05.815"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 09:23:08.153" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:08.154" starttime="20191107 09:23:08.153"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:08.155" starttime="20191107 09:23:08.154"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:08.155" starttime="20191107 09:23:08.155"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 09:23:08.156" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 09:23:08.157" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:08.157" starttime="20191107 09:23:08.156"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 09:23:08.158" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 09:23:08.158" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 09:23:08.158" starttime="20191107 09:23:08.157"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 09:23:08.159" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 09:23:08.159" starttime="20191107 09:23:08.158"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 09:23:08.160" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 09:23:08.160" starttime="20191107 09:23:08.159"></status>
</kw>
<msg timestamp="20191107 09:23:08.160" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191107 09:23:08.161" starttime="20191107 09:23:05.815"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:08.162" starttime="20191107 09:23:08.161"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 09:23:08.163" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191107 09:23:08.163" starttime="20191107 09:23:08.163"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 09:23:08.164" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191107 09:23:08.165" starttime="20191107 09:23:08.164"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 09:23:08.166" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191107 09:23:08.166" starttime="20191107 09:23:08.165"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:23:08.168" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:23:08.168" starttime="20191107 09:23:08.166"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:23:08.172" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:23:12.756" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:23:12.757" level="INFO">${output} = 2019-11-07 09:23:11 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 09:23:11 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 09:23:12.757" starttime="20191107 09:23:08.169"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:23:12.759" level="INFO">2019-11-07 09:23:11 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 09:23:11 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 09:23:11 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 09:23:12.759" starttime="20191107 09:23:12.758"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:23:12.760" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:23:12.760" starttime="20191107 09:23:12.759"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:12.760" starttime="20191107 09:23:08.168"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:23:12.765" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:23:14.967" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:23:14.967" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:23:14.967" starttime="20191107 09:23:12.762"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:23:14.969" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:23:14.969" starttime="20191107 09:23:14.968"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:23:14.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:23:14.970" starttime="20191107 09:23:14.969"></status>
</kw>
<msg timestamp="20191107 09:23:14.970" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:23:14.971" starttime="20191107 09:23:12.761"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:14.971" starttime="20191107 09:23:14.971"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:23:14.973" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:23:14.973" starttime="20191107 09:23:14.972"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:14.974" starttime="20191107 09:23:08.162"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:23:14.975" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 09:23:14.975" starttime="20191107 09:23:14.975"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:14.977" starttime="20191107 09:23:14.976"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:23:14.978" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:23:16.183" level="INFO">Read output: Last login: Thu Nov  7 09:23:03 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:23:16.184" starttime="20191107 09:23:14.977"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:16.184" starttime="20191107 09:23:14.975"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 09:23:16.186" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 09:23:18.336" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:23:18.336" starttime="20191107 09:23:16.185"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 09:23:18.338" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:23:18.435" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:23:18.436" level="INFO">${startupMsg} = hadoop    1153  361  0.0 34478464 210136 ?     Sl   09:23   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 09:23:18.436" starttime="20191107 09:23:18.337"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:23:18.501" starttime="20191107 09:23:18.436"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:18.503" starttime="20191107 09:23:18.502"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:18.503" starttime="20191107 09:23:14.974"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:18.503" starttime="20191107 09:23:01.405"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:23:18.508" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:23:20.358" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:23:20.358" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:20.358" starttime="20191107 09:23:18.505"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:23:20.359" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:20.359" starttime="20191107 09:23:20.358"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:23:20.360" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:23:20.360" starttime="20191107 09:23:20.359"></status>
</kw>
<msg timestamp="20191107 09:23:20.360" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:20.360" starttime="20191107 09:23:18.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 09:23:20.361" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:20.361" starttime="20191107 09:23:20.360"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:20.361" starttime="20191107 09:23:20.361"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:20.362" starttime="20191107 09:23:20.362"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 09:23:20.363" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 09:23:20.363" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:20.363" starttime="20191107 09:23:20.362"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 09:23:20.364" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 09:23:20.364" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 09:23:20.364" starttime="20191107 09:23:20.363"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 09:23:20.365" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 09:23:20.365" starttime="20191107 09:23:20.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 09:23:20.365" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 09:23:20.366" starttime="20191107 09:23:20.365"></status>
</kw>
<msg timestamp="20191107 09:23:20.366" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 09:23:20.366" starttime="20191107 09:23:18.503"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:23:20.367" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 09:23:20.367" starttime="20191107 09:23:20.367"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:20.369" starttime="20191107 09:23:20.368"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:23:20.369" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:23:21.567" level="INFO">Read output: Last login: Thu Nov  7 09:22:58 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:23:21.568" starttime="20191107 09:23:20.369"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:21.569" starttime="20191107 09:23:20.367"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 09:23:21.570" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 09:23:22.729" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:23:22.729" starttime="20191107 09:23:21.569"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 09:23:22.731" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:23:22.806" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:23:22.807" level="INFO">${shutdownMsg} = hadoop    1701  0.0  0.0   9556  1168 ?        Ss   09:23   0:00 bash -c sudo ps aux | grep om
hadoop    1703  0.0  0.0   9088   668 ?        S    09:23   0:00 grep om</msg>
<status status="PASS" endtime="20191107 09:23:22.807" starttime="20191107 09:23:22.730"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:23:22.872" starttime="20191107 09:23:22.807"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:22.873" starttime="20191107 09:23:22.872"></status>
</kw>
<msg timestamp="20191107 09:23:22.874" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 09:23:22.874" starttime="20191107 09:23:20.366"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:23:22.879" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:23:34.977" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:23:34.977" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:34.977" starttime="20191107 09:23:22.876"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:23:34.979" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:34.979" starttime="20191107 09:23:34.978"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:23:34.980" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:23:34.980" starttime="20191107 09:23:34.979"></status>
</kw>
<msg timestamp="20191107 09:23:34.980" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:34.980" starttime="20191107 09:23:22.875"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 09:23:34.981" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:34.981" starttime="20191107 09:23:34.981"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:34.982" starttime="20191107 09:23:34.982"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:34.983" starttime="20191107 09:23:34.982"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 09:23:34.984" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 09:23:34.984" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 09:23:34.984" starttime="20191107 09:23:34.983"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 09:23:34.985" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 09:23:34.985" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 09:23:34.985" starttime="20191107 09:23:34.984"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 09:23:34.986" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 09:23:34.986" starttime="20191107 09:23:34.985"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 09:23:34.987" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 09:23:34.988" starttime="20191107 09:23:34.986"></status>
</kw>
<msg timestamp="20191107 09:23:34.988" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191107 09:23:34.988" starttime="20191107 09:23:22.874"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:34.989" starttime="20191107 09:23:34.989"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 09:23:34.990" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191107 09:23:34.990" starttime="20191107 09:23:34.990"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 09:23:34.991" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191107 09:23:34.991" starttime="20191107 09:23:34.991"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 09:23:34.992" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191107 09:23:34.992" starttime="20191107 09:23:34.991"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:23:34.993" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:23:34.994" starttime="20191107 09:23:34.992"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:23:34.997" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:23:39.522" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:23:39.522" level="INFO">${output} = 2019-11-07 09:23:37 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 09:23:37 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 09:23:39.522" starttime="20191107 09:23:34.995"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:23:39.523" level="INFO">2019-11-07 09:23:37 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 09:23:37 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 09:23:37 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 09:23:39.524" starttime="20191107 09:23:39.523"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:23:39.524" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:23:39.524" starttime="20191107 09:23:39.524"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:39.525" starttime="20191107 09:23:34.994"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 09:23:39.528" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 09:23:42.004" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 09:23:42.004" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191107 09:23:42.004" starttime="20191107 09:23:39.526"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 09:23:42.005" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 09:23:42.005" starttime="20191107 09:23:42.004"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 09:23:42.006" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 09:23:42.006" starttime="20191107 09:23:42.005"></status>
</kw>
<msg timestamp="20191107 09:23:42.006" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191107 09:23:42.006" starttime="20191107 09:23:39.525"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:42.007" starttime="20191107 09:23:42.007"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 09:23:42.008" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 09:23:42.008" starttime="20191107 09:23:42.007"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:42.008" starttime="20191107 09:23:34.989"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 09:23:42.010" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 09:23:42.010" starttime="20191107 09:23:42.009"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:42.011" starttime="20191107 09:23:42.010"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 09:23:42.012" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 09:23:43.212" level="INFO">Read output: Last login: Thu Nov  7 09:23:20 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 09:23:43.212" starttime="20191107 09:23:42.011"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:43.213" starttime="20191107 09:23:42.010"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 09:23:43.214" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 09:23:45.363" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 09:23:45.364" starttime="20191107 09:23:43.213"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 09:23:45.365" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 09:23:45.462" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 09:23:45.463" level="INFO">${startupMsg} = hadoop    1753  363  0.0 34482340 223864 ?     Sl   09:23   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 09:23:45.463" starttime="20191107 09:23:45.364"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 09:23:45.528" starttime="20191107 09:23:45.463"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 09:23:45.529" starttime="20191107 09:23:45.528"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:45.529" starttime="20191107 09:23:42.008"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:45.529" starttime="20191107 09:23:18.503"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:45.529" starttime="20191107 09:21:30.747"></status>
</kw>
<status status="PASS" endtime="20191107 09:23:45.530" critical="yes" starttime="20191107 09:21:30.746"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191107 09:23:45.531" starttime="20191107 09:19:23.941"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
