<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191108 05:52:08.582" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 05:52:08.750" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 05:52:11.331" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 05:52:11.331" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191108 05:52:11.331" starttime="20191108 05:52:08.749"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 05:52:11.333" level="INFO"></msg>
<status status="PASS" endtime="20191108 05:52:11.333" starttime="20191108 05:52:11.332"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 05:52:11.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 05:52:11.334" starttime="20191108 05:52:11.333"></status>
</kw>
<status status="PASS" endtime="20191108 05:52:11.334" starttime="20191108 05:52:08.748"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 05:52:11.340" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 05:52:13.429" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 05:52:13.429" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191108 05:52:13.429" starttime="20191108 05:52:11.338"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 05:52:13.431" level="INFO"></msg>
<status status="PASS" endtime="20191108 05:52:13.431" starttime="20191108 05:52:13.430"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 05:52:13.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 05:52:13.432" starttime="20191108 05:52:13.431"></status>
</kw>
<status status="PASS" endtime="20191108 05:52:13.432" starttime="20191108 05:52:11.334"></status>
</kw>
<status status="PASS" endtime="20191108 05:52:13.433" starttime="20191108 05:52:08.748"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 05:52:13.435" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191108 05:52:13.435" starttime="20191108 05:52:13.434"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 05:52:13.436" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191108 05:52:13.436" starttime="20191108 05:52:13.435"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 05:52:13.437" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191108 05:52:13.437" starttime="20191108 05:52:13.436"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 05:52:13.439" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 05:52:13.439" starttime="20191108 05:52:13.437"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 05:52:13.443" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 05:52:18.224" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 05:52:18.224" level="INFO">${output} = 2019-11-08 05:52:16 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 05:52:16 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191108 05:52:18.224" starttime="20191108 05:52:13.441"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 05:52:18.226" level="INFO">2019-11-08 05:52:16 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 05:52:16 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 05:52:16 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 05:52:18.226" starttime="20191108 05:52:18.225"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 05:52:18.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 05:52:18.227" starttime="20191108 05:52:18.226"></status>
</kw>
<status status="PASS" endtime="20191108 05:52:18.228" starttime="20191108 05:52:13.440"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 05:52:18.232" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 05:52:20.427" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 05:52:20.427" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191108 05:52:20.427" starttime="20191108 05:52:18.229"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 05:52:20.428" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191108 05:52:20.428" starttime="20191108 05:52:20.428"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 05:52:20.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 05:52:20.429" starttime="20191108 05:52:20.428"></status>
</kw>
<msg timestamp="20191108 05:52:20.429" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191108 05:52:20.429" starttime="20191108 05:52:18.228"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:20.430" starttime="20191108 05:52:20.429"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 05:52:20.430" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 05:52:20.431" starttime="20191108 05:52:20.430"></status>
</kw>
<status status="PASS" endtime="20191108 05:52:20.431" starttime="20191108 05:52:13.433"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 05:52:20.433" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 05:52:22.535" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 05:52:22.535" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:22.535" starttime="20191108 05:52:20.432"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 05:52:22.537" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:22.537" starttime="20191108 05:52:22.536"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 05:52:22.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 05:52:22.538" starttime="20191108 05:52:22.537"></status>
</kw>
<msg timestamp="20191108 05:52:22.539" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:22.539" starttime="20191108 05:52:20.431"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 05:52:22.540" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:22.540" starttime="20191108 05:52:22.539"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:22.541" starttime="20191108 05:52:22.540"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:22.542" starttime="20191108 05:52:22.541"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 05:52:22.543" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 05:52:22.543" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:22.543" starttime="20191108 05:52:22.542"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 05:52:22.544" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 05:52:22.544" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 05:52:22.544" starttime="20191108 05:52:22.543"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 05:52:22.545" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 05:52:22.545" starttime="20191108 05:52:22.545"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 05:52:22.546" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 05:52:22.546" starttime="20191108 05:52:22.545"></status>
</kw>
<msg timestamp="20191108 05:52:22.546" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 05:52:22.547" starttime="20191108 05:52:20.431"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 05:52:22.548" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 05:52:22.549" starttime="20191108 05:52:22.548"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:22.550" starttime="20191108 05:52:22.549"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 05:52:22.551" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 05:52:23.757" level="INFO">Read output: -bash: fork: retry: No child processes</msg>
<status status="PASS" endtime="20191108 05:52:23.758" starttime="20191108 05:52:22.550"></status>
</kw>
<status status="PASS" endtime="20191108 05:52:23.758" starttime="20191108 05:52:22.549"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 05:52:23.759" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 05:52:23.774" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191108 05:52:23.775" starttime="20191108 05:52:23.758"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 05:52:23.775" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 05:52:23.821" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191108 05:52:23.821" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191108 05:52:23.821" starttime="20191108 05:52:23.775"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 05:52:23.887" starttime="20191108 05:52:23.822"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:23.888" starttime="20191108 05:52:23.887"></status>
</kw>
<msg timestamp="20191108 05:52:23.888" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 05:52:23.888" starttime="20191108 05:52:22.547"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 05:52:23.892" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 05:52:25.958" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 05:52:25.958" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:25.958" starttime="20191108 05:52:23.890"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 05:52:25.960" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:25.960" starttime="20191108 05:52:25.959"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 05:52:25.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 05:52:25.961" starttime="20191108 05:52:25.961"></status>
</kw>
<msg timestamp="20191108 05:52:25.962" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:25.962" starttime="20191108 05:52:23.889"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 05:52:25.963" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:25.963" starttime="20191108 05:52:25.962"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:25.964" starttime="20191108 05:52:25.963"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:25.965" starttime="20191108 05:52:25.964"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 05:52:25.966" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 05:52:25.966" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:25.966" starttime="20191108 05:52:25.965"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 05:52:25.967" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 05:52:25.967" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 05:52:25.967" starttime="20191108 05:52:25.966"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 05:52:25.968" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 05:52:25.968" starttime="20191108 05:52:25.968"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 05:52:25.969" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 05:52:25.969" starttime="20191108 05:52:25.969"></status>
</kw>
<msg timestamp="20191108 05:52:25.970" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191108 05:52:25.970" starttime="20191108 05:52:23.888"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191108 05:52:25.971" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191108 05:52:25.971" starttime="20191108 05:52:25.970"></status>
</kw>
<status status="FAIL" endtime="20191108 05:52:25.972" critical="yes" starttime="20191108 05:52:08.747">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191108 05:52:25.976" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191108 05:52:25.976" starttime="20191108 05:52:25.974"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191108 05:52:25.978" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191108 05:52:25.978" starttime="20191108 05:52:25.977"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 05:52:25.980" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 05:52:25.980" starttime="20191108 05:52:25.980"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:25.983" starttime="20191108 05:52:25.981"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 05:52:25.983" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 05:52:27.189" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191108 05:52:27.189" starttime="20191108 05:52:25.983"></status>
</kw>
<status status="PASS" endtime="20191108 05:52:27.190" starttime="20191108 05:52:25.981"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 05:52:27.191" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 05:52:27.206" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191108 05:52:27.206" starttime="20191108 05:52:27.190"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 05:52:27.208" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 05:52:27.286" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191108 05:52:27.286" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191108 05:52:27.286" starttime="20191108 05:52:27.207"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 05:52:27.401" starttime="20191108 05:52:27.287"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:27.402" starttime="20191108 05:52:27.402"></status>
</kw>
<status status="PASS" endtime="20191108 05:52:27.403" starttime="20191108 05:52:25.979"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 05:52:27.405" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 05:52:27.405" starttime="20191108 05:52:27.404"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:27.406" starttime="20191108 05:52:27.405"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 05:52:27.407" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 05:52:28.595" level="INFO">Read output: Last login: Fri Nov  8 05:52:26 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191108 05:52:28.595" starttime="20191108 05:52:27.406"></status>
</kw>
<status status="PASS" endtime="20191108 05:52:28.596" starttime="20191108 05:52:27.405"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 05:52:28.597" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 05:52:28.611" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191108 05:52:28.611" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191108 05:52:28.611" starttime="20191108 05:52:28.596"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 05:52:28.612" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191108 05:52:28.612" starttime="20191108 05:52:28.611"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 05:52:28.613" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191108 05:52:28.613" starttime="20191108 05:52:28.612"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 05:52:28.689" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191108 05:52:28.689" starttime="20191108 05:52:28.613"></status>
</kw>
<status status="FAIL" endtime="20191108 05:52:28.690" starttime="20191108 05:52:27.403"></status>
</kw>
<status status="FAIL" endtime="20191108 05:52:28.690" critical="yes" starttime="20191108 05:52:25.972">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 05:52:28.696" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 05:52:30.634" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 05:52:30.634" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:30.634" starttime="20191108 05:52:28.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 05:52:30.635" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:30.635" starttime="20191108 05:52:30.634"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 05:52:30.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 05:52:30.636" starttime="20191108 05:52:30.636"></status>
</kw>
<msg timestamp="20191108 05:52:30.637" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:30.637" starttime="20191108 05:52:28.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 05:52:30.637" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:30.637" starttime="20191108 05:52:30.637"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:30.638" starttime="20191108 05:52:30.638"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:30.639" starttime="20191108 05:52:30.638"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 05:52:30.639" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 05:52:30.640" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:30.640" starttime="20191108 05:52:30.639"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 05:52:30.640" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 05:52:30.640" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 05:52:30.641" starttime="20191108 05:52:30.640"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 05:52:30.641" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 05:52:30.641" starttime="20191108 05:52:30.641"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 05:52:30.642" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 05:52:30.642" starttime="20191108 05:52:30.641"></status>
</kw>
<msg timestamp="20191108 05:52:30.642" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 05:52:30.642" starttime="20191108 05:52:28.692"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 05:52:30.644" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 05:52:30.644" starttime="20191108 05:52:30.643"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:30.645" starttime="20191108 05:52:30.644"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 05:52:30.646" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 05:52:31.850" level="INFO">Read output: Last login: Fri Nov  8 05:52:22 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191108 05:52:31.851" starttime="20191108 05:52:30.645"></status>
</kw>
<status status="PASS" endtime="20191108 05:52:31.851" starttime="20191108 05:52:30.644"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 05:52:31.852" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 05:52:31.867" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191108 05:52:31.868" starttime="20191108 05:52:31.851"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 05:52:31.869" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 05:52:31.946" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191108 05:52:31.947" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191108 05:52:31.947" starttime="20191108 05:52:31.868"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 05:52:32.062" starttime="20191108 05:52:31.947"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:32.063" starttime="20191108 05:52:32.062"></status>
</kw>
<msg timestamp="20191108 05:52:32.063" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 05:52:32.063" starttime="20191108 05:52:30.642"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 05:52:32.068" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 05:52:34.090" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 05:52:34.091" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:34.091" starttime="20191108 05:52:32.065"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 05:52:34.092" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:34.092" starttime="20191108 05:52:34.091"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 05:52:34.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 05:52:34.093" starttime="20191108 05:52:34.092"></status>
</kw>
<msg timestamp="20191108 05:52:34.093" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:34.093" starttime="20191108 05:52:32.064"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 05:52:34.094" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:34.094" starttime="20191108 05:52:34.093"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:34.094" starttime="20191108 05:52:34.094"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 05:52:34.095" starttime="20191108 05:52:34.095"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 05:52:34.096" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 05:52:34.096" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 05:52:34.096" starttime="20191108 05:52:34.095"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 05:52:34.097" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 05:52:34.097" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 05:52:34.097" starttime="20191108 05:52:34.096"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 05:52:34.098" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 05:52:34.098" starttime="20191108 05:52:34.098"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 05:52:34.099" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 05:52:34.099" starttime="20191108 05:52:34.099"></status>
</kw>
<msg timestamp="20191108 05:52:34.100" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191108 05:52:34.100" starttime="20191108 05:52:32.064"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191108 05:52:34.101" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191108 05:52:34.102" starttime="20191108 05:52:34.100"></status>
</kw>
<status status="FAIL" endtime="20191108 05:52:34.102" starttime="20191108 05:52:28.692"></status>
</kw>
<status status="FAIL" endtime="20191108 05:52:34.102" starttime="20191108 05:52:28.692"></status>
</kw>
<status status="FAIL" endtime="20191108 05:52:34.102" critical="yes" starttime="20191108 05:52:28.691">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191108 05:52:34.104" starttime="20191108 05:52:08.583"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
