<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191114 22:02:43.884" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:02:44.046" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:02:46.541" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:02:46.541" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 22:02:46.541" starttime="20191114 22:02:44.044"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:02:46.542" level="INFO"></msg>
<status status="PASS" endtime="20191114 22:02:46.542" starttime="20191114 22:02:46.542"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:02:46.543" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:02:46.543" starttime="20191114 22:02:46.543"></status>
</kw>
<status status="PASS" endtime="20191114 22:02:46.543" starttime="20191114 22:02:44.044"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:02:46.548" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:02:48.473" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:02:48.473" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 22:02:48.473" starttime="20191114 22:02:46.546"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:02:48.474" level="INFO"></msg>
<status status="PASS" endtime="20191114 22:02:48.474" starttime="20191114 22:02:48.474"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:02:48.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:02:48.475" starttime="20191114 22:02:48.474"></status>
</kw>
<status status="PASS" endtime="20191114 22:02:48.475" starttime="20191114 22:02:46.544"></status>
</kw>
<status status="PASS" endtime="20191114 22:02:48.475" starttime="20191114 22:02:44.043"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 22:02:48.476" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191114 22:02:48.476" starttime="20191114 22:02:48.476"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 22:02:48.477" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191114 22:02:48.477" starttime="20191114 22:02:48.477"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 22:02:48.478" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191114 22:02:48.478" starttime="20191114 22:02:48.477"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 22:02:48.496" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 22:02:48.496" starttime="20191114 22:02:48.478"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:02:48.500" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:02:53.093" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:02:53.094" level="INFO">${output} = 2019-11-14 22:02:51 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 22:02:51 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 22:02:53.094" starttime="20191114 22:02:48.497"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:02:53.095" level="INFO">2019-11-14 22:02:51 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 22:02:51 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 22:02:51 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 22:02:53.095" starttime="20191114 22:02:53.094"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:02:53.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:02:53.096" starttime="20191114 22:02:53.095"></status>
</kw>
<status status="PASS" endtime="20191114 22:02:53.096" starttime="20191114 22:02:48.496"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:02:53.099" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:02:55.062" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:02:55.062" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191114 22:02:55.062" starttime="20191114 22:02:53.097"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:02:55.063" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191114 22:02:55.063" starttime="20191114 22:02:55.062"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:02:55.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:02:55.064" starttime="20191114 22:02:55.063"></status>
</kw>
<msg timestamp="20191114 22:02:55.064" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191114 22:02:55.064" starttime="20191114 22:02:53.096"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:02:55.064" starttime="20191114 22:02:55.064"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 22:02:55.065" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 22:02:55.065" starttime="20191114 22:02:55.065"></status>
</kw>
<status status="PASS" endtime="20191114 22:02:55.065" starttime="20191114 22:02:48.475"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:02:55.068" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:02:56.932" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:02:56.932" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:02:56.932" starttime="20191114 22:02:55.066"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:02:56.933" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:02:56.933" starttime="20191114 22:02:56.933"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:02:56.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:02:56.934" starttime="20191114 22:02:56.933"></status>
</kw>
<msg timestamp="20191114 22:02:56.934" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:02:56.934" starttime="20191114 22:02:55.066"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 22:02:56.935" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:02:56.935" starttime="20191114 22:02:56.935"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 22:02:56.936" starttime="20191114 22:02:56.935"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 22:02:56.936" starttime="20191114 22:02:56.936"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 22:02:56.937" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 22:02:56.937" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:02:56.937" starttime="20191114 22:02:56.937"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 22:02:56.938" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 22:02:56.938" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 22:02:56.938" starttime="20191114 22:02:56.937"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 22:02:56.938" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:02:56.938" starttime="20191114 22:02:56.938"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 22:02:56.939" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 22:02:56.939" starttime="20191114 22:02:56.938"></status>
</kw>
<msg timestamp="20191114 22:02:56.939" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:02:56.939" starttime="20191114 22:02:55.065"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 22:02:56.940" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 22:02:56.940" starttime="20191114 22:02:56.940"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:02:56.941" starttime="20191114 22:02:56.941"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 22:02:56.942" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 22:02:58.155" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 22:02:58.155" starttime="20191114 22:02:56.942"></status>
</kw>
<status status="PASS" endtime="20191114 22:02:58.156" starttime="20191114 22:02:56.940"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 22:02:58.157" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 22:02:58.172" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 22:02:58.172" starttime="20191114 22:02:58.156"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 22:02:58.173" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 22:02:58.249" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 22:02:58.250" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 22:02:58.250" starttime="20191114 22:02:58.172"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 22:02:58.365" starttime="20191114 22:02:58.251"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 22:02:58.366" starttime="20191114 22:02:58.365"></status>
</kw>
<msg timestamp="20191114 22:02:58.366" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 22:02:58.366" starttime="20191114 22:02:56.939"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:02:58.370" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:03:00.322" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:03:00.323" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:00.323" starttime="20191114 22:02:58.368"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:03:00.324" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:00.324" starttime="20191114 22:03:00.323"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:03:00.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:03:00.325" starttime="20191114 22:03:00.324"></status>
</kw>
<msg timestamp="20191114 22:03:00.325" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:00.325" starttime="20191114 22:02:58.367"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 22:03:00.325" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:00.325" starttime="20191114 22:03:00.325"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 22:03:00.326" starttime="20191114 22:03:00.326"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 22:03:00.327" starttime="20191114 22:03:00.326"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 22:03:00.327" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 22:03:00.327" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:00.327" starttime="20191114 22:03:00.327"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 22:03:00.328" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 22:03:00.328" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 22:03:00.328" starttime="20191114 22:03:00.327"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 22:03:00.328" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:03:00.329" starttime="20191114 22:03:00.328"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 22:03:00.329" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 22:03:00.329" starttime="20191114 22:03:00.329"></status>
</kw>
<msg timestamp="20191114 22:03:00.329" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:03:00.329" starttime="20191114 22:02:58.367"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 22:03:00.330" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191114 22:03:00.330" starttime="20191114 22:03:00.330"></status>
</kw>
<status status="FAIL" endtime="20191114 22:03:00.331" critical="yes" starttime="20191114 22:02:44.043">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191114 22:03:00.333" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191114 22:03:00.333" starttime="20191114 22:03:00.332"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191114 22:03:00.334" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191114 22:03:00.334" starttime="20191114 22:03:00.333"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 22:03:00.336" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 22:03:00.336" starttime="20191114 22:03:00.335"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:03:00.337" starttime="20191114 22:03:00.336"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 22:03:00.338" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 22:03:01.536" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 22:03:01.536" starttime="20191114 22:03:00.337"></status>
</kw>
<status status="PASS" endtime="20191114 22:03:01.537" starttime="20191114 22:03:00.336"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 22:03:01.538" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 22:03:01.552" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 22:03:01.552" starttime="20191114 22:03:01.537"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 22:03:01.553" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 22:03:01.630" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 22:03:01.630" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 22:03:01.630" starttime="20191114 22:03:01.553"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 22:03:01.745" starttime="20191114 22:03:01.630"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 22:03:01.746" starttime="20191114 22:03:01.745"></status>
</kw>
<status status="PASS" endtime="20191114 22:03:01.746" starttime="20191114 22:03:00.335"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 22:03:01.748" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 22:03:01.748" starttime="20191114 22:03:01.747"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:03:01.750" starttime="20191114 22:03:01.749"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 22:03:01.751" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 22:03:02.949" level="INFO">Read output: Last login: Thu Nov 14 22:03:00 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 22:03:02.949" starttime="20191114 22:03:01.750"></status>
</kw>
<status status="PASS" endtime="20191114 22:03:02.950" starttime="20191114 22:03:01.748"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 22:03:02.951" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 22:03:02.966" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 22:03:02.966" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191114 22:03:02.966" starttime="20191114 22:03:02.950"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 22:03:02.967" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191114 22:03:02.967" starttime="20191114 22:03:02.966"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 22:03:02.968" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191114 22:03:02.968" starttime="20191114 22:03:02.967"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 22:03:03.011" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191114 22:03:03.011" starttime="20191114 22:03:02.968"></status>
</kw>
<status status="FAIL" endtime="20191114 22:03:03.011" starttime="20191114 22:03:01.746"></status>
</kw>
<status status="FAIL" endtime="20191114 22:03:03.011" critical="yes" starttime="20191114 22:03:00.331">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:03:03.016" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:03:04.865" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:03:04.865" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:04.865" starttime="20191114 22:03:03.014"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:03:04.866" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:04.866" starttime="20191114 22:03:04.866"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:03:04.867" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:03:04.867" starttime="20191114 22:03:04.867"></status>
</kw>
<msg timestamp="20191114 22:03:04.868" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:04.868" starttime="20191114 22:03:03.013"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 22:03:04.868" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:04.868" starttime="20191114 22:03:04.868"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 22:03:04.869" starttime="20191114 22:03:04.868"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 22:03:04.869" starttime="20191114 22:03:04.869"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 22:03:04.870" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 22:03:04.870" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:04.870" starttime="20191114 22:03:04.869"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 22:03:04.870" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 22:03:04.871" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 22:03:04.871" starttime="20191114 22:03:04.870"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 22:03:04.871" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:03:04.871" starttime="20191114 22:03:04.871"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 22:03:04.872" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 22:03:04.872" starttime="20191114 22:03:04.871"></status>
</kw>
<msg timestamp="20191114 22:03:04.872" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:03:04.872" starttime="20191114 22:03:03.013"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 22:03:04.873" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 22:03:04.873" starttime="20191114 22:03:04.873"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:03:04.874" starttime="20191114 22:03:04.874"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 22:03:04.875" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 22:03:06.078" level="INFO">Read output: Last login: Thu Nov 14 22:02:57 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 22:03:06.079" starttime="20191114 22:03:04.875"></status>
</kw>
<status status="PASS" endtime="20191114 22:03:06.079" starttime="20191114 22:03:04.873"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 22:03:06.080" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 22:03:06.095" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 22:03:06.095" starttime="20191114 22:03:06.080"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 22:03:06.096" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 22:03:06.173" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 22:03:06.173" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 22:03:06.173" starttime="20191114 22:03:06.095"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 22:03:06.289" starttime="20191114 22:03:06.174"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 22:03:06.290" starttime="20191114 22:03:06.289"></status>
</kw>
<msg timestamp="20191114 22:03:06.290" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 22:03:06.290" starttime="20191114 22:03:04.872"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:03:06.295" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:03:08.089" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:03:08.089" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:08.089" starttime="20191114 22:03:06.292"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:03:08.091" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:08.091" starttime="20191114 22:03:08.090"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:03:08.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:03:08.092" starttime="20191114 22:03:08.091"></status>
</kw>
<msg timestamp="20191114 22:03:08.092" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:08.092" starttime="20191114 22:03:06.291"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 22:03:08.093" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:08.093" starttime="20191114 22:03:08.093"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 22:03:08.094" starttime="20191114 22:03:08.093"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 22:03:08.095" starttime="20191114 22:03:08.094"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 22:03:08.095" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 22:03:08.095" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:03:08.095" starttime="20191114 22:03:08.095"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 22:03:08.096" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 22:03:08.096" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 22:03:08.096" starttime="20191114 22:03:08.096"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 22:03:08.097" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:03:08.097" starttime="20191114 22:03:08.097"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 22:03:08.098" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 22:03:08.098" starttime="20191114 22:03:08.097"></status>
</kw>
<msg timestamp="20191114 22:03:08.098" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:03:08.098" starttime="20191114 22:03:06.291"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 22:03:08.100" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191114 22:03:08.100" starttime="20191114 22:03:08.099"></status>
</kw>
<status status="FAIL" endtime="20191114 22:03:08.100" starttime="20191114 22:03:03.013"></status>
</kw>
<status status="FAIL" endtime="20191114 22:03:08.100" starttime="20191114 22:03:03.012"></status>
</kw>
<status status="FAIL" endtime="20191114 22:03:08.100" critical="yes" starttime="20191114 22:03:03.012">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191114 22:03:08.102" starttime="20191114 22:02:43.884"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
