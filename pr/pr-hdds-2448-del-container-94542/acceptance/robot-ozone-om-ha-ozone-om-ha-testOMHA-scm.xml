<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 11:53:11.116" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:53:11.246" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:53:13.934" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:53:13.934" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 11:53:13.934" starttime="20191115 11:53:11.244"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:53:13.936" level="INFO"></msg>
<status status="PASS" endtime="20191115 11:53:13.936" starttime="20191115 11:53:13.935"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:53:13.937" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:53:13.937" starttime="20191115 11:53:13.936"></status>
</kw>
<status status="PASS" endtime="20191115 11:53:13.937" starttime="20191115 11:53:11.244"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:53:13.944" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:53:16.045" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:53:16.045" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 11:53:16.045" starttime="20191115 11:53:13.941"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:53:16.047" level="INFO"></msg>
<status status="PASS" endtime="20191115 11:53:16.047" starttime="20191115 11:53:16.046"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:53:16.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:53:16.047" starttime="20191115 11:53:16.047"></status>
</kw>
<status status="PASS" endtime="20191115 11:53:16.048" starttime="20191115 11:53:13.937"></status>
</kw>
<status status="PASS" endtime="20191115 11:53:16.048" starttime="20191115 11:53:11.243"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 11:53:16.049" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191115 11:53:16.049" starttime="20191115 11:53:16.049"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 11:53:16.050" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191115 11:53:16.050" starttime="20191115 11:53:16.050"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 11:53:16.051" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191115 11:53:16.051" starttime="20191115 11:53:16.051"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:53:16.053" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:53:16.053" starttime="20191115 11:53:16.051"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:53:16.056" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:53:20.524" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:53:20.524" level="INFO">${output} = 2019-11-15 11:53:18 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 11:53:18 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 11:53:20.524" starttime="20191115 11:53:16.054"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:53:20.526" level="INFO">2019-11-15 11:53:18 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 11:53:18 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 11:53:18 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 11:53:20.526" starttime="20191115 11:53:20.525"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:53:20.527" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:53:20.528" starttime="20191115 11:53:20.526"></status>
</kw>
<status status="PASS" endtime="20191115 11:53:20.528" starttime="20191115 11:53:16.053"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:53:20.533" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:53:22.721" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:53:22.722" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191115 11:53:22.722" starttime="20191115 11:53:20.530"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:53:22.723" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191115 11:53:22.723" starttime="20191115 11:53:22.722"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:53:22.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:53:22.724" starttime="20191115 11:53:22.723"></status>
</kw>
<msg timestamp="20191115 11:53:22.724" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191115 11:53:22.724" starttime="20191115 11:53:20.528"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:53:22.725" starttime="20191115 11:53:22.724"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:53:22.725" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:53:22.725" starttime="20191115 11:53:22.725"></status>
</kw>
<status status="PASS" endtime="20191115 11:53:22.726" starttime="20191115 11:53:16.048"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:53:22.728" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:53:24.783" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:53:24.783" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:53:24.783" starttime="20191115 11:53:22.727"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:53:24.785" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:53:24.785" starttime="20191115 11:53:24.784"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:53:24.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:53:24.786" starttime="20191115 11:53:24.785"></status>
</kw>
<msg timestamp="20191115 11:53:24.787" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:53:24.787" starttime="20191115 11:53:22.726"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:53:24.788" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:53:24.788" starttime="20191115 11:53:24.787"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:53:24.789" starttime="20191115 11:53:24.788"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:53:24.790" starttime="20191115 11:53:24.789"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:53:24.791" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:53:24.791" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:53:24.791" starttime="20191115 11:53:24.790"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:53:24.792" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 11:53:24.792" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:53:24.792" starttime="20191115 11:53:24.792"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:53:24.793" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:53:24.793" starttime="20191115 11:53:24.793"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:53:24.794" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 11:53:24.794" starttime="20191115 11:53:24.794"></status>
</kw>
<msg timestamp="20191115 11:53:24.795" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:53:24.795" starttime="20191115 11:53:22.726"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:53:24.797" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 11:53:24.797" starttime="20191115 11:53:24.796"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:53:24.799" starttime="20191115 11:53:24.798"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:53:24.799" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:53:26.039" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:53:26.040" starttime="20191115 11:53:24.799"></status>
</kw>
<status status="PASS" endtime="20191115 11:53:26.040" starttime="20191115 11:53:24.797"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 11:53:26.041" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 11:53:36.170" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:53:36.170" starttime="20191115 11:53:26.040"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 11:53:36.171" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:53:36.270" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:53:36.270" level="INFO">${shutdownMsg} = hadoop     451  0.0  0.0   9556  1168 ?        Ss   11:53   0:00 bash -c sudo ps aux | grep om
hadoop     453  0.0  0.0   9088   672 ?        S    11:53   0:00 grep om</msg>
<status status="PASS" endtime="20191115 11:53:36.270" starttime="20191115 11:53:36.171"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:53:36.335" starttime="20191115 11:53:36.271"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:53:36.336" starttime="20191115 11:53:36.336"></status>
</kw>
<msg timestamp="20191115 11:53:36.337" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 11:53:36.337" starttime="20191115 11:53:24.795"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:53:36.341" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:53:48.448" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:53:48.448" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:53:48.448" starttime="20191115 11:53:36.339"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:53:48.450" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:53:48.450" starttime="20191115 11:53:48.449"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:53:48.450" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:53:48.450" starttime="20191115 11:53:48.450"></status>
</kw>
<msg timestamp="20191115 11:53:48.451" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:53:48.451" starttime="20191115 11:53:36.338"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:53:48.451" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:53:48.451" starttime="20191115 11:53:48.451"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:53:48.452" starttime="20191115 11:53:48.451"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:53:48.452" starttime="20191115 11:53:48.452"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:53:48.453" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:53:48.453" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:53:48.453" starttime="20191115 11:53:48.453"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:53:48.454" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191115 11:53:48.454" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:53:48.454" starttime="20191115 11:53:48.453"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:53:48.454" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 11:53:48.454" starttime="20191115 11:53:48.454"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:53:48.455" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191115 11:53:48.455" starttime="20191115 11:53:48.455"></status>
</kw>
<msg timestamp="20191115 11:53:48.455" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191115 11:53:48.455" starttime="20191115 11:53:36.337"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 11:53:48.456" starttime="20191115 11:53:48.456"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 11:53:48.457" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191115 11:53:48.457" starttime="20191115 11:53:48.457"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 11:53:48.458" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191115 11:53:48.458" starttime="20191115 11:53:48.457"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 11:53:48.458" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191115 11:53:48.459" starttime="20191115 11:53:48.458"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:53:48.460" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:53:48.460" starttime="20191115 11:53:48.459"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:53:48.463" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:54:03.242" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:54:03.242" level="INFO">${output} = 2019-11-15 11:53:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191115 11:54:03.242" starttime="20191115 11:53:48.461"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:54:03.243" level="INFO">2019-11-15 11:53:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:53:52 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:53:53 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:53:54 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:53:55 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:53:56 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:53:57 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:53:58 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:53:59 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:54:00 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:54:01 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 11:54:01 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 11:54:01 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 11:54:03.243" starttime="20191115 11:54:03.243"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:54:03.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:54:03.245" starttime="20191115 11:54:03.244"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:03.245" starttime="20191115 11:53:48.460"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:54:03.247" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:54:15.373" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:54:15.374" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191115 11:54:15.374" starttime="20191115 11:54:03.246"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:54:15.376" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191115 11:54:15.376" starttime="20191115 11:54:15.375"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:54:15.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:54:15.377" starttime="20191115 11:54:15.376"></status>
</kw>
<msg timestamp="20191115 11:54:15.377" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191115 11:54:15.378" starttime="20191115 11:54:03.245"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:54:15.379" starttime="20191115 11:54:15.378"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:54:15.380" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:54:15.380" starttime="20191115 11:54:15.379"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:15.380" starttime="20191115 11:53:48.456"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:54:15.382" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 11:54:15.382" starttime="20191115 11:54:15.381"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:54:15.384" starttime="20191115 11:54:15.383"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:54:15.385" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:54:16.573" level="INFO">Read output: Last login: Fri Nov 15 11:53:25 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:54:16.574" starttime="20191115 11:54:15.384"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:16.574" starttime="20191115 11:54:15.382"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 11:54:16.575" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 11:54:18.753" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:54:18.753" starttime="20191115 11:54:16.575"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 11:54:18.754" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:54:18.818" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:54:18.819" level="INFO">${startupMsg} = hadoop     504  378  0.1 34485136 263940 ?     Sl   11:54   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 11:54:18.819" starttime="20191115 11:54:18.754"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:54:18.884" starttime="20191115 11:54:18.819"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:54:18.885" starttime="20191115 11:54:18.884"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:18.885" starttime="20191115 11:54:15.380"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:18.885" critical="yes" starttime="20191115 11:53:11.243"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 11:54:18.888" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 11:54:18.888" starttime="20191115 11:54:18.886"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 11:54:18.890" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 11:54:18.890" starttime="20191115 11:54:18.889"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:54:18.892" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 11:54:18.892" starttime="20191115 11:54:18.891"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:54:18.894" starttime="20191115 11:54:18.893"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:54:18.894" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:54:20.081" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:54:20.081" starttime="20191115 11:54:18.894"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:20.081" starttime="20191115 11:54:18.892"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 11:54:20.082" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 11:54:30.219" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:54:30.219" starttime="20191115 11:54:20.082"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 11:54:30.220" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:54:30.285" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:54:30.286" level="INFO">${shutdownMsg} = hadoop     497  0.0  0.0   9556  1168 ?        Ss   11:54   0:00 bash -c sudo ps aux | grep om
hadoop     499  0.0  0.0   9088   668 ?        S    11:54   0:00 grep om</msg>
<status status="PASS" endtime="20191115 11:54:30.286" starttime="20191115 11:54:30.220"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:54:30.351" starttime="20191115 11:54:30.286"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:54:30.352" starttime="20191115 11:54:30.351"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:30.352" starttime="20191115 11:54:18.890"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:54:30.354" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 11:54:30.354" starttime="20191115 11:54:30.353"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:54:30.356" starttime="20191115 11:54:30.355"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:54:30.357" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:54:31.560" level="INFO">Read output: Last login: Fri Nov 15 11:54:19 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:54:31.561" starttime="20191115 11:54:30.356"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:31.561" starttime="20191115 11:54:30.355"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 11:54:31.562" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 11:54:31.576" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:54:31.577" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 11:54:31.577" starttime="20191115 11:54:31.561"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 11:54:31.577" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 11:54:31.578" starttime="20191115 11:54:31.577"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 11:54:31.578" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 11:54:31.578" starttime="20191115 11:54:31.578"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 11:54:31.656" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 11:54:31.668" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191115 11:54:31.668" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191115 11:54:31.668" starttime="20191115 11:54:31.579"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 11:54:31.670" level="INFO">Length is 2</msg>
<msg timestamp="20191115 11:54:31.670" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191115 11:54:31.670" starttime="20191115 11:54:31.669"></status>
</kw>
<msg timestamp="20191115 11:54:31.671" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191115 11:54:31.671" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191115 11:54:31.671" starttime="20191115 11:54:30.352"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:54:31.675" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:54:33.741" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:54:33.741" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:54:33.741" starttime="20191115 11:54:31.673"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:54:33.743" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:54:33.743" starttime="20191115 11:54:33.742"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:54:33.744" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:54:33.744" starttime="20191115 11:54:33.744"></status>
</kw>
<msg timestamp="20191115 11:54:33.745" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:54:33.745" starttime="20191115 11:54:31.672"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:54:33.746" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:54:33.746" starttime="20191115 11:54:33.745"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:54:33.747" starttime="20191115 11:54:33.747"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:54:33.748" starttime="20191115 11:54:33.748"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:54:33.749" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:54:33.749" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:54:33.750" starttime="20191115 11:54:33.749"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:54:33.751" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191115 11:54:33.751" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:54:33.751" starttime="20191115 11:54:33.750"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:54:33.752" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 11:54:33.752" starttime="20191115 11:54:33.751"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:54:33.753" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191115 11:54:33.753" starttime="20191115 11:54:33.752"></status>
</kw>
<msg timestamp="20191115 11:54:33.753" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 11:54:33.754" starttime="20191115 11:54:31.671"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191115 11:54:33.757" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191115 11:54:33.757" starttime="20191115 11:54:33.754"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 11:54:33.760" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191115 11:54:33.760" starttime="20191115 11:54:33.759"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 11:54:33.761" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191115 11:54:33.761" starttime="20191115 11:54:33.760"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:54:33.766" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:54:38.012" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:54:38.013" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 11:54:38.013" starttime="20191115 11:54:33.763"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:54:38.015" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 11:54:38.015" starttime="20191115 11:54:38.014"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:54:38.016" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:54:38.016" starttime="20191115 11:54:38.015"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:38.016" starttime="20191115 11:54:33.762"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:54:38.022" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:54:40.135" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:54:40.135" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573818875875,
  "modificationTime": 1573818877595,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 11:54:40.135" starttime="20191115 11:54:38.019"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:54:40.136" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573818875875,
  "modificationTime": 1573818877595,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103141793848950780,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 11:54:40.137" starttime="20191115 11:54:40.136"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:54:40.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:54:40.138" starttime="20191115 11:54:40.137"></status>
</kw>
<msg timestamp="20191115 11:54:40.138" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573818875875,
  "modificationTime": 1573818877595,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 11:54:40.138" starttime="20191115 11:54:38.017"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 11:54:40.139" starttime="20191115 11:54:40.138"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:40.139" starttime="20191115 11:54:33.761"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:40.139" starttime="20191115 11:54:33.759"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 11:54:40.140" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191115 11:54:40.140" starttime="20191115 11:54:40.140"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 11:54:40.141" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191115 11:54:40.141" starttime="20191115 11:54:40.141"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:54:40.146" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:54:44.418" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:54:44.419" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 11:54:44.419" starttime="20191115 11:54:40.143"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:54:44.420" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 11:54:44.421" starttime="20191115 11:54:44.420"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:54:44.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:54:44.422" starttime="20191115 11:54:44.421"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:44.422" starttime="20191115 11:54:40.142"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:54:44.426" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:54:46.669" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:54:46.669" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573818882180,
  "modificationTime": 1573818884008,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 11:54:46.669" starttime="20191115 11:54:44.424"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:54:46.671" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573818882180,
  "modificationTime": 1573818884008,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103141794262482940,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 11:54:46.671" starttime="20191115 11:54:46.670"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:54:46.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:54:46.672" starttime="20191115 11:54:46.671"></status>
</kw>
<msg timestamp="20191115 11:54:46.673" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573818882180,
  "modificationTime": 1573818884008,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 11:54:46.673" starttime="20191115 11:54:44.422"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 11:54:46.674" starttime="20191115 11:54:46.673"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:46.674" starttime="20191115 11:54:40.141"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:46.674" starttime="20191115 11:54:40.139"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 11:54:46.675" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191115 11:54:46.675" starttime="20191115 11:54:46.674"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 11:54:46.676" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191115 11:54:46.676" starttime="20191115 11:54:46.676"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:54:46.681" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:54:50.977" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:54:50.977" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 11:54:50.977" starttime="20191115 11:54:46.679"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:54:50.979" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 11:54:50.979" starttime="20191115 11:54:50.978"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:54:50.980" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:54:50.980" starttime="20191115 11:54:50.979"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:50.980" starttime="20191115 11:54:46.678"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:54:50.985" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:54:53.231" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:54:53.232" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573818888915,
  "modificationTime": 1573818890559,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 11:54:53.232" starttime="20191115 11:54:50.983"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:54:53.234" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573818888915,
  "modificationTime": 1573818890559,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103141794703867900,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 11:54:53.234" starttime="20191115 11:54:53.233"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:54:53.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:54:53.235" starttime="20191115 11:54:53.234"></status>
</kw>
<msg timestamp="20191115 11:54:53.236" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573818888915,
  "modificationTime": 1573818890559,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 11:54:53.236" starttime="20191115 11:54:50.981"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 11:54:53.237" starttime="20191115 11:54:53.236"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:53.237" starttime="20191115 11:54:46.677"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:53.237" starttime="20191115 11:54:46.674"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 11:54:53.239" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191115 11:54:53.239" starttime="20191115 11:54:53.238"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 11:54:53.239" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191115 11:54:53.240" starttime="20191115 11:54:53.239"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:54:53.245" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:54:57.960" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:54:57.960" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 11:54:57.960" starttime="20191115 11:54:53.242"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:54:57.961" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 11:54:57.962" starttime="20191115 11:54:57.961"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:54:57.962" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:54:57.962" starttime="20191115 11:54:57.962"></status>
</kw>
<status status="PASS" endtime="20191115 11:54:57.963" starttime="20191115 11:54:53.241"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:54:57.966" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:55:00.141" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:55:00.141" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573818895476,
  "modificationTime": 1573818897553,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 11:55:00.141" starttime="20191115 11:54:57.964"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:55:00.143" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573818895476,
  "modificationTime": 1573818897553,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103141795133849600,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 11:55:00.143" starttime="20191115 11:55:00.142"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:55:00.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:55:00.143" starttime="20191115 11:55:00.143"></status>
</kw>
<msg timestamp="20191115 11:55:00.144" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573818895476,
  "modificationTime": 1573818897553,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 11:55:00.144" starttime="20191115 11:54:57.963"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:00.144" starttime="20191115 11:55:00.144"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:00.144" starttime="20191115 11:54:53.240"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:00.144" starttime="20191115 11:54:53.237"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191115 11:55:00.145" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:55:00.145" starttime="20191115 11:55:00.145"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191115 11:55:00.146" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:55:00.146" starttime="20191115 11:55:00.145"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:55:00.149" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:55:04.237" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:55:04.237" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191115 11:55:04.238" starttime="20191115 11:55:00.147"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:55:04.239" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 11:55:04.240" starttime="20191115 11:55:04.238"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:55:04.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:55:04.241" starttime="20191115 11:55:04.240"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:04.241" starttime="20191115 11:55:00.147"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:55:04.247" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:55:06.523" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:55:06.523" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573818902248,
  "modificationTime": 1573818903826,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 11:55:06.523" starttime="20191115 11:55:04.244"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:55:06.524" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573818902248,
  "modificationTime": 1573818903826,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103141795577659400,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191115 11:55:06.524" starttime="20191115 11:55:06.523"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:55:06.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:55:06.525" starttime="20191115 11:55:06.524"></status>
</kw>
<msg timestamp="20191115 11:55:06.525" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573818902248,
  "modificationTime": 1573818903826,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191115 11:55:06.525" starttime="20191115 11:55:04.242"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:06.526" starttime="20191115 11:55:06.526"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:06.526" starttime="20191115 11:55:00.146"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:06.526" starttime="20191115 11:55:00.145"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:06.526" starttime="20191115 11:54:33.758"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:06.527" starttime="20191115 11:54:33.757"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:55:06.528" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 11:55:06.528" starttime="20191115 11:55:06.527"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:06.529" starttime="20191115 11:55:06.529"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:55:06.530" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:55:07.734" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:55:07.735" starttime="20191115 11:55:06.530"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:07.735" starttime="20191115 11:55:06.528"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 11:55:07.736" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 11:55:07.751" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:55:07.751" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 11:55:07.751" starttime="20191115 11:55:07.735"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 11:55:07.752" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 11:55:07.752" starttime="20191115 11:55:07.752"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 11:55:07.753" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 11:55:07.753" starttime="20191115 11:55:07.752"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 11:55:07.832" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 11:55:07.842" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191115 11:55:07.843" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191115 11:55:07.843" starttime="20191115 11:55:07.753"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 11:55:07.844" level="INFO">Length is 3</msg>
<msg timestamp="20191115 11:55:07.844" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191115 11:55:07.844" starttime="20191115 11:55:07.843"></status>
</kw>
<msg timestamp="20191115 11:55:07.845" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191115 11:55:07.845" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191115 11:55:07.845" starttime="20191115 11:55:06.527"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191115 11:55:07.846" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191115 11:55:07.846" starttime="20191115 11:55:07.845"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:07.846" starttime="20191115 11:54:33.754"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:07.846" starttime="20191115 11:54:33.754"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:07.848" starttime="20191115 11:55:07.847"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:55:07.850" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 11:55:07.850" starttime="20191115 11:55:07.849"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:07.852" starttime="20191115 11:55:07.851"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:55:07.853" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:55:09.056" level="INFO">Read output: Last login: Fri Nov 15 11:54:30 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:55:09.057" starttime="20191115 11:55:07.852"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:09.057" starttime="20191115 11:55:07.850"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 11:55:09.058" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 11:55:11.203" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:55:11.203" starttime="20191115 11:55:09.057"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 11:55:11.204" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:55:11.301" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:55:11.302" level="INFO">${startupMsg} = hadoop     572  381  0.1 34486964 266660 ?     Sl   11:55   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 11:55:11.302" starttime="20191115 11:55:11.204"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:55:11.367" starttime="20191115 11:55:11.302"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:11.368" starttime="20191115 11:55:11.367"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:11.368" starttime="20191115 11:55:07.848"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:55:11.370" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 11:55:11.370" starttime="20191115 11:55:11.369"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:11.372" starttime="20191115 11:55:11.371"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:55:11.372" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:55:12.570" level="INFO">Read output: Last login: Fri Nov 15 11:55:08 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:55:12.571" starttime="20191115 11:55:11.372"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:12.571" starttime="20191115 11:55:11.370"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 11:55:12.572" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 11:55:12.586" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:55:12.586" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 11:55:12.587" starttime="20191115 11:55:12.571"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 11:55:12.587" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 11:55:12.587" starttime="20191115 11:55:12.587"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 11:55:12.588" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 11:55:12.588" starttime="20191115 11:55:12.587"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 11:55:12.667" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 11:55:12.677" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191115 11:55:12.677" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191115 11:55:12.677" starttime="20191115 11:55:12.588"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 11:55:12.678" level="INFO">Length is 2</msg>
<msg timestamp="20191115 11:55:12.678" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191115 11:55:12.679" starttime="20191115 11:55:12.678"></status>
</kw>
<msg timestamp="20191115 11:55:12.679" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191115 11:55:12.679" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191115 11:55:12.679" starttime="20191115 11:55:11.369"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:12.680" starttime="20191115 11:55:12.679"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191115 11:55:13.681" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191115 11:55:13.682" starttime="20191115 11:55:12.680"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:13.682" starttime="20191115 11:55:11.368"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:55:13.685" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 11:55:13.685" starttime="20191115 11:55:13.684"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:13.688" starttime="20191115 11:55:13.687"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:55:13.689" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:55:14.889" level="INFO">Read output: Last login: Fri Nov 15 11:55:11 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:55:14.890" starttime="20191115 11:55:13.688"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:14.890" starttime="20191115 11:55:13.686"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 11:55:14.891" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 11:55:14.906" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:55:14.906" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 11:55:14.906" starttime="20191115 11:55:14.890"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 11:55:14.907" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191115 11:55:14.907" starttime="20191115 11:55:14.906"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 11:55:14.908" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191115 11:55:14.908" starttime="20191115 11:55:14.908"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 11:55:14.987" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191115 11:55:14.997" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191115 11:55:14.997" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191115 11:55:14.998" starttime="20191115 11:55:14.909"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191115 11:55:14.998" level="INFO">Length is 3</msg>
<msg timestamp="20191115 11:55:14.999" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191115 11:55:14.999" starttime="20191115 11:55:14.998"></status>
</kw>
<msg timestamp="20191115 11:55:14.999" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191115 11:55:14.999" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191115 11:55:14.999" starttime="20191115 11:55:13.683"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191115 11:55:15.000" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191115 11:55:15.001" starttime="20191115 11:55:15.000"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:15.001" starttime="20191115 11:55:13.682"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:15.001" starttime="20191115 11:55:11.368"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:15.002" starttime="20191115 11:55:15.001"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:15.003" starttime="20191115 11:55:15.002"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:15.004" critical="yes" starttime="20191115 11:54:18.886"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:55:15.012" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:55:17.003" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:55:17.004" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:17.004" starttime="20191115 11:55:15.008"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:55:17.005" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:17.005" starttime="20191115 11:55:17.004"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:55:17.006" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:55:17.006" starttime="20191115 11:55:17.005"></status>
</kw>
<msg timestamp="20191115 11:55:17.006" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:17.006" starttime="20191115 11:55:15.007"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:55:17.007" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:17.007" starttime="20191115 11:55:17.007"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:17.008" starttime="20191115 11:55:17.007"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:17.008" starttime="20191115 11:55:17.008"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:55:17.009" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:55:17.009" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:17.009" starttime="20191115 11:55:17.009"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:55:17.010" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191115 11:55:17.010" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:55:17.010" starttime="20191115 11:55:17.009"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:55:17.011" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 11:55:17.011" starttime="20191115 11:55:17.010"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:55:17.011" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191115 11:55:17.012" starttime="20191115 11:55:17.011"></status>
</kw>
<msg timestamp="20191115 11:55:17.012" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 11:55:17.012" starttime="20191115 11:55:15.007"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:55:17.013" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 11:55:17.014" starttime="20191115 11:55:17.013"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:17.015" starttime="20191115 11:55:17.014"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:55:17.016" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:55:18.220" level="INFO">Read output: Last login: Fri Nov 15 11:55:06 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:55:18.222" starttime="20191115 11:55:17.015"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:18.222" starttime="20191115 11:55:17.014"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 11:55:18.223" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 11:55:28.390" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:55:28.390" starttime="20191115 11:55:18.223"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 11:55:28.391" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:55:28.489" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:55:28.490" level="INFO">${shutdownMsg} = hadoop     546  0.0  0.0   9556  1168 ?        Ss   11:55   0:00 bash -c sudo ps aux | grep om
hadoop     548  0.0  0.0   9088   668 ?        S    11:55   0:00 grep om</msg>
<status status="PASS" endtime="20191115 11:55:28.490" starttime="20191115 11:55:28.390"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:55:28.556" starttime="20191115 11:55:28.490"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:28.557" starttime="20191115 11:55:28.556"></status>
</kw>
<msg timestamp="20191115 11:55:28.557" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 11:55:28.557" starttime="20191115 11:55:17.012"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:55:28.562" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:55:40.768" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:55:40.768" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:40.768" starttime="20191115 11:55:28.559"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:55:40.769" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:40.769" starttime="20191115 11:55:40.769"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:55:40.770" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:55:40.770" starttime="20191115 11:55:40.770"></status>
</kw>
<msg timestamp="20191115 11:55:40.771" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:40.771" starttime="20191115 11:55:28.558"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:55:40.771" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:40.771" starttime="20191115 11:55:40.771"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:40.772" starttime="20191115 11:55:40.772"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:40.773" starttime="20191115 11:55:40.772"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:55:40.773" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:55:40.773" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:40.773" starttime="20191115 11:55:40.773"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:55:40.774" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 11:55:40.774" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:55:40.774" starttime="20191115 11:55:40.774"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:55:40.775" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:55:40.775" starttime="20191115 11:55:40.774"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:55:40.775" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 11:55:40.776" starttime="20191115 11:55:40.775"></status>
</kw>
<msg timestamp="20191115 11:55:40.776" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:55:40.776" starttime="20191115 11:55:28.557"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:40.777" starttime="20191115 11:55:40.776"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 11:55:40.778" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191115 11:55:40.778" starttime="20191115 11:55:40.777"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 11:55:40.779" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191115 11:55:40.779" starttime="20191115 11:55:40.778"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 11:55:40.779" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191115 11:55:40.779" starttime="20191115 11:55:40.779"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:55:40.781" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:55:40.781" starttime="20191115 11:55:40.780"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:55:40.784" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:55:45.267" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:55:45.267" level="INFO">${output} = 2019-11-15 11:55:43 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 11:55:43 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 11:55:45.268" starttime="20191115 11:55:40.782"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:55:45.269" level="INFO">2019-11-15 11:55:43 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 11:55:43 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 11:55:43 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 11:55:45.270" starttime="20191115 11:55:45.268"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:55:45.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:55:45.271" starttime="20191115 11:55:45.270"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:45.271" starttime="20191115 11:55:40.781"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:55:45.275" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:55:47.425" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:55:47.425" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:55:47.425" starttime="20191115 11:55:45.273"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:55:47.427" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:55:47.427" starttime="20191115 11:55:47.426"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:55:47.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:55:47.428" starttime="20191115 11:55:47.427"></status>
</kw>
<msg timestamp="20191115 11:55:47.429" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:55:47.429" starttime="20191115 11:55:45.271"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:47.430" starttime="20191115 11:55:47.429"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:55:47.431" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:55:47.431" starttime="20191115 11:55:47.430"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:47.432" starttime="20191115 11:55:40.777"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:55:47.433" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 11:55:47.433" starttime="20191115 11:55:47.433"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:47.440" starttime="20191115 11:55:47.434"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:55:47.443" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:55:48.636" level="INFO">Read output: Last login: Fri Nov 15 11:55:17 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:55:48.636" starttime="20191115 11:55:47.442"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:48.637" starttime="20191115 11:55:47.434"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 11:55:48.638" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 11:55:50.794" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:55:50.795" starttime="20191115 11:55:48.637"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 11:55:50.796" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:55:50.893" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:55:50.894" level="INFO">${startupMsg} = hadoop     599  373  0.0 34477276 226868 ?     Sl   11:55   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 11:55:50.894" starttime="20191115 11:55:50.795"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:55:50.959" starttime="20191115 11:55:50.894"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:50.960" starttime="20191115 11:55:50.959"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:50.960" starttime="20191115 11:55:47.432"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:50.960" starttime="20191115 11:55:15.006"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:55:50.964" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:55:52.834" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:55:52.834" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:52.834" starttime="20191115 11:55:50.962"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:55:52.836" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:52.836" starttime="20191115 11:55:52.835"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:55:52.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:55:52.837" starttime="20191115 11:55:52.836"></status>
</kw>
<msg timestamp="20191115 11:55:52.838" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:52.838" starttime="20191115 11:55:50.961"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:55:52.838" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:52.838" starttime="20191115 11:55:52.838"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:52.839" starttime="20191115 11:55:52.839"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:52.840" starttime="20191115 11:55:52.839"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:55:52.841" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:55:52.841" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:55:52.841" starttime="20191115 11:55:52.840"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:55:52.842" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 11:55:52.842" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:55:52.842" starttime="20191115 11:55:52.841"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:55:52.842" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:55:52.843" starttime="20191115 11:55:52.842"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:55:52.843" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 11:55:52.843" starttime="20191115 11:55:52.843"></status>
</kw>
<msg timestamp="20191115 11:55:52.844" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:55:52.844" starttime="20191115 11:55:50.960"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:55:52.846" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 11:55:52.846" starttime="20191115 11:55:52.845"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:52.848" starttime="20191115 11:55:52.847"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:55:52.848" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:55:54.047" level="INFO">Read output: Last login: Fri Nov 15 11:54:15 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:55:54.048" starttime="20191115 11:55:52.848"></status>
</kw>
<status status="PASS" endtime="20191115 11:55:54.048" starttime="20191115 11:55:52.846"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 11:55:54.049" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 11:55:55.207" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:55:55.208" starttime="20191115 11:55:54.048"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 11:55:55.209" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:55:55.306" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:55:55.307" level="INFO">${shutdownMsg} = hadoop    1103  0.0  0.0   9556  1168 ?        Ss   11:55   0:00 bash -c sudo ps aux | grep om
hadoop    1105  0.0  0.0   9088   668 ?        S    11:55   0:00 grep om</msg>
<status status="PASS" endtime="20191115 11:55:55.307" starttime="20191115 11:55:55.208"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:55:55.372" starttime="20191115 11:55:55.307"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:55:55.373" starttime="20191115 11:55:55.373"></status>
</kw>
<msg timestamp="20191115 11:55:55.374" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 11:55:55.374" starttime="20191115 11:55:52.844"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:55:55.377" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:56:17.682" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:56:17.682" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:56:17.682" starttime="20191115 11:55:55.375"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:56:17.683" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:56:17.683" starttime="20191115 11:56:17.683"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:56:17.684" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:56:17.684" starttime="20191115 11:56:17.684"></status>
</kw>
<msg timestamp="20191115 11:56:17.685" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:56:17.685" starttime="20191115 11:55:55.374"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:56:17.686" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:56:17.686" starttime="20191115 11:56:17.685"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:56:17.686" starttime="20191115 11:56:17.686"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:56:17.687" starttime="20191115 11:56:17.687"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:56:17.688" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:56:17.688" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:56:17.688" starttime="20191115 11:56:17.687"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:56:17.689" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191115 11:56:17.689" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:56:17.689" starttime="20191115 11:56:17.688"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:56:17.690" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 11:56:17.690" starttime="20191115 11:56:17.689"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:56:17.690" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191115 11:56:17.690" starttime="20191115 11:56:17.690"></status>
</kw>
<msg timestamp="20191115 11:56:17.691" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191115 11:56:17.691" starttime="20191115 11:55:55.374"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 11:56:17.692" starttime="20191115 11:56:17.691"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 11:56:17.693" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191115 11:56:17.693" starttime="20191115 11:56:17.693"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 11:56:17.694" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191115 11:56:17.694" starttime="20191115 11:56:17.694"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 11:56:17.695" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191115 11:56:17.695" starttime="20191115 11:56:17.695"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:56:17.697" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:56:17.697" starttime="20191115 11:56:17.695"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:56:17.700" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:56:32.164" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:56:32.165" level="INFO">${output} = 2019-11-15 11:56:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191115 11:56:32.165" starttime="20191115 11:56:17.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:56:32.166" level="INFO">2019-11-15 11:56:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:56:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:56:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:56:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:56:24 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:56:25 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:56:26 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:56:27 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:56:28 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:56:29 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:56:30 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 11:56:30 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 11:56:30 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 11:56:32.167" starttime="20191115 11:56:32.165"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:56:32.168" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:56:32.168" starttime="20191115 11:56:32.167"></status>
</kw>
<status status="PASS" endtime="20191115 11:56:32.168" starttime="20191115 11:56:17.697"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:56:32.172" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:56:44.474" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:56:44.474" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:56:44.475" starttime="20191115 11:56:32.170"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:56:44.476" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:56:44.476" starttime="20191115 11:56:44.475"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:56:44.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:56:44.477" starttime="20191115 11:56:44.477"></status>
</kw>
<msg timestamp="20191115 11:56:44.478" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:56:44.478" starttime="20191115 11:56:32.169"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:56:44.479" starttime="20191115 11:56:44.478"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:56:44.480" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:56:44.480" starttime="20191115 11:56:44.479"></status>
</kw>
<status status="PASS" endtime="20191115 11:56:44.480" starttime="20191115 11:56:17.692"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:56:44.482" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 11:56:44.482" starttime="20191115 11:56:44.481"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:56:44.483" starttime="20191115 11:56:44.483"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:56:44.484" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:56:45.690" level="INFO">Read output: Last login: Fri Nov 15 11:55:53 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:56:45.690" starttime="20191115 11:56:44.484"></status>
</kw>
<status status="PASS" endtime="20191115 11:56:45.691" starttime="20191115 11:56:44.482"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 11:56:45.692" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 11:56:47.859" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:56:47.860" starttime="20191115 11:56:45.691"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 11:56:47.860" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:56:47.915" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:56:47.915" level="INFO">${startupMsg} = hadoop    1154  374  0.1 34487548 266176 ?     Sl   11:56   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 11:56:47.915" starttime="20191115 11:56:47.860"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:56:47.980" starttime="20191115 11:56:47.915"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:56:47.981" starttime="20191115 11:56:47.980"></status>
</kw>
<status status="PASS" endtime="20191115 11:56:47.981" starttime="20191115 11:56:44.480"></status>
</kw>
<status status="PASS" endtime="20191115 11:56:47.981" starttime="20191115 11:55:50.960"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:56:47.984" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:56:50.217" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:56:50.217" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:56:50.218" starttime="20191115 11:56:47.982"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:56:50.219" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:56:50.219" starttime="20191115 11:56:50.218"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:56:50.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:56:50.219" starttime="20191115 11:56:50.219"></status>
</kw>
<msg timestamp="20191115 11:56:50.220" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:56:50.220" starttime="20191115 11:56:47.982"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:56:50.220" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:56:50.220" starttime="20191115 11:56:50.220"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:56:50.221" starttime="20191115 11:56:50.221"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:56:50.222" starttime="20191115 11:56:50.221"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:56:50.223" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:56:50.223" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191115 11:56:50.223" starttime="20191115 11:56:50.222"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:56:50.223" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191115 11:56:50.224" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:56:50.224" starttime="20191115 11:56:50.223"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:56:50.224" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 11:56:50.224" starttime="20191115 11:56:50.224"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:56:50.225" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191115 11:56:50.225" starttime="20191115 11:56:50.224"></status>
</kw>
<msg timestamp="20191115 11:56:50.225" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191115 11:56:50.225" starttime="20191115 11:56:47.981"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:56:50.226" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 11:56:50.226" starttime="20191115 11:56:50.226"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:56:50.227" starttime="20191115 11:56:50.227"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:56:50.228" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:56:51.432" level="INFO">Read output: Last login: Fri Nov 15 11:55:13 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:56:51.432" starttime="20191115 11:56:50.228"></status>
</kw>
<status status="PASS" endtime="20191115 11:56:51.432" starttime="20191115 11:56:50.226"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 11:56:51.433" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 11:56:52.572" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:56:52.572" starttime="20191115 11:56:51.433"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 11:56:52.573" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:56:52.671" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:56:52.671" level="INFO">${shutdownMsg} = hadoop    1230  0.0  0.0   9556  1168 ?        Ss   11:56   0:00 bash -c sudo ps aux | grep om
hadoop    1232  0.0  0.0   9088   668 ?        S    11:56   0:00 grep om</msg>
<status status="PASS" endtime="20191115 11:56:52.671" starttime="20191115 11:56:52.573"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:56:52.736" starttime="20191115 11:56:52.672"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:56:52.738" starttime="20191115 11:56:52.737"></status>
</kw>
<msg timestamp="20191115 11:56:52.738" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 11:56:52.738" starttime="20191115 11:56:50.225"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:56:52.742" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:57:04.800" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:57:04.800" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:04.800" starttime="20191115 11:56:52.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:57:04.801" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:04.801" starttime="20191115 11:57:04.801"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:57:04.802" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:57:04.802" starttime="20191115 11:57:04.802"></status>
</kw>
<msg timestamp="20191115 11:57:04.803" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:04.803" starttime="20191115 11:56:52.739"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:57:04.803" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:04.803" starttime="20191115 11:57:04.803"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:04.804" starttime="20191115 11:57:04.803"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:04.804" starttime="20191115 11:57:04.804"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:57:04.805" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:57:04.805" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:04.805" starttime="20191115 11:57:04.805"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:57:04.806" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 11:57:04.806" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:57:04.806" starttime="20191115 11:57:04.805"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:57:04.807" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:57:04.807" starttime="20191115 11:57:04.806"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:57:04.807" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 11:57:04.807" starttime="20191115 11:57:04.807"></status>
</kw>
<msg timestamp="20191115 11:57:04.807" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:57:04.807" starttime="20191115 11:56:52.738"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:04.808" starttime="20191115 11:57:04.808"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 11:57:04.810" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191115 11:57:04.810" starttime="20191115 11:57:04.809"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 11:57:04.810" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191115 11:57:04.810" starttime="20191115 11:57:04.810"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 11:57:04.811" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191115 11:57:04.811" starttime="20191115 11:57:04.811"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:57:04.812" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:57:04.813" starttime="20191115 11:57:04.811"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:57:04.815" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:57:09.412" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:57:09.412" level="INFO">${output} = 2019-11-15 11:57:07 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 11:57:07 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 11:57:09.412" starttime="20191115 11:57:04.813"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:57:09.414" level="INFO">2019-11-15 11:57:07 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 11:57:07 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 11:57:07 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 11:57:09.414" starttime="20191115 11:57:09.413"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:57:09.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:57:09.415" starttime="20191115 11:57:09.414"></status>
</kw>
<status status="PASS" endtime="20191115 11:57:09.415" starttime="20191115 11:57:04.813"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:57:09.419" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:57:11.591" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:57:11.591" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:57:11.591" starttime="20191115 11:57:09.417"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:57:11.593" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:57:11.593" starttime="20191115 11:57:11.592"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:57:11.594" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:57:11.594" starttime="20191115 11:57:11.594"></status>
</kw>
<msg timestamp="20191115 11:57:11.595" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:57:11.595" starttime="20191115 11:57:09.416"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:11.596" starttime="20191115 11:57:11.596"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:57:11.597" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:57:11.598" starttime="20191115 11:57:11.597"></status>
</kw>
<status status="PASS" endtime="20191115 11:57:11.598" starttime="20191115 11:57:04.808"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:57:11.600" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 11:57:11.600" starttime="20191115 11:57:11.599"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:11.602" starttime="20191115 11:57:11.601"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:57:11.603" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:57:12.804" level="INFO">Read output: Last login: Fri Nov 15 11:56:50 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:57:12.805" starttime="20191115 11:57:11.602"></status>
</kw>
<status status="PASS" endtime="20191115 11:57:12.805" starttime="20191115 11:57:11.600"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 11:57:12.806" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 11:57:14.954" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:57:14.954" starttime="20191115 11:57:12.805"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 11:57:14.955" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:57:15.052" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:57:15.052" level="INFO">${startupMsg} = hadoop    1281  363  0.0 34486380 231716 ?     Sl   11:57   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 11:57:15.052" starttime="20191115 11:57:14.954"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:57:15.117" starttime="20191115 11:57:15.053"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:15.118" starttime="20191115 11:57:15.118"></status>
</kw>
<status status="PASS" endtime="20191115 11:57:15.118" starttime="20191115 11:57:11.598"></status>
</kw>
<status status="PASS" endtime="20191115 11:57:15.118" starttime="20191115 11:56:47.981"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:57:15.121" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:57:17.066" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:57:17.066" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:17.066" starttime="20191115 11:57:15.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:57:17.068" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:17.068" starttime="20191115 11:57:17.067"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:57:17.069" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:57:17.069" starttime="20191115 11:57:17.068"></status>
</kw>
<msg timestamp="20191115 11:57:17.070" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:17.070" starttime="20191115 11:57:15.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:57:17.071" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:17.071" starttime="20191115 11:57:17.070"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:17.072" starttime="20191115 11:57:17.071"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:17.073" starttime="20191115 11:57:17.072"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:57:17.073" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:57:17.074" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:17.074" starttime="20191115 11:57:17.073"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:57:17.075" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 11:57:17.075" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:57:17.075" starttime="20191115 11:57:17.074"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:57:17.076" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:57:17.076" starttime="20191115 11:57:17.075"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:57:17.077" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 11:57:17.077" starttime="20191115 11:57:17.076"></status>
</kw>
<msg timestamp="20191115 11:57:17.077" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:57:17.078" starttime="20191115 11:57:15.118"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:57:17.080" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 11:57:17.080" starttime="20191115 11:57:17.079"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:17.081" starttime="20191115 11:57:17.081"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:57:17.082" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:57:18.281" level="INFO">Read output: Last login: Fri Nov 15 11:56:44 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:57:18.282" starttime="20191115 11:57:17.082"></status>
</kw>
<status status="PASS" endtime="20191115 11:57:18.282" starttime="20191115 11:57:17.080"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 11:57:18.283" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 11:57:19.398" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:57:19.399" starttime="20191115 11:57:18.282"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 11:57:19.399" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:57:19.463" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:57:19.464" level="INFO">${shutdownMsg} = hadoop    1685  0.0  0.0   9556  1168 ?        Ss   11:57   0:00 bash -c sudo ps aux | grep om
hadoop    1687  0.0  0.0   9088   672 ?        S    11:57   0:00 grep om</msg>
<status status="PASS" endtime="20191115 11:57:19.464" starttime="20191115 11:57:19.399"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:57:19.529" starttime="20191115 11:57:19.464"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:19.530" starttime="20191115 11:57:19.529"></status>
</kw>
<msg timestamp="20191115 11:57:19.530" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 11:57:19.530" starttime="20191115 11:57:17.078"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:57:19.533" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:57:31.486" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:57:31.486" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:31.486" starttime="20191115 11:57:19.531"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:57:31.487" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:31.487" starttime="20191115 11:57:31.486"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:57:31.488" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:57:31.488" starttime="20191115 11:57:31.487"></status>
</kw>
<msg timestamp="20191115 11:57:31.488" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:31.488" starttime="20191115 11:57:19.531"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:57:31.489" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:31.489" starttime="20191115 11:57:31.488"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:31.489" starttime="20191115 11:57:31.489"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:31.490" starttime="20191115 11:57:31.489"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:57:31.490" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:57:31.490" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:57:31.491" starttime="20191115 11:57:31.490"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:57:31.491" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191115 11:57:31.491" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:57:31.491" starttime="20191115 11:57:31.491"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:57:31.492" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 11:57:31.492" starttime="20191115 11:57:31.491"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:57:31.492" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191115 11:57:31.493" starttime="20191115 11:57:31.492"></status>
</kw>
<msg timestamp="20191115 11:57:31.493" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191115 11:57:31.493" starttime="20191115 11:57:19.530"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:31.494" starttime="20191115 11:57:31.493"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 11:57:31.495" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191115 11:57:31.495" starttime="20191115 11:57:31.494"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 11:57:31.495" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191115 11:57:31.496" starttime="20191115 11:57:31.495"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 11:57:31.496" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191115 11:57:31.496" starttime="20191115 11:57:31.496"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:57:31.498" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:57:31.498" starttime="20191115 11:57:31.496"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:57:31.500" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:57:46.131" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:57:46.131" level="INFO">${output} = 2019-11-15 11:57:34 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191115 11:57:46.131" starttime="20191115 11:57:31.498"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:57:46.133" level="INFO">2019-11-15 11:57:34 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:57:35 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:57:36 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:57:37 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:57:38 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:57:39 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:57:40 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:57:41 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:57:42 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:57:43 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-15 11:57:43 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-15 11:57:44 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 11:57:44 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 11:57:44 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 11:57:46.133" starttime="20191115 11:57:46.132"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:57:46.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:57:46.134" starttime="20191115 11:57:46.133"></status>
</kw>
<status status="PASS" endtime="20191115 11:57:46.134" starttime="20191115 11:57:31.498"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:57:46.137" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:57:58.217" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:57:58.217" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:57:58.217" starttime="20191115 11:57:46.135"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:57:58.219" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:57:58.219" starttime="20191115 11:57:58.218"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:57:58.220" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:57:58.220" starttime="20191115 11:57:58.219"></status>
</kw>
<msg timestamp="20191115 11:57:58.220" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:57:58.221" starttime="20191115 11:57:46.134"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:58.221" starttime="20191115 11:57:58.221"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:57:58.223" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:57:58.223" starttime="20191115 11:57:58.222"></status>
</kw>
<status status="PASS" endtime="20191115 11:57:58.223" starttime="20191115 11:57:31.494"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:57:58.225" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 11:57:58.225" starttime="20191115 11:57:58.225"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:57:58.227" starttime="20191115 11:57:58.226"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:57:58.228" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:57:59.432" level="INFO">Read output: Last login: Fri Nov 15 11:57:17 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:57:59.433" starttime="20191115 11:57:58.227"></status>
</kw>
<status status="PASS" endtime="20191115 11:57:59.433" starttime="20191115 11:57:58.226"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 11:57:59.434" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 11:58:01.581" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:58:01.582" starttime="20191115 11:57:59.434"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 11:58:01.582" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:58:01.679" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:58:01.680" level="INFO">${startupMsg} = hadoop    1737  225  0.0 34483368 259500 ?     Sl   11:57   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 11:58:01.680" starttime="20191115 11:58:01.582"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:58:01.712" starttime="20191115 11:58:01.680"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:58:01.713" starttime="20191115 11:58:01.713"></status>
</kw>
<status status="PASS" endtime="20191115 11:58:01.713" starttime="20191115 11:57:58.224"></status>
</kw>
<status status="PASS" endtime="20191115 11:58:01.713" starttime="20191115 11:57:15.118"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:58:01.716" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:58:03.834" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:58:03.834" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:58:03.834" starttime="20191115 11:58:01.715"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:58:03.836" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:58:03.836" starttime="20191115 11:58:03.835"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:58:03.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:58:03.838" starttime="20191115 11:58:03.837"></status>
</kw>
<msg timestamp="20191115 11:58:03.838" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:58:03.838" starttime="20191115 11:58:01.714"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:58:03.839" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:58:03.839" starttime="20191115 11:58:03.838"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:58:03.840" starttime="20191115 11:58:03.839"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:58:03.841" starttime="20191115 11:58:03.840"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:58:03.842" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:58:03.842" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191115 11:58:03.842" starttime="20191115 11:58:03.841"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:58:03.843" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191115 11:58:03.843" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:58:03.843" starttime="20191115 11:58:03.842"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:58:03.844" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 11:58:03.844" starttime="20191115 11:58:03.843"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:58:03.845" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191115 11:58:03.845" starttime="20191115 11:58:03.844"></status>
</kw>
<msg timestamp="20191115 11:58:03.846" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191115 11:58:03.846" starttime="20191115 11:58:01.714"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:58:03.848" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 11:58:03.848" starttime="20191115 11:58:03.847"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:58:03.850" starttime="20191115 11:58:03.849"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:58:03.851" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:58:05.050" level="INFO">Read output: Last login: Fri Nov 15 11:55:47 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:58:05.051" starttime="20191115 11:58:03.850"></status>
</kw>
<status status="PASS" endtime="20191115 11:58:05.051" starttime="20191115 11:58:03.848"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 11:58:05.052" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 11:58:06.178" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:58:06.178" starttime="20191115 11:58:05.051"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 11:58:06.179" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:58:06.278" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:58:06.278" level="INFO">${shutdownMsg} = hadoop    1199  0.0  0.0   9556  1168 ?        Ss   11:58   0:00 bash -c sudo ps aux | grep om
hadoop    1201  0.0  0.0   9088   672 ?        S    11:58   0:00 grep om</msg>
<status status="PASS" endtime="20191115 11:58:06.279" starttime="20191115 11:58:06.179"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:58:06.344" starttime="20191115 11:58:06.279"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:58:06.345" starttime="20191115 11:58:06.344"></status>
</kw>
<msg timestamp="20191115 11:58:06.346" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 11:58:06.346" starttime="20191115 11:58:03.846"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:58:06.350" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:58:08.262" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:58:08.262" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:58:08.262" starttime="20191115 11:58:06.347"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:58:08.263" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:58:08.263" starttime="20191115 11:58:08.263"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:58:08.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:58:08.264" starttime="20191115 11:58:08.264"></status>
</kw>
<msg timestamp="20191115 11:58:08.265" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:58:08.265" starttime="20191115 11:58:06.347"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:58:08.265" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:58:08.265" starttime="20191115 11:58:08.265"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:58:08.266" starttime="20191115 11:58:08.266"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:58:08.267" starttime="20191115 11:58:08.266"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:58:08.267" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:58:08.267" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:58:08.268" starttime="20191115 11:58:08.267"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:58:08.268" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 11:58:08.268" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:58:08.268" starttime="20191115 11:58:08.268"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:58:08.269" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:58:08.269" starttime="20191115 11:58:08.269"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:58:08.270" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 11:58:08.270" starttime="20191115 11:58:08.269"></status>
</kw>
<msg timestamp="20191115 11:58:08.270" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:58:08.270" starttime="20191115 11:58:06.346"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191115 11:58:08.271" starttime="20191115 11:58:08.270"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 11:58:08.272" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191115 11:58:08.272" starttime="20191115 11:58:08.271"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 11:58:08.273" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191115 11:58:08.273" starttime="20191115 11:58:08.272"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 11:58:08.274" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191115 11:58:08.274" starttime="20191115 11:58:08.273"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:58:08.275" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:58:08.275" starttime="20191115 11:58:08.274"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:58:08.278" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:58:12.423" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:58:12.423" level="INFO">${output} = 2019-11-15 11:58:10 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 11:58:11 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 11:58:12.423" starttime="20191115 11:58:08.276"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:58:12.424" level="INFO">2019-11-15 11:58:10 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 11:58:11 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 11:58:11 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 11:58:12.424" starttime="20191115 11:58:12.423"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:58:12.425" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:58:12.425" starttime="20191115 11:58:12.424"></status>
</kw>
<status status="PASS" endtime="20191115 11:58:12.425" starttime="20191115 11:58:08.275"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:58:12.428" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:58:14.453" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:58:14.454" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191115 11:58:14.454" starttime="20191115 11:58:12.426"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:58:14.455" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191115 11:58:14.455" starttime="20191115 11:58:14.455"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:58:14.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:58:14.456" starttime="20191115 11:58:14.456"></status>
</kw>
<msg timestamp="20191115 11:58:14.457" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191115 11:58:14.457" starttime="20191115 11:58:12.425"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:58:14.458" starttime="20191115 11:58:14.457"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:58:14.459" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:58:14.459" starttime="20191115 11:58:14.458"></status>
</kw>
<status status="PASS" endtime="20191115 11:58:14.459" starttime="20191115 11:58:08.271"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:58:14.461" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191115 11:58:14.461" starttime="20191115 11:58:14.460"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:58:14.463" starttime="20191115 11:58:14.462"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:58:14.464" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:58:15.668" level="INFO">Read output: Last login: Fri Nov 15 11:58:04 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191115 11:58:15.669" starttime="20191115 11:58:14.463"></status>
</kw>
<status status="PASS" endtime="20191115 11:58:15.669" starttime="20191115 11:58:14.461"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191115 11:58:15.670" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191115 11:58:17.827" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191115 11:58:17.827" starttime="20191115 11:58:15.669"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191115 11:58:17.828" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:58:17.935" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191115 11:58:17.935" level="INFO">${startupMsg} = hadoop    1250  368  0.1 34485948 266256 ?     Sl   11:58   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191115 11:58:17.935" starttime="20191115 11:58:17.827"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:58:17.968" starttime="20191115 11:58:17.936"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:58:17.969" starttime="20191115 11:58:17.968"></status>
</kw>
<status status="PASS" endtime="20191115 11:58:17.969" starttime="20191115 11:58:14.460"></status>
</kw>
<status status="PASS" endtime="20191115 11:58:17.969" starttime="20191115 11:58:01.714"></status>
</kw>
<status status="PASS" endtime="20191115 11:58:17.969" starttime="20191115 11:55:15.005"></status>
</kw>
<status status="PASS" endtime="20191115 11:58:17.970" critical="yes" starttime="20191115 11:55:15.004"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191115 11:58:17.971" starttime="20191115 11:53:11.117"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
