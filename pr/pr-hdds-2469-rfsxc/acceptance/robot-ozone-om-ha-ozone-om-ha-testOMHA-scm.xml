<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191113 19:23:30.011" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:23:30.208" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:23:32.989" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:23:32.989" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 19:23:32.989" starttime="20191113 19:23:30.207"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:23:32.990" level="INFO"></msg>
<status status="PASS" endtime="20191113 19:23:32.990" starttime="20191113 19:23:32.989"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:23:32.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:23:32.991" starttime="20191113 19:23:32.990"></status>
</kw>
<status status="PASS" endtime="20191113 19:23:32.991" starttime="20191113 19:23:30.206"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:23:32.997" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:23:35.271" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:23:35.271" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 19:23:35.271" starttime="20191113 19:23:32.995"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:23:35.272" level="INFO"></msg>
<status status="PASS" endtime="20191113 19:23:35.272" starttime="20191113 19:23:35.272"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:23:35.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:23:35.273" starttime="20191113 19:23:35.273"></status>
</kw>
<status status="PASS" endtime="20191113 19:23:35.274" starttime="20191113 19:23:32.992"></status>
</kw>
<status status="PASS" endtime="20191113 19:23:35.274" starttime="20191113 19:23:30.206"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 19:23:35.275" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191113 19:23:35.275" starttime="20191113 19:23:35.275"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 19:23:35.276" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191113 19:23:35.276" starttime="20191113 19:23:35.276"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 19:23:35.277" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191113 19:23:35.277" starttime="20191113 19:23:35.277"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 19:23:35.290" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 19:23:35.290" starttime="20191113 19:23:35.277"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:23:35.295" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:23:40.015" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:23:40.015" level="INFO">${output} = 2019-11-13 19:23:38 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 19:23:38 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 19:23:40.015" starttime="20191113 19:23:35.292"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:23:40.017" level="INFO">2019-11-13 19:23:38 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 19:23:38 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 19:23:38 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:23:40.017" starttime="20191113 19:23:40.016"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:23:40.018" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:23:40.019" starttime="20191113 19:23:40.018"></status>
</kw>
<status status="PASS" endtime="20191113 19:23:40.019" starttime="20191113 19:23:35.291"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:23:40.024" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:23:42.312" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:23:42.312" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191113 19:23:42.312" starttime="20191113 19:23:40.021"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:23:42.313" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191113 19:23:42.314" starttime="20191113 19:23:42.313"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:23:42.314" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:23:42.314" starttime="20191113 19:23:42.314"></status>
</kw>
<msg timestamp="20191113 19:23:42.315" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191113 19:23:42.315" starttime="20191113 19:23:40.020"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:23:42.316" starttime="20191113 19:23:42.315"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 19:23:42.317" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 19:23:42.317" starttime="20191113 19:23:42.316"></status>
</kw>
<status status="PASS" endtime="20191113 19:23:42.317" starttime="20191113 19:23:35.274"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:23:42.321" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:23:44.312" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:23:44.312" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:23:44.312" starttime="20191113 19:23:42.318"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:23:44.313" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:23:44.313" starttime="20191113 19:23:44.313"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:23:44.314" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:23:44.314" starttime="20191113 19:23:44.313"></status>
</kw>
<msg timestamp="20191113 19:23:44.314" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:23:44.314" starttime="20191113 19:23:42.318"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:23:44.314" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:23:44.314" starttime="20191113 19:23:44.314"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:23:44.315" starttime="20191113 19:23:44.315"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:23:44.316" starttime="20191113 19:23:44.315"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:23:44.316" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:23:44.316" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:23:44.316" starttime="20191113 19:23:44.316"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:23:44.317" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 19:23:44.317" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:23:44.317" starttime="20191113 19:23:44.316"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:23:44.317" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 19:23:44.317" starttime="20191113 19:23:44.317"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:23:44.318" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 19:23:44.318" starttime="20191113 19:23:44.317"></status>
</kw>
<msg timestamp="20191113 19:23:44.318" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 19:23:44.318" starttime="20191113 19:23:42.317"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:23:44.319" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 19:23:44.319" starttime="20191113 19:23:44.318"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:23:44.320" starttime="20191113 19:23:44.319"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:23:44.320" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:23:45.575" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:23:45.575" starttime="20191113 19:23:44.320"></status>
</kw>
<status status="PASS" endtime="20191113 19:23:45.576" starttime="20191113 19:23:44.319"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 19:23:45.577" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 19:23:55.763" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 19:23:55.764" starttime="20191113 19:23:45.576"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 19:23:55.765" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:23:55.831" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:23:55.831" level="INFO">${shutdownMsg} = hadoop     459  0.0  0.0   9556  1168 ?        Ss   19:23   0:00 bash -c sudo ps aux | grep om
hadoop     461  0.0  0.0   9088   668 ?        S    19:23   0:00 grep om</msg>
<status status="PASS" endtime="20191113 19:23:55.831" starttime="20191113 19:23:55.764"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:23:55.897" starttime="20191113 19:23:55.832"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:23:55.898" starttime="20191113 19:23:55.898"></status>
</kw>
<msg timestamp="20191113 19:23:55.899" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 19:23:55.899" starttime="20191113 19:23:44.318"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:23:55.903" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:24:08.124" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:24:08.124" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:24:08.124" starttime="20191113 19:23:55.900"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:24:08.126" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:24:08.126" starttime="20191113 19:24:08.125"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:24:08.127" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:24:08.127" starttime="20191113 19:24:08.126"></status>
</kw>
<msg timestamp="20191113 19:24:08.128" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:24:08.128" starttime="20191113 19:23:55.899"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:24:08.129" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:24:08.129" starttime="20191113 19:24:08.128"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:24:08.130" starttime="20191113 19:24:08.129"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:24:08.131" starttime="20191113 19:24:08.130"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:24:08.132" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:24:08.132" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:24:08.132" starttime="20191113 19:24:08.131"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:24:08.133" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191113 19:24:08.133" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:24:08.133" starttime="20191113 19:24:08.132"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:24:08.134" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 19:24:08.134" starttime="20191113 19:24:08.133"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:24:08.135" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191113 19:24:08.135" starttime="20191113 19:24:08.134"></status>
</kw>
<msg timestamp="20191113 19:24:08.136" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191113 19:24:08.136" starttime="20191113 19:23:55.899"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 19:24:08.137" starttime="20191113 19:24:08.136"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 19:24:08.138" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191113 19:24:08.138" starttime="20191113 19:24:08.138"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 19:24:08.140" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191113 19:24:08.140" starttime="20191113 19:24:08.139"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 19:24:08.141" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191113 19:24:08.141" starttime="20191113 19:24:08.140"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 19:24:08.143" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 19:24:08.143" starttime="20191113 19:24:08.141"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:24:08.147" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:24:23.075" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:24:23.075" level="INFO">${output} = 2019-11-13 19:24:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191113 19:24:23.076" starttime="20191113 19:24:08.145"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:24:23.077" level="INFO">2019-11-13 19:24:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:24:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:24:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:24:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:24:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:24:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:24:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:24:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:24:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:24:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:24:20 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-13 19:24:21 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 19:24:21 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 19:24:21 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:24:23.078" starttime="20191113 19:24:23.076"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:24:23.079" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:24:23.080" starttime="20191113 19:24:23.078"></status>
</kw>
<status status="PASS" endtime="20191113 19:24:23.080" starttime="20191113 19:24:08.144"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:24:23.084" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:24:35.514" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:24:35.515" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 19:24:35.515" starttime="20191113 19:24:23.081"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:24:35.517" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 19:24:35.517" starttime="20191113 19:24:35.516"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:24:35.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:24:35.518" starttime="20191113 19:24:35.517"></status>
</kw>
<msg timestamp="20191113 19:24:35.519" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 19:24:35.519" starttime="20191113 19:24:23.080"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:24:35.520" starttime="20191113 19:24:35.519"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 19:24:35.521" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 19:24:35.521" starttime="20191113 19:24:35.520"></status>
</kw>
<status status="PASS" endtime="20191113 19:24:35.522" starttime="20191113 19:24:08.137"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:24:35.524" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 19:24:35.524" starttime="20191113 19:24:35.523"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:24:35.526" starttime="20191113 19:24:35.525"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:24:35.527" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:24:36.729" level="INFO">Read output: Last login: Wed Nov 13 19:23:44 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:24:36.729" starttime="20191113 19:24:35.526"></status>
</kw>
<status status="PASS" endtime="20191113 19:24:36.730" starttime="20191113 19:24:35.524"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 19:24:36.731" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 19:24:38.913" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 19:24:38.913" starttime="20191113 19:24:36.730"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 19:24:38.914" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:24:39.022" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:24:39.023" level="INFO">${startupMsg} = hadoop     512  350  0.0 34476516 208988 ?     Sl   19:24   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 19:24:39.023" starttime="20191113 19:24:38.914"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:24:39.056" starttime="20191113 19:24:39.023"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:24:39.057" starttime="20191113 19:24:39.056"></status>
</kw>
<status status="PASS" endtime="20191113 19:24:39.057" starttime="20191113 19:24:35.522"></status>
</kw>
<status status="PASS" endtime="20191113 19:24:39.057" critical="yes" starttime="20191113 19:23:30.205"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191113 19:24:39.062" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191113 19:24:39.063" starttime="20191113 19:24:39.059"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191113 19:24:39.066" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191113 19:24:39.066" starttime="20191113 19:24:39.063"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:24:39.069" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 19:24:39.069" starttime="20191113 19:24:39.068"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:24:39.071" starttime="20191113 19:24:39.070"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:24:39.071" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:24:40.275" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:24:40.275" starttime="20191113 19:24:39.071"></status>
</kw>
<status status="PASS" endtime="20191113 19:24:40.275" starttime="20191113 19:24:39.069"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 19:24:40.276" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 19:24:50.433" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 19:24:50.434" starttime="20191113 19:24:40.276"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 19:24:50.435" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:24:50.544" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:24:50.544" level="INFO">${shutdownMsg} = hadoop     437  0.0  0.0   9556  1164 ?        Ss   19:24   0:00 bash -c sudo ps aux | grep om
hadoop     439  0.0  0.0   9088   672 ?        S    19:24   0:00 grep om</msg>
<status status="PASS" endtime="20191113 19:24:50.544" starttime="20191113 19:24:50.434"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:24:50.609" starttime="20191113 19:24:50.544"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:24:50.610" starttime="20191113 19:24:50.610"></status>
</kw>
<status status="PASS" endtime="20191113 19:24:50.611" starttime="20191113 19:24:39.066"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:24:50.613" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 19:24:50.613" starttime="20191113 19:24:50.612"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:24:50.615" starttime="20191113 19:24:50.614"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:24:50.616" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:24:51.821" level="INFO">Read output: Last login: Wed Nov 13 19:24:39 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:24:51.821" starttime="20191113 19:24:50.616"></status>
</kw>
<status status="PASS" endtime="20191113 19:24:51.822" starttime="20191113 19:24:50.614"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 19:24:51.823" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 19:24:51.837" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:24:51.838" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 19:24:51.838" starttime="20191113 19:24:51.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 19:24:51.839" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 19:24:51.839" starttime="20191113 19:24:51.838"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 19:24:51.839" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 19:24:51.839" starttime="20191113 19:24:51.839"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 19:24:51.918" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 19:24:51.927" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 19:24:51.928" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 19:24:51.928" starttime="20191113 19:24:51.840"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 19:24:51.929" level="INFO">Length is 2</msg>
<msg timestamp="20191113 19:24:51.929" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 19:24:51.929" starttime="20191113 19:24:51.928"></status>
</kw>
<msg timestamp="20191113 19:24:51.930" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191113 19:24:51.930" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 19:24:51.930" starttime="20191113 19:24:50.611"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:24:51.934" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:24:54.135" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:24:54.135" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:24:54.135" starttime="20191113 19:24:51.931"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:24:54.137" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:24:54.137" starttime="20191113 19:24:54.136"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:24:54.139" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:24:54.139" starttime="20191113 19:24:54.138"></status>
</kw>
<msg timestamp="20191113 19:24:54.139" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:24:54.140" starttime="20191113 19:24:51.931"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:24:54.140" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:24:54.141" starttime="20191113 19:24:54.140"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:24:54.142" starttime="20191113 19:24:54.141"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:24:54.143" starttime="20191113 19:24:54.142"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:24:54.144" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:24:54.144" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:24:54.144" starttime="20191113 19:24:54.143"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:24:54.145" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191113 19:24:54.145" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:24:54.145" starttime="20191113 19:24:54.144"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:24:54.146" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 19:24:54.146" starttime="20191113 19:24:54.146"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:24:54.147" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191113 19:24:54.147" starttime="20191113 19:24:54.147"></status>
</kw>
<msg timestamp="20191113 19:24:54.148" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 19:24:54.148" starttime="20191113 19:24:51.930"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191113 19:24:54.152" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191113 19:24:54.152" starttime="20191113 19:24:54.149"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:24:54.155" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191113 19:24:54.155" starttime="20191113 19:24:54.154"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:24:54.156" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191113 19:24:54.156" starttime="20191113 19:24:54.155"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:24:54.161" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:24:59.186" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:24:59.186" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:24:59.186" starttime="20191113 19:24:54.158"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:24:59.188" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:24:59.188" starttime="20191113 19:24:59.187"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:24:59.189" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:24:59.189" starttime="20191113 19:24:59.189"></status>
</kw>
<status status="PASS" endtime="20191113 19:24:59.190" starttime="20191113 19:24:54.157"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:24:59.194" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:01.578" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:01.579" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573673096534,
  "modificationTime": 1573673098752,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:01.579" starttime="20191113 19:24:59.192"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:01.580" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573673096534,
  "modificationTime": 1573673098752,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103132240054321150,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:25:01.580" starttime="20191113 19:25:01.579"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:01.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:01.581" starttime="20191113 19:25:01.580"></status>
</kw>
<msg timestamp="20191113 19:25:01.581" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573673096534,
  "modificationTime": 1573673098752,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:01.581" starttime="20191113 19:24:59.190"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:25:01.582" starttime="20191113 19:25:01.581"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:01.582" starttime="20191113 19:24:54.156"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:01.582" starttime="20191113 19:24:54.154"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:25:01.583" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191113 19:25:01.583" starttime="20191113 19:25:01.582"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:25:01.583" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191113 19:25:01.583" starttime="20191113 19:25:01.583"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:01.587" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:05.898" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:05.898" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:25:05.898" starttime="20191113 19:25:01.585"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:05.900" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:25:05.900" starttime="20191113 19:25:05.899"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:05.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:05.902" starttime="20191113 19:25:05.901"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:05.902" starttime="20191113 19:25:01.584"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:05.907" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:08.459" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:08.459" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573673103671,
  "modificationTime": 1573673105459,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:08.460" starttime="20191113 19:25:05.904"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:08.461" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573673103671,
  "modificationTime": 1573673105459,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103132240522117120,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:25:08.462" starttime="20191113 19:25:08.460"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:08.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:08.463" starttime="20191113 19:25:08.462"></status>
</kw>
<msg timestamp="20191113 19:25:08.463" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573673103671,
  "modificationTime": 1573673105459,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:08.463" starttime="20191113 19:25:05.902"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:25:08.464" starttime="20191113 19:25:08.464"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:08.465" starttime="20191113 19:25:01.584"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:08.465" starttime="20191113 19:25:01.582"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:25:08.466" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191113 19:25:08.466" starttime="20191113 19:25:08.465"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:25:08.467" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191113 19:25:08.467" starttime="20191113 19:25:08.467"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:08.473" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:13.079" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:13.079" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:25:13.079" starttime="20191113 19:25:08.470"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:13.081" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:25:13.081" starttime="20191113 19:25:13.080"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:13.082" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:13.083" starttime="20191113 19:25:13.082"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:13.083" starttime="20191113 19:25:08.469"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:13.089" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:15.514" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:15.514" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573673110753,
  "modificationTime": 1573673112644,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:15.514" starttime="20191113 19:25:13.086"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:15.515" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573673110753,
  "modificationTime": 1573673112644,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103132240986177540,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:25:15.515" starttime="20191113 19:25:15.515"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:15.516" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:15.516" starttime="20191113 19:25:15.516"></status>
</kw>
<msg timestamp="20191113 19:25:15.516" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573673110753,
  "modificationTime": 1573673112644,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:15.516" starttime="20191113 19:25:13.084"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:25:15.517" starttime="20191113 19:25:15.517"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:15.517" starttime="20191113 19:25:08.468"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:15.517" starttime="20191113 19:25:08.465"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:25:15.518" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191113 19:25:15.518" starttime="20191113 19:25:15.518"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:25:15.519" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191113 19:25:15.519" starttime="20191113 19:25:15.518"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:15.522" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:19.968" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:19.968" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:25:19.969" starttime="20191113 19:25:15.520"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:19.970" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:25:19.970" starttime="20191113 19:25:19.969"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:19.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:19.971" starttime="20191113 19:25:19.971"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:19.972" starttime="20191113 19:25:15.519"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:19.976" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:22.404" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:22.404" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573673117779,
  "modificationTime": 1573673119543,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:22.404" starttime="20191113 19:25:19.974"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:22.405" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573673117779,
  "modificationTime": 1573673119543,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103132241446633470,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:25:22.405" starttime="20191113 19:25:22.404"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:22.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:22.406" starttime="20191113 19:25:22.405"></status>
</kw>
<msg timestamp="20191113 19:25:22.406" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573673117779,
  "modificationTime": 1573673119543,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:22.406" starttime="20191113 19:25:19.972"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:25:22.407" starttime="20191113 19:25:22.406"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:22.407" starttime="20191113 19:25:15.519"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:22.407" starttime="20191113 19:25:15.517"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:25:22.409" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 19:25:22.409" starttime="20191113 19:25:22.408"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:25:22.410" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 19:25:22.410" starttime="20191113 19:25:22.409"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:22.415" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:26.896" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:26.896" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:25:26.896" starttime="20191113 19:25:22.412"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:26.897" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:25:26.897" starttime="20191113 19:25:26.897"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:26.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:26.898" starttime="20191113 19:25:26.898"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:26.899" starttime="20191113 19:25:22.411"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:26.903" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:30.230" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:30.231" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573673124591,
  "modificationTime": 1573673126484,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:30.231" starttime="20191113 19:25:26.901"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:30.233" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573673124591,
  "modificationTime": 1573673126484,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103132241893130240,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:25:30.233" starttime="20191113 19:25:30.232"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:30.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:30.235" starttime="20191113 19:25:30.234"></status>
</kw>
<msg timestamp="20191113 19:25:30.236" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573673124591,
  "modificationTime": 1573673126484,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:30.236" starttime="20191113 19:25:26.899"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:25:30.237" starttime="20191113 19:25:30.236"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:30.237" starttime="20191113 19:25:22.410"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:30.237" starttime="20191113 19:25:22.408"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:30.237" starttime="20191113 19:24:54.153"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:30.238" starttime="20191113 19:24:54.152"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:25:30.240" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 19:25:30.241" starttime="20191113 19:25:30.239"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:25:30.243" starttime="20191113 19:25:30.242"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:25:30.245" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:25:31.451" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:25:31.451" starttime="20191113 19:25:30.244"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:31.452" starttime="20191113 19:25:30.241"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 19:25:31.453" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 19:25:31.469" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:25:31.470" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 19:25:31.470" starttime="20191113 19:25:31.452"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 19:25:31.471" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 19:25:31.471" starttime="20191113 19:25:31.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 19:25:31.472" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 19:25:31.472" starttime="20191113 19:25:31.471"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 19:25:31.561" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 19:25:31.568" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 19:25:31.569" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 19:25:31.569" starttime="20191113 19:25:31.472"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 19:25:31.570" level="INFO">Length is 2</msg>
<msg timestamp="20191113 19:25:31.570" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 19:25:31.570" starttime="20191113 19:25:31.569"></status>
</kw>
<msg timestamp="20191113 19:25:31.571" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191113 19:25:31.571" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 19:25:31.571" starttime="20191113 19:25:30.238"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:25:31.572" starttime="20191113 19:25:31.571"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:31.572" starttime="20191113 19:24:54.149"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191113 19:25:31.573" level="INFO">${keyPrefix} = testOMRestart_1</msg>
<status status="PASS" endtime="20191113 19:25:31.573" starttime="20191113 19:25:31.572"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:25:31.576" level="INFO">${tmpKey} = testOMRestart_1_0</msg>
<status status="PASS" endtime="20191113 19:25:31.576" starttime="20191113 19:25:31.575"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:25:31.577" level="INFO">testOMRestart_1_0</msg>
<status status="PASS" endtime="20191113 19:25:31.577" starttime="20191113 19:25:31.577"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:31.581" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:35.878" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:35.878" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:25:35.878" starttime="20191113 19:25:31.579"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:35.879" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:25:35.879" starttime="20191113 19:25:35.878"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:35.880" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:35.880" starttime="20191113 19:25:35.879"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:35.880" starttime="20191113 19:25:31.578"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:35.883" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:38.240" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:38.240" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573673133739,
  "modificationTime": 1573673135436,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:38.240" starttime="20191113 19:25:35.881"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:38.241" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573673133739,
  "modificationTime": 1573673135436,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103132242492653570,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:25:38.242" starttime="20191113 19:25:38.241"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:38.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:38.242" starttime="20191113 19:25:38.242"></status>
</kw>
<msg timestamp="20191113 19:25:38.243" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573673133739,
  "modificationTime": 1573673135436,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:38.243" starttime="20191113 19:25:35.880"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:25:38.244" starttime="20191113 19:25:38.243"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:38.244" starttime="20191113 19:25:31.577"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:38.244" starttime="20191113 19:25:31.575"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:25:38.246" level="INFO">${tmpKey} = testOMRestart_1_1</msg>
<status status="PASS" endtime="20191113 19:25:38.246" starttime="20191113 19:25:38.245"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:25:38.247" level="INFO">testOMRestart_1_1</msg>
<status status="PASS" endtime="20191113 19:25:38.247" starttime="20191113 19:25:38.246"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:38.252" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:42.637" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:42.638" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:25:42.638" starttime="20191113 19:25:38.249"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:42.640" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:25:42.640" starttime="20191113 19:25:42.639"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:42.641" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:42.641" starttime="20191113 19:25:42.640"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:42.642" starttime="20191113 19:25:38.248"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:42.647" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:44.958" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:44.959" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573673140374,
  "modificationTime": 1573673142205,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:44.959" starttime="20191113 19:25:42.644"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:44.960" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573673140374,
  "modificationTime": 1573673142205,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 8,
      "localID": 103132242927419400,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:25:44.960" starttime="20191113 19:25:44.959"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:44.960" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:44.960" starttime="20191113 19:25:44.960"></status>
</kw>
<msg timestamp="20191113 19:25:44.961" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573673140374,
  "modificationTime": 1573673142205,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:44.961" starttime="20191113 19:25:42.642"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:25:44.962" starttime="20191113 19:25:44.961"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:44.962" starttime="20191113 19:25:38.247"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:44.962" starttime="20191113 19:25:38.245"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:25:44.964" level="INFO">${tmpKey} = testOMRestart_1_2</msg>
<status status="PASS" endtime="20191113 19:25:44.964" starttime="20191113 19:25:44.963"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:25:44.964" level="INFO">testOMRestart_1_2</msg>
<status status="PASS" endtime="20191113 19:25:44.964" starttime="20191113 19:25:44.964"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:44.967" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:49.836" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:49.836" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:25:49.836" starttime="20191113 19:25:44.966"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:49.838" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:25:49.838" starttime="20191113 19:25:49.837"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:49.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:49.839" starttime="20191113 19:25:49.838"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:49.840" starttime="20191113 19:25:44.965"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:49.845" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:52.204" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:52.204" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573673147122,
  "modificationTime": 1573673149416,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:52.205" starttime="20191113 19:25:49.842"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:52.207" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573673147122,
  "modificationTime": 1573673149416,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 9,
      "localID": 103132243369721870,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:25:52.207" starttime="20191113 19:25:52.206"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:52.208" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:52.208" starttime="20191113 19:25:52.207"></status>
</kw>
<msg timestamp="20191113 19:25:52.209" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573673147122,
  "modificationTime": 1573673149416,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:52.209" starttime="20191113 19:25:49.840"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:25:52.210" starttime="20191113 19:25:52.209"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:52.210" starttime="20191113 19:25:44.964"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:52.211" starttime="20191113 19:25:44.963"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:25:52.212" level="INFO">${tmpKey} = testOMRestart_1_3</msg>
<status status="PASS" endtime="20191113 19:25:52.213" starttime="20191113 19:25:52.211"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:25:52.214" level="INFO">testOMRestart_1_3</msg>
<status status="PASS" endtime="20191113 19:25:52.214" starttime="20191113 19:25:52.213"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:52.220" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:56.505" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:56.505" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:25:56.506" starttime="20191113 19:25:52.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:56.507" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:25:56.507" starttime="20191113 19:25:56.506"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:56.508" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:56.508" starttime="20191113 19:25:56.507"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:56.508" starttime="20191113 19:25:52.216"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:56.512" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:25:58.843" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:25:58.843" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573673154327,
  "modificationTime": 1573673156081,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:58.843" starttime="20191113 19:25:56.510"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:25:58.845" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573673154327,
  "modificationTime": 1573673156081,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103132243841843220,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:25:58.845" starttime="20191113 19:25:58.844"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:25:58.847" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:25:58.847" starttime="20191113 19:25:58.846"></status>
</kw>
<msg timestamp="20191113 19:25:58.848" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573673154327,
  "modificationTime": 1573673156081,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:25:58.848" starttime="20191113 19:25:56.509"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:25:58.849" starttime="20191113 19:25:58.848"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:58.849" starttime="20191113 19:25:52.214"></status>
</kw>
<status status="PASS" endtime="20191113 19:25:58.849" starttime="20191113 19:25:52.211"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:25:58.851" level="INFO">${tmpKey} = testOMRestart_1_4</msg>
<status status="PASS" endtime="20191113 19:25:58.851" starttime="20191113 19:25:58.850"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:25:58.852" level="INFO">testOMRestart_1_4</msg>
<status status="PASS" endtime="20191113 19:25:58.852" starttime="20191113 19:25:58.851"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:25:58.857" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:26:03.273" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:26:03.274" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:26:03.274" starttime="20191113 19:25:58.854"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:26:03.275" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:26:03.276" starttime="20191113 19:26:03.275"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:26:03.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:26:03.277" starttime="20191113 19:26:03.276"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:03.277" starttime="20191113 19:25:58.853"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:26:03.284" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:26:05.685" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:26:05.685" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573673161107,
  "modificationTime": 1573673162846,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:26:05.685" starttime="20191113 19:26:03.279"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:26:05.688" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573673161107,
  "modificationTime": 1573673162846,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103132244286177300,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:26:05.689" starttime="20191113 19:26:05.687"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:26:05.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:26:05.690" starttime="20191113 19:26:05.689"></status>
</kw>
<msg timestamp="20191113 19:26:05.690" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573673161107,
  "modificationTime": 1573673162846,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:26:05.690" starttime="20191113 19:26:03.278"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:26:05.691" starttime="20191113 19:26:05.691"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:05.691" starttime="20191113 19:25:58.852"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:05.691" starttime="20191113 19:25:58.850"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:05.692" starttime="20191113 19:25:31.574"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:05.692" starttime="20191113 19:25:31.573"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:26:05.694" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 19:26:05.694" starttime="20191113 19:26:05.693"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:26:05.696" starttime="20191113 19:26:05.695"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:26:05.697" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:26:06.907" level="INFO">Read output: Last login: Wed Nov 13 19:25:30 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:26:06.908" starttime="20191113 19:26:05.696"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:06.908" starttime="20191113 19:26:05.694"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 19:26:06.909" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 19:26:06.923" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:26:06.923" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 19:26:06.923" starttime="20191113 19:26:06.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 19:26:06.924" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 19:26:06.924" starttime="20191113 19:26:06.924"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 19:26:06.925" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 19:26:06.925" starttime="20191113 19:26:06.924"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 19:26:07.005" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 19:26:07.017" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 19:26:07.018" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 19:26:07.018" starttime="20191113 19:26:06.925"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 19:26:07.019" level="INFO">Length is 2</msg>
<msg timestamp="20191113 19:26:07.019" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 19:26:07.019" starttime="20191113 19:26:07.018"></status>
</kw>
<msg timestamp="20191113 19:26:07.020" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191113 19:26:07.020" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 19:26:07.020" starttime="20191113 19:26:05.692"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:26:07.022" starttime="20191113 19:26:07.021"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:07.022" starttime="20191113 19:25:31.572"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191113 19:26:07.023" level="INFO">${keyPrefix} = testOMRestart_2</msg>
<status status="PASS" endtime="20191113 19:26:07.024" starttime="20191113 19:26:07.023"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:26:07.026" level="INFO">${tmpKey} = testOMRestart_2_0</msg>
<status status="PASS" endtime="20191113 19:26:07.026" starttime="20191113 19:26:07.026"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:26:07.027" level="INFO">testOMRestart_2_0</msg>
<status status="PASS" endtime="20191113 19:26:07.027" starttime="20191113 19:26:07.027"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:26:07.032" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:26:11.405" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:26:11.405" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:26:11.405" starttime="20191113 19:26:07.030"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:26:11.406" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:26:11.407" starttime="20191113 19:26:11.406"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:26:11.407" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:26:11.407" starttime="20191113 19:26:11.407"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:11.408" starttime="20191113 19:26:07.028"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:26:11.411" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:26:13.740" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:26:13.740" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573673169314,
  "modificationTime": 1573673170983,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:26:13.740" starttime="20191113 19:26:11.409"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:26:13.741" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573673169314,
  "modificationTime": 1573673170983,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103132244824031250,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:26:13.741" starttime="20191113 19:26:13.740"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:26:13.742" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:26:13.742" starttime="20191113 19:26:13.742"></status>
</kw>
<msg timestamp="20191113 19:26:13.743" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573673169314,
  "modificationTime": 1573673170983,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:26:13.743" starttime="20191113 19:26:11.408"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:26:13.743" starttime="20191113 19:26:13.743"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:13.744" starttime="20191113 19:26:07.028"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:13.744" starttime="20191113 19:26:07.025"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:26:13.745" level="INFO">${tmpKey} = testOMRestart_2_1</msg>
<status status="PASS" endtime="20191113 19:26:13.745" starttime="20191113 19:26:13.744"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:26:13.745" level="INFO">testOMRestart_2_1</msg>
<status status="PASS" endtime="20191113 19:26:13.745" starttime="20191113 19:26:13.745"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:26:13.750" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:26:35.475" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:26:35.475" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:26:35.475" starttime="20191113 19:26:13.748"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:26:35.476" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:26:35.476" starttime="20191113 19:26:35.476"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:26:35.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:26:35.477" starttime="20191113 19:26:35.477"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:35.477" starttime="20191113 19:26:13.747"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:26:35.481" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:26:38.482" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:26:38.482" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573673175985,
  "modificationTime": 1573673194936,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:26:38.482" starttime="20191113 19:26:35.479"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:26:38.484" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573673175985,
  "modificationTime": 1573673194936,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 10,
      "localID": 103132245261287440,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:26:38.484" starttime="20191113 19:26:38.483"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:26:38.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:26:38.486" starttime="20191113 19:26:38.485"></status>
</kw>
<msg timestamp="20191113 19:26:38.487" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573673175985,
  "modificationTime": 1573673194936,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:26:38.487" starttime="20191113 19:26:35.478"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:26:38.488" starttime="20191113 19:26:38.487"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:38.488" starttime="20191113 19:26:13.746"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:38.488" starttime="20191113 19:26:13.744"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:26:38.489" level="INFO">${tmpKey} = testOMRestart_2_2</msg>
<status status="PASS" endtime="20191113 19:26:38.490" starttime="20191113 19:26:38.489"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:26:38.490" level="INFO">testOMRestart_2_2</msg>
<status status="PASS" endtime="20191113 19:26:38.491" starttime="20191113 19:26:38.490"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:26:38.496" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:26:42.915" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:26:42.915" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:26:42.915" starttime="20191113 19:26:38.493"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:26:42.917" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:26:42.917" starttime="20191113 19:26:42.916"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:26:42.918" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:26:42.919" starttime="20191113 19:26:42.918"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:42.919" starttime="20191113 19:26:38.492"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:26:42.925" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:26:45.254" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:26:45.255" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573673200779,
  "modificationTime": 1573673202497,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:26:45.255" starttime="20191113 19:26:42.922"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:26:45.257" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573673200779,
  "modificationTime": 1573673202497,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 2,
      "localID": 103132246886121490,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:26:45.257" starttime="20191113 19:26:45.256"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:26:45.258" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:26:45.258" starttime="20191113 19:26:45.257"></status>
</kw>
<msg timestamp="20191113 19:26:45.259" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573673200779,
  "modificationTime": 1573673202497,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:26:45.259" starttime="20191113 19:26:42.920"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:26:45.260" starttime="20191113 19:26:45.259"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:45.260" starttime="20191113 19:26:38.491"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:45.260" starttime="20191113 19:26:38.488"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:26:45.262" level="INFO">${tmpKey} = testOMRestart_2_3</msg>
<status status="PASS" endtime="20191113 19:26:45.262" starttime="20191113 19:26:45.261"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:26:45.263" level="INFO">testOMRestart_2_3</msg>
<status status="PASS" endtime="20191113 19:26:45.263" starttime="20191113 19:26:45.262"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:26:45.269" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:26:52.340" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:26:52.340" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:26:52.340" starttime="20191113 19:26:45.266"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:26:52.342" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:26:52.343" starttime="20191113 19:26:52.341"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:26:52.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:26:52.344" starttime="20191113 19:26:52.343"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:52.345" starttime="20191113 19:26:45.265"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:26:52.350" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:26:55.481" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:26:55.481" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573673207535,
  "modificationTime": 1573673209920,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:26:55.482" starttime="20191113 19:26:52.347"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:26:55.483" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573673207535,
  "modificationTime": 1573673209920,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 8,
      "localID": 103132247328882700,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:26:55.484" starttime="20191113 19:26:55.482"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:26:55.484" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:26:55.485" starttime="20191113 19:26:55.484"></status>
</kw>
<msg timestamp="20191113 19:26:55.485" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573673207535,
  "modificationTime": 1573673209920,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:26:55.485" starttime="20191113 19:26:52.345"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:26:55.486" starttime="20191113 19:26:55.486"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:55.487" starttime="20191113 19:26:45.263"></status>
</kw>
<status status="PASS" endtime="20191113 19:26:55.487" starttime="20191113 19:26:45.260"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 19:26:55.488" level="INFO">${tmpKey} = testOMRestart_2_4</msg>
<status status="PASS" endtime="20191113 19:26:55.488" starttime="20191113 19:26:55.487"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 19:26:55.489" level="INFO">testOMRestart_2_4</msg>
<status status="PASS" endtime="20191113 19:26:55.489" starttime="20191113 19:26:55.488"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:26:55.494" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:27:00.737" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:27:00.738" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 19:27:00.738" starttime="20191113 19:26:55.491"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:27:00.740" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:27:00.740" starttime="20191113 19:27:00.739"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:27:00.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:27:00.742" starttime="20191113 19:27:00.741"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:00.742" starttime="20191113 19:26:55.490"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:27:00.748" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:27:03.064" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:27:03.065" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573673217526,
  "modificationTime": 1573673219408,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:27:03.065" starttime="20191113 19:27:00.745"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:27:03.067" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573673217526,
  "modificationTime": 1573673219408,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103132247983718420,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 19:27:03.067" starttime="20191113 19:27:03.066"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:27:03.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:27:03.068" starttime="20191113 19:27:03.067"></status>
</kw>
<msg timestamp="20191113 19:27:03.069" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573673217526,
  "modificationTime": 1573673219408,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 19:27:03.069" starttime="20191113 19:27:00.743"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:03.070" starttime="20191113 19:27:03.069"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:03.070" starttime="20191113 19:26:55.489"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:03.070" starttime="20191113 19:26:55.487"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:03.070" starttime="20191113 19:26:07.025"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:03.071" starttime="20191113 19:26:07.024"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:27:03.073" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 19:27:03.073" starttime="20191113 19:27:03.072"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:03.076" starttime="20191113 19:27:03.074"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:27:03.077" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:27:04.281" level="INFO">Read output: Last login: Wed Nov 13 19:26:05 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:27:04.282" starttime="20191113 19:27:03.076"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:04.282" starttime="20191113 19:27:03.073"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 19:27:04.283" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 19:27:04.298" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:27:04.298" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 19:27:04.299" starttime="20191113 19:27:04.283"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 19:27:04.299" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 19:27:04.299" starttime="20191113 19:27:04.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 19:27:04.300" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 19:27:04.301" starttime="20191113 19:27:04.300"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 19:27:04.381" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 19:27:04.391" level="INFO">3 files:
log_0-10
log_11-70
log_inprogress_71</msg>
<msg timestamp="20191113 19:27:04.392" level="INFO">@{logs} = [ log_0-10 | log_11-70 | log_inprogress_71 ]</msg>
<status status="PASS" endtime="20191113 19:27:04.392" starttime="20191113 19:27:04.301"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 19:27:04.393" level="INFO">Length is 3</msg>
<msg timestamp="20191113 19:27:04.393" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191113 19:27:04.393" starttime="20191113 19:27:04.392"></status>
</kw>
<msg timestamp="20191113 19:27:04.394" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191113 19:27:04.394" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-70', u'log_inprogress_71'] ]</msg>
<status status="PASS" endtime="20191113 19:27:04.394" starttime="20191113 19:27:03.071"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191113 19:27:04.395" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191113 19:27:04.396" starttime="20191113 19:27:04.395"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:04.396" starttime="20191113 19:26:07.022"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:04.396" starttime="20191113 19:24:54.148"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:04.397" starttime="20191113 19:27:04.396"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:27:04.399" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 19:27:04.399" starttime="20191113 19:27:04.398"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:04.401" starttime="20191113 19:27:04.400"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:27:04.402" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:27:05.590" level="INFO">Read output: Last login: Wed Nov 13 19:24:50 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:27:05.591" starttime="20191113 19:27:04.401"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:05.591" starttime="20191113 19:27:04.399"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 19:27:05.592" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 19:27:07.903" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 19:27:07.903" starttime="20191113 19:27:05.591"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 19:27:07.904" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:27:08.011" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:27:08.012" level="INFO">${startupMsg} = hadoop     512  225  0.0 34477488 214228 ?     Sl   19:27   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 19:27:08.012" starttime="20191113 19:27:07.903"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:27:08.076" starttime="20191113 19:27:08.012"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:08.078" starttime="20191113 19:27:08.077"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:08.078" starttime="20191113 19:27:04.397"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:27:08.080" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 19:27:08.080" starttime="20191113 19:27:08.080"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:08.082" starttime="20191113 19:27:08.081"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:27:08.083" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:27:09.281" level="INFO">Read output: Last login: Wed Nov 13 19:27:04 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:27:09.281" starttime="20191113 19:27:08.082"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:09.282" starttime="20191113 19:27:08.081"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 19:27:09.283" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 19:27:09.298" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:27:09.298" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 19:27:09.298" starttime="20191113 19:27:09.282"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 19:27:09.299" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 19:27:09.300" starttime="20191113 19:27:09.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 19:27:09.301" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 19:27:09.301" starttime="20191113 19:27:09.300"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 19:27:09.381" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 19:27:09.391" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 19:27:09.392" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 19:27:09.392" starttime="20191113 19:27:09.301"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 19:27:09.393" level="INFO">Length is 2</msg>
<msg timestamp="20191113 19:27:09.393" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 19:27:09.393" starttime="20191113 19:27:09.393"></status>
</kw>
<msg timestamp="20191113 19:27:09.394" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191113 19:27:09.394" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 19:27:09.394" starttime="20191113 19:27:08.079"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:09.395" starttime="20191113 19:27:09.395"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191113 19:27:10.396" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191113 19:27:10.397" starttime="20191113 19:27:09.396"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:10.397" starttime="20191113 19:27:08.078"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:27:10.399" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 19:27:10.399" starttime="20191113 19:27:10.398"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:10.401" starttime="20191113 19:27:10.400"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:27:10.402" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:27:11.590" level="INFO">Read output: Last login: Wed Nov 13 19:27:08 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:27:11.591" starttime="20191113 19:27:10.401"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:11.591" starttime="20191113 19:27:10.399"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 19:27:11.592" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 19:27:11.607" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:27:11.608" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 19:27:11.608" starttime="20191113 19:27:11.591"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 19:27:11.609" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 19:27:11.609" starttime="20191113 19:27:11.608"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 19:27:11.610" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 19:27:11.610" starttime="20191113 19:27:11.609"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 19:27:11.688" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 19:27:11.696" level="INFO">3 files:
log_0-10
log_11-70
log_inprogress_71</msg>
<msg timestamp="20191113 19:27:11.696" level="INFO">@{logs} = [ log_0-10 | log_11-70 | log_inprogress_71 ]</msg>
<status status="PASS" endtime="20191113 19:27:11.696" starttime="20191113 19:27:11.610"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 19:27:11.697" level="INFO">Length is 3</msg>
<msg timestamp="20191113 19:27:11.698" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191113 19:27:11.698" starttime="20191113 19:27:11.697"></status>
</kw>
<msg timestamp="20191113 19:27:11.698" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191113 19:27:11.698" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-70', u'log_inprogress_71'] ]</msg>
<status status="PASS" endtime="20191113 19:27:11.698" starttime="20191113 19:27:10.397"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191113 19:27:11.699" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191113 19:27:11.700" starttime="20191113 19:27:11.699"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:11.700" starttime="20191113 19:27:10.397"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:11.700" starttime="20191113 19:27:08.078"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:11.701" starttime="20191113 19:27:11.700"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:11.702" starttime="20191113 19:27:11.701"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:11.702" critical="yes" starttime="20191113 19:24:39.058"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:27:11.707" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:27:13.740" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:27:13.740" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:27:13.741" starttime="20191113 19:27:11.705"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:27:13.742" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:27:13.742" starttime="20191113 19:27:13.741"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:27:13.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:27:13.743" starttime="20191113 19:27:13.742"></status>
</kw>
<msg timestamp="20191113 19:27:13.743" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:27:13.743" starttime="20191113 19:27:11.704"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:27:13.744" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:27:13.744" starttime="20191113 19:27:13.744"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:13.745" starttime="20191113 19:27:13.744"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:13.746" starttime="20191113 19:27:13.745"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:27:13.747" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:27:13.747" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:27:13.747" starttime="20191113 19:27:13.746"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:27:13.748" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191113 19:27:13.748" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:27:13.748" starttime="20191113 19:27:13.747"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:27:13.749" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 19:27:13.749" starttime="20191113 19:27:13.748"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:27:13.750" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191113 19:27:13.750" starttime="20191113 19:27:13.749"></status>
</kw>
<msg timestamp="20191113 19:27:13.750" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 19:27:13.750" starttime="20191113 19:27:11.704"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:27:13.752" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 19:27:13.752" starttime="20191113 19:27:13.751"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:13.754" starttime="20191113 19:27:13.753"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:27:13.755" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:27:14.954" level="INFO">Read output: Last login: Wed Nov 13 19:27:03 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:27:14.955" starttime="20191113 19:27:13.754"></status>
</kw>
<status status="PASS" endtime="20191113 19:27:14.955" starttime="20191113 19:27:13.753"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 19:27:14.956" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 19:27:25.129" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 19:27:25.130" starttime="20191113 19:27:14.956"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 19:27:25.131" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:27:25.239" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:27:25.240" level="INFO">${shutdownMsg} = hadoop     595  0.0  0.0   9556  1168 ?        Ss   19:27   0:00 bash -c sudo ps aux | grep om
hadoop     597  0.0  0.0   9088   668 ?        S    19:27   0:00 grep om</msg>
<status status="PASS" endtime="20191113 19:27:25.240" starttime="20191113 19:27:25.131"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:27:25.305" starttime="20191113 19:27:25.240"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:25.307" starttime="20191113 19:27:25.306"></status>
</kw>
<msg timestamp="20191113 19:27:25.307" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 19:27:25.307" starttime="20191113 19:27:13.751"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:27:25.312" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:27:28.502" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:27:28.503" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:27:28.503" starttime="20191113 19:27:25.309"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:27:28.505" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:27:28.505" starttime="20191113 19:27:28.504"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:27:28.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:27:28.506" starttime="20191113 19:27:28.505"></status>
</kw>
<msg timestamp="20191113 19:27:28.507" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:27:28.507" starttime="20191113 19:27:25.308"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:27:28.507" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:27:28.508" starttime="20191113 19:27:28.507"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:28.509" starttime="20191113 19:27:28.508"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:28.509" starttime="20191113 19:27:28.509"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:27:28.510" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:27:28.510" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:27:28.511" starttime="20191113 19:27:28.510"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:27:28.512" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 19:27:28.512" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:27:28.512" starttime="20191113 19:27:28.511"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:27:28.514" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 19:27:28.514" starttime="20191113 19:27:28.512"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:27:28.515" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 19:27:28.515" starttime="20191113 19:27:28.514"></status>
</kw>
<msg timestamp="20191113 19:27:28.515" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191113 19:27:28.515" starttime="20191113 19:27:25.307"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 19:27:28.516" starttime="20191113 19:27:28.516"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 19:27:28.518" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191113 19:27:28.518" starttime="20191113 19:27:28.517"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 19:27:28.519" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191113 19:27:28.519" starttime="20191113 19:27:28.518"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 19:27:28.520" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191113 19:27:28.520" starttime="20191113 19:27:28.520"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 19:27:28.522" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 19:27:28.523" starttime="20191113 19:27:28.520"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:27:28.526" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:28:01.214" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:28:01.214" level="INFO">${output} = 2019-11-13 19:27:33 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 19:27:34 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 19:28:01.215" starttime="20191113 19:27:28.524"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:28:01.217" level="INFO">2019-11-13 19:27:33 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 19:27:34 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 19:27:34 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:28:01.217" starttime="20191113 19:28:01.216"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:28:01.218" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:28:01.218" starttime="20191113 19:28:01.217"></status>
</kw>
<status status="PASS" endtime="20191113 19:28:01.219" starttime="20191113 19:27:28.523"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:28:01.224" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:28:04.057" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:28:04.057" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOM...</msg>
<status status="PASS" endtime="20191113 19:28:04.057" starttime="20191113 19:28:01.221"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:28:04.059" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191113 19:28:04.060" starttime="20191113 19:28:04.058"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:28:04.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:28:04.061" starttime="20191113 19:28:04.060"></status>
</kw>
<msg timestamp="20191113 19:28:04.062" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOM...</msg>
<status status="PASS" endtime="20191113 19:28:04.062" starttime="20191113 19:28:01.219"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:04.063" starttime="20191113 19:28:04.062"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 19:28:04.064" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 19:28:04.064" starttime="20191113 19:28:04.063"></status>
</kw>
<status status="PASS" endtime="20191113 19:28:04.065" starttime="20191113 19:27:28.517"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:28:04.067" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 19:28:04.067" starttime="20191113 19:28:04.066"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:04.069" starttime="20191113 19:28:04.068"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:28:04.070" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:28:05.276" level="INFO">Read output: Last login: Wed Nov 13 19:27:13 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:28:05.277" starttime="20191113 19:28:04.069"></status>
</kw>
<status status="PASS" endtime="20191113 19:28:05.277" starttime="20191113 19:28:04.067"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 19:28:05.278" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 19:28:07.450" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 19:28:07.450" starttime="20191113 19:28:05.277"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 19:28:07.451" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:28:07.561" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:28:07.561" level="INFO">${startupMsg} = hadoop     648  367  0.0 34478564 232172 ?     Sl   19:28   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 19:28:07.561" starttime="20191113 19:28:07.451"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:28:07.626" starttime="20191113 19:28:07.562"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:07.627" starttime="20191113 19:28:07.626"></status>
</kw>
<status status="PASS" endtime="20191113 19:28:07.627" starttime="20191113 19:28:04.065"></status>
</kw>
<status status="PASS" endtime="20191113 19:28:07.627" starttime="20191113 19:27:11.704"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:28:07.631" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:28:10.460" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:28:10.461" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:10.461" starttime="20191113 19:28:07.629"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:28:10.463" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:10.463" starttime="20191113 19:28:10.462"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:28:10.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:28:10.464" starttime="20191113 19:28:10.463"></status>
</kw>
<msg timestamp="20191113 19:28:10.465" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:10.465" starttime="20191113 19:28:07.628"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:28:10.466" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:10.466" starttime="20191113 19:28:10.466"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:10.468" starttime="20191113 19:28:10.467"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:10.469" starttime="20191113 19:28:10.468"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:28:10.470" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:28:10.470" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:10.470" starttime="20191113 19:28:10.469"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:28:10.472" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 19:28:10.472" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:28:10.472" starttime="20191113 19:28:10.471"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:28:10.473" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 19:28:10.473" starttime="20191113 19:28:10.473"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:28:10.474" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 19:28:10.474" starttime="20191113 19:28:10.474"></status>
</kw>
<msg timestamp="20191113 19:28:10.475" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 19:28:10.475" starttime="20191113 19:28:07.628"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:28:10.477" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 19:28:10.478" starttime="20191113 19:28:10.477"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:10.479" starttime="20191113 19:28:10.478"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:28:10.481" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:28:11.754" level="INFO">Read output: Last login: Wed Nov 13 19:27:10 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:28:11.755" starttime="20191113 19:28:10.480"></status>
</kw>
<status status="PASS" endtime="20191113 19:28:11.755" starttime="20191113 19:28:10.478"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 19:28:11.756" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 19:28:12.905" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 19:28:12.905" starttime="20191113 19:28:11.756"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 19:28:12.906" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:28:13.016" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:28:13.016" level="INFO">${shutdownMsg} = hadoop    1062  0.0  0.0   9556  1168 ?        Ss   19:28   0:00 bash -c sudo ps aux | grep om
hadoop    1064  0.0  0.0   9088   672 ?        S    19:28   0:00 grep om</msg>
<status status="PASS" endtime="20191113 19:28:13.016" starttime="20191113 19:28:12.906"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:28:13.049" starttime="20191113 19:28:13.016"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:13.051" starttime="20191113 19:28:13.050"></status>
</kw>
<msg timestamp="20191113 19:28:13.051" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 19:28:13.051" starttime="20191113 19:28:10.475"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:28:13.055" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:28:35.346" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:28:35.347" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:35.347" starttime="20191113 19:28:13.052"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:28:35.348" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:35.348" starttime="20191113 19:28:35.347"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:28:35.349" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:28:35.349" starttime="20191113 19:28:35.349"></status>
</kw>
<msg timestamp="20191113 19:28:35.350" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:35.350" starttime="20191113 19:28:13.052"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:28:35.350" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:35.350" starttime="20191113 19:28:35.350"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:35.351" starttime="20191113 19:28:35.351"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:35.351" starttime="20191113 19:28:35.351"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:28:35.352" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:28:35.352" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:35.352" starttime="20191113 19:28:35.352"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:28:35.353" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 19:28:35.353" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:28:35.353" starttime="20191113 19:28:35.352"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:28:35.354" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 19:28:35.354" starttime="20191113 19:28:35.353"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:28:35.354" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 19:28:35.354" starttime="20191113 19:28:35.354"></status>
</kw>
<msg timestamp="20191113 19:28:35.355" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191113 19:28:35.355" starttime="20191113 19:28:13.051"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:35.355" starttime="20191113 19:28:35.355"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 19:28:35.356" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191113 19:28:35.357" starttime="20191113 19:28:35.356"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 19:28:35.357" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191113 19:28:35.358" starttime="20191113 19:28:35.357"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 19:28:35.358" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191113 19:28:35.358" starttime="20191113 19:28:35.358"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 19:28:35.360" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 19:28:35.360" starttime="20191113 19:28:35.359"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:28:35.363" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:28:39.573" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:28:39.573" level="INFO">${output} = 2019-11-13 19:28:37 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 19:28:38 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 19:28:39.573" starttime="20191113 19:28:35.361"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:28:39.575" level="INFO">2019-11-13 19:28:37 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 19:28:38 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 19:28:38 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:28:39.575" starttime="20191113 19:28:39.574"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:28:39.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:28:39.576" starttime="20191113 19:28:39.575"></status>
</kw>
<status status="PASS" endtime="20191113 19:28:39.576" starttime="20191113 19:28:35.360"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:28:39.580" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:28:43.830" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:28:43.831" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_...</msg>
<status status="PASS" endtime="20191113 19:28:43.831" starttime="20191113 19:28:39.578"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:28:43.832" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191113 19:28:43.832" starttime="20191113 19:28:43.831"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:28:43.833" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:28:43.833" starttime="20191113 19:28:43.832"></status>
</kw>
<msg timestamp="20191113 19:28:43.834" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_...</msg>
<status status="PASS" endtime="20191113 19:28:43.834" starttime="20191113 19:28:39.577"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:43.834" starttime="20191113 19:28:43.834"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 19:28:43.836" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 19:28:43.836" starttime="20191113 19:28:43.835"></status>
</kw>
<status status="PASS" endtime="20191113 19:28:43.836" starttime="20191113 19:28:35.356"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:28:43.838" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 19:28:43.838" starttime="20191113 19:28:43.837"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:43.840" starttime="20191113 19:28:43.839"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:28:43.841" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:28:45.042" level="INFO">Read output: Last login: Wed Nov 13 19:28:10 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:28:45.042" starttime="20191113 19:28:43.840"></status>
</kw>
<status status="PASS" endtime="20191113 19:28:45.042" starttime="20191113 19:28:43.838"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 19:28:45.043" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 19:28:47.172" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 19:28:47.173" starttime="20191113 19:28:45.042"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 19:28:47.174" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:28:47.271" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:28:47.271" level="INFO">${startupMsg} = hadoop    1113  326  0.0 34483320 233408 ?     Sl   19:28   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 19:28:47.271" starttime="20191113 19:28:47.173"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:28:47.337" starttime="20191113 19:28:47.272"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:47.338" starttime="20191113 19:28:47.337"></status>
</kw>
<status status="PASS" endtime="20191113 19:28:47.338" starttime="20191113 19:28:43.837"></status>
</kw>
<status status="PASS" endtime="20191113 19:28:47.338" starttime="20191113 19:28:07.627"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:28:47.343" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:28:52.899" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:28:52.899" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:52.899" starttime="20191113 19:28:47.340"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:28:52.901" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:52.901" starttime="20191113 19:28:52.900"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:28:52.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:28:52.902" starttime="20191113 19:28:52.901"></status>
</kw>
<msg timestamp="20191113 19:28:52.903" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:52.903" starttime="20191113 19:28:47.339"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:28:52.904" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:52.904" starttime="20191113 19:28:52.903"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:52.905" starttime="20191113 19:28:52.904"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:52.906" starttime="20191113 19:28:52.906"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:28:52.907" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:28:52.907" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 19:28:52.907" starttime="20191113 19:28:52.907"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:28:52.908" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 19:28:52.909" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:28:52.909" starttime="20191113 19:28:52.908"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:28:52.910" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 19:28:52.910" starttime="20191113 19:28:52.909"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:28:52.911" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 19:28:52.911" starttime="20191113 19:28:52.910"></status>
</kw>
<msg timestamp="20191113 19:28:52.912" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 19:28:52.912" starttime="20191113 19:28:47.339"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:28:52.914" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 19:28:52.914" starttime="20191113 19:28:52.913"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:52.916" starttime="20191113 19:28:52.915"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:28:52.917" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:28:54.122" level="INFO">Read output: Last login: Wed Nov 13 19:24:35 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:28:54.122" starttime="20191113 19:28:52.916"></status>
</kw>
<status status="PASS" endtime="20191113 19:28:54.122" starttime="20191113 19:28:52.914"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 19:28:54.123" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 19:28:55.285" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 19:28:55.285" starttime="20191113 19:28:54.123"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 19:28:55.286" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:28:55.383" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:28:55.384" level="INFO">${shutdownMsg} = hadoop    1108  0.0  0.0   9556  1168 ?        Ss   19:28   0:00 bash -c sudo ps aux | grep om
hadoop    1110  0.0  0.0   9088   668 ?        S    19:28   0:00 grep om</msg>
<status status="PASS" endtime="20191113 19:28:55.384" starttime="20191113 19:28:55.285"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:28:55.449" starttime="20191113 19:28:55.384"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:28:55.450" starttime="20191113 19:28:55.449"></status>
</kw>
<msg timestamp="20191113 19:28:55.450" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 19:28:55.450" starttime="20191113 19:28:52.912"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:28:55.453" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:29:07.594" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:29:07.594" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:29:07.594" starttime="20191113 19:28:55.451"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:29:07.596" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:29:07.596" starttime="20191113 19:29:07.595"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:29:07.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:29:07.597" starttime="20191113 19:29:07.596"></status>
</kw>
<msg timestamp="20191113 19:29:07.598" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:29:07.598" starttime="20191113 19:28:55.450"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:29:07.598" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:29:07.599" starttime="20191113 19:29:07.598"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:29:07.600" starttime="20191113 19:29:07.599"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:29:07.600" starttime="20191113 19:29:07.600"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:29:07.601" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:29:07.601" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:29:07.602" starttime="20191113 19:29:07.601"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:29:07.602" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191113 19:29:07.603" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:29:07.603" starttime="20191113 19:29:07.602"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:29:07.603" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 19:29:07.604" starttime="20191113 19:29:07.603"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:29:07.604" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191113 19:29:07.604" starttime="20191113 19:29:07.604"></status>
</kw>
<msg timestamp="20191113 19:29:07.605" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191113 19:29:07.605" starttime="20191113 19:28:55.450"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 19:29:07.606" starttime="20191113 19:29:07.605"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 19:29:07.607" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191113 19:29:07.607" starttime="20191113 19:29:07.607"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 19:29:07.608" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191113 19:29:07.608" starttime="20191113 19:29:07.608"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 19:29:07.609" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191113 19:29:07.609" starttime="20191113 19:29:07.609"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 19:29:07.611" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 19:29:07.611" starttime="20191113 19:29:07.610"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:29:07.615" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:29:23.349" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:29:23.349" level="INFO">${output} = 2019-11-13 19:29:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191113 19:29:23.349" starttime="20191113 19:29:07.613"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:29:23.351" level="INFO">2019-11-13 19:29:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:29:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:29:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:29:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:29:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:29:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:29:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:29:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:29:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:29:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 19:29:19 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-13 19:29:20 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 19:29:20 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 19:29:20 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 19:29:23.352" starttime="20191113 19:29:23.350"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:29:23.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:29:23.353" starttime="20191113 19:29:23.352"></status>
</kw>
<status status="PASS" endtime="20191113 19:29:23.353" starttime="20191113 19:29:07.612"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:29:23.358" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:29:36.343" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:29:36.343" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestar...</msg>
<status status="PASS" endtime="20191113 19:29:36.343" starttime="20191113 19:29:23.355"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:29:36.345" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191113 19:29:36.345" starttime="20191113 19:29:36.344"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:29:36.346" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:29:36.346" starttime="20191113 19:29:36.345"></status>
</kw>
<msg timestamp="20191113 19:29:36.347" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestar...</msg>
<status status="PASS" endtime="20191113 19:29:36.347" starttime="20191113 19:29:23.354"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:29:36.348" starttime="20191113 19:29:36.347"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 19:29:36.349" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 19:29:36.349" starttime="20191113 19:29:36.348"></status>
</kw>
<status status="PASS" endtime="20191113 19:29:36.349" starttime="20191113 19:29:07.606"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:29:36.352" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 19:29:36.352" starttime="20191113 19:29:36.351"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:29:36.354" starttime="20191113 19:29:36.353"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:29:36.355" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:29:37.560" level="INFO">Read output: Last login: Wed Nov 13 19:28:53 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:29:37.561" starttime="20191113 19:29:36.354"></status>
</kw>
<status status="PASS" endtime="20191113 19:29:37.561" starttime="20191113 19:29:36.352"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 19:29:37.562" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 19:29:40.063" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 19:29:40.064" starttime="20191113 19:29:37.562"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 19:29:40.064" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:29:40.172" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:29:40.172" level="INFO">${startupMsg} = hadoop    1159  325  0.0 34470044 200880 ?     Sl   19:29   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 19:29:40.172" starttime="20191113 19:29:40.064"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:29:40.237" starttime="20191113 19:29:40.173"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:29:40.238" starttime="20191113 19:29:40.238"></status>
</kw>
<status status="PASS" endtime="20191113 19:29:40.239" starttime="20191113 19:29:36.350"></status>
</kw>
<status status="PASS" endtime="20191113 19:29:40.239" starttime="20191113 19:28:47.338"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:29:40.243" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:29:52.902" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 19:29:52.902" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:29:52.902" starttime="20191113 19:29:40.240"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:29:52.904" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:29:52.904" starttime="20191113 19:29:52.903"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:29:52.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 19:29:52.904" starttime="20191113 19:29:52.904"></status>
</kw>
<msg timestamp="20191113 19:29:52.905" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:29:52.905" starttime="20191113 19:29:40.240"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 19:29:52.905" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:29:52.905" starttime="20191113 19:29:52.905"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 19:29:52.906" starttime="20191113 19:29:52.905"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 19:29:52.906" starttime="20191113 19:29:52.906"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 19:29:52.907" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 19:29:52.907" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191113 19:29:52.907" starttime="20191113 19:29:52.906"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 19:29:52.908" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191113 19:29:52.908" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 19:29:52.908" starttime="20191113 19:29:52.908"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 19:29:52.909" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 19:29:52.909" starttime="20191113 19:29:52.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 19:29:52.909" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191113 19:29:52.909" starttime="20191113 19:29:52.909"></status>
</kw>
<msg timestamp="20191113 19:29:52.910" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 19:29:52.910" starttime="20191113 19:29:40.239"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 19:29:52.911" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 19:29:52.911" starttime="20191113 19:29:52.910"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 19:29:52.912" starttime="20191113 19:29:52.911"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 19:29:52.912" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 19:29:54.101" level="INFO">Read output: Last login: Wed Nov 13 19:28:04 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 19:29:54.101" starttime="20191113 19:29:52.912"></status>
</kw>
<status status="PASS" endtime="20191113 19:29:54.102" starttime="20191113 19:29:52.911"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 19:29:54.103" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 19:29:55.263" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 19:29:55.264" starttime="20191113 19:29:54.102"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 19:29:55.264" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 19:29:55.330" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 19:29:55.330" level="INFO">${shutdownMsg} = hadoop    1234  0.0  0.0   9556  1168 ?        Ss   19:29   0:00 bash -c sudo ps aux | grep om
hadoop    1236  0.0  0.0   9088   668 ?        S    19:29   0:00 grep om</msg>
<status status="PASS" endtime="20191113 19:29:55.330" starttime="20191113 19:29:55.264"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 19:29:55.395" starttime="20191113 19:29:55.330"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 19:29:55.396" starttime="20191113 19:29:55.396"></status>
</kw>
<msg timestamp="20191113 19:29:55.396" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 19:29:55.396" starttime="20191113 19:29:52.910"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 19:29:55.400" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 19:30:30.184" level="INFO">${rc} = 255</msg>
<msg timestamp="20191113 19:30:30.184" level="INFO">${output} = Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
jav...</msg>
<status status="PASS" endtime="20191113 19:30:30.185" starttime="20191113 19:29:55.398"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 19:30:30.187" level="INFO">Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
java.io.IOException: Could not determine or connect to OM Leader.
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.submitRequest(OzoneManagerProtocolClientSideTranslatorPB.java:378)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.getServiceInfo(OzoneManagerProtocolClientSideTranslatorPB.java:1252)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.hdds.tracing.TraceAllMethod.invoke(TraceAllMethod.java:66)
	at com.sun.proxy.$Proxy17.getServiceInfo(Unknown Source)
	at org.apache.hadoop.ozone.client.rpc.RpcClient.&lt;init&gt;(RpcClient.java:157)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getClientProtocol(OzoneClientFactory.java:256)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getRpcClient(OzoneClientFactory.java:187)
	at org.apache.hadoop.ozone.admin.om.OMAdmin.createClient(OMAdmin.java:59)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:49)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:32)
	at picocli.CommandLine.execute(CommandLine.java:1173)
	at picocli.CommandLine.access$800(CommandLine.java:141)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1367)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1335)
	at picocli.CommandLine$AbstractParseResultHandler.handleParseResult(CommandLine.java:1243)
	at picocli.CommandLine.parseWithHandlers(CommandLine.java:1526)
	at picocli.CommandLine.parseWithHandler(CommandLine.java:1465)
	at org.apache.hadoop.hdds.cli.GenericCli.execute(GenericCli.java:65)
	at org.apache.hadoop.hdds.cli.GenericCli.run(GenericCli.java:56)
	at org.apache.hadoop.ozone.admin.OzoneAdmin.main(OzoneAdmin.java:66)
Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191113 19:30:30.187" starttime="20191113 19:30:30.186"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 19:30:30.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191113 19:30:30.189" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191113 19:30:30.189" starttime="20191113 19:30:30.187"></status>
</kw>
<status status="FAIL" endtime="20191113 19:30:30.189" starttime="20191113 19:29:55.397"></status>
</kw>
<status status="FAIL" endtime="20191113 19:30:30.190" starttime="20191113 19:29:55.397"></status>
</kw>
<status status="FAIL" endtime="20191113 19:30:30.190" starttime="20191113 19:29:40.239"></status>
</kw>
<status status="FAIL" endtime="20191113 19:30:30.190" starttime="20191113 19:27:11.704"></status>
</kw>
<status status="FAIL" endtime="20191113 19:30:30.191" critical="yes" starttime="20191113 19:27:11.703">255 != 0</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191113 19:30:30.192" starttime="20191113 19:23:30.013"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="2">Critical Tests</stat>
<stat fail="1" pass="2">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="1" id="s1" name="ozone-om-ha-testOMHA" pass="2">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
