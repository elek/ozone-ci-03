<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 11:20:34.485" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:20:34.623" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:20:37.216" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:20:37.217" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 11:20:37.217" starttime="20191115 11:20:34.622"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:20:37.218" level="INFO"></msg>
<status status="PASS" endtime="20191115 11:20:37.218" starttime="20191115 11:20:37.217"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:20:37.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:20:37.219" starttime="20191115 11:20:37.218"></status>
</kw>
<status status="PASS" endtime="20191115 11:20:37.219" starttime="20191115 11:20:34.621"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:20:37.225" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:20:39.312" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:20:39.312" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 11:20:39.312" starttime="20191115 11:20:37.223"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:20:39.314" level="INFO"></msg>
<status status="PASS" endtime="20191115 11:20:39.314" starttime="20191115 11:20:39.313"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:20:39.314" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:20:39.314" starttime="20191115 11:20:39.314"></status>
</kw>
<status status="PASS" endtime="20191115 11:20:39.315" starttime="20191115 11:20:37.220"></status>
</kw>
<status status="PASS" endtime="20191115 11:20:39.315" starttime="20191115 11:20:34.621"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 11:20:39.316" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191115 11:20:39.316" starttime="20191115 11:20:39.316"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 11:20:39.317" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191115 11:20:39.317" starttime="20191115 11:20:39.316"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 11:20:39.318" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191115 11:20:39.318" starttime="20191115 11:20:39.317"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:20:39.319" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:20:39.319" starttime="20191115 11:20:39.318"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:20:39.322" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:20:43.682" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:20:43.682" level="INFO">${output} = 2019-11-15 11:20:41 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 11:20:41 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 11:20:43.682" starttime="20191115 11:20:39.320"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:20:43.683" level="INFO">2019-11-15 11:20:41 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 11:20:41 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 11:20:41 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 11:20:43.683" starttime="20191115 11:20:43.683"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:20:43.684" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:20:43.684" starttime="20191115 11:20:43.684"></status>
</kw>
<status status="PASS" endtime="20191115 11:20:43.685" starttime="20191115 11:20:39.319"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:20:43.688" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:20:45.633" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:20:45.633" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191115 11:20:45.633" starttime="20191115 11:20:43.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:20:45.634" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191115 11:20:45.634" starttime="20191115 11:20:45.634"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:20:45.635" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:20:45.635" starttime="20191115 11:20:45.635"></status>
</kw>
<msg timestamp="20191115 11:20:45.636" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191115 11:20:45.636" starttime="20191115 11:20:43.685"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:45.636" starttime="20191115 11:20:45.636"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 11:20:45.637" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 11:20:45.637" starttime="20191115 11:20:45.636"></status>
</kw>
<status status="PASS" endtime="20191115 11:20:45.637" starttime="20191115 11:20:39.315"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:20:45.640" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:20:47.492" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:20:47.492" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:47.492" starttime="20191115 11:20:45.638"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:20:47.493" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:47.493" starttime="20191115 11:20:47.493"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:20:47.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:20:47.494" starttime="20191115 11:20:47.493"></status>
</kw>
<msg timestamp="20191115 11:20:47.494" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:47.494" starttime="20191115 11:20:45.638"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:20:47.495" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:47.495" starttime="20191115 11:20:47.494"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:47.496" starttime="20191115 11:20:47.495"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:47.496" starttime="20191115 11:20:47.496"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:20:47.497" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:20:47.497" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:47.497" starttime="20191115 11:20:47.496"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:20:47.498" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 11:20:47.498" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:20:47.498" starttime="20191115 11:20:47.497"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:20:47.498" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:20:47.498" starttime="20191115 11:20:47.498"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:20:47.499" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 11:20:47.499" starttime="20191115 11:20:47.498"></status>
</kw>
<msg timestamp="20191115 11:20:47.499" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:20:47.499" starttime="20191115 11:20:45.637"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:20:47.500" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 11:20:47.500" starttime="20191115 11:20:47.500"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:47.501" starttime="20191115 11:20:47.501"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:20:47.502" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:20:48.740" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 11:20:48.740" starttime="20191115 11:20:47.502"></status>
</kw>
<status status="PASS" endtime="20191115 11:20:48.741" starttime="20191115 11:20:47.500"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 11:20:48.741" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 11:20:48.756" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 11:20:48.757" starttime="20191115 11:20:48.741"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 11:20:48.757" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:20:48.835" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 11:20:48.835" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 11:20:48.835" starttime="20191115 11:20:48.757"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:20:48.950" starttime="20191115 11:20:48.836"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:48.951" starttime="20191115 11:20:48.950"></status>
</kw>
<msg timestamp="20191115 11:20:48.951" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 11:20:48.951" starttime="20191115 11:20:47.499"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:20:48.954" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:20:50.909" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:20:50.909" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:50.910" starttime="20191115 11:20:48.952"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:20:50.911" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:50.911" starttime="20191115 11:20:50.910"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:20:50.912" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:20:50.912" starttime="20191115 11:20:50.911"></status>
</kw>
<msg timestamp="20191115 11:20:50.912" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:50.912" starttime="20191115 11:20:48.952"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:20:50.913" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:50.913" starttime="20191115 11:20:50.912"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:50.913" starttime="20191115 11:20:50.913"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:50.914" starttime="20191115 11:20:50.913"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:20:50.914" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:20:50.915" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:50.915" starttime="20191115 11:20:50.914"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:20:50.915" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 11:20:50.915" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:20:50.915" starttime="20191115 11:20:50.915"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:20:50.916" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:20:50.916" starttime="20191115 11:20:50.915"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:20:50.916" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 11:20:50.916" starttime="20191115 11:20:50.916"></status>
</kw>
<msg timestamp="20191115 11:20:50.917" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:20:50.917" starttime="20191115 11:20:48.951"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 11:20:50.918" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 11:20:50.918" starttime="20191115 11:20:50.917"></status>
</kw>
<status status="FAIL" endtime="20191115 11:20:50.918" critical="yes" starttime="20191115 11:20:34.620">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 11:20:50.921" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 11:20:50.921" starttime="20191115 11:20:50.919"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 11:20:50.922" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 11:20:50.922" starttime="20191115 11:20:50.921"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:20:50.923" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 11:20:50.924" starttime="20191115 11:20:50.923"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:50.925" starttime="20191115 11:20:50.924"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:20:50.926" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:20:52.124" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 11:20:52.124" starttime="20191115 11:20:50.926"></status>
</kw>
<status status="PASS" endtime="20191115 11:20:52.125" starttime="20191115 11:20:50.924"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 11:20:52.125" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 11:20:52.140" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 11:20:52.140" starttime="20191115 11:20:52.125"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 11:20:52.141" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:20:52.218" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 11:20:52.219" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 11:20:52.219" starttime="20191115 11:20:52.140"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:20:52.334" starttime="20191115 11:20:52.219"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:52.335" starttime="20191115 11:20:52.334"></status>
</kw>
<status status="PASS" endtime="20191115 11:20:52.335" starttime="20191115 11:20:50.922"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:20:52.337" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 11:20:52.337" starttime="20191115 11:20:52.336"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:52.338" starttime="20191115 11:20:52.338"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:20:52.339" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:20:53.543" level="INFO">Read output: Last login: Fri Nov 15 11:20:51 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 11:20:53.543" starttime="20191115 11:20:52.339"></status>
</kw>
<status status="PASS" endtime="20191115 11:20:53.543" starttime="20191115 11:20:52.337"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 11:20:53.544" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 11:20:53.558" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 11:20:53.558" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191115 11:20:53.558" starttime="20191115 11:20:53.544"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 11:20:53.559" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191115 11:20:53.559" starttime="20191115 11:20:53.558"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 11:20:53.559" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191115 11:20:53.559" starttime="20191115 11:20:53.559"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 11:20:53.635" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191115 11:20:53.636" starttime="20191115 11:20:53.560"></status>
</kw>
<status status="FAIL" endtime="20191115 11:20:53.636" starttime="20191115 11:20:52.335"></status>
</kw>
<status status="FAIL" endtime="20191115 11:20:53.636" critical="yes" starttime="20191115 11:20:50.919">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:20:53.642" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:20:55.485" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:20:55.485" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:55.485" starttime="20191115 11:20:53.640"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:20:55.486" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:55.487" starttime="20191115 11:20:55.486"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:20:55.487" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:20:55.488" starttime="20191115 11:20:55.487"></status>
</kw>
<msg timestamp="20191115 11:20:55.488" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:55.488" starttime="20191115 11:20:53.639"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:20:55.488" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:55.489" starttime="20191115 11:20:55.488"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:55.489" starttime="20191115 11:20:55.489"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:55.490" starttime="20191115 11:20:55.489"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:20:55.490" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:20:55.491" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:55.491" starttime="20191115 11:20:55.490"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:20:55.491" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 11:20:55.491" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:20:55.491" starttime="20191115 11:20:55.491"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:20:55.492" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:20:55.492" starttime="20191115 11:20:55.492"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:20:55.493" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 11:20:55.493" starttime="20191115 11:20:55.492"></status>
</kw>
<msg timestamp="20191115 11:20:55.493" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:20:55.493" starttime="20191115 11:20:53.638"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 11:20:55.494" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 11:20:55.495" starttime="20191115 11:20:55.494"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:55.496" starttime="20191115 11:20:55.495"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 11:20:55.496" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 11:20:56.700" level="INFO">Read output: Last login: Fri Nov 15 11:20:47 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 11:20:56.700" starttime="20191115 11:20:55.496"></status>
</kw>
<status status="PASS" endtime="20191115 11:20:56.700" starttime="20191115 11:20:55.495"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 11:20:56.701" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 11:20:56.715" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 11:20:56.716" starttime="20191115 11:20:56.701"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 11:20:56.716" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 11:20:56.793" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 11:20:56.793" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 11:20:56.793" starttime="20191115 11:20:56.716"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 11:20:56.908" starttime="20191115 11:20:56.794"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:56.909" starttime="20191115 11:20:56.908"></status>
</kw>
<msg timestamp="20191115 11:20:56.909" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 11:20:56.909" starttime="20191115 11:20:55.493"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 11:20:56.912" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 11:20:58.839" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 11:20:58.839" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:58.840" starttime="20191115 11:20:56.910"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 11:20:58.841" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:58.841" starttime="20191115 11:20:58.840"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 11:20:58.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 11:20:58.841" starttime="20191115 11:20:58.841"></status>
</kw>
<msg timestamp="20191115 11:20:58.842" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:58.842" starttime="20191115 11:20:56.910"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 11:20:58.843" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:58.843" starttime="20191115 11:20:58.842"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:58.843" starttime="20191115 11:20:58.843"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 11:20:58.844" starttime="20191115 11:20:58.844"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 11:20:58.845" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 11:20:58.845" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 11:20:58.845" starttime="20191115 11:20:58.845"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 11:20:58.846" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 11:20:58.846" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 11:20:58.846" starttime="20191115 11:20:58.845"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 11:20:58.846" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:20:58.846" starttime="20191115 11:20:58.846"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 11:20:58.847" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 11:20:58.847" starttime="20191115 11:20:58.847"></status>
</kw>
<msg timestamp="20191115 11:20:58.847" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 11:20:58.847" starttime="20191115 11:20:56.909"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 11:20:58.848" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 11:20:58.848" starttime="20191115 11:20:58.847"></status>
</kw>
<status status="FAIL" endtime="20191115 11:20:58.848" starttime="20191115 11:20:53.638"></status>
</kw>
<status status="FAIL" endtime="20191115 11:20:58.848" starttime="20191115 11:20:53.638"></status>
</kw>
<status status="FAIL" endtime="20191115 11:20:58.849" critical="yes" starttime="20191115 11:20:53.637">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191115 11:20:58.850" starttime="20191115 11:20:34.486"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
