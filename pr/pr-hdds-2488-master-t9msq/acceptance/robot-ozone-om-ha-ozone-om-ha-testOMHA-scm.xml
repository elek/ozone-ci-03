<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 20:27:58.747" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:27:58.904" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:28:01.350" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:28:01.350" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 20:28:01.350" starttime="20191115 20:27:58.903"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:28:01.352" level="INFO"></msg>
<status status="PASS" endtime="20191115 20:28:01.352" starttime="20191115 20:28:01.351"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:28:01.352" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:28:01.352" starttime="20191115 20:28:01.352"></status>
</kw>
<status status="PASS" endtime="20191115 20:28:01.353" starttime="20191115 20:27:58.902"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:28:01.358" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:28:03.351" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:28:03.351" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 20:28:03.351" starttime="20191115 20:28:01.356"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:28:03.353" level="INFO"></msg>
<status status="PASS" endtime="20191115 20:28:03.353" starttime="20191115 20:28:03.352"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:28:03.354" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:28:03.354" starttime="20191115 20:28:03.353"></status>
</kw>
<status status="PASS" endtime="20191115 20:28:03.355" starttime="20191115 20:28:01.353"></status>
</kw>
<status status="PASS" endtime="20191115 20:28:03.355" starttime="20191115 20:27:58.902"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 20:28:03.357" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191115 20:28:03.357" starttime="20191115 20:28:03.356"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 20:28:03.359" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191115 20:28:03.359" starttime="20191115 20:28:03.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 20:28:03.360" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191115 20:28:03.360" starttime="20191115 20:28:03.360"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 20:28:03.363" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 20:28:03.363" starttime="20191115 20:28:03.361"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:28:03.368" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:28:07.961" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:28:07.961" level="INFO">${output} = 2019-11-15 20:28:05 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 20:28:05 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 20:28:07.961" starttime="20191115 20:28:03.365"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:28:07.963" level="INFO">2019-11-15 20:28:05 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 20:28:05 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 20:28:05 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 20:28:07.963" starttime="20191115 20:28:07.962"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:28:07.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:28:07.963" starttime="20191115 20:28:07.963"></status>
</kw>
<status status="PASS" endtime="20191115 20:28:07.964" starttime="20191115 20:28:03.364"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:28:07.966" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:28:09.936" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:28:09.936" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191115 20:28:09.936" starttime="20191115 20:28:07.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:28:09.937" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191115 20:28:09.937" starttime="20191115 20:28:09.937"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:28:09.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:28:09.938" starttime="20191115 20:28:09.938"></status>
</kw>
<msg timestamp="20191115 20:28:09.938" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191115 20:28:09.938" starttime="20191115 20:28:07.964"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:09.939" starttime="20191115 20:28:09.939"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 20:28:09.940" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 20:28:09.940" starttime="20191115 20:28:09.939"></status>
</kw>
<status status="PASS" endtime="20191115 20:28:09.940" starttime="20191115 20:28:03.355"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:28:09.943" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:28:11.812" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:28:11.813" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:11.813" starttime="20191115 20:28:09.941"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:28:11.814" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:11.814" starttime="20191115 20:28:11.813"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:28:11.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:28:11.815" starttime="20191115 20:28:11.814"></status>
</kw>
<msg timestamp="20191115 20:28:11.815" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:11.815" starttime="20191115 20:28:09.941"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:28:11.816" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:11.816" starttime="20191115 20:28:11.815"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:11.817" starttime="20191115 20:28:11.816"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:11.817" starttime="20191115 20:28:11.817"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:28:11.818" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:28:11.818" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:11.818" starttime="20191115 20:28:11.818"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:28:11.819" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:28:11.819" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:28:11.819" starttime="20191115 20:28:11.818"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:28:11.819" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:28:11.819" starttime="20191115 20:28:11.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:28:11.820" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:28:11.820" starttime="20191115 20:28:11.820"></status>
</kw>
<msg timestamp="20191115 20:28:11.820" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:28:11.820" starttime="20191115 20:28:09.940"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:28:11.821" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 20:28:11.822" starttime="20191115 20:28:11.821"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:11.823" starttime="20191115 20:28:11.822"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:28:11.823" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:28:13.061" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:28:13.062" starttime="20191115 20:28:11.823"></status>
</kw>
<status status="PASS" endtime="20191115 20:28:13.062" starttime="20191115 20:28:11.822"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:28:13.063" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:28:13.078" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:28:13.078" starttime="20191115 20:28:13.062"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:28:13.079" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:28:13.157" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:28:13.157" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:28:13.157" starttime="20191115 20:28:13.079"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:28:13.272" starttime="20191115 20:28:13.157"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:13.273" starttime="20191115 20:28:13.273"></status>
</kw>
<msg timestamp="20191115 20:28:13.274" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 20:28:13.274" starttime="20191115 20:28:11.820"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:28:13.278" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:28:15.129" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:28:15.129" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:15.129" starttime="20191115 20:28:13.275"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:28:15.131" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:15.131" starttime="20191115 20:28:15.130"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:28:15.132" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:28:15.132" starttime="20191115 20:28:15.132"></status>
</kw>
<msg timestamp="20191115 20:28:15.133" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:15.133" starttime="20191115 20:28:13.274"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:28:15.133" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:15.133" starttime="20191115 20:28:15.133"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:15.134" starttime="20191115 20:28:15.134"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:15.134" starttime="20191115 20:28:15.134"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:28:15.135" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:28:15.135" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:15.135" starttime="20191115 20:28:15.135"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:28:15.136" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:28:15.136" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:28:15.136" starttime="20191115 20:28:15.135"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:28:15.136" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:28:15.136" starttime="20191115 20:28:15.136"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:28:15.137" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:28:15.137" starttime="20191115 20:28:15.137"></status>
</kw>
<msg timestamp="20191115 20:28:15.137" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:28:15.137" starttime="20191115 20:28:13.274"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 20:28:15.138" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 20:28:15.138" starttime="20191115 20:28:15.137"></status>
</kw>
<status status="FAIL" endtime="20191115 20:28:15.139" critical="yes" starttime="20191115 20:27:58.901">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 20:28:15.141" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:28:15.141" starttime="20191115 20:28:15.140"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 20:28:15.143" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 20:28:15.143" starttime="20191115 20:28:15.142"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:28:15.144" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:28:15.144" starttime="20191115 20:28:15.144"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:15.145" starttime="20191115 20:28:15.145"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:28:15.146" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:28:16.344" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:28:16.344" starttime="20191115 20:28:15.146"></status>
</kw>
<status status="PASS" endtime="20191115 20:28:16.345" starttime="20191115 20:28:15.144"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:28:16.345" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:28:16.359" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:28:16.360" starttime="20191115 20:28:16.345"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:28:16.361" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:28:16.437" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:28:16.438" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:28:16.438" starttime="20191115 20:28:16.360"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:28:16.552" starttime="20191115 20:28:16.438"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:16.554" starttime="20191115 20:28:16.553"></status>
</kw>
<status status="PASS" endtime="20191115 20:28:16.554" starttime="20191115 20:28:15.143"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:28:16.556" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:28:16.556" starttime="20191115 20:28:16.555"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:16.558" starttime="20191115 20:28:16.557"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:28:16.558" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:28:17.757" level="INFO">Read output: Last login: Fri Nov 15 20:28:15 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:28:17.757" starttime="20191115 20:28:16.558"></status>
</kw>
<status status="PASS" endtime="20191115 20:28:17.758" starttime="20191115 20:28:16.556"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 20:28:17.759" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 20:28:17.774" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:28:17.774" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191115 20:28:17.774" starttime="20191115 20:28:17.758"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 20:28:17.775" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191115 20:28:17.775" starttime="20191115 20:28:17.775"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 20:28:17.777" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191115 20:28:17.777" starttime="20191115 20:28:17.776"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 20:28:17.820" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191115 20:28:17.820" starttime="20191115 20:28:17.777"></status>
</kw>
<status status="FAIL" endtime="20191115 20:28:17.820" starttime="20191115 20:28:16.554"></status>
</kw>
<status status="FAIL" endtime="20191115 20:28:17.820" critical="yes" starttime="20191115 20:28:15.139">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:28:17.826" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:28:19.618" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:28:19.618" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:19.618" starttime="20191115 20:28:17.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:28:19.619" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:19.619" starttime="20191115 20:28:19.619"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:28:19.620" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:28:19.620" starttime="20191115 20:28:19.620"></status>
</kw>
<msg timestamp="20191115 20:28:19.621" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:19.621" starttime="20191115 20:28:17.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:28:19.621" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:19.621" starttime="20191115 20:28:19.621"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:19.622" starttime="20191115 20:28:19.621"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:19.622" starttime="20191115 20:28:19.622"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:28:19.623" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:28:19.623" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:19.623" starttime="20191115 20:28:19.622"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:28:19.624" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:28:19.624" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:28:19.624" starttime="20191115 20:28:19.623"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:28:19.624" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:28:19.624" starttime="20191115 20:28:19.624"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:28:19.625" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:28:19.625" starttime="20191115 20:28:19.624"></status>
</kw>
<msg timestamp="20191115 20:28:19.625" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:28:19.625" starttime="20191115 20:28:17.822"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:28:19.626" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 20:28:19.626" starttime="20191115 20:28:19.626"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:19.627" starttime="20191115 20:28:19.627"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:28:19.628" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:28:20.828" level="INFO">Read output: Last login: Fri Nov 15 20:28:12 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:28:20.829" starttime="20191115 20:28:19.628"></status>
</kw>
<status status="PASS" endtime="20191115 20:28:20.829" starttime="20191115 20:28:19.626"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:28:20.830" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:28:20.844" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:28:20.844" starttime="20191115 20:28:20.829"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:28:20.845" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:28:20.922" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:28:20.922" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:28:20.922" starttime="20191115 20:28:20.845"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:28:21.037" starttime="20191115 20:28:20.923"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:21.038" starttime="20191115 20:28:21.038"></status>
</kw>
<msg timestamp="20191115 20:28:21.039" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 20:28:21.039" starttime="20191115 20:28:19.625"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:28:21.043" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:28:23.225" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:28:23.226" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:23.226" starttime="20191115 20:28:21.040"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:28:23.227" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:23.227" starttime="20191115 20:28:23.226"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:28:23.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:28:23.228" starttime="20191115 20:28:23.227"></status>
</kw>
<msg timestamp="20191115 20:28:23.228" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:23.228" starttime="20191115 20:28:21.040"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:28:23.229" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:23.229" starttime="20191115 20:28:23.229"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:23.230" starttime="20191115 20:28:23.230"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:28:23.231" starttime="20191115 20:28:23.230"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:28:23.231" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:28:23.231" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:28:23.232" starttime="20191115 20:28:23.231"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:28:23.232" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:28:23.232" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:28:23.232" starttime="20191115 20:28:23.232"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:28:23.233" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:28:23.233" starttime="20191115 20:28:23.233"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:28:23.234" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:28:23.234" starttime="20191115 20:28:23.233"></status>
</kw>
<msg timestamp="20191115 20:28:23.234" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:28:23.234" starttime="20191115 20:28:21.039"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 20:28:23.235" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 20:28:23.235" starttime="20191115 20:28:23.234"></status>
</kw>
<status status="FAIL" endtime="20191115 20:28:23.235" starttime="20191115 20:28:17.822"></status>
</kw>
<status status="FAIL" endtime="20191115 20:28:23.235" starttime="20191115 20:28:17.822"></status>
</kw>
<status status="FAIL" endtime="20191115 20:28:23.236" critical="yes" starttime="20191115 20:28:17.821">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191115 20:28:23.237" starttime="20191115 20:27:58.748"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
