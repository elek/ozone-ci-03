<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191114 11:48:30.210" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:48:30.373" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:48:33.283" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:48:33.283" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 11:48:33.283" starttime="20191114 11:48:30.372"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:48:33.284" level="INFO"></msg>
<status status="PASS" endtime="20191114 11:48:33.285" starttime="20191114 11:48:33.284"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:48:33.285" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:48:33.285" starttime="20191114 11:48:33.285"></status>
</kw>
<status status="PASS" endtime="20191114 11:48:33.286" starttime="20191114 11:48:30.371"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:48:33.290" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:48:35.407" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:48:35.407" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 11:48:35.407" starttime="20191114 11:48:33.289"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:48:35.408" level="INFO"></msg>
<status status="PASS" endtime="20191114 11:48:35.408" starttime="20191114 11:48:35.408"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:48:35.409" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:48:35.409" starttime="20191114 11:48:35.408"></status>
</kw>
<status status="PASS" endtime="20191114 11:48:35.409" starttime="20191114 11:48:33.286"></status>
</kw>
<status status="PASS" endtime="20191114 11:48:35.409" starttime="20191114 11:48:30.371"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 11:48:35.410" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191114 11:48:35.411" starttime="20191114 11:48:35.410"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 11:48:35.411" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191114 11:48:35.411" starttime="20191114 11:48:35.411"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 11:48:35.412" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191114 11:48:35.412" starttime="20191114 11:48:35.412"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:48:35.413" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:48:35.414" starttime="20191114 11:48:35.412"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:48:35.416" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:48:40.215" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:48:40.215" level="INFO">${output} = 2019-11-14 11:48:38 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 11:48:38 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 11:48:40.215" starttime="20191114 11:48:35.414"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:48:40.217" level="INFO">2019-11-14 11:48:38 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 11:48:38 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 11:48:38 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:48:40.217" starttime="20191114 11:48:40.216"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:48:40.217" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:48:40.217" starttime="20191114 11:48:40.217"></status>
</kw>
<status status="PASS" endtime="20191114 11:48:40.218" starttime="20191114 11:48:35.414"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:48:40.221" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:48:42.222" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:48:42.222" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191114 11:48:42.222" starttime="20191114 11:48:40.219"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:48:42.224" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191114 11:48:42.224" starttime="20191114 11:48:42.223"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:48:42.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:48:42.224" starttime="20191114 11:48:42.224"></status>
</kw>
<msg timestamp="20191114 11:48:42.225" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191114 11:48:42.225" starttime="20191114 11:48:40.218"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:48:42.225" starttime="20191114 11:48:42.225"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:48:42.226" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:48:42.226" starttime="20191114 11:48:42.226"></status>
</kw>
<status status="PASS" endtime="20191114 11:48:42.226" starttime="20191114 11:48:35.410"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:48:42.229" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:48:44.181" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:48:44.181" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:48:44.181" starttime="20191114 11:48:42.227"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:48:44.183" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:48:44.183" starttime="20191114 11:48:44.182"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:48:44.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:48:44.183" starttime="20191114 11:48:44.183"></status>
</kw>
<msg timestamp="20191114 11:48:44.184" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:48:44.184" starttime="20191114 11:48:42.227"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 11:48:44.184" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:48:44.184" starttime="20191114 11:48:44.184"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 11:48:44.185" starttime="20191114 11:48:44.185"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 11:48:44.186" starttime="20191114 11:48:44.185"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 11:48:44.186" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 11:48:44.186" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:48:44.186" starttime="20191114 11:48:44.186"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 11:48:44.187" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 11:48:44.187" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 11:48:44.187" starttime="20191114 11:48:44.187"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 11:48:44.188" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 11:48:44.188" starttime="20191114 11:48:44.187"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 11:48:44.188" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 11:48:44.188" starttime="20191114 11:48:44.188"></status>
</kw>
<msg timestamp="20191114 11:48:44.188" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 11:48:44.189" starttime="20191114 11:48:42.227"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:48:44.190" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 11:48:44.190" starttime="20191114 11:48:44.189"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:48:44.191" starttime="20191114 11:48:44.190"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:48:44.191" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:48:45.506" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:48:45.506" starttime="20191114 11:48:44.191"></status>
</kw>
<status status="PASS" endtime="20191114 11:48:45.506" starttime="20191114 11:48:44.190"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 11:48:45.507" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 11:48:55.653" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 11:48:55.653" starttime="20191114 11:48:45.507"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 11:48:55.654" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:48:55.751" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:48:55.751" level="INFO">${shutdownMsg} = hadoop     460  0.0  0.0   9556  1168 ?        Ss   11:48   0:00 bash -c sudo ps aux | grep om
hadoop     462  0.0  0.0   9088   672 ?        S    11:48   0:00 grep om</msg>
<status status="PASS" endtime="20191114 11:48:55.751" starttime="20191114 11:48:55.654"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:48:55.816" starttime="20191114 11:48:55.752"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:48:55.817" starttime="20191114 11:48:55.816"></status>
</kw>
<msg timestamp="20191114 11:48:55.817" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 11:48:55.817" starttime="20191114 11:48:44.189"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:48:55.820" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:49:07.960" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:49:07.960" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:49:07.960" starttime="20191114 11:48:55.818"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:49:07.961" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:49:07.961" starttime="20191114 11:49:07.960"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:49:07.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:49:07.961" starttime="20191114 11:49:07.961"></status>
</kw>
<msg timestamp="20191114 11:49:07.962" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:49:07.962" starttime="20191114 11:48:55.818"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 11:49:07.962" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:49:07.962" starttime="20191114 11:49:07.962"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 11:49:07.963" starttime="20191114 11:49:07.963"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 11:49:07.963" starttime="20191114 11:49:07.963"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 11:49:07.964" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 11:49:07.964" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:49:07.964" starttime="20191114 11:49:07.964"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 11:49:07.964" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191114 11:49:07.965" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 11:49:07.965" starttime="20191114 11:49:07.964"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 11:49:07.965" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 11:49:07.965" starttime="20191114 11:49:07.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 11:49:07.966" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191114 11:49:07.966" starttime="20191114 11:49:07.965"></status>
</kw>
<msg timestamp="20191114 11:49:07.966" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191114 11:49:07.966" starttime="20191114 11:48:55.817"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 11:49:07.967" starttime="20191114 11:49:07.966"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 11:49:07.968" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191114 11:49:07.968" starttime="20191114 11:49:07.967"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 11:49:07.968" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191114 11:49:07.968" starttime="20191114 11:49:07.968"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 11:49:07.969" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191114 11:49:07.969" starttime="20191114 11:49:07.968"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:49:07.975" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:49:07.975" starttime="20191114 11:49:07.969"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:49:07.979" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:49:22.566" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:49:22.566" level="INFO">${output} = 2019-11-14 11:49:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191114 11:49:22.566" starttime="20191114 11:49:07.976"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:49:22.567" level="INFO">2019-11-14 11:49:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:49:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:49:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:49:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:49:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:49:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:49:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:49:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:49:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:49:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:49:19 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-14 11:49:20 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 11:49:20 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 11:49:20 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:49:22.567" starttime="20191114 11:49:22.566"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:49:22.567" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:49:22.568" starttime="20191114 11:49:22.567"></status>
</kw>
<status status="PASS" endtime="20191114 11:49:22.568" starttime="20191114 11:49:07.975"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:49:22.571" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:49:34.674" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:49:34.674" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191114 11:49:34.674" starttime="20191114 11:49:22.569"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:49:34.675" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191114 11:49:34.676" starttime="20191114 11:49:34.675"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:49:34.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:49:34.676" starttime="20191114 11:49:34.676"></status>
</kw>
<msg timestamp="20191114 11:49:34.677" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191114 11:49:34.677" starttime="20191114 11:49:22.568"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:49:34.677" starttime="20191114 11:49:34.677"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:49:34.678" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:49:34.678" starttime="20191114 11:49:34.678"></status>
</kw>
<status status="PASS" endtime="20191114 11:49:34.678" starttime="20191114 11:49:07.967"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:49:34.680" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 11:49:34.680" starttime="20191114 11:49:34.679"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:49:34.681" starttime="20191114 11:49:34.681"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:49:34.682" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:49:35.882" level="INFO">Read output: Last login: Thu Nov 14 11:48:44 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:49:35.883" starttime="20191114 11:49:34.681"></status>
</kw>
<status status="PASS" endtime="20191114 11:49:35.883" starttime="20191114 11:49:34.680"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 11:49:35.884" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 11:49:38.022" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 11:49:38.022" starttime="20191114 11:49:35.883"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 11:49:38.023" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:49:38.109" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:49:38.109" level="INFO">${startupMsg} = hadoop     513  356  0.0 34482656 226384 ?     Sl   11:49   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 11:49:38.109" starttime="20191114 11:49:38.022"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:49:38.174" starttime="20191114 11:49:38.110"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:49:38.175" starttime="20191114 11:49:38.175"></status>
</kw>
<status status="PASS" endtime="20191114 11:49:38.176" starttime="20191114 11:49:34.679"></status>
</kw>
<status status="PASS" endtime="20191114 11:49:38.176" critical="yes" starttime="20191114 11:48:30.370"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191114 11:49:38.181" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191114 11:49:38.181" starttime="20191114 11:49:38.178"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191114 11:49:38.183" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191114 11:49:38.183" starttime="20191114 11:49:38.181"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:49:38.185" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 11:49:38.185" starttime="20191114 11:49:38.184"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:49:38.186" starttime="20191114 11:49:38.185"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:49:38.187" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:49:39.383" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:49:39.384" starttime="20191114 11:49:38.186"></status>
</kw>
<status status="PASS" endtime="20191114 11:49:39.384" starttime="20191114 11:49:38.185"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 11:49:39.384" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 11:50:03.497" level="INFO">Command exited with return code 254.</msg>
<status status="PASS" endtime="20191114 11:50:03.497" starttime="20191114 11:49:39.384"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 11:50:03.498" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:50:03.599" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 11:50:03.599" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 11:50:03.599" starttime="20191114 11:50:03.497"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:50:03.632" starttime="20191114 11:50:03.600"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:50:03.633" starttime="20191114 11:50:03.633"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:03.634" starttime="20191114 11:49:38.183"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:50:03.635" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 11:50:03.636" starttime="20191114 11:50:03.635"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:50:03.637" starttime="20191114 11:50:03.636"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:50:03.637" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:50:04.835" level="INFO">Read output: Last login: Thu Nov 14 11:49:38 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 11:50:04.835" starttime="20191114 11:50:03.637"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:04.835" starttime="20191114 11:50:03.636"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 11:50:04.836" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 11:50:04.851" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:50:04.852" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 11:50:04.852" starttime="20191114 11:50:04.836"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 11:50:04.853" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 11:50:04.853" starttime="20191114 11:50:04.852"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 11:50:04.854" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191114 11:50:04.854" starttime="20191114 11:50:04.853"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 11:50:04.931" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191114 11:50:04.937" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191114 11:50:04.938" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191114 11:50:04.938" starttime="20191114 11:50:04.854"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191114 11:50:04.939" level="INFO">Length is 2</msg>
<msg timestamp="20191114 11:50:04.939" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191114 11:50:04.939" starttime="20191114 11:50:04.938"></status>
</kw>
<msg timestamp="20191114 11:50:04.939" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191114 11:50:04.939" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191114 11:50:04.939" starttime="20191114 11:50:03.634"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:50:05.105" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:50:07.407" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:50:07.407" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:50:07.408" starttime="20191114 11:50:04.940"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:50:07.409" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:50:07.409" starttime="20191114 11:50:07.408"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:50:07.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:50:07.410" starttime="20191114 11:50:07.409"></status>
</kw>
<msg timestamp="20191114 11:50:07.410" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:50:07.411" starttime="20191114 11:50:04.940"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 11:50:07.411" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:50:07.411" starttime="20191114 11:50:07.411"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 11:50:07.412" starttime="20191114 11:50:07.412"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 11:50:07.413" starttime="20191114 11:50:07.412"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 11:50:07.414" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 11:50:07.414" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:50:07.414" starttime="20191114 11:50:07.413"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 11:50:07.415" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191114 11:50:07.415" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 11:50:07.415" starttime="20191114 11:50:07.414"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 11:50:07.416" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 11:50:07.416" starttime="20191114 11:50:07.415"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 11:50:07.417" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191114 11:50:07.417" starttime="20191114 11:50:07.416"></status>
</kw>
<msg timestamp="20191114 11:50:07.417" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 11:50:07.417" starttime="20191114 11:50:04.940"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191114 11:50:07.420" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191114 11:50:07.420" starttime="20191114 11:50:07.418"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:50:07.422" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191114 11:50:07.423" starttime="20191114 11:50:07.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:50:07.423" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191114 11:50:07.423" starttime="20191114 11:50:07.423"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:50:07.427" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:50:11.790" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:50:11.790" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:50:11.790" starttime="20191114 11:50:07.425"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:50:11.791" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:50:11.792" starttime="20191114 11:50:11.791"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:50:11.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:50:11.792" starttime="20191114 11:50:11.792"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:11.793" starttime="20191114 11:50:07.424"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:50:11.796" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:50:14.027" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:50:14.027" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573732209387,
  "modificationTime": 1573732211368,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:50:14.028" starttime="20191114 11:50:11.794"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:50:14.029" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573732209387,
  "modificationTime": 1573732211368,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103136114074320900,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:50:14.029" starttime="20191114 11:50:14.028"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:50:14.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:50:14.030" starttime="20191114 11:50:14.029"></status>
</kw>
<msg timestamp="20191114 11:50:14.030" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573732209387,
  "modificationTime": 1573732211368,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:50:14.031" starttime="20191114 11:50:11.793"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:50:14.031" starttime="20191114 11:50:14.031"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:14.031" starttime="20191114 11:50:07.423"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:14.032" starttime="20191114 11:50:07.422"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:50:14.033" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191114 11:50:14.033" starttime="20191114 11:50:14.032"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:50:14.033" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191114 11:50:14.033" starttime="20191114 11:50:14.033"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:50:14.037" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:50:18.208" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:50:18.208" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:50:18.208" starttime="20191114 11:50:14.035"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:50:18.210" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:50:18.210" starttime="20191114 11:50:18.209"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:50:18.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:50:18.211" starttime="20191114 11:50:18.210"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:18.211" starttime="20191114 11:50:14.034"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:50:18.215" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:50:20.302" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:50:20.303" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573732216056,
  "modificationTime": 1573732217802,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:50:20.303" starttime="20191114 11:50:18.213"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:50:20.304" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573732216056,
  "modificationTime": 1573732217802,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103136114511314940,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:50:20.304" starttime="20191114 11:50:20.303"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:50:20.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:50:20.305" starttime="20191114 11:50:20.305"></status>
</kw>
<msg timestamp="20191114 11:50:20.306" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573732216056,
  "modificationTime": 1573732217802,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:50:20.306" starttime="20191114 11:50:18.211"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:50:20.307" starttime="20191114 11:50:20.306"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:20.307" starttime="20191114 11:50:14.034"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:20.307" starttime="20191114 11:50:14.032"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:50:20.308" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191114 11:50:20.308" starttime="20191114 11:50:20.308"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:50:20.309" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191114 11:50:20.309" starttime="20191114 11:50:20.309"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:50:20.314" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:50:24.261" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:50:24.261" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:50:24.261" starttime="20191114 11:50:20.312"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:50:24.262" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:50:24.263" starttime="20191114 11:50:24.262"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:50:24.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:50:24.263" starttime="20191114 11:50:24.263"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:24.263" starttime="20191114 11:50:20.310"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:50:24.267" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:50:26.385" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:50:26.385" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573732222311,
  "modificationTime": 1573732223856,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:50:26.385" starttime="20191114 11:50:24.265"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:50:26.387" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573732222311,
  "modificationTime": 1573732223856,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103136114921308160,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:50:26.387" starttime="20191114 11:50:26.386"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:50:26.388" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:50:26.388" starttime="20191114 11:50:26.387"></status>
</kw>
<msg timestamp="20191114 11:50:26.388" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573732222311,
  "modificationTime": 1573732223856,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:50:26.388" starttime="20191114 11:50:24.264"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:50:26.389" starttime="20191114 11:50:26.388"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:26.389" starttime="20191114 11:50:20.309"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:26.389" starttime="20191114 11:50:20.307"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:50:26.389" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191114 11:50:26.390" starttime="20191114 11:50:26.389"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:50:26.390" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191114 11:50:26.390" starttime="20191114 11:50:26.390"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:50:26.393" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:50:31.425" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:50:31.425" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:50:31.426" starttime="20191114 11:50:26.391"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:50:31.427" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:50:31.427" starttime="20191114 11:50:31.426"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:50:31.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:50:31.428" starttime="20191114 11:50:31.427"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:31.428" starttime="20191114 11:50:26.391"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:50:31.431" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:50:33.648" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:50:33.648" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573732228426,
  "modificationTime": 1573732230887,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:50:33.648" starttime="20191114 11:50:31.429"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:50:33.649" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573732228426,
  "modificationTime": 1573732230887,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103136115321995260,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:50:33.649" starttime="20191114 11:50:33.648"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:50:33.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:50:33.650" starttime="20191114 11:50:33.649"></status>
</kw>
<msg timestamp="20191114 11:50:33.650" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573732228426,
  "modificationTime": 1573732230887,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:50:33.650" starttime="20191114 11:50:31.428"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:50:33.651" starttime="20191114 11:50:33.650"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:33.651" starttime="20191114 11:50:26.390"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:33.651" starttime="20191114 11:50:26.389"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:50:33.652" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 11:50:33.652" starttime="20191114 11:50:33.651"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:50:33.652" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 11:50:33.652" starttime="20191114 11:50:33.652"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:50:33.655" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:50:48.632" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:50:48.632" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:50:48.632" starttime="20191114 11:50:33.654"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:50:48.634" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:50:48.634" starttime="20191114 11:50:48.633"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:50:48.635" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:50:48.635" starttime="20191114 11:50:48.634"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:48.635" starttime="20191114 11:50:33.653"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:50:48.640" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:50:51.123" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:50:51.123" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573732235580,
  "modificationTime": 1573732247597,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:50:51.123" starttime="20191114 11:50:48.638"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:50:51.124" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573732235580,
  "modificationTime": 1573732247597,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103136115790905340,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:50:51.125" starttime="20191114 11:50:51.124"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:50:51.125" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:50:51.125" starttime="20191114 11:50:51.125"></status>
</kw>
<msg timestamp="20191114 11:50:51.126" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573732235580,
  "modificationTime": 1573732247597,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:50:51.126" starttime="20191114 11:50:48.636"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:50:51.126" starttime="20191114 11:50:51.126"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:51.127" starttime="20191114 11:50:33.652"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:51.127" starttime="20191114 11:50:33.651"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:51.127" starttime="20191114 11:50:07.421"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:51.127" starttime="20191114 11:50:07.420"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:50:51.129" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191114 11:50:51.129" starttime="20191114 11:50:51.128"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:50:51.130" starttime="20191114 11:50:51.129"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:50:51.131" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:50:52.599" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:50:52.600" starttime="20191114 11:50:51.130"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:52.600" starttime="20191114 11:50:51.129"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 11:50:52.602" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 11:50:52.617" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:50:52.617" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 11:50:52.618" starttime="20191114 11:50:52.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 11:50:52.618" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 11:50:52.619" starttime="20191114 11:50:52.618"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 11:50:52.619" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191114 11:50:52.619" starttime="20191114 11:50:52.619"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 11:50:52.699" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191114 11:50:52.708" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191114 11:50:52.708" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191114 11:50:52.708" starttime="20191114 11:50:52.620"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191114 11:50:52.709" level="INFO">Length is 2</msg>
<msg timestamp="20191114 11:50:52.709" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191114 11:50:52.709" starttime="20191114 11:50:52.708"></status>
</kw>
<msg timestamp="20191114 11:50:52.709" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191114 11:50:52.709" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191114 11:50:52.709" starttime="20191114 11:50:51.127"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:50:52.710" starttime="20191114 11:50:52.710"></status>
</kw>
<status status="PASS" endtime="20191114 11:50:52.710" starttime="20191114 11:50:07.418"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191114 11:50:52.711" level="INFO">${keyPrefix} = testOMRestart_1</msg>
<status status="PASS" endtime="20191114 11:50:52.711" starttime="20191114 11:50:52.710"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:50:52.713" level="INFO">${tmpKey} = testOMRestart_1_0</msg>
<status status="PASS" endtime="20191114 11:50:52.713" starttime="20191114 11:50:52.712"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:50:53.001" level="INFO">testOMRestart_1_0</msg>
<status status="PASS" endtime="20191114 11:50:53.001" starttime="20191114 11:50:53.000"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:50:53.006" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:51:03.331" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:51:03.331" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:51:03.331" starttime="20191114 11:50:53.004"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:51:03.333" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:51:03.333" starttime="20191114 11:51:03.332"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:51:03.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:51:03.334" starttime="20191114 11:51:03.333"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:03.334" starttime="20191114 11:50:53.002"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:51:03.338" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:51:06.141" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:51:06.141" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573732259653,
  "modificationTime": 1573732261877,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:51:06.141" starttime="20191114 11:51:03.336"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:51:06.143" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573732259653,
  "modificationTime": 1573732261877,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 8,
      "localID": 103136117368553470,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:51:06.143" starttime="20191114 11:51:06.142"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:51:06.144" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:51:06.144" starttime="20191114 11:51:06.143"></status>
</kw>
<msg timestamp="20191114 11:51:06.145" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573732259653,
  "modificationTime": 1573732261877,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:51:06.145" starttime="20191114 11:51:03.334"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:51:06.146" starttime="20191114 11:51:06.145"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:06.146" starttime="20191114 11:50:53.001"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:06.146" starttime="20191114 11:50:52.712"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:51:06.147" level="INFO">${tmpKey} = testOMRestart_1_1</msg>
<status status="PASS" endtime="20191114 11:51:06.147" starttime="20191114 11:51:06.147"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:51:06.148" level="INFO">testOMRestart_1_1</msg>
<status status="PASS" endtime="20191114 11:51:06.148" starttime="20191114 11:51:06.148"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:51:06.161" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:51:20.774" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:51:20.774" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:51:20.774" starttime="20191114 11:51:06.155"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:51:20.776" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:51:20.777" starttime="20191114 11:51:20.775"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:51:20.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:51:20.778" starttime="20191114 11:51:20.777"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:20.779" starttime="20191114 11:51:06.149"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:51:20.783" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:51:23.218" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:51:23.219" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573732268300,
  "modificationTime": 1573732271254,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:51:23.219" starttime="20191114 11:51:20.781"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:51:23.220" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573732268300,
  "modificationTime": 1573732271254,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 9,
      "localID": 103136117935177730,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:51:23.221" starttime="20191114 11:51:23.220"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:51:23.222" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:51:23.222" starttime="20191114 11:51:23.221"></status>
</kw>
<msg timestamp="20191114 11:51:23.223" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573732268300,
  "modificationTime": 1573732271254,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:51:23.223" starttime="20191114 11:51:20.779"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:51:23.225" starttime="20191114 11:51:23.223"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:23.225" starttime="20191114 11:51:06.149"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:23.225" starttime="20191114 11:51:06.146"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:51:23.227" level="INFO">${tmpKey} = testOMRestart_1_2</msg>
<status status="PASS" endtime="20191114 11:51:23.227" starttime="20191114 11:51:23.226"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:51:23.228" level="INFO">testOMRestart_1_2</msg>
<status status="PASS" endtime="20191114 11:51:23.228" starttime="20191114 11:51:23.227"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:51:23.233" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:51:40.166" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:51:40.166" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:51:40.166" starttime="20191114 11:51:23.230"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:51:40.167" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:51:40.167" starttime="20191114 11:51:40.167"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:51:40.168" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:51:40.168" starttime="20191114 11:51:40.168"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:40.168" starttime="20191114 11:51:23.229"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:51:40.171" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:51:42.326" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:51:42.327" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573732285593,
  "modificationTime": 1573732298894,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:51:42.327" starttime="20191114 11:51:40.169"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:51:42.328" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573732285593,
  "modificationTime": 1573732298894,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 10,
      "localID": 103136119068557330,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:51:42.328" starttime="20191114 11:51:42.327"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:51:42.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:51:42.329" starttime="20191114 11:51:42.328"></status>
</kw>
<msg timestamp="20191114 11:51:42.329" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573732285593,
  "modificationTime": 1573732298894,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:51:42.329" starttime="20191114 11:51:40.168"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:51:42.330" starttime="20191114 11:51:42.329"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:42.330" starttime="20191114 11:51:23.228"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:42.330" starttime="20191114 11:51:23.226"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:51:42.331" level="INFO">${tmpKey} = testOMRestart_1_3</msg>
<status status="PASS" endtime="20191114 11:51:42.331" starttime="20191114 11:51:42.330"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:51:42.331" level="INFO">testOMRestart_1_3</msg>
<status status="PASS" endtime="20191114 11:51:42.331" starttime="20191114 11:51:42.331"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:51:42.335" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:51:46.575" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:51:46.575" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:51:46.575" starttime="20191114 11:51:42.333"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:51:46.577" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:51:46.577" starttime="20191114 11:51:46.576"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:51:46.578" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:51:46.578" starttime="20191114 11:51:46.577"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:46.579" starttime="20191114 11:51:42.332"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:51:46.584" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:51:48.869" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:51:48.869" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573732304477,
  "modificationTime": 1573732306125,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:51:48.869" starttime="20191114 11:51:46.581"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:51:48.871" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573732304477,
  "modificationTime": 1573732306125,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 2,
      "localID": 103136120306073620,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:51:48.871" starttime="20191114 11:51:48.870"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:51:48.872" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:51:48.872" starttime="20191114 11:51:48.871"></status>
</kw>
<msg timestamp="20191114 11:51:48.872" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573732304477,
  "modificationTime": 1573732306125,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:51:48.872" starttime="20191114 11:51:46.579"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:51:48.873" starttime="20191114 11:51:48.873"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:48.873" starttime="20191114 11:51:42.332"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:48.873" starttime="20191114 11:51:42.330"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:51:48.874" level="INFO">${tmpKey} = testOMRestart_1_4</msg>
<status status="PASS" endtime="20191114 11:51:48.874" starttime="20191114 11:51:48.874"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:51:48.874" level="INFO">testOMRestart_1_4</msg>
<status status="PASS" endtime="20191114 11:51:48.875" starttime="20191114 11:51:48.874"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:51:48.878" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:51:53.195" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:51:53.196" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:51:53.196" starttime="20191114 11:51:48.876"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:51:53.197" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:51:53.197" starttime="20191114 11:51:53.196"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:51:53.197" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:51:53.197" starttime="20191114 11:51:53.197"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:53.198" starttime="20191114 11:51:48.875"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:51:53.201" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:51:55.408" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:51:55.408" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573732311135,
  "modificationTime": 1573732312786,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:51:55.408" starttime="20191114 11:51:53.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:51:55.409" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573732311135,
  "modificationTime": 1573732312786,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103136120742412300,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:51:55.410" starttime="20191114 11:51:55.409"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:51:55.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:51:55.411" starttime="20191114 11:51:55.410"></status>
</kw>
<msg timestamp="20191114 11:51:55.411" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573732311135,
  "modificationTime": 1573732312786,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:51:55.411" starttime="20191114 11:51:53.198"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:51:55.412" starttime="20191114 11:51:55.411"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:55.412" starttime="20191114 11:51:48.875"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:55.412" starttime="20191114 11:51:48.873"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:55.412" starttime="20191114 11:50:52.712"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:55.413" starttime="20191114 11:50:52.711"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:51:55.414" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191114 11:51:55.415" starttime="20191114 11:51:55.414"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:51:55.416" starttime="20191114 11:51:55.415"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:51:55.417" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:51:56.617" level="INFO">Read output: Last login: Thu Nov 14 11:50:51 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:51:56.618" starttime="20191114 11:51:55.417"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:56.618" starttime="20191114 11:51:55.415"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 11:51:56.619" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 11:51:56.633" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:51:56.634" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 11:51:56.634" starttime="20191114 11:51:56.618"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 11:51:56.635" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 11:51:56.635" starttime="20191114 11:51:56.634"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 11:51:56.636" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191114 11:51:56.636" starttime="20191114 11:51:56.635"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 11:51:56.713" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191114 11:51:56.731" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191114 11:51:56.732" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191114 11:51:56.732" starttime="20191114 11:51:56.637"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191114 11:51:56.733" level="INFO">Length is 2</msg>
<msg timestamp="20191114 11:51:56.733" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191114 11:51:56.733" starttime="20191114 11:51:56.732"></status>
</kw>
<msg timestamp="20191114 11:51:56.734" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191114 11:51:56.734" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191114 11:51:56.734" starttime="20191114 11:51:55.413"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:51:56.734" starttime="20191114 11:51:56.734"></status>
</kw>
<status status="PASS" endtime="20191114 11:51:56.734" starttime="20191114 11:50:52.710"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191114 11:51:56.735" level="INFO">${keyPrefix} = testOMRestart_2</msg>
<status status="PASS" endtime="20191114 11:51:56.735" starttime="20191114 11:51:56.735"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:51:56.738" level="INFO">${tmpKey} = testOMRestart_2_0</msg>
<status status="PASS" endtime="20191114 11:51:56.738" starttime="20191114 11:51:56.737"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:51:56.739" level="INFO">testOMRestart_2_0</msg>
<status status="PASS" endtime="20191114 11:51:56.739" starttime="20191114 11:51:56.738"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:51:56.742" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:52:01.629" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:52:01.630" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:52:01.630" starttime="20191114 11:51:56.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:52:01.631" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:52:01.631" starttime="20191114 11:52:01.630"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:52:01.631" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:52:01.631" starttime="20191114 11:52:01.631"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:01.632" starttime="20191114 11:51:56.739"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:52:01.634" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:52:07.700" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:52:07.700" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573732319539,
  "modificationTime": 1573732321236,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:52:07.700" starttime="20191114 11:52:01.633"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:52:07.702" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573732319539,
  "modificationTime": 1573732321236,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 8,
      "localID": 103136121293242380,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:52:07.702" starttime="20191114 11:52:07.701"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:52:07.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:52:07.703" starttime="20191114 11:52:07.702"></status>
</kw>
<msg timestamp="20191114 11:52:07.703" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573732319539,
  "modificationTime": 1573732321236,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:52:07.703" starttime="20191114 11:52:01.632"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:07.704" starttime="20191114 11:52:07.704"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:07.704" starttime="20191114 11:51:56.739"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:07.704" starttime="20191114 11:51:56.737"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:52:07.705" level="INFO">${tmpKey} = testOMRestart_2_1</msg>
<status status="PASS" endtime="20191114 11:52:07.705" starttime="20191114 11:52:07.705"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:52:07.706" level="INFO">testOMRestart_2_1</msg>
<status status="PASS" endtime="20191114 11:52:07.706" starttime="20191114 11:52:07.705"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:52:07.710" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:52:18.657" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:52:18.657" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:52:18.657" starttime="20191114 11:52:07.708"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:52:18.658" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:52:18.658" starttime="20191114 11:52:18.658"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:52:18.659" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:52:18.659" starttime="20191114 11:52:18.659"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:18.660" starttime="20191114 11:52:07.707"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:52:18.663" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:52:24.130" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:52:24.130" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573732329742,
  "modificationTime": 1573732332201,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:52:24.130" starttime="20191114 11:52:18.661"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:52:24.131" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573732329742,
  "modificationTime": 1573732332201,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 9,
      "localID": 103136121961906190,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:52:24.131" starttime="20191114 11:52:24.131"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:52:24.132" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:52:24.132" starttime="20191114 11:52:24.131"></status>
</kw>
<msg timestamp="20191114 11:52:24.132" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573732329742,
  "modificationTime": 1573732332201,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:52:24.132" starttime="20191114 11:52:18.660"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:24.133" starttime="20191114 11:52:24.133"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:24.133" starttime="20191114 11:52:07.706"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:24.133" starttime="20191114 11:52:07.704"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:52:24.134" level="INFO">${tmpKey} = testOMRestart_2_2</msg>
<status status="PASS" endtime="20191114 11:52:24.134" starttime="20191114 11:52:24.133"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:52:24.134" level="INFO">testOMRestart_2_2</msg>
<status status="PASS" endtime="20191114 11:52:24.135" starttime="20191114 11:52:24.134"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:52:24.138" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:52:28.113" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:52:28.113" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:52:28.114" starttime="20191114 11:52:24.136"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:52:28.115" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:52:28.115" starttime="20191114 11:52:28.114"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:52:28.116" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:52:28.116" starttime="20191114 11:52:28.116"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:28.117" starttime="20191114 11:52:24.135"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:52:28.122" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:52:30.263" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:52:30.263" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573732346182,
  "modificationTime": 1573732347703,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:52:30.263" starttime="20191114 11:52:28.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:52:30.264" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573732346182,
  "modificationTime": 1573732347703,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 2,
      "localID": 103136123039318030,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:52:30.265" starttime="20191114 11:52:30.264"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:52:30.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:52:30.265" starttime="20191114 11:52:30.265"></status>
</kw>
<msg timestamp="20191114 11:52:30.266" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573732346182,
  "modificationTime": 1573732347703,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:52:30.266" starttime="20191114 11:52:28.117"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:30.266" starttime="20191114 11:52:30.266"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:30.266" starttime="20191114 11:52:24.135"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:30.266" starttime="20191114 11:52:24.133"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:52:30.267" level="INFO">${tmpKey} = testOMRestart_2_3</msg>
<status status="PASS" endtime="20191114 11:52:30.267" starttime="20191114 11:52:30.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:52:30.268" level="INFO">testOMRestart_2_3</msg>
<status status="PASS" endtime="20191114 11:52:30.268" starttime="20191114 11:52:30.267"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:52:30.272" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:52:34.295" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:52:34.296" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:52:34.296" starttime="20191114 11:52:30.270"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:52:34.297" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:52:34.297" starttime="20191114 11:52:34.296"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:52:34.298" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:52:34.298" starttime="20191114 11:52:34.298"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:34.299" starttime="20191114 11:52:30.269"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:52:34.302" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:52:36.408" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:52:36.409" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573732352272,
  "modificationTime": 1573732353898,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:52:36.409" starttime="20191114 11:52:34.300"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:52:36.410" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573732352272,
  "modificationTime": 1573732353898,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103136123438366740,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:52:36.410" starttime="20191114 11:52:36.409"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:52:36.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:52:36.410" starttime="20191114 11:52:36.410"></status>
</kw>
<msg timestamp="20191114 11:52:36.411" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573732352272,
  "modificationTime": 1573732353898,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:52:36.411" starttime="20191114 11:52:34.299"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:36.411" starttime="20191114 11:52:36.411"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:36.411" starttime="20191114 11:52:30.268"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:36.411" starttime="20191114 11:52:30.266"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191114 11:52:36.412" level="INFO">${tmpKey} = testOMRestart_2_4</msg>
<status status="PASS" endtime="20191114 11:52:36.412" starttime="20191114 11:52:36.412"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191114 11:52:36.413" level="INFO">testOMRestart_2_4</msg>
<status status="PASS" endtime="20191114 11:52:36.413" starttime="20191114 11:52:36.412"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:52:36.415" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:52:40.177" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:52:40.177" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191114 11:52:40.177" starttime="20191114 11:52:36.414"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:52:40.178" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:52:40.178" starttime="20191114 11:52:40.177"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:52:40.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:52:40.179" starttime="20191114 11:52:40.179"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:40.180" starttime="20191114 11:52:36.413"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:52:40.183" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:52:42.331" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:52:42.331" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573732358269,
  "modificationTime": 1573732359771,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:52:42.331" starttime="20191114 11:52:40.181"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:52:42.332" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573732358269,
  "modificationTime": 1573732359771,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103136123831451660,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191114 11:52:42.332" starttime="20191114 11:52:42.332"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:52:42.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:52:42.333" starttime="20191114 11:52:42.332"></status>
</kw>
<msg timestamp="20191114 11:52:42.333" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573732358269,
  "modificationTime": 1573732359771,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191114 11:52:42.333" starttime="20191114 11:52:40.180"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:42.334" starttime="20191114 11:52:42.333"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:42.334" starttime="20191114 11:52:36.413"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:42.334" starttime="20191114 11:52:36.411"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:42.334" starttime="20191114 11:51:56.736"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:42.334" starttime="20191114 11:51:56.735"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:52:42.335" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191114 11:52:42.335" starttime="20191114 11:52:42.335"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:42.337" starttime="20191114 11:52:42.336"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:52:42.338" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:52:43.536" level="INFO">Read output: Last login: Thu Nov 14 11:51:55 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:52:43.537" starttime="20191114 11:52:42.338"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:43.537" starttime="20191114 11:52:42.336"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 11:52:43.538" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 11:52:43.552" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:52:43.553" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 11:52:43.553" starttime="20191114 11:52:43.537"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 11:52:43.554" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 11:52:43.554" starttime="20191114 11:52:43.553"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 11:52:43.554" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191114 11:52:43.554" starttime="20191114 11:52:43.554"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 11:52:43.628" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191114 11:52:43.634" level="INFO">3 files:
log_0-10
log_11-70
log_inprogress_71</msg>
<msg timestamp="20191114 11:52:43.635" level="INFO">@{logs} = [ log_0-10 | log_11-70 | log_inprogress_71 ]</msg>
<status status="PASS" endtime="20191114 11:52:43.635" starttime="20191114 11:52:43.555"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191114 11:52:43.635" level="INFO">Length is 3</msg>
<msg timestamp="20191114 11:52:43.636" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191114 11:52:43.636" starttime="20191114 11:52:43.635"></status>
</kw>
<msg timestamp="20191114 11:52:43.636" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191114 11:52:43.636" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-70', u'log_inprogress_71'] ]</msg>
<status status="PASS" endtime="20191114 11:52:43.636" starttime="20191114 11:52:42.334"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191114 11:52:43.637" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191114 11:52:43.637" starttime="20191114 11:52:43.636"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:43.637" starttime="20191114 11:51:56.735"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:43.637" starttime="20191114 11:50:07.417"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:43.638" starttime="20191114 11:52:43.638"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:52:43.639" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 11:52:43.639" starttime="20191114 11:52:43.639"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:43.640" starttime="20191114 11:52:43.640"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:52:43.641" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:52:44.827" level="INFO">Read output: Last login: Thu Nov 14 11:50:03 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:52:44.828" starttime="20191114 11:52:43.641"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:44.828" starttime="20191114 11:52:43.640"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 11:52:44.829" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 11:52:46.965" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 11:52:46.966" starttime="20191114 11:52:44.829"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 11:52:46.967" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:52:47.054" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:52:47.055" level="INFO">${startupMsg} = hadoop     494  357  0.1 34486740 267332 ?     Sl   11:52   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 11:52:47.055" starttime="20191114 11:52:46.966"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:52:47.120" starttime="20191114 11:52:47.055"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:47.121" starttime="20191114 11:52:47.120"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:47.121" starttime="20191114 11:52:43.638"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:52:47.123" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 11:52:47.123" starttime="20191114 11:52:47.122"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:47.124" starttime="20191114 11:52:47.123"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:52:47.124" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:52:48.322" level="INFO">Read output: Last login: Thu Nov 14 11:52:43 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:52:48.322" starttime="20191114 11:52:47.124"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:48.323" starttime="20191114 11:52:47.123"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 11:52:48.323" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 11:52:48.358" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:52:48.358" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 11:52:48.358" starttime="20191114 11:52:48.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 11:52:48.359" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 11:52:48.359" starttime="20191114 11:52:48.359"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 11:52:48.360" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191114 11:52:48.360" starttime="20191114 11:52:48.359"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 11:52:48.404" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191114 11:52:48.425" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191114 11:52:48.425" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191114 11:52:48.425" starttime="20191114 11:52:48.360"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191114 11:52:48.426" level="INFO">Length is 2</msg>
<msg timestamp="20191114 11:52:48.426" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191114 11:52:48.426" starttime="20191114 11:52:48.425"></status>
</kw>
<msg timestamp="20191114 11:52:48.426" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191114 11:52:48.426" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191114 11:52:48.426" starttime="20191114 11:52:47.122"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:48.427" starttime="20191114 11:52:48.426"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191114 11:52:49.428" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191114 11:52:49.428" starttime="20191114 11:52:48.427"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:49.428" starttime="20191114 11:52:47.122"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:52:49.430" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 11:52:49.430" starttime="20191114 11:52:49.429"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:49.431" starttime="20191114 11:52:49.431"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:52:49.432" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:52:50.630" level="INFO">Read output: Last login: Thu Nov 14 11:52:47 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:52:50.631" starttime="20191114 11:52:49.432"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:50.631" starttime="20191114 11:52:49.430"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 11:52:50.632" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 11:52:50.647" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:52:50.648" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 11:52:50.648" starttime="20191114 11:52:50.631"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 11:52:50.649" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191114 11:52:50.649" starttime="20191114 11:52:50.648"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 11:52:50.650" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191114 11:52:50.650" starttime="20191114 11:52:50.649"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 11:52:50.730" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191114 11:52:50.741" level="INFO">3 files:
log_0-10
log_11-70
log_inprogress_71</msg>
<msg timestamp="20191114 11:52:50.741" level="INFO">@{logs} = [ log_0-10 | log_11-70 | log_inprogress_71 ]</msg>
<status status="PASS" endtime="20191114 11:52:50.742" starttime="20191114 11:52:50.651"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191114 11:52:50.742" level="INFO">Length is 3</msg>
<msg timestamp="20191114 11:52:50.743" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191114 11:52:50.743" starttime="20191114 11:52:50.742"></status>
</kw>
<msg timestamp="20191114 11:52:50.743" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191114 11:52:50.743" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-70', u'log_inprogress_71'] ]</msg>
<status status="PASS" endtime="20191114 11:52:50.744" starttime="20191114 11:52:49.428"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191114 11:52:50.745" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191114 11:52:50.745" starttime="20191114 11:52:50.744"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:50.745" starttime="20191114 11:52:49.428"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:50.745" starttime="20191114 11:52:47.121"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:50.746" starttime="20191114 11:52:50.745"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:50.747" starttime="20191114 11:52:50.746"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:50.748" critical="yes" starttime="20191114 11:49:38.177"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:52:50.755" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:52:52.651" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:52:52.651" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:52:52.652" starttime="20191114 11:52:50.751"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:52:52.653" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:52:52.653" starttime="20191114 11:52:52.652"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:52:52.654" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:52:52.654" starttime="20191114 11:52:52.653"></status>
</kw>
<msg timestamp="20191114 11:52:52.654" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:52:52.655" starttime="20191114 11:52:50.751"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 11:52:52.655" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:52:52.656" starttime="20191114 11:52:52.655"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:52.657" starttime="20191114 11:52:52.656"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:52.658" starttime="20191114 11:52:52.657"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 11:52:52.659" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 11:52:52.659" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:52:52.659" starttime="20191114 11:52:52.658"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 11:52:52.660" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191114 11:52:52.660" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 11:52:52.660" starttime="20191114 11:52:52.659"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 11:52:52.660" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 11:52:52.660" starttime="20191114 11:52:52.660"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 11:52:52.661" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191114 11:52:52.661" starttime="20191114 11:52:52.661"></status>
</kw>
<msg timestamp="20191114 11:52:52.662" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 11:52:52.662" starttime="20191114 11:52:50.750"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:52:52.663" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191114 11:52:52.663" starttime="20191114 11:52:52.663"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:52:52.664" starttime="20191114 11:52:52.664"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:52:52.665" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:52:53.863" level="INFO">Read output: Last login: Thu Nov 14 11:52:42 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:52:53.864" starttime="20191114 11:52:52.665"></status>
</kw>
<status status="PASS" endtime="20191114 11:52:53.864" starttime="20191114 11:52:52.664"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 11:52:53.864" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 11:53:03.984" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 11:53:03.984" starttime="20191114 11:52:53.864"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 11:53:03.985" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:53:04.081" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:53:04.082" level="INFO">${shutdownMsg} = hadoop     614  0.0  0.0   9556  1168 ?        Ss   11:53   0:00 bash -c sudo ps aux | grep om
hadoop     616  0.0  0.0   9088   668 ?        S    11:53   0:00 grep om</msg>
<status status="PASS" endtime="20191114 11:53:04.082" starttime="20191114 11:53:03.984"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:53:04.147" starttime="20191114 11:53:04.082"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:04.148" starttime="20191114 11:53:04.147"></status>
</kw>
<msg timestamp="20191114 11:53:04.148" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 11:53:04.148" starttime="20191114 11:52:52.662"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:53:04.151" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:53:06.263" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:53:06.263" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:06.264" starttime="20191114 11:53:04.149"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:53:06.264" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:06.265" starttime="20191114 11:53:06.264"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:53:06.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:53:06.265" starttime="20191114 11:53:06.265"></status>
</kw>
<msg timestamp="20191114 11:53:06.265" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:06.265" starttime="20191114 11:53:04.149"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 11:53:06.266" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:06.266" starttime="20191114 11:53:06.266"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:06.267" starttime="20191114 11:53:06.266"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:06.267" starttime="20191114 11:53:06.267"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 11:53:06.268" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 11:53:06.268" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:06.268" starttime="20191114 11:53:06.267"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 11:53:06.269" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 11:53:06.269" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 11:53:06.269" starttime="20191114 11:53:06.268"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 11:53:06.271" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 11:53:06.271" starttime="20191114 11:53:06.269"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 11:53:06.271" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 11:53:06.271" starttime="20191114 11:53:06.271"></status>
</kw>
<msg timestamp="20191114 11:53:06.271" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191114 11:53:06.272" starttime="20191114 11:53:04.148"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:06.272" starttime="20191114 11:53:06.272"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 11:53:06.273" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191114 11:53:06.273" starttime="20191114 11:53:06.273"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 11:53:06.274" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191114 11:53:06.274" starttime="20191114 11:53:06.273"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 11:53:06.275" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191114 11:53:06.275" starttime="20191114 11:53:06.274"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:53:06.276" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:53:06.276" starttime="20191114 11:53:06.275"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:53:06.279" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:53:10.354" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:53:10.354" level="INFO">${output} = 2019-11-14 11:53:08 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 11:53:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 11:53:10.354" starttime="20191114 11:53:06.277"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:53:10.355" level="INFO">2019-11-14 11:53:08 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 11:53:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 11:53:08 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:53:10.356" starttime="20191114 11:53:10.355"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:53:10.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:53:10.357" starttime="20191114 11:53:10.356"></status>
</kw>
<status status="PASS" endtime="20191114 11:53:10.357" starttime="20191114 11:53:06.276"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:53:10.361" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:53:12.472" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:53:12.472" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOM...</msg>
<status status="PASS" endtime="20191114 11:53:12.472" starttime="20191114 11:53:10.358"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:53:12.473" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191114 11:53:12.473" starttime="20191114 11:53:12.473"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:53:12.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:53:12.474" starttime="20191114 11:53:12.474"></status>
</kw>
<msg timestamp="20191114 11:53:12.474" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOM...</msg>
<status status="PASS" endtime="20191114 11:53:12.474" starttime="20191114 11:53:10.357"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:12.475" starttime="20191114 11:53:12.475"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:53:12.476" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:53:12.476" starttime="20191114 11:53:12.475"></status>
</kw>
<status status="PASS" endtime="20191114 11:53:12.476" starttime="20191114 11:53:06.272"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:53:12.478" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191114 11:53:12.478" starttime="20191114 11:53:12.477"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:12.480" starttime="20191114 11:53:12.479"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:53:12.480" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:53:13.678" level="INFO">Read output: Last login: Thu Nov 14 11:52:52 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:53:13.679" starttime="20191114 11:53:12.480"></status>
</kw>
<status status="PASS" endtime="20191114 11:53:13.679" starttime="20191114 11:53:12.478"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 11:53:13.679" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 11:53:15.807" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 11:53:15.807" starttime="20191114 11:53:13.679"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 11:53:15.808" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:53:15.894" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:53:15.895" level="INFO">${startupMsg} = hadoop     667  246  0.0 34481848 259532 ?     Sl   11:53   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 11:53:15.895" starttime="20191114 11:53:15.807"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:53:15.959" starttime="20191114 11:53:15.895"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:15.960" starttime="20191114 11:53:15.960"></status>
</kw>
<status status="PASS" endtime="20191114 11:53:15.960" starttime="20191114 11:53:12.476"></status>
</kw>
<status status="PASS" endtime="20191114 11:53:15.960" starttime="20191114 11:52:50.750"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:53:15.963" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:53:17.813" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:53:17.813" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:17.814" starttime="20191114 11:53:15.961"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:53:17.815" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:17.815" starttime="20191114 11:53:17.814"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:53:17.816" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:53:17.816" starttime="20191114 11:53:17.816"></status>
</kw>
<msg timestamp="20191114 11:53:17.817" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:17.817" starttime="20191114 11:53:15.961"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 11:53:17.818" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:17.818" starttime="20191114 11:53:17.817"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:17.819" starttime="20191114 11:53:17.818"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:17.819" starttime="20191114 11:53:17.819"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 11:53:17.821" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 11:53:17.821" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:17.821" starttime="20191114 11:53:17.820"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 11:53:17.822" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 11:53:17.822" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 11:53:17.822" starttime="20191114 11:53:17.821"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 11:53:17.823" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 11:53:17.823" starttime="20191114 11:53:17.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 11:53:17.823" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 11:53:17.823" starttime="20191114 11:53:17.823"></status>
</kw>
<msg timestamp="20191114 11:53:17.824" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 11:53:17.824" starttime="20191114 11:53:15.961"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:53:17.825" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 11:53:17.825" starttime="20191114 11:53:17.824"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:17.826" starttime="20191114 11:53:17.825"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:53:17.826" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:53:19.024" level="INFO">Read output: Last login: Thu Nov 14 11:52:49 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:53:19.024" starttime="20191114 11:53:17.826"></status>
</kw>
<status status="PASS" endtime="20191114 11:53:19.025" starttime="20191114 11:53:17.825"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 11:53:19.025" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 11:53:20.131" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 11:53:20.131" starttime="20191114 11:53:19.025"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 11:53:20.132" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:53:20.229" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:53:20.230" level="INFO">${shutdownMsg} = hadoop    1035  0.0  0.0   9556  1168 ?        Ss   11:53   0:00 bash -c sudo ps aux | grep om
hadoop    1037  0.0  0.0   9088   668 ?        S    11:53   0:00 grep om</msg>
<status status="PASS" endtime="20191114 11:53:20.230" starttime="20191114 11:53:20.132"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:53:20.295" starttime="20191114 11:53:20.230"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:20.296" starttime="20191114 11:53:20.295"></status>
</kw>
<msg timestamp="20191114 11:53:20.296" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 11:53:20.296" starttime="20191114 11:53:17.824"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:53:20.300" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:53:22.238" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:53:22.238" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:22.238" starttime="20191114 11:53:20.298"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:53:22.239" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:22.239" starttime="20191114 11:53:22.238"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:53:22.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:53:22.240" starttime="20191114 11:53:22.239"></status>
</kw>
<msg timestamp="20191114 11:53:22.240" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:22.240" starttime="20191114 11:53:20.297"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 11:53:22.241" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:22.241" starttime="20191114 11:53:22.240"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:22.241" starttime="20191114 11:53:22.241"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:22.242" starttime="20191114 11:53:22.241"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 11:53:22.242" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 11:53:22.242" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:22.242" starttime="20191114 11:53:22.242"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 11:53:22.243" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 11:53:22.243" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 11:53:22.243" starttime="20191114 11:53:22.242"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 11:53:22.243" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 11:53:22.244" starttime="20191114 11:53:22.243"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 11:53:22.244" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 11:53:22.244" starttime="20191114 11:53:22.244"></status>
</kw>
<msg timestamp="20191114 11:53:22.244" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 11:53:22.244" starttime="20191114 11:53:20.297"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:22.245" starttime="20191114 11:53:22.245"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 11:53:22.246" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191114 11:53:22.246" starttime="20191114 11:53:22.246"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 11:53:22.247" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191114 11:53:22.247" starttime="20191114 11:53:22.246"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 11:53:22.247" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191114 11:53:22.247" starttime="20191114 11:53:22.247"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:53:22.249" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:53:22.249" starttime="20191114 11:53:22.248"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:53:22.251" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:53:26.440" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:53:26.441" level="INFO">${output} = 2019-11-14 11:53:24 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 11:53:24 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 11:53:26.441" starttime="20191114 11:53:22.250"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:53:26.442" level="INFO">2019-11-14 11:53:24 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 11:53:24 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 11:53:24 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:53:26.442" starttime="20191114 11:53:26.441"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:53:26.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:53:26.443" starttime="20191114 11:53:26.443"></status>
</kw>
<status status="PASS" endtime="20191114 11:53:26.444" starttime="20191114 11:53:22.249"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:53:26.447" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:53:28.570" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:53:28.570" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_...</msg>
<status status="PASS" endtime="20191114 11:53:28.570" starttime="20191114 11:53:26.445"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:53:28.572" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191114 11:53:28.572" starttime="20191114 11:53:28.571"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:53:28.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:53:28.572" starttime="20191114 11:53:28.572"></status>
</kw>
<msg timestamp="20191114 11:53:28.573" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_...</msg>
<status status="PASS" endtime="20191114 11:53:28.573" starttime="20191114 11:53:26.444"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:28.573" starttime="20191114 11:53:28.573"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:53:28.575" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:53:28.575" starttime="20191114 11:53:28.574"></status>
</kw>
<status status="PASS" endtime="20191114 11:53:28.575" starttime="20191114 11:53:22.245"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:53:28.576" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 11:53:28.576" starttime="20191114 11:53:28.576"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:28.577" starttime="20191114 11:53:28.577"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:53:28.578" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:53:29.775" level="INFO">Read output: Last login: Thu Nov 14 11:53:18 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:53:29.776" starttime="20191114 11:53:28.577"></status>
</kw>
<status status="PASS" endtime="20191114 11:53:29.776" starttime="20191114 11:53:28.576"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 11:53:29.777" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 11:53:31.893" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 11:53:31.894" starttime="20191114 11:53:29.776"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 11:53:31.895" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:53:31.981" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:53:31.982" level="INFO">${startupMsg} = hadoop    1086  229  0.0 34488060 263644 ?     Sl   11:53   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 11:53:31.982" starttime="20191114 11:53:31.894"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:53:32.046" starttime="20191114 11:53:31.982"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:32.047" starttime="20191114 11:53:32.047"></status>
</kw>
<status status="PASS" endtime="20191114 11:53:32.047" starttime="20191114 11:53:28.575"></status>
</kw>
<status status="PASS" endtime="20191114 11:53:32.047" starttime="20191114 11:53:15.960"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:53:32.050" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:53:33.971" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:53:33.971" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:33.971" starttime="20191114 11:53:32.049"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:53:33.972" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:33.972" starttime="20191114 11:53:33.972"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:53:33.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:53:33.973" starttime="20191114 11:53:33.973"></status>
</kw>
<msg timestamp="20191114 11:53:33.973" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:33.973" starttime="20191114 11:53:32.048"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 11:53:33.974" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:33.974" starttime="20191114 11:53:33.974"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:33.974" starttime="20191114 11:53:33.974"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:33.975" starttime="20191114 11:53:33.975"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 11:53:33.975" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 11:53:33.976" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:33.976" starttime="20191114 11:53:33.975"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 11:53:33.976" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 11:53:33.976" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 11:53:33.976" starttime="20191114 11:53:33.976"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 11:53:33.977" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 11:53:33.977" starttime="20191114 11:53:33.976"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 11:53:33.977" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 11:53:33.977" starttime="20191114 11:53:33.977"></status>
</kw>
<msg timestamp="20191114 11:53:33.978" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 11:53:33.978" starttime="20191114 11:53:32.048"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:53:33.979" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 11:53:33.979" starttime="20191114 11:53:33.978"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:33.980" starttime="20191114 11:53:33.980"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:53:33.981" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:53:35.168" level="INFO">Read output: Last login: Thu Nov 14 11:49:34 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:53:35.169" starttime="20191114 11:53:33.980"></status>
</kw>
<status status="PASS" endtime="20191114 11:53:35.169" starttime="20191114 11:53:33.979"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 11:53:35.170" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 11:53:36.287" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 11:53:36.288" starttime="20191114 11:53:35.170"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 11:53:36.289" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:53:36.386" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:53:36.386" level="INFO">${shutdownMsg} = hadoop    1063  0.0  0.0   9556  1164 ?        Ss   11:53   0:00 bash -c sudo ps aux | grep om
hadoop    1065  0.0  0.0   9088   672 ?        S    11:53   0:00 grep om</msg>
<status status="PASS" endtime="20191114 11:53:36.386" starttime="20191114 11:53:36.288"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:53:36.419" starttime="20191114 11:53:36.387"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:36.420" starttime="20191114 11:53:36.419"></status>
</kw>
<msg timestamp="20191114 11:53:36.420" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 11:53:36.420" starttime="20191114 11:53:33.978"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:53:36.423" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:53:48.325" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:53:48.325" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:48.325" starttime="20191114 11:53:36.421"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:53:48.327" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:48.327" starttime="20191114 11:53:48.326"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:53:48.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:53:48.328" starttime="20191114 11:53:48.327"></status>
</kw>
<msg timestamp="20191114 11:53:48.328" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:48.328" starttime="20191114 11:53:36.421"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 11:53:48.329" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:48.329" starttime="20191114 11:53:48.328"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:48.330" starttime="20191114 11:53:48.329"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:48.330" starttime="20191114 11:53:48.330"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 11:53:48.331" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 11:53:48.331" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:53:48.331" starttime="20191114 11:53:48.330"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 11:53:48.332" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 11:53:48.332" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 11:53:48.332" starttime="20191114 11:53:48.331"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 11:53:48.332" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 11:53:48.332" starttime="20191114 11:53:48.332"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 11:53:48.333" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 11:53:48.333" starttime="20191114 11:53:48.333"></status>
</kw>
<msg timestamp="20191114 11:53:48.333" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191114 11:53:48.333" starttime="20191114 11:53:36.420"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 11:53:48.334" starttime="20191114 11:53:48.334"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 11:53:48.335" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191114 11:53:48.335" starttime="20191114 11:53:48.335"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 11:53:48.336" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191114 11:53:48.336" starttime="20191114 11:53:48.336"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 11:53:48.337" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191114 11:53:48.337" starttime="20191114 11:53:48.336"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:53:48.338" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:53:48.338" starttime="20191114 11:53:48.337"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:53:48.341" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:54:02.435" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:54:02.436" level="INFO">${output} = 2019-11-14 11:53:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191114 11:54:02.436" starttime="20191114 11:53:48.339"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:54:02.437" level="INFO">2019-11-14 11:53:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:53:52 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:53:53 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:53:54 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:53:55 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:53:56 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:53:57 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:53:58 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:53:59 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:54:00 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:54:00 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 11:54:01 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 11:54:01 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:54:02.437" starttime="20191114 11:54:02.436"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:54:02.438" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:54:02.438" starttime="20191114 11:54:02.437"></status>
</kw>
<status status="PASS" endtime="20191114 11:54:02.438" starttime="20191114 11:53:48.339"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:54:02.441" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:54:14.649" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:54:14.649" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_...</msg>
<status status="PASS" endtime="20191114 11:54:14.649" starttime="20191114 11:54:02.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:54:14.650" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191114 11:54:14.650" starttime="20191114 11:54:14.649"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:54:14.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:54:14.651" starttime="20191114 11:54:14.650"></status>
</kw>
<msg timestamp="20191114 11:54:14.651" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_...</msg>
<status status="PASS" endtime="20191114 11:54:14.651" starttime="20191114 11:54:02.438"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:14.652" starttime="20191114 11:54:14.651"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:54:14.652" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:54:14.652" starttime="20191114 11:54:14.652"></status>
</kw>
<status status="PASS" endtime="20191114 11:54:14.652" starttime="20191114 11:53:48.334"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:54:14.654" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 11:54:14.654" starttime="20191114 11:54:14.653"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:14.655" starttime="20191114 11:54:14.654"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:54:14.655" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:54:15.841" level="INFO">Read output: Last login: Thu Nov 14 11:53:34 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:54:15.842" starttime="20191114 11:54:14.655"></status>
</kw>
<status status="PASS" endtime="20191114 11:54:15.842" starttime="20191114 11:54:14.654"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 11:54:15.843" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 11:54:17.958" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 11:54:17.958" starttime="20191114 11:54:15.842"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 11:54:17.959" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:54:18.056" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:54:18.057" level="INFO">${startupMsg} = hadoop    1114  349  0.0 34482664 259188 ?     Sl   11:54   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 11:54:18.057" starttime="20191114 11:54:17.959"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:54:18.090" starttime="20191114 11:54:18.057"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:18.091" starttime="20191114 11:54:18.090"></status>
</kw>
<status status="PASS" endtime="20191114 11:54:18.091" starttime="20191114 11:54:14.653"></status>
</kw>
<status status="PASS" endtime="20191114 11:54:18.091" starttime="20191114 11:53:32.048"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:54:18.095" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:54:20.855" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:54:20.856" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:20.856" starttime="20191114 11:54:18.093"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:54:20.857" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:20.857" starttime="20191114 11:54:20.856"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:54:20.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:54:20.858" starttime="20191114 11:54:20.857"></status>
</kw>
<msg timestamp="20191114 11:54:20.858" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:20.858" starttime="20191114 11:54:18.092"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 11:54:20.858" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:20.858" starttime="20191114 11:54:20.858"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:20.859" starttime="20191114 11:54:20.859"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:20.859" starttime="20191114 11:54:20.859"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 11:54:20.860" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 11:54:20.861" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:20.861" starttime="20191114 11:54:20.860"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 11:54:20.861" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 11:54:20.861" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 11:54:20.861" starttime="20191114 11:54:20.861"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 11:54:20.862" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 11:54:20.862" starttime="20191114 11:54:20.861"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 11:54:20.862" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 11:54:20.862" starttime="20191114 11:54:20.862"></status>
</kw>
<msg timestamp="20191114 11:54:20.863" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 11:54:20.863" starttime="20191114 11:54:18.092"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:54:20.864" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 11:54:20.864" starttime="20191114 11:54:20.863"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:20.865" starttime="20191114 11:54:20.864"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:54:20.865" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:54:22.064" level="INFO">Read output: Last login: Thu Nov 14 11:53:28 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:54:22.065" starttime="20191114 11:54:20.865"></status>
</kw>
<status status="PASS" endtime="20191114 11:54:22.065" starttime="20191114 11:54:20.864"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 11:54:22.066" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 11:54:23.231" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 11:54:23.232" starttime="20191114 11:54:22.066"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 11:54:23.232" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:54:23.329" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:54:23.329" level="INFO">${shutdownMsg} = hadoop    1587  0.0  0.0   9556  1168 ?        Ss   11:54   0:00 bash -c sudo ps aux | grep om
hadoop    1589  0.0  0.0   9088   668 ?        S    11:54   0:00 grep om</msg>
<status status="PASS" endtime="20191114 11:54:23.329" starttime="20191114 11:54:23.232"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:54:23.394" starttime="20191114 11:54:23.329"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:23.394" starttime="20191114 11:54:23.394"></status>
</kw>
<msg timestamp="20191114 11:54:23.395" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 11:54:23.395" starttime="20191114 11:54:20.863"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:54:23.397" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:54:25.302" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:54:25.302" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:25.302" starttime="20191114 11:54:23.396"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:54:25.304" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:25.304" starttime="20191114 11:54:25.303"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:54:25.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:54:25.305" starttime="20191114 11:54:25.304"></status>
</kw>
<msg timestamp="20191114 11:54:25.305" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:25.306" starttime="20191114 11:54:23.395"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 11:54:25.306" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:25.306" starttime="20191114 11:54:25.306"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:25.307" starttime="20191114 11:54:25.307"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:25.308" starttime="20191114 11:54:25.307"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 11:54:25.308" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 11:54:25.309" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:25.309" starttime="20191114 11:54:25.308"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 11:54:25.310" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 11:54:25.310" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 11:54:25.310" starttime="20191114 11:54:25.309"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 11:54:25.310" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 11:54:25.310" starttime="20191114 11:54:25.310"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 11:54:25.311" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 11:54:25.311" starttime="20191114 11:54:25.311"></status>
</kw>
<msg timestamp="20191114 11:54:25.312" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 11:54:25.312" starttime="20191114 11:54:23.395"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:25.312" starttime="20191114 11:54:25.312"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 11:54:25.315" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191114 11:54:25.315" starttime="20191114 11:54:25.314"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 11:54:25.316" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191114 11:54:25.316" starttime="20191114 11:54:25.315"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 11:54:25.317" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191114 11:54:25.317" starttime="20191114 11:54:25.316"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:54:25.319" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:54:25.319" starttime="20191114 11:54:25.317"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:54:25.322" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:54:29.454" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:54:29.455" level="INFO">${output} = 2019-11-14 11:54:27 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 11:54:27 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 11:54:29.455" starttime="20191114 11:54:25.320"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:54:29.456" level="INFO">2019-11-14 11:54:27 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 11:54:27 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 11:54:27 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:54:29.456" starttime="20191114 11:54:29.455"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:54:29.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:54:29.457" starttime="20191114 11:54:29.456"></status>
</kw>
<status status="PASS" endtime="20191114 11:54:29.457" starttime="20191114 11:54:25.319"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:54:29.460" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:54:31.600" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:54:31.600" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRest...</msg>
<status status="PASS" endtime="20191114 11:54:31.600" starttime="20191114 11:54:29.458"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:54:31.601" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191114 11:54:31.601" starttime="20191114 11:54:31.601"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:54:31.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:54:31.602" starttime="20191114 11:54:31.602"></status>
</kw>
<msg timestamp="20191114 11:54:31.603" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRest...</msg>
<status status="PASS" endtime="20191114 11:54:31.603" starttime="20191114 11:54:29.457"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:31.603" starttime="20191114 11:54:31.603"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:54:31.604" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:54:31.604" starttime="20191114 11:54:31.603"></status>
</kw>
<status status="PASS" endtime="20191114 11:54:31.604" starttime="20191114 11:54:25.313"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:54:31.605" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 11:54:31.606" starttime="20191114 11:54:31.605"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:31.607" starttime="20191114 11:54:31.606"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:54:31.607" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:54:32.811" level="INFO">Read output: Last login: Thu Nov 14 11:54:21 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:54:32.811" starttime="20191114 11:54:31.607"></status>
</kw>
<status status="PASS" endtime="20191114 11:54:32.811" starttime="20191114 11:54:31.606"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 11:54:32.812" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 11:54:34.927" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 11:54:34.928" starttime="20191114 11:54:32.812"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 11:54:34.928" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:54:35.045" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:54:35.045" level="INFO">${startupMsg} = hadoop    1639  369  0.1 34493788 271220 ?     Sl   11:54   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 11:54:35.045" starttime="20191114 11:54:34.928"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:54:35.078" starttime="20191114 11:54:35.046"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:35.079" starttime="20191114 11:54:35.078"></status>
</kw>
<status status="PASS" endtime="20191114 11:54:35.079" starttime="20191114 11:54:31.604"></status>
</kw>
<status status="PASS" endtime="20191114 11:54:35.079" starttime="20191114 11:54:18.091"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:54:35.082" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:54:37.322" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:54:37.322" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:37.322" starttime="20191114 11:54:35.080"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:54:37.324" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:37.324" starttime="20191114 11:54:37.323"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:54:37.325" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:54:37.325" starttime="20191114 11:54:37.325"></status>
</kw>
<msg timestamp="20191114 11:54:37.326" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:37.326" starttime="20191114 11:54:35.079"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 11:54:37.327" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:37.327" starttime="20191114 11:54:37.327"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:37.328" starttime="20191114 11:54:37.327"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:37.329" starttime="20191114 11:54:37.328"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 11:54:37.330" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 11:54:37.330" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:37.330" starttime="20191114 11:54:37.329"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 11:54:37.331" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 11:54:37.331" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 11:54:37.331" starttime="20191114 11:54:37.330"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 11:54:37.332" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 11:54:37.332" starttime="20191114 11:54:37.332"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 11:54:37.332" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 11:54:37.333" starttime="20191114 11:54:37.332"></status>
</kw>
<msg timestamp="20191114 11:54:37.333" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 11:54:37.333" starttime="20191114 11:54:35.079"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:54:37.334" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 11:54:37.334" starttime="20191114 11:54:37.334"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:37.336" starttime="20191114 11:54:37.335"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:54:37.337" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:54:38.539" level="INFO">Read output: Last login: Thu Nov 14 11:54:14 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:54:38.540" starttime="20191114 11:54:37.336"></status>
</kw>
<status status="PASS" endtime="20191114 11:54:38.540" starttime="20191114 11:54:37.334"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 11:54:38.541" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 11:54:39.649" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 11:54:39.650" starttime="20191114 11:54:38.540"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 11:54:39.651" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:54:39.749" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:54:39.749" level="INFO">${shutdownMsg} = hadoop    1603  0.0  0.0   9556  1168 ?        Ss   11:54   0:00 bash -c sudo ps aux | grep om
hadoop    1605  0.0  0.0   9088   668 ?        S    11:54   0:00 grep om</msg>
<status status="PASS" endtime="20191114 11:54:39.749" starttime="20191114 11:54:39.650"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:54:39.785" starttime="20191114 11:54:39.750"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:39.786" starttime="20191114 11:54:39.785"></status>
</kw>
<msg timestamp="20191114 11:54:39.786" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 11:54:39.786" starttime="20191114 11:54:37.333"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:54:39.791" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:54:51.857" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:54:51.857" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:51.857" starttime="20191114 11:54:39.788"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:54:51.858" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:51.859" starttime="20191114 11:54:51.858"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:54:51.859" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:54:51.859" starttime="20191114 11:54:51.859"></status>
</kw>
<msg timestamp="20191114 11:54:51.860" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:51.860" starttime="20191114 11:54:39.787"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 11:54:51.860" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:51.860" starttime="20191114 11:54:51.860"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:51.861" starttime="20191114 11:54:51.860"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:51.861" starttime="20191114 11:54:51.861"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 11:54:51.862" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 11:54:51.862" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191114 11:54:51.862" starttime="20191114 11:54:51.862"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 11:54:51.863" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191114 11:54:51.863" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 11:54:51.863" starttime="20191114 11:54:51.862"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 11:54:51.863" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 11:54:51.863" starttime="20191114 11:54:51.863"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 11:54:51.864" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191114 11:54:51.864" starttime="20191114 11:54:51.863"></status>
</kw>
<msg timestamp="20191114 11:54:51.864" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191114 11:54:51.864" starttime="20191114 11:54:39.787"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 11:54:51.865" starttime="20191114 11:54:51.864"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 11:54:51.866" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191114 11:54:51.866" starttime="20191114 11:54:51.865"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 11:54:51.867" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191114 11:54:51.867" starttime="20191114 11:54:51.866"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 11:54:51.867" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191114 11:54:51.867" starttime="20191114 11:54:51.867"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:54:51.869" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:54:51.869" starttime="20191114 11:54:51.867"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:54:51.872" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:55:06.113" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:55:06.114" level="INFO">${output} = 2019-11-14 11:54:54 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191114 11:55:06.114" starttime="20191114 11:54:51.870"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:55:06.115" level="INFO">2019-11-14 11:54:54 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:54:55 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:54:56 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:54:57 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:54:58 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:54:59 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:55:00 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:55:01 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:55:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:55:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 11:55:03 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-14 11:55:04 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 11:55:04 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 11:55:04 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 11:55:06.116" starttime="20191114 11:55:06.114"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:55:06.116" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:55:06.117" starttime="20191114 11:55:06.116"></status>
</kw>
<status status="PASS" endtime="20191114 11:55:06.117" starttime="20191114 11:54:51.869"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 11:55:06.121" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 11:55:18.199" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 11:55:18.199" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
...</msg>
<status status="PASS" endtime="20191114 11:55:18.199" starttime="20191114 11:55:06.118"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 11:55:18.201" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4</msg>
<status status="PASS" endtime="20191114 11:55:18.201" starttime="20191114 11:55:18.200"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 11:55:18.202" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 11:55:18.202" starttime="20191114 11:55:18.201"></status>
</kw>
<msg timestamp="20191114 11:55:18.203" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
...</msg>
<status status="PASS" endtime="20191114 11:55:18.203" starttime="20191114 11:55:06.117"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:55:18.204" starttime="20191114 11:55:18.203"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 11:55:18.205" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 11:55:18.205" starttime="20191114 11:55:18.204"></status>
</kw>
<status status="PASS" endtime="20191114 11:55:18.206" starttime="20191114 11:54:51.865"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 11:55:18.207" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 11:55:18.207" starttime="20191114 11:55:18.207"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 11:55:18.209" starttime="20191114 11:55:18.208"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 11:55:18.210" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 11:55:19.409" level="INFO">Read output: Last login: Thu Nov 14 11:54:37 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 11:55:19.409" starttime="20191114 11:55:18.209"></status>
</kw>
<status status="PASS" endtime="20191114 11:55:19.409" starttime="20191114 11:55:18.208"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 11:55:19.410" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 11:55:21.522" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 11:55:21.523" starttime="20191114 11:55:19.410"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 11:55:21.523" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 11:55:21.620" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 11:55:21.620" level="INFO">${startupMsg} = hadoop    1655  355  0.0 34483500 262792 ?     Sl   11:55   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 11:55:21.620" starttime="20191114 11:55:21.523"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 11:55:21.685" starttime="20191114 11:55:21.621"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 11:55:21.686" starttime="20191114 11:55:21.685"></status>
</kw>
<status status="PASS" endtime="20191114 11:55:21.686" starttime="20191114 11:55:18.206"></status>
</kw>
<status status="PASS" endtime="20191114 11:55:21.686" starttime="20191114 11:54:35.079"></status>
</kw>
<status status="PASS" endtime="20191114 11:55:21.686" starttime="20191114 11:52:50.749"></status>
</kw>
<status status="PASS" endtime="20191114 11:55:21.687" critical="yes" starttime="20191114 11:52:50.749"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191114 11:55:21.688" starttime="20191114 11:48:30.211"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
