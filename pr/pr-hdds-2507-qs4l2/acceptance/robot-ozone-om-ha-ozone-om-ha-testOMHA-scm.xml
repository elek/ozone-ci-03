<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 14:06:04.337" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 14:06:04.567" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 14:06:07.155" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 14:06:07.155" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 14:06:07.155" starttime="20191115 14:06:04.566"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 14:06:07.157" level="INFO"></msg>
<status status="PASS" endtime="20191115 14:06:07.157" starttime="20191115 14:06:07.156"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 14:06:07.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 14:06:07.158" starttime="20191115 14:06:07.157"></status>
</kw>
<status status="PASS" endtime="20191115 14:06:07.159" starttime="20191115 14:06:04.565"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 14:06:07.166" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 14:06:09.330" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 14:06:09.330" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 14:06:09.330" starttime="20191115 14:06:07.164"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 14:06:09.332" level="INFO"></msg>
<status status="PASS" endtime="20191115 14:06:09.332" starttime="20191115 14:06:09.331"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 14:06:09.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 14:06:09.333" starttime="20191115 14:06:09.332"></status>
</kw>
<status status="PASS" endtime="20191115 14:06:09.333" starttime="20191115 14:06:07.159"></status>
</kw>
<status status="PASS" endtime="20191115 14:06:09.333" starttime="20191115 14:06:04.565"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 14:06:09.335" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191115 14:06:09.335" starttime="20191115 14:06:09.334"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 14:06:09.335" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191115 14:06:09.336" starttime="20191115 14:06:09.335"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 14:06:09.336" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191115 14:06:09.336" starttime="20191115 14:06:09.336"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 14:06:09.338" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 14:06:09.338" starttime="20191115 14:06:09.337"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 14:06:09.341" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 14:06:14.114" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 14:06:14.114" level="INFO">${output} = 2019-11-15 14:06:12 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 14:06:12 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 14:06:14.114" starttime="20191115 14:06:09.339"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 14:06:14.116" level="INFO">2019-11-15 14:06:12 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 14:06:12 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 14:06:12 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 14:06:14.116" starttime="20191115 14:06:14.115"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 14:06:14.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 14:06:14.117" starttime="20191115 14:06:14.116"></status>
</kw>
<status status="PASS" endtime="20191115 14:06:14.117" starttime="20191115 14:06:09.339"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 14:06:14.120" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 14:06:16.239" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 14:06:16.239" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191115 14:06:16.239" starttime="20191115 14:06:14.118"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 14:06:16.241" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191115 14:06:16.241" starttime="20191115 14:06:16.240"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 14:06:16.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 14:06:16.242" starttime="20191115 14:06:16.241"></status>
</kw>
<msg timestamp="20191115 14:06:16.242" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191115 14:06:16.242" starttime="20191115 14:06:14.117"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:16.243" starttime="20191115 14:06:16.242"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 14:06:16.244" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 14:06:16.244" starttime="20191115 14:06:16.243"></status>
</kw>
<status status="PASS" endtime="20191115 14:06:16.244" starttime="20191115 14:06:09.333"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 14:06:16.247" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 14:06:18.293" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 14:06:18.293" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:18.293" starttime="20191115 14:06:16.245"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 14:06:18.295" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:18.295" starttime="20191115 14:06:18.294"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 14:06:18.295" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 14:06:18.296" starttime="20191115 14:06:18.295"></status>
</kw>
<msg timestamp="20191115 14:06:18.296" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:18.296" starttime="20191115 14:06:16.245"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 14:06:18.297" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:18.297" starttime="20191115 14:06:18.296"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:18.298" starttime="20191115 14:06:18.297"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:18.299" starttime="20191115 14:06:18.298"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 14:06:18.299" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 14:06:18.299" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:18.299" starttime="20191115 14:06:18.299"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 14:06:18.300" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 14:06:18.300" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 14:06:18.300" starttime="20191115 14:06:18.300"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 14:06:18.301" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 14:06:18.301" starttime="20191115 14:06:18.300"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 14:06:18.302" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 14:06:18.302" starttime="20191115 14:06:18.301"></status>
</kw>
<msg timestamp="20191115 14:06:18.302" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 14:06:18.302" starttime="20191115 14:06:16.244"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 14:06:18.303" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 14:06:18.304" starttime="20191115 14:06:18.303"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:18.305" starttime="20191115 14:06:18.304"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 14:06:18.305" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 14:06:19.564" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 14:06:19.565" starttime="20191115 14:06:18.305"></status>
</kw>
<status status="PASS" endtime="20191115 14:06:19.565" starttime="20191115 14:06:18.304"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 14:06:19.566" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 14:06:19.581" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 14:06:19.581" starttime="20191115 14:06:19.565"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 14:06:19.582" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 14:06:19.659" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 14:06:19.660" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 14:06:19.660" starttime="20191115 14:06:19.582"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 14:06:19.775" starttime="20191115 14:06:19.660"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:19.776" starttime="20191115 14:06:19.775"></status>
</kw>
<msg timestamp="20191115 14:06:19.777" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 14:06:19.777" starttime="20191115 14:06:18.302"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 14:06:19.781" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 14:06:21.600" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 14:06:21.600" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:21.601" starttime="20191115 14:06:19.779"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 14:06:21.602" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:21.603" starttime="20191115 14:06:21.601"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 14:06:21.604" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 14:06:21.604" starttime="20191115 14:06:21.603"></status>
</kw>
<msg timestamp="20191115 14:06:21.604" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:21.605" starttime="20191115 14:06:19.778"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 14:06:21.605" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:21.606" starttime="20191115 14:06:21.605"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:21.607" starttime="20191115 14:06:21.606"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:21.608" starttime="20191115 14:06:21.607"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 14:06:21.609" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 14:06:21.609" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:21.609" starttime="20191115 14:06:21.608"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 14:06:21.610" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 14:06:21.610" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 14:06:21.610" starttime="20191115 14:06:21.609"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 14:06:21.611" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 14:06:21.611" starttime="20191115 14:06:21.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 14:06:21.612" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 14:06:21.612" starttime="20191115 14:06:21.612"></status>
</kw>
<msg timestamp="20191115 14:06:21.613" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 14:06:21.613" starttime="20191115 14:06:19.777"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 14:06:21.614" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 14:06:21.615" starttime="20191115 14:06:21.613"></status>
</kw>
<status status="FAIL" endtime="20191115 14:06:21.615" critical="yes" starttime="20191115 14:06:04.564">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 14:06:21.619" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 14:06:21.619" starttime="20191115 14:06:21.617"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 14:06:21.622" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 14:06:21.622" starttime="20191115 14:06:21.620"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 14:06:21.624" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 14:06:21.624" starttime="20191115 14:06:21.623"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:21.626" starttime="20191115 14:06:21.625"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 14:06:21.627" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 14:06:22.831" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 14:06:22.832" starttime="20191115 14:06:21.626"></status>
</kw>
<status status="PASS" endtime="20191115 14:06:22.832" starttime="20191115 14:06:21.624"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 14:06:22.833" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 14:06:22.848" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 14:06:22.848" starttime="20191115 14:06:22.833"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 14:06:22.849" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 14:06:22.926" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 14:06:22.927" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 14:06:22.927" starttime="20191115 14:06:22.849"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 14:06:23.041" starttime="20191115 14:06:22.927"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:23.042" starttime="20191115 14:06:23.042"></status>
</kw>
<status status="PASS" endtime="20191115 14:06:23.043" starttime="20191115 14:06:21.622"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 14:06:23.044" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 14:06:23.044" starttime="20191115 14:06:23.044"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:23.046" starttime="20191115 14:06:23.045"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 14:06:23.046" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 14:06:24.245" level="INFO">Read output: Last login: Fri Nov 15 14:06:21 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 14:06:24.246" starttime="20191115 14:06:23.046"></status>
</kw>
<status status="PASS" endtime="20191115 14:06:24.246" starttime="20191115 14:06:23.045"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 14:06:24.247" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 14:06:24.262" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 14:06:24.262" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191115 14:06:24.262" starttime="20191115 14:06:24.247"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 14:06:24.263" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191115 14:06:24.263" starttime="20191115 14:06:24.262"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 14:06:24.263" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191115 14:06:24.264" starttime="20191115 14:06:24.263"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 14:06:24.338" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191115 14:06:24.339" starttime="20191115 14:06:24.264"></status>
</kw>
<status status="FAIL" endtime="20191115 14:06:24.339" starttime="20191115 14:06:23.043"></status>
</kw>
<status status="FAIL" endtime="20191115 14:06:24.339" critical="yes" starttime="20191115 14:06:21.616">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 14:06:24.344" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 14:06:26.309" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 14:06:26.310" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:26.310" starttime="20191115 14:06:24.342"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 14:06:26.312" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:26.312" starttime="20191115 14:06:26.311"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 14:06:26.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 14:06:26.313" starttime="20191115 14:06:26.312"></status>
</kw>
<msg timestamp="20191115 14:06:26.314" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:26.314" starttime="20191115 14:06:24.341"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 14:06:26.314" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:26.315" starttime="20191115 14:06:26.314"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:26.315" starttime="20191115 14:06:26.315"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:26.316" starttime="20191115 14:06:26.316"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 14:06:26.317" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 14:06:26.317" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:26.317" starttime="20191115 14:06:26.317"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 14:06:26.318" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 14:06:26.319" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 14:06:26.319" starttime="20191115 14:06:26.318"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 14:06:26.320" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 14:06:26.320" starttime="20191115 14:06:26.319"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 14:06:26.320" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 14:06:26.321" starttime="20191115 14:06:26.320"></status>
</kw>
<msg timestamp="20191115 14:06:26.321" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 14:06:26.321" starttime="20191115 14:06:24.341"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 14:06:26.323" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 14:06:26.323" starttime="20191115 14:06:26.322"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:26.325" starttime="20191115 14:06:26.324"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 14:06:26.326" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 14:06:27.530" level="INFO">Read output: Last login: Fri Nov 15 14:06:18 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 14:06:27.530" starttime="20191115 14:06:26.325"></status>
</kw>
<status status="PASS" endtime="20191115 14:06:27.530" starttime="20191115 14:06:26.323"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 14:06:27.531" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 14:06:27.546" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 14:06:27.546" starttime="20191115 14:06:27.531"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 14:06:27.547" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 14:06:27.624" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 14:06:27.624" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 14:06:27.624" starttime="20191115 14:06:27.547"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 14:06:27.739" starttime="20191115 14:06:27.625"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:27.740" starttime="20191115 14:06:27.740"></status>
</kw>
<msg timestamp="20191115 14:06:27.741" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 14:06:27.741" starttime="20191115 14:06:26.321"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 14:06:27.745" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 14:06:29.666" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 14:06:29.666" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:29.666" starttime="20191115 14:06:27.743"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 14:06:29.668" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:29.668" starttime="20191115 14:06:29.667"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 14:06:29.669" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 14:06:29.669" starttime="20191115 14:06:29.668"></status>
</kw>
<msg timestamp="20191115 14:06:29.670" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:29.670" starttime="20191115 14:06:27.742"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 14:06:29.671" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:29.671" starttime="20191115 14:06:29.670"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:29.672" starttime="20191115 14:06:29.671"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 14:06:29.673" starttime="20191115 14:06:29.672"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 14:06:29.674" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 14:06:29.674" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 14:06:29.674" starttime="20191115 14:06:29.673"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 14:06:29.675" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 14:06:29.675" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 14:06:29.675" starttime="20191115 14:06:29.675"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 14:06:29.676" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 14:06:29.676" starttime="20191115 14:06:29.676"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 14:06:29.677" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 14:06:29.677" starttime="20191115 14:06:29.677"></status>
</kw>
<msg timestamp="20191115 14:06:29.678" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 14:06:29.678" starttime="20191115 14:06:27.741"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 14:06:29.679" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 14:06:29.679" starttime="20191115 14:06:29.678"></status>
</kw>
<status status="FAIL" endtime="20191115 14:06:29.680" starttime="20191115 14:06:24.341"></status>
</kw>
<status status="FAIL" endtime="20191115 14:06:29.680" starttime="20191115 14:06:24.340"></status>
</kw>
<status status="FAIL" endtime="20191115 14:06:29.680" critical="yes" starttime="20191115 14:06:24.340">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191115 14:06:29.682" starttime="20191115 14:06:04.341"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
