<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191115 20:31:33.038" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:31:33.191" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:31:35.678" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:31:35.678" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 20:31:35.678" starttime="20191115 20:31:33.190"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:31:35.679" level="INFO"></msg>
<status status="PASS" endtime="20191115 20:31:35.679" starttime="20191115 20:31:35.678"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:31:35.679" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:31:35.680" starttime="20191115 20:31:35.679"></status>
</kw>
<status status="PASS" endtime="20191115 20:31:35.680" starttime="20191115 20:31:33.189"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:31:35.685" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:31:37.677" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:31:37.677" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191115 20:31:37.677" starttime="20191115 20:31:35.683"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:31:37.679" level="INFO"></msg>
<status status="PASS" endtime="20191115 20:31:37.679" starttime="20191115 20:31:37.678"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:31:37.679" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:31:37.679" starttime="20191115 20:31:37.679"></status>
</kw>
<status status="PASS" endtime="20191115 20:31:37.680" starttime="20191115 20:31:35.680"></status>
</kw>
<status status="PASS" endtime="20191115 20:31:37.680" starttime="20191115 20:31:33.189"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191115 20:31:37.681" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191115 20:31:37.681" starttime="20191115 20:31:37.681"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191115 20:31:37.682" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191115 20:31:37.682" starttime="20191115 20:31:37.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191115 20:31:37.682" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191115 20:31:37.683" starttime="20191115 20:31:37.682"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 20:31:37.684" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 20:31:37.684" starttime="20191115 20:31:37.683"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:31:37.687" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:31:47.039" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:31:47.039" level="INFO">${output} = 2019-11-15 20:31:43 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 20:31:43 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191115 20:31:47.039" starttime="20191115 20:31:37.685"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:31:47.040" level="INFO">2019-11-15 20:31:43 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-15 20:31:43 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-15 20:31:43 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191115 20:31:47.040" starttime="20191115 20:31:47.039"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:31:47.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:31:47.041" starttime="20191115 20:31:47.040"></status>
</kw>
<status status="PASS" endtime="20191115 20:31:47.041" starttime="20191115 20:31:37.684"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:31:47.044" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:31:48.959" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:31:48.959" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191115 20:31:48.960" starttime="20191115 20:31:47.042"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:31:48.961" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191115 20:31:48.961" starttime="20191115 20:31:48.960"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:31:48.962" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:31:48.962" starttime="20191115 20:31:48.961"></status>
</kw>
<msg timestamp="20191115 20:31:48.962" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191115 20:31:48.962" starttime="20191115 20:31:47.041"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:31:48.963" starttime="20191115 20:31:48.962"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191115 20:31:48.964" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191115 20:31:48.964" starttime="20191115 20:31:48.963"></status>
</kw>
<status status="PASS" endtime="20191115 20:31:48.964" starttime="20191115 20:31:37.680"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:31:48.967" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:31:50.812" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:31:50.813" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:31:50.813" starttime="20191115 20:31:48.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:31:50.814" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:31:50.814" starttime="20191115 20:31:50.813"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:31:50.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:31:50.815" starttime="20191115 20:31:50.814"></status>
</kw>
<msg timestamp="20191115 20:31:50.815" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:31:50.815" starttime="20191115 20:31:48.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:31:50.815" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:31:50.815" starttime="20191115 20:31:50.815"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:31:50.816" starttime="20191115 20:31:50.816"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:31:50.817" starttime="20191115 20:31:50.817"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:31:50.817" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:31:50.818" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:31:50.818" starttime="20191115 20:31:50.817"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:31:50.818" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:31:50.818" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:31:50.818" starttime="20191115 20:31:50.818"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:31:50.819" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:31:50.819" starttime="20191115 20:31:50.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:31:50.819" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:31:50.819" starttime="20191115 20:31:50.819"></status>
</kw>
<msg timestamp="20191115 20:31:50.820" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:31:50.820" starttime="20191115 20:31:48.964"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:31:50.821" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 20:31:50.821" starttime="20191115 20:31:50.820"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:31:50.822" starttime="20191115 20:31:50.821"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:31:50.823" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:31:52.059" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:31:52.059" starttime="20191115 20:31:50.822"></status>
</kw>
<status status="PASS" endtime="20191115 20:31:52.059" starttime="20191115 20:31:50.821"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:31:52.060" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:31:52.108" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:31:52.108" starttime="20191115 20:31:52.060"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:31:52.109" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:31:52.194" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:31:52.195" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:31:52.195" starttime="20191115 20:31:52.109"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:31:52.311" starttime="20191115 20:31:52.195"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:31:52.313" starttime="20191115 20:31:52.312"></status>
</kw>
<msg timestamp="20191115 20:31:52.313" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 20:31:52.313" starttime="20191115 20:31:50.820"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:31:52.319" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:31:55.209" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:31:55.209" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:31:55.210" starttime="20191115 20:31:52.315"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:31:55.211" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:31:55.211" starttime="20191115 20:31:55.210"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:31:55.212" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:31:55.213" starttime="20191115 20:31:55.212"></status>
</kw>
<msg timestamp="20191115 20:31:55.213" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:31:55.213" starttime="20191115 20:31:52.314"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:31:55.214" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:31:55.214" starttime="20191115 20:31:55.214"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:31:55.215" starttime="20191115 20:31:55.215"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:31:55.216" starttime="20191115 20:31:55.216"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:31:55.217" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:31:55.217" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:31:55.217" starttime="20191115 20:31:55.216"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:31:55.218" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:31:55.218" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:31:55.218" starttime="20191115 20:31:55.218"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:31:55.219" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:31:55.219" starttime="20191115 20:31:55.219"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:31:55.220" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:31:55.220" starttime="20191115 20:31:55.220"></status>
</kw>
<msg timestamp="20191115 20:31:55.221" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:31:55.221" starttime="20191115 20:31:52.313"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 20:31:55.222" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 20:31:55.222" starttime="20191115 20:31:55.221"></status>
</kw>
<status status="FAIL" endtime="20191115 20:31:55.223" critical="yes" starttime="20191115 20:31:33.188">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191115 20:31:55.227" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:31:55.227" starttime="20191115 20:31:55.225"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191115 20:31:55.229" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191115 20:31:55.230" starttime="20191115 20:31:55.227"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:31:55.232" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:31:55.232" starttime="20191115 20:31:55.231"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:31:55.234" starttime="20191115 20:31:55.233"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:31:55.234" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:31:56.439" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:31:56.439" starttime="20191115 20:31:55.234"></status>
</kw>
<status status="PASS" endtime="20191115 20:31:56.439" starttime="20191115 20:31:55.232"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:31:56.440" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:31:56.455" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:31:56.456" starttime="20191115 20:31:56.440"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:31:56.457" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:31:56.534" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:31:56.535" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:31:56.535" starttime="20191115 20:31:56.456"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:31:56.650" starttime="20191115 20:31:56.535"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:31:56.651" starttime="20191115 20:31:56.650"></status>
</kw>
<status status="PASS" endtime="20191115 20:31:56.651" starttime="20191115 20:31:55.230"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:31:56.652" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191115 20:31:56.653" starttime="20191115 20:31:56.652"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:31:56.654" starttime="20191115 20:31:56.653"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:31:56.655" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:31:57.861" level="INFO">Read output: Last login: Fri Nov 15 20:31:55 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:31:57.861" starttime="20191115 20:31:56.654"></status>
</kw>
<status status="PASS" endtime="20191115 20:31:57.862" starttime="20191115 20:31:56.653"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191115 20:31:57.863" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191115 20:31:57.877" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:31:57.877" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191115 20:31:57.877" starttime="20191115 20:31:57.862"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191115 20:31:57.878" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191115 20:31:57.878" starttime="20191115 20:31:57.878"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191115 20:31:57.879" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191115 20:31:57.879" starttime="20191115 20:31:57.879"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191115 20:31:57.922" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191115 20:31:57.923" starttime="20191115 20:31:57.880"></status>
</kw>
<status status="FAIL" endtime="20191115 20:31:57.923" starttime="20191115 20:31:56.651"></status>
</kw>
<status status="FAIL" endtime="20191115 20:31:57.923" critical="yes" starttime="20191115 20:31:55.223">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:31:57.935" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:32:00.040" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:32:00.040" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:32:00.040" starttime="20191115 20:31:57.932"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:32:00.041" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:32:00.041" starttime="20191115 20:32:00.041"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:32:00.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:32:00.042" starttime="20191115 20:32:00.042"></status>
</kw>
<msg timestamp="20191115 20:32:00.043" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:32:00.043" starttime="20191115 20:31:57.931"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:32:00.043" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:32:00.043" starttime="20191115 20:32:00.043"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:32:00.044" starttime="20191115 20:32:00.043"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:32:00.044" starttime="20191115 20:32:00.044"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:32:00.045" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:32:00.045" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:32:00.045" starttime="20191115 20:32:00.044"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:32:00.045" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:32:00.045" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:32:00.045" starttime="20191115 20:32:00.045"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:32:00.046" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:32:00.046" starttime="20191115 20:32:00.046"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:32:00.046" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:32:00.047" starttime="20191115 20:32:00.046"></status>
</kw>
<msg timestamp="20191115 20:32:00.047" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:32:00.047" starttime="20191115 20:31:57.930"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191115 20:32:00.048" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191115 20:32:00.048" starttime="20191115 20:32:00.048"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191115 20:32:00.049" starttime="20191115 20:32:00.049"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191115 20:32:00.050" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191115 20:32:01.247" level="INFO">Read output: Last login: Fri Nov 15 20:31:51 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191115 20:32:01.247" starttime="20191115 20:32:00.049"></status>
</kw>
<status status="PASS" endtime="20191115 20:32:01.248" starttime="20191115 20:32:00.048"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191115 20:32:01.249" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191115 20:32:01.263" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191115 20:32:01.263" starttime="20191115 20:32:01.248"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191115 20:32:01.264" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191115 20:32:01.340" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191115 20:32:01.341" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191115 20:32:01.341" starttime="20191115 20:32:01.263"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191115 20:32:01.455" starttime="20191115 20:32:01.341"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191115 20:32:01.456" starttime="20191115 20:32:01.456"></status>
</kw>
<msg timestamp="20191115 20:32:01.457" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191115 20:32:01.457" starttime="20191115 20:32:00.047"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191115 20:32:01.459" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191115 20:32:03.492" level="INFO">${rc} = 0</msg>
<msg timestamp="20191115 20:32:03.492" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:32:03.492" starttime="20191115 20:32:01.458"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191115 20:32:03.493" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:32:03.493" starttime="20191115 20:32:03.492"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191115 20:32:03.494" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191115 20:32:03.494" starttime="20191115 20:32:03.493"></status>
</kw>
<msg timestamp="20191115 20:32:03.494" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:32:03.494" starttime="20191115 20:32:01.457"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191115 20:32:03.495" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:32:03.495" starttime="20191115 20:32:03.494"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191115 20:32:03.495" starttime="20191115 20:32:03.495"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191115 20:32:03.496" starttime="20191115 20:32:03.495"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191115 20:32:03.496" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191115 20:32:03.496" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191115 20:32:03.496" starttime="20191115 20:32:03.496"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191115 20:32:03.497" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191115 20:32:03.497" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191115 20:32:03.497" starttime="20191115 20:32:03.497"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191115 20:32:03.498" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:32:03.498" starttime="20191115 20:32:03.497"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191115 20:32:03.498" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191115 20:32:03.498" starttime="20191115 20:32:03.498"></status>
</kw>
<msg timestamp="20191115 20:32:03.498" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191115 20:32:03.498" starttime="20191115 20:32:01.457"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191115 20:32:03.499" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191115 20:32:03.499" starttime="20191115 20:32:03.499"></status>
</kw>
<status status="FAIL" endtime="20191115 20:32:03.499" starttime="20191115 20:31:57.930"></status>
</kw>
<status status="FAIL" endtime="20191115 20:32:03.500" starttime="20191115 20:31:57.929"></status>
</kw>
<status status="FAIL" endtime="20191115 20:32:03.500" critical="yes" starttime="20191115 20:31:57.927">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191115 20:32:03.501" starttime="20191115 20:31:33.039"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
