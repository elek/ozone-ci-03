<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191106 06:24:06.373" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:24:06.552" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:24:09.332" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:24:09.333" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191106 06:24:09.333" starttime="20191106 06:24:06.550"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:24:09.334" level="INFO"></msg>
<status status="PASS" endtime="20191106 06:24:09.334" starttime="20191106 06:24:09.333"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:24:09.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:24:09.335" starttime="20191106 06:24:09.334"></status>
</kw>
<status status="PASS" endtime="20191106 06:24:09.335" starttime="20191106 06:24:06.549"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:24:09.340" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:24:11.495" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:24:11.495" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191106 06:24:11.495" starttime="20191106 06:24:09.338"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:24:11.496" level="INFO"></msg>
<status status="PASS" endtime="20191106 06:24:11.496" starttime="20191106 06:24:11.496"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:24:11.497" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:24:11.497" starttime="20191106 06:24:11.496"></status>
</kw>
<status status="PASS" endtime="20191106 06:24:11.497" starttime="20191106 06:24:09.335"></status>
</kw>
<status status="PASS" endtime="20191106 06:24:11.497" starttime="20191106 06:24:06.549"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 06:24:11.499" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191106 06:24:11.499" starttime="20191106 06:24:11.498"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 06:24:11.499" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191106 06:24:11.499" starttime="20191106 06:24:11.499"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 06:24:11.500" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191106 06:24:11.500" starttime="20191106 06:24:11.500"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:24:11.502" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:24:11.502" starttime="20191106 06:24:11.500"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:24:11.504" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:24:16.031" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:24:16.031" level="INFO">${output} = 2019-11-06 06:24:14 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 06:24:14 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 06:24:16.031" starttime="20191106 06:24:11.503"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:24:16.033" level="INFO">2019-11-06 06:24:14 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 06:24:14 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 06:24:14 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 06:24:16.033" starttime="20191106 06:24:16.032"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:24:16.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:24:16.035" starttime="20191106 06:24:16.034"></status>
</kw>
<status status="PASS" endtime="20191106 06:24:16.035" starttime="20191106 06:24:11.502"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:24:16.039" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:24:18.254" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:24:18.254" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191106 06:24:18.254" starttime="20191106 06:24:16.037"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:24:18.255" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191106 06:24:18.256" starttime="20191106 06:24:18.255"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:24:18.256" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:24:18.256" starttime="20191106 06:24:18.256"></status>
</kw>
<msg timestamp="20191106 06:24:18.257" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191106 06:24:18.257" starttime="20191106 06:24:16.035"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:24:18.257" starttime="20191106 06:24:18.257"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:24:18.258" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:24:18.258" starttime="20191106 06:24:18.257"></status>
</kw>
<status status="PASS" endtime="20191106 06:24:18.258" starttime="20191106 06:24:11.498"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:24:18.261" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:24:20.317" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:24:20.317" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:24:20.317" starttime="20191106 06:24:18.259"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:24:20.319" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:24:20.319" starttime="20191106 06:24:20.318"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:24:20.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:24:20.320" starttime="20191106 06:24:20.319"></status>
</kw>
<msg timestamp="20191106 06:24:20.320" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:24:20.320" starttime="20191106 06:24:18.259"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 06:24:20.321" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:24:20.321" starttime="20191106 06:24:20.321"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 06:24:20.322" starttime="20191106 06:24:20.321"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 06:24:20.323" starttime="20191106 06:24:20.323"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 06:24:20.324" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 06:24:20.324" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:24:20.324" starttime="20191106 06:24:20.323"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 06:24:20.325" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 06:24:20.325" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 06:24:20.325" starttime="20191106 06:24:20.325"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 06:24:20.326" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 06:24:20.326" starttime="20191106 06:24:20.326"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 06:24:20.327" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 06:24:20.327" starttime="20191106 06:24:20.326"></status>
</kw>
<msg timestamp="20191106 06:24:20.327" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 06:24:20.327" starttime="20191106 06:24:18.258"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:24:20.329" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 06:24:20.329" starttime="20191106 06:24:20.329"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:24:20.331" starttime="20191106 06:24:20.330"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:24:20.332" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:24:21.572" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:24:21.573" starttime="20191106 06:24:20.331"></status>
</kw>
<status status="PASS" endtime="20191106 06:24:21.573" starttime="20191106 06:24:20.330"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 06:24:21.574" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 06:24:31.748" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:24:31.748" starttime="20191106 06:24:21.573"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 06:24:31.749" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:24:31.858" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:24:31.858" level="INFO">${shutdownMsg} = hadoop     456  0.0  0.0   9556  1164 ?        Ss   06:24   0:00 bash -c sudo ps aux | grep om
hadoop     458  0.0  0.0   9088   668 ?        S    06:24   0:00 grep om</msg>
<status status="PASS" endtime="20191106 06:24:31.858" starttime="20191106 06:24:31.749"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:24:31.923" starttime="20191106 06:24:31.859"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:24:31.925" starttime="20191106 06:24:31.924"></status>
</kw>
<msg timestamp="20191106 06:24:31.925" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 06:24:31.925" starttime="20191106 06:24:20.328"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:24:31.930" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:24:44.123" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:24:44.123" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:24:44.124" starttime="20191106 06:24:31.927"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:24:44.125" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:24:44.125" starttime="20191106 06:24:44.124"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:24:44.125" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:24:44.126" starttime="20191106 06:24:44.125"></status>
</kw>
<msg timestamp="20191106 06:24:44.126" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:24:44.126" starttime="20191106 06:24:31.926"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 06:24:44.126" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:24:44.127" starttime="20191106 06:24:44.126"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 06:24:44.127" starttime="20191106 06:24:44.127"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 06:24:44.128" starttime="20191106 06:24:44.127"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 06:24:44.128" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 06:24:44.128" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:24:44.128" starttime="20191106 06:24:44.128"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 06:24:44.129" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 06:24:44.129" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 06:24:44.129" starttime="20191106 06:24:44.129"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 06:24:44.130" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 06:24:44.130" starttime="20191106 06:24:44.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 06:24:44.130" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 06:24:44.130" starttime="20191106 06:24:44.130"></status>
</kw>
<msg timestamp="20191106 06:24:44.131" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191106 06:24:44.131" starttime="20191106 06:24:31.925"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 06:24:44.131" starttime="20191106 06:24:44.131"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 06:24:44.132" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191106 06:24:44.132" starttime="20191106 06:24:44.132"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 06:24:44.133" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191106 06:24:44.133" starttime="20191106 06:24:44.133"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 06:24:44.134" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191106 06:24:44.134" starttime="20191106 06:24:44.133"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:24:44.135" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:24:44.135" starttime="20191106 06:24:44.134"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:24:44.138" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:24:58.727" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:24:58.728" level="INFO">${output} = 2019-11-06 06:24:47 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191106 06:24:58.728" starttime="20191106 06:24:44.136"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:24:58.729" level="INFO">2019-11-06 06:24:47 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:24:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:24:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:24:50 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:24:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:24:52 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:24:53 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:24:54 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:24:55 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:24:56 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:24:57 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 06:24:57 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 06:24:57 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 06:24:58.729" starttime="20191106 06:24:58.728"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:24:58.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:24:58.730" starttime="20191106 06:24:58.729"></status>
</kw>
<status status="PASS" endtime="20191106 06:24:58.730" starttime="20191106 06:24:44.136"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:24:58.734" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:25:10.973" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:25:10.973" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191106 06:25:10.973" starttime="20191106 06:24:58.731"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:25:10.975" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191106 06:25:10.975" starttime="20191106 06:25:10.974"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:25:10.976" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:25:10.976" starttime="20191106 06:25:10.975"></status>
</kw>
<msg timestamp="20191106 06:25:10.976" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191106 06:25:10.976" starttime="20191106 06:24:58.731"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:25:10.977" starttime="20191106 06:25:10.977"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:25:10.978" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:25:10.978" starttime="20191106 06:25:10.977"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:10.978" starttime="20191106 06:24:44.131"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:25:10.980" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 06:25:10.980" starttime="20191106 06:25:10.980"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:25:10.982" starttime="20191106 06:25:10.981"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:25:10.983" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:25:12.183" level="INFO">Read output: Last login: Wed Nov  6 06:24:20 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:25:12.183" starttime="20191106 06:25:10.982"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:12.184" starttime="20191106 06:25:10.981"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 06:25:12.185" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 06:25:14.376" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:25:14.376" starttime="20191106 06:25:12.184"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 06:25:14.377" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:25:14.442" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:25:14.443" level="INFO">${startupMsg} = hadoop     509  369  0.0 34484876 229984 ?     Sl   06:25   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 06:25:14.443" starttime="20191106 06:25:14.376"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:25:14.446" starttime="20191106 06:25:14.444"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:25:14.447" starttime="20191106 06:25:14.447"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:14.448" starttime="20191106 06:25:10.979"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:14.448" critical="yes" starttime="20191106 06:24:06.548"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191106 06:25:14.452" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191106 06:25:14.452" starttime="20191106 06:25:14.450"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191106 06:25:14.454" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191106 06:25:14.454" starttime="20191106 06:25:14.453"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:25:14.456" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 06:25:14.456" starttime="20191106 06:25:14.455"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:25:14.458" starttime="20191106 06:25:14.457"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:25:14.458" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:25:15.646" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:25:15.646" starttime="20191106 06:25:14.458"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:15.646" starttime="20191106 06:25:14.456"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 06:25:15.647" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 06:25:25.807" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:25:25.808" starttime="20191106 06:25:15.647"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 06:25:25.809" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:25:25.917" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:25:25.918" level="INFO">${shutdownMsg} = hadoop     499  0.0  0.0   9556  1168 ?        Ss   06:25   0:00 bash -c sudo ps aux | grep om
hadoop     501  0.0  0.0   9088   668 ?        S    06:25   0:00 grep om</msg>
<status status="PASS" endtime="20191106 06:25:25.918" starttime="20191106 06:25:25.808"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:25:25.951" starttime="20191106 06:25:25.918"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:25:25.952" starttime="20191106 06:25:25.951"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:25.953" starttime="20191106 06:25:14.455"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:25:25.955" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 06:25:25.955" starttime="20191106 06:25:25.954"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:25:25.957" starttime="20191106 06:25:25.956"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:25:25.958" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:25:27.163" level="INFO">Read output: Last login: Wed Nov  6 06:25:14 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:25:27.163" starttime="20191106 06:25:25.957"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:27.163" starttime="20191106 06:25:25.955"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 06:25:27.165" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 06:25:27.200" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:25:27.200" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 06:25:27.200" starttime="20191106 06:25:27.164"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 06:25:27.201" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 06:25:27.201" starttime="20191106 06:25:27.200"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 06:25:27.202" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191106 06:25:27.202" starttime="20191106 06:25:27.201"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 06:25:27.247" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191106 06:25:27.257" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191106 06:25:27.257" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191106 06:25:27.257" starttime="20191106 06:25:27.203"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191106 06:25:27.258" level="INFO">Length is 2</msg>
<msg timestamp="20191106 06:25:27.258" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191106 06:25:27.258" starttime="20191106 06:25:27.257"></status>
</kw>
<msg timestamp="20191106 06:25:27.259" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191106 06:25:27.259" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191106 06:25:27.259" starttime="20191106 06:25:25.953"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:25:27.262" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:25:29.381" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:25:29.381" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:25:29.381" starttime="20191106 06:25:27.260"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:25:29.383" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:25:29.383" starttime="20191106 06:25:29.382"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:25:29.384" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:25:29.384" starttime="20191106 06:25:29.383"></status>
</kw>
<msg timestamp="20191106 06:25:29.384" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:25:29.385" starttime="20191106 06:25:27.260"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 06:25:29.385" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:25:29.385" starttime="20191106 06:25:29.385"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 06:25:29.386" starttime="20191106 06:25:29.386"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 06:25:29.387" starttime="20191106 06:25:29.386"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 06:25:29.388" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 06:25:29.388" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:25:29.388" starttime="20191106 06:25:29.387"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 06:25:29.389" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191106 06:25:29.389" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 06:25:29.389" starttime="20191106 06:25:29.388"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 06:25:29.390" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 06:25:29.390" starttime="20191106 06:25:29.389"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 06:25:29.391" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191106 06:25:29.391" starttime="20191106 06:25:29.390"></status>
</kw>
<msg timestamp="20191106 06:25:29.391" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 06:25:29.391" starttime="20191106 06:25:27.259"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191106 06:25:29.394" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191106 06:25:29.394" starttime="20191106 06:25:29.392"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 06:25:29.397" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191106 06:25:29.397" starttime="20191106 06:25:29.396"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 06:25:29.397" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191106 06:25:29.398" starttime="20191106 06:25:29.397"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:25:29.402" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:25:34.016" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:25:34.016" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 06:25:34.016" starttime="20191106 06:25:29.399"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:25:34.017" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 06:25:34.017" starttime="20191106 06:25:34.017"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:25:34.018" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:25:34.018" starttime="20191106 06:25:34.018"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:34.019" starttime="20191106 06:25:29.398"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:25:34.024" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:25:36.236" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:25:36.236" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573021531445,
  "modificationTime": 1573021533594,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 06:25:36.236" starttime="20191106 06:25:34.021"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:25:36.238" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573021531445,
  "modificationTime": 1573021533594,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103089539084320770,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 06:25:36.238" starttime="20191106 06:25:36.237"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:25:36.239" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:25:36.240" starttime="20191106 06:25:36.239"></status>
</kw>
<msg timestamp="20191106 06:25:36.240" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573021531445,
  "modificationTime": 1573021533594,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 06:25:36.240" starttime="20191106 06:25:34.019"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 06:25:36.241" starttime="20191106 06:25:36.241"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:36.242" starttime="20191106 06:25:29.398"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:36.242" starttime="20191106 06:25:29.396"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 06:25:36.243" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191106 06:25:36.243" starttime="20191106 06:25:36.242"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 06:25:36.244" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191106 06:25:36.244" starttime="20191106 06:25:36.243"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:25:36.249" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:25:40.681" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:25:40.681" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 06:25:40.681" starttime="20191106 06:25:36.247"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:25:40.683" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 06:25:40.683" starttime="20191106 06:25:40.682"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:25:40.684" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:25:40.684" starttime="20191106 06:25:40.683"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:40.684" starttime="20191106 06:25:36.245"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:25:40.690" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:25:43.064" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:25:43.064" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573021538402,
  "modificationTime": 1573021540276,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 06:25:43.064" starttime="20191106 06:25:40.687"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:25:43.065" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573021538402,
  "modificationTime": 1573021540276,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103089539540582400,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 06:25:43.065" starttime="20191106 06:25:43.064"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:25:43.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:25:43.066" starttime="20191106 06:25:43.065"></status>
</kw>
<msg timestamp="20191106 06:25:43.066" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573021538402,
  "modificationTime": 1573021540276,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 06:25:43.066" starttime="20191106 06:25:40.684"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 06:25:43.067" starttime="20191106 06:25:43.066"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:43.067" starttime="20191106 06:25:36.244"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:43.067" starttime="20191106 06:25:36.242"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 06:25:43.068" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191106 06:25:43.068" starttime="20191106 06:25:43.067"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 06:25:43.068" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191106 06:25:43.068" starttime="20191106 06:25:43.068"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:25:43.072" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:25:47.785" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:25:47.785" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 06:25:47.785" starttime="20191106 06:25:43.070"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:25:47.786" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 06:25:47.787" starttime="20191106 06:25:47.786"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:25:47.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:25:47.788" starttime="20191106 06:25:47.787"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:47.788" starttime="20191106 06:25:43.069"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:25:47.793" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:25:50.173" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:25:50.174" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573021545218,
  "modificationTime": 1573021547371,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 06:25:50.174" starttime="20191106 06:25:47.791"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:25:50.176" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573021545218,
  "modificationTime": 1573021547371,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103089539987275780,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 06:25:50.176" starttime="20191106 06:25:50.175"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:25:50.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:25:50.177" starttime="20191106 06:25:50.176"></status>
</kw>
<msg timestamp="20191106 06:25:50.178" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573021545218,
  "modificationTime": 1573021547371,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 06:25:50.178" starttime="20191106 06:25:47.788"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 06:25:50.179" starttime="20191106 06:25:50.178"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:50.179" starttime="20191106 06:25:43.069"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:50.179" starttime="20191106 06:25:43.067"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 06:25:50.181" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191106 06:25:50.181" starttime="20191106 06:25:50.180"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 06:25:50.182" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191106 06:25:50.182" starttime="20191106 06:25:50.181"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:25:50.187" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:25:54.678" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:25:54.679" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 06:25:54.679" starttime="20191106 06:25:50.185"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:25:54.680" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 06:25:54.680" starttime="20191106 06:25:54.679"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:25:54.681" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:25:54.681" starttime="20191106 06:25:54.681"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:54.682" starttime="20191106 06:25:50.183"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:25:54.686" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:25:57.059" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:25:57.059" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573021552428,
  "modificationTime": 1573021554272,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 06:25:57.059" starttime="20191106 06:25:54.684"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:25:57.060" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573021552428,
  "modificationTime": 1573021554272,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103089540459790340,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 06:25:57.061" starttime="20191106 06:25:57.060"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:25:57.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:25:57.061" starttime="20191106 06:25:57.061"></status>
</kw>
<msg timestamp="20191106 06:25:57.062" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573021552428,
  "modificationTime": 1573021554272,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 06:25:57.062" starttime="20191106 06:25:54.682"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 06:25:57.062" starttime="20191106 06:25:57.062"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:57.062" starttime="20191106 06:25:50.182"></status>
</kw>
<status status="PASS" endtime="20191106 06:25:57.062" starttime="20191106 06:25:50.180"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 06:25:57.063" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:25:57.063" starttime="20191106 06:25:57.063"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 06:25:57.064" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:25:57.064" starttime="20191106 06:25:57.063"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:25:57.067" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:26:01.394" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:26:01.395" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 06:26:01.395" starttime="20191106 06:25:57.065"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:26:01.397" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 06:26:01.397" starttime="20191106 06:26:01.396"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:26:01.398" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:26:01.398" starttime="20191106 06:26:01.397"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:01.399" starttime="20191106 06:25:57.065"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:26:01.404" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:26:03.614" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:26:03.614" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573021559170,
  "modificationTime": 1573021560957,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 06:26:03.614" starttime="20191106 06:26:01.402"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:26:03.616" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573021559170,
  "modificationTime": 1573021560957,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103089540901699580,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 06:26:03.616" starttime="20191106 06:26:03.615"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:26:03.617" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:26:03.617" starttime="20191106 06:26:03.617"></status>
</kw>
<msg timestamp="20191106 06:26:03.618" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573021559170,
  "modificationTime": 1573021560957,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 06:26:03.618" starttime="20191106 06:26:01.399"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:03.619" starttime="20191106 06:26:03.618"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:03.619" starttime="20191106 06:25:57.064"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:03.620" starttime="20191106 06:25:57.063"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:03.620" starttime="20191106 06:25:29.395"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:03.620" starttime="20191106 06:25:29.395"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:26:03.622" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 06:26:03.622" starttime="20191106 06:26:03.621"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:03.624" starttime="20191106 06:26:03.623"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:26:03.625" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:26:04.832" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:26:04.833" starttime="20191106 06:26:03.625"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:04.833" starttime="20191106 06:26:03.623"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 06:26:04.834" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 06:26:04.849" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:26:04.850" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 06:26:04.850" starttime="20191106 06:26:04.833"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 06:26:04.850" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 06:26:04.851" starttime="20191106 06:26:04.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 06:26:04.852" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191106 06:26:04.852" starttime="20191106 06:26:04.851"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 06:26:04.929" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191106 06:26:04.938" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191106 06:26:04.938" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191106 06:26:04.939" starttime="20191106 06:26:04.852"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191106 06:26:04.940" level="INFO">Length is 3</msg>
<msg timestamp="20191106 06:26:04.940" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191106 06:26:04.940" starttime="20191106 06:26:04.939"></status>
</kw>
<msg timestamp="20191106 06:26:04.940" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191106 06:26:04.940" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191106 06:26:04.941" starttime="20191106 06:26:03.620"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191106 06:26:04.942" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191106 06:26:04.942" starttime="20191106 06:26:04.941"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:04.942" starttime="20191106 06:25:29.392"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:04.942" starttime="20191106 06:25:29.392"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:04.943" starttime="20191106 06:26:04.942"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:26:04.945" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 06:26:04.945" starttime="20191106 06:26:04.944"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:04.947" starttime="20191106 06:26:04.946"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:26:04.948" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:26:06.135" level="INFO">Read output: Last login: Wed Nov  6 06:25:26 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:26:06.136" starttime="20191106 06:26:04.947"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:06.136" starttime="20191106 06:26:04.945"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 06:26:06.138" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 06:26:08.318" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:26:08.319" starttime="20191106 06:26:06.137"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 06:26:08.320" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:26:08.428" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:26:08.428" level="INFO">${startupMsg} = hadoop     574  348  0.0 34480612 217384 ?     Sl   06:26   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 06:26:08.428" starttime="20191106 06:26:08.319"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:26:08.462" starttime="20191106 06:26:08.429"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:08.462" starttime="20191106 06:26:08.462"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:08.463" starttime="20191106 06:26:04.943"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:26:08.465" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 06:26:08.465" starttime="20191106 06:26:08.464"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:08.466" starttime="20191106 06:26:08.466"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:26:08.467" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:26:09.654" level="INFO">Read output: Last login: Wed Nov  6 06:26:05 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:26:09.655" starttime="20191106 06:26:08.467"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:09.655" starttime="20191106 06:26:08.465"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 06:26:09.657" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 06:26:09.672" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:26:09.672" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 06:26:09.672" starttime="20191106 06:26:09.656"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 06:26:09.673" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 06:26:09.673" starttime="20191106 06:26:09.673"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 06:26:09.675" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191106 06:26:09.675" starttime="20191106 06:26:09.674"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 06:26:09.754" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191106 06:26:09.762" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191106 06:26:09.763" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191106 06:26:09.763" starttime="20191106 06:26:09.675"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191106 06:26:09.764" level="INFO">Length is 2</msg>
<msg timestamp="20191106 06:26:09.764" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191106 06:26:09.764" starttime="20191106 06:26:09.763"></status>
</kw>
<msg timestamp="20191106 06:26:09.764" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191106 06:26:09.765" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191106 06:26:09.765" starttime="20191106 06:26:08.463"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:09.766" starttime="20191106 06:26:09.765"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191106 06:26:10.767" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191106 06:26:10.767" starttime="20191106 06:26:09.766"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:10.767" starttime="20191106 06:26:08.463"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:26:10.769" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 06:26:10.769" starttime="20191106 06:26:10.768"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:10.770" starttime="20191106 06:26:10.769"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:26:10.770" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:26:11.969" level="INFO">Read output: Last login: Wed Nov  6 06:26:08 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:26:11.970" starttime="20191106 06:26:10.770"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:11.970" starttime="20191106 06:26:10.769"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 06:26:11.971" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 06:26:11.987" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:26:11.987" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 06:26:11.987" starttime="20191106 06:26:11.971"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 06:26:11.988" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 06:26:11.988" starttime="20191106 06:26:11.987"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 06:26:11.989" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191106 06:26:11.989" starttime="20191106 06:26:11.988"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 06:26:12.068" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191106 06:26:12.078" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191106 06:26:12.078" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191106 06:26:12.078" starttime="20191106 06:26:11.989"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191106 06:26:12.079" level="INFO">Length is 3</msg>
<msg timestamp="20191106 06:26:12.079" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191106 06:26:12.079" starttime="20191106 06:26:12.079"></status>
</kw>
<msg timestamp="20191106 06:26:12.080" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191106 06:26:12.080" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191106 06:26:12.080" starttime="20191106 06:26:10.767"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191106 06:26:12.081" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191106 06:26:12.081" starttime="20191106 06:26:12.080"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:12.081" starttime="20191106 06:26:10.767"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:12.081" starttime="20191106 06:26:08.463"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:12.082" starttime="20191106 06:26:12.082"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:12.083" starttime="20191106 06:26:12.083"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:12.084" critical="yes" starttime="20191106 06:25:14.449"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:26:12.089" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:26:14.082" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:26:14.082" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:14.082" starttime="20191106 06:26:12.087"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:26:14.083" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:14.083" starttime="20191106 06:26:14.082"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:26:14.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:26:14.084" starttime="20191106 06:26:14.083"></status>
</kw>
<msg timestamp="20191106 06:26:14.084" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:14.084" starttime="20191106 06:26:12.086"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 06:26:14.085" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:14.085" starttime="20191106 06:26:14.084"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:14.085" starttime="20191106 06:26:14.085"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:14.086" starttime="20191106 06:26:14.086"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 06:26:14.086" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 06:26:14.087" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:14.087" starttime="20191106 06:26:14.086"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 06:26:14.087" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191106 06:26:14.087" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 06:26:14.088" starttime="20191106 06:26:14.087"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 06:26:14.088" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 06:26:14.088" starttime="20191106 06:26:14.088"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 06:26:14.089" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191106 06:26:14.089" starttime="20191106 06:26:14.089"></status>
</kw>
<msg timestamp="20191106 06:26:14.090" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 06:26:14.090" starttime="20191106 06:26:12.086"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:26:14.091" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 06:26:14.091" starttime="20191106 06:26:14.091"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:14.093" starttime="20191106 06:26:14.092"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:26:14.093" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:26:15.292" level="INFO">Read output: Last login: Wed Nov  6 06:26:03 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:26:15.294" starttime="20191106 06:26:14.093"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:15.294" starttime="20191106 06:26:14.091"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 06:26:15.295" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 06:26:25.445" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:26:25.446" starttime="20191106 06:26:15.294"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 06:26:25.447" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:26:25.556" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:26:25.557" level="INFO">${shutdownMsg} = hadoop     525  0.0  0.0   9556  1168 ?        Ss   06:26   0:00 bash -c sudo ps aux | grep om
hadoop     527  0.0  0.0   9088   672 ?        S    06:26   0:00 grep om</msg>
<status status="PASS" endtime="20191106 06:26:25.557" starttime="20191106 06:26:25.447"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:26:25.623" starttime="20191106 06:26:25.558"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:25.624" starttime="20191106 06:26:25.623"></status>
</kw>
<msg timestamp="20191106 06:26:25.624" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 06:26:25.624" starttime="20191106 06:26:14.090"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:26:25.638" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:26:27.811" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:26:27.811" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:27.812" starttime="20191106 06:26:25.634"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:26:27.813" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:27.813" starttime="20191106 06:26:27.812"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:26:27.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:26:27.814" starttime="20191106 06:26:27.813"></status>
</kw>
<msg timestamp="20191106 06:26:27.815" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:27.815" starttime="20191106 06:26:25.625"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 06:26:27.815" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:27.816" starttime="20191106 06:26:27.815"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:27.816" starttime="20191106 06:26:27.816"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:27.818" starttime="20191106 06:26:27.817"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 06:26:27.819" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 06:26:27.819" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:27.819" starttime="20191106 06:26:27.818"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 06:26:27.821" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 06:26:27.821" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 06:26:27.821" starttime="20191106 06:26:27.820"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 06:26:27.822" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 06:26:27.822" starttime="20191106 06:26:27.821"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 06:26:27.823" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 06:26:27.823" starttime="20191106 06:26:27.823"></status>
</kw>
<msg timestamp="20191106 06:26:27.824" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191106 06:26:27.824" starttime="20191106 06:26:25.625"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:27.825" starttime="20191106 06:26:27.824"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 06:26:27.827" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191106 06:26:27.827" starttime="20191106 06:26:27.826"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 06:26:27.828" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191106 06:26:27.828" starttime="20191106 06:26:27.827"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 06:26:27.828" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191106 06:26:27.828" starttime="20191106 06:26:27.828"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:26:27.830" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:26:27.831" starttime="20191106 06:26:27.829"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:26:27.833" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:26:32.225" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:26:32.225" level="INFO">${output} = 2019-11-06 06:26:30 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 06:26:30 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 06:26:32.225" starttime="20191106 06:26:27.831"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:26:32.226" level="INFO">2019-11-06 06:26:30 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 06:26:30 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 06:26:30 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 06:26:32.226" starttime="20191106 06:26:32.225"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:26:32.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:26:32.227" starttime="20191106 06:26:32.226"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:32.227" starttime="20191106 06:26:27.831"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:26:32.230" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:26:34.486" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:26:34.486" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:26:34.486" starttime="20191106 06:26:32.228"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:26:34.488" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:26:34.488" starttime="20191106 06:26:34.487"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:26:34.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:26:34.489" starttime="20191106 06:26:34.488"></status>
</kw>
<msg timestamp="20191106 06:26:34.490" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:26:34.490" starttime="20191106 06:26:32.227"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:34.491" starttime="20191106 06:26:34.490"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:26:34.493" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:26:34.493" starttime="20191106 06:26:34.491"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:34.493" starttime="20191106 06:26:27.825"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:26:34.495" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 06:26:34.495" starttime="20191106 06:26:34.494"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:34.497" starttime="20191106 06:26:34.496"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:26:34.499" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:26:35.708" level="INFO">Read output: Last login: Wed Nov  6 06:26:14 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:26:35.708" starttime="20191106 06:26:34.498"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:35.709" starttime="20191106 06:26:34.496"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 06:26:35.710" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 06:26:37.880" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:26:37.881" starttime="20191106 06:26:35.709"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 06:26:37.882" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:26:37.980" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:26:37.980" level="INFO">${startupMsg} = hadoop     578  337  0.0 34479320 212288 ?     Sl   06:26   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 06:26:37.980" starttime="20191106 06:26:37.881"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:26:38.046" starttime="20191106 06:26:37.981"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:38.048" starttime="20191106 06:26:38.047"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:38.048" starttime="20191106 06:26:34.493"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:38.048" starttime="20191106 06:26:12.085"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:26:38.053" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:26:39.957" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:26:39.957" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:39.957" starttime="20191106 06:26:38.050"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:26:39.958" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:39.958" starttime="20191106 06:26:39.958"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:26:39.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:26:39.959" starttime="20191106 06:26:39.958"></status>
</kw>
<msg timestamp="20191106 06:26:39.959" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:39.959" starttime="20191106 06:26:38.049"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 06:26:39.960" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:39.960" starttime="20191106 06:26:39.959"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:39.960" starttime="20191106 06:26:39.960"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:39.961" starttime="20191106 06:26:39.961"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 06:26:39.961" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 06:26:39.961" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:39.962" starttime="20191106 06:26:39.961"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 06:26:39.962" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 06:26:39.962" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 06:26:39.962" starttime="20191106 06:26:39.962"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 06:26:39.963" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 06:26:39.963" starttime="20191106 06:26:39.962"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 06:26:39.963" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 06:26:39.963" starttime="20191106 06:26:39.963"></status>
</kw>
<msg timestamp="20191106 06:26:39.964" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 06:26:39.964" starttime="20191106 06:26:38.049"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:26:39.965" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 06:26:39.965" starttime="20191106 06:26:39.964"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:39.966" starttime="20191106 06:26:39.966"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:26:39.967" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:26:41.170" level="INFO">Read output: Last login: Wed Nov  6 06:26:10 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:26:41.170" starttime="20191106 06:26:39.967"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:41.171" starttime="20191106 06:26:39.965"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 06:26:41.172" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 06:26:42.332" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:26:42.332" starttime="20191106 06:26:41.171"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 06:26:42.333" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:26:42.441" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:26:42.442" level="INFO">${shutdownMsg} = hadoop    1113  0.0  0.0   9556  1168 ?        Ss   06:26   0:00 bash -c sudo ps aux | grep om
hadoop    1115  0.0  0.0   9088   668 ?        S    06:26   0:00 grep om</msg>
<status status="PASS" endtime="20191106 06:26:42.442" starttime="20191106 06:26:42.333"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:26:42.507" starttime="20191106 06:26:42.442"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:42.509" starttime="20191106 06:26:42.508"></status>
</kw>
<msg timestamp="20191106 06:26:42.509" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 06:26:42.509" starttime="20191106 06:26:39.964"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:26:42.514" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:26:44.573" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:26:44.573" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:44.574" starttime="20191106 06:26:42.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:26:44.575" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:44.575" starttime="20191106 06:26:44.574"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:26:44.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:26:44.576" starttime="20191106 06:26:44.575"></status>
</kw>
<msg timestamp="20191106 06:26:44.576" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:44.576" starttime="20191106 06:26:42.510"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 06:26:44.577" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:44.577" starttime="20191106 06:26:44.577"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:44.578" starttime="20191106 06:26:44.577"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:44.578" starttime="20191106 06:26:44.578"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 06:26:44.579" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 06:26:44.579" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:44.579" starttime="20191106 06:26:44.579"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 06:26:44.580" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 06:26:44.580" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 06:26:44.580" starttime="20191106 06:26:44.580"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 06:26:44.581" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 06:26:44.581" starttime="20191106 06:26:44.581"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 06:26:44.582" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 06:26:44.582" starttime="20191106 06:26:44.581"></status>
</kw>
<msg timestamp="20191106 06:26:44.582" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191106 06:26:44.582" starttime="20191106 06:26:42.509"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:44.583" starttime="20191106 06:26:44.582"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 06:26:44.584" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191106 06:26:44.585" starttime="20191106 06:26:44.584"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 06:26:44.585" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191106 06:26:44.586" starttime="20191106 06:26:44.585"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 06:26:44.586" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191106 06:26:44.586" starttime="20191106 06:26:44.586"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:26:44.588" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:26:44.588" starttime="20191106 06:26:44.587"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:26:44.591" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:26:49.134" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:26:49.134" level="INFO">${output} = 2019-11-06 06:26:47 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 06:26:47 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 06:26:49.134" starttime="20191106 06:26:44.589"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:26:49.136" level="INFO">2019-11-06 06:26:47 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 06:26:47 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 06:26:47 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 06:26:49.136" starttime="20191106 06:26:49.135"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:26:49.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:26:49.137" starttime="20191106 06:26:49.136"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:49.138" starttime="20191106 06:26:44.588"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:26:49.142" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:26:51.380" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:26:51.380" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:26:51.380" starttime="20191106 06:26:49.139"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:26:51.382" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:26:51.382" starttime="20191106 06:26:51.381"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:26:51.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:26:51.383" starttime="20191106 06:26:51.382"></status>
</kw>
<msg timestamp="20191106 06:26:51.383" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:26:51.383" starttime="20191106 06:26:49.138"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:51.384" starttime="20191106 06:26:51.383"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:26:51.385" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:26:51.385" starttime="20191106 06:26:51.384"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:51.385" starttime="20191106 06:26:44.583"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:26:51.387" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 06:26:51.387" starttime="20191106 06:26:51.386"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:51.388" starttime="20191106 06:26:51.387"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:26:51.389" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:26:52.594" level="INFO">Read output: Last login: Wed Nov  6 06:26:40 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:26:52.594" starttime="20191106 06:26:51.388"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:52.595" starttime="20191106 06:26:51.387"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 06:26:52.596" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 06:26:54.777" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:26:54.777" starttime="20191106 06:26:52.595"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 06:26:54.778" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:26:54.844" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:26:54.844" level="INFO">${startupMsg} = hadoop    1164  213  0.0 34476740 200960 ?     Sl   06:26   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 06:26:54.844" starttime="20191106 06:26:54.778"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:26:54.909" starttime="20191106 06:26:54.844"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:54.910" starttime="20191106 06:26:54.909"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:54.910" starttime="20191106 06:26:51.385"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:54.910" starttime="20191106 06:26:38.048"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:26:54.914" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:26:56.716" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:26:56.716" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:56.717" starttime="20191106 06:26:54.911"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:26:56.718" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:56.718" starttime="20191106 06:26:56.717"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:26:56.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:26:56.719" starttime="20191106 06:26:56.719"></status>
</kw>
<msg timestamp="20191106 06:26:56.720" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:56.720" starttime="20191106 06:26:54.911"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 06:26:56.721" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:56.721" starttime="20191106 06:26:56.720"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:56.722" starttime="20191106 06:26:56.721"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:56.722" starttime="20191106 06:26:56.722"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 06:26:56.724" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 06:26:56.724" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:26:56.724" starttime="20191106 06:26:56.722"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 06:26:56.725" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 06:26:56.725" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 06:26:56.725" starttime="20191106 06:26:56.724"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 06:26:56.725" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 06:26:56.725" starttime="20191106 06:26:56.725"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 06:26:56.726" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 06:26:56.726" starttime="20191106 06:26:56.726"></status>
</kw>
<msg timestamp="20191106 06:26:56.727" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 06:26:56.727" starttime="20191106 06:26:54.910"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:26:56.728" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 06:26:56.728" starttime="20191106 06:26:56.727"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:56.730" starttime="20191106 06:26:56.729"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:26:56.730" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:26:57.917" level="INFO">Read output: Last login: Wed Nov  6 06:25:11 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:26:57.918" starttime="20191106 06:26:56.730"></status>
</kw>
<status status="PASS" endtime="20191106 06:26:57.918" starttime="20191106 06:26:56.728"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 06:26:57.919" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 06:26:59.089" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:26:59.090" starttime="20191106 06:26:57.919"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 06:26:59.091" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:26:59.156" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:26:59.156" level="INFO">${shutdownMsg} = hadoop    1015  0.0  0.0   9556  1168 ?        Ss   06:26   0:00 bash -c sudo ps aux | grep om
hadoop    1017  0.0  0.0   9088   668 ?        S    06:26   0:00 grep om</msg>
<status status="PASS" endtime="20191106 06:26:59.156" starttime="20191106 06:26:59.090"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:26:59.221" starttime="20191106 06:26:59.157"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:26:59.222" starttime="20191106 06:26:59.222"></status>
</kw>
<msg timestamp="20191106 06:26:59.222" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 06:26:59.223" starttime="20191106 06:26:56.727"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:26:59.226" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:27:11.352" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:27:11.352" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:11.352" starttime="20191106 06:26:59.224"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:27:11.353" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:11.353" starttime="20191106 06:27:11.352"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:27:11.354" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:27:11.354" starttime="20191106 06:27:11.353"></status>
</kw>
<msg timestamp="20191106 06:27:11.354" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:11.354" starttime="20191106 06:26:59.223"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 06:27:11.355" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:11.355" starttime="20191106 06:27:11.355"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:11.356" starttime="20191106 06:27:11.355"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:11.356" starttime="20191106 06:27:11.356"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 06:27:11.357" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 06:27:11.357" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:11.357" starttime="20191106 06:27:11.356"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 06:27:11.358" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 06:27:11.358" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 06:27:11.358" starttime="20191106 06:27:11.357"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 06:27:11.358" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 06:27:11.359" starttime="20191106 06:27:11.358"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 06:27:11.359" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 06:27:11.359" starttime="20191106 06:27:11.359"></status>
</kw>
<msg timestamp="20191106 06:27:11.359" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191106 06:27:11.360" starttime="20191106 06:26:59.223"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:11.360" starttime="20191106 06:27:11.360"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 06:27:11.362" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191106 06:27:11.362" starttime="20191106 06:27:11.361"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 06:27:11.363" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191106 06:27:11.363" starttime="20191106 06:27:11.362"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 06:27:11.364" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191106 06:27:11.364" starttime="20191106 06:27:11.363"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:27:11.365" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:27:11.365" starttime="20191106 06:27:11.364"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:27:11.368" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:27:25.770" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:27:25.770" level="INFO">${output} = 2019-11-06 06:27:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191106 06:27:25.770" starttime="20191106 06:27:11.366"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:27:25.771" level="INFO">2019-11-06 06:27:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:27:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:27:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:27:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:27:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:27:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:27:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:27:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:27:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:27:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 06:27:24 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 06:27:24 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 06:27:24 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 06:27:25.771" starttime="20191106 06:27:25.770"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:27:25.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:27:25.772" starttime="20191106 06:27:25.772"></status>
</kw>
<status status="PASS" endtime="20191106 06:27:25.773" starttime="20191106 06:27:11.365"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:27:25.776" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:27:38.166" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:27:38.166" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:27:38.166" starttime="20191106 06:27:25.774"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:27:38.168" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:27:38.168" starttime="20191106 06:27:38.167"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:27:38.169" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:27:38.170" starttime="20191106 06:27:38.169"></status>
</kw>
<msg timestamp="20191106 06:27:38.170" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:27:38.170" starttime="20191106 06:27:25.773"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:38.171" starttime="20191106 06:27:38.171"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:27:38.172" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:27:38.173" starttime="20191106 06:27:38.172"></status>
</kw>
<status status="PASS" endtime="20191106 06:27:38.173" starttime="20191106 06:27:11.360"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:27:38.175" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 06:27:38.175" starttime="20191106 06:27:38.174"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:38.177" starttime="20191106 06:27:38.176"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:27:38.178" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:27:39.384" level="INFO">Read output: Last login: Wed Nov  6 06:26:56 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:27:39.384" starttime="20191106 06:27:38.177"></status>
</kw>
<status status="PASS" endtime="20191106 06:27:39.385" starttime="20191106 06:27:38.175"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 06:27:39.386" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 06:27:41.568" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:27:41.568" starttime="20191106 06:27:39.385"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 06:27:41.569" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:27:41.666" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:27:41.666" level="INFO">${startupMsg} = hadoop    1066  329  0.0 34475520 205792 ?     Sl   06:27   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 06:27:41.666" starttime="20191106 06:27:41.568"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:27:41.731" starttime="20191106 06:27:41.667"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:41.732" starttime="20191106 06:27:41.732"></status>
</kw>
<status status="PASS" endtime="20191106 06:27:41.732" starttime="20191106 06:27:38.173"></status>
</kw>
<status status="PASS" endtime="20191106 06:27:41.733" starttime="20191106 06:26:54.910"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:27:41.737" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:27:44.126" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:27:44.126" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:44.126" starttime="20191106 06:27:41.734"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:27:44.127" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:44.128" starttime="20191106 06:27:44.127"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:27:44.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:27:44.129" starttime="20191106 06:27:44.128"></status>
</kw>
<msg timestamp="20191106 06:27:44.129" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:44.129" starttime="20191106 06:27:41.734"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 06:27:44.130" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:44.130" starttime="20191106 06:27:44.129"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:44.130" starttime="20191106 06:27:44.130"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:44.131" starttime="20191106 06:27:44.131"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 06:27:44.131" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 06:27:44.132" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:44.132" starttime="20191106 06:27:44.131"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 06:27:44.132" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 06:27:44.132" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 06:27:44.132" starttime="20191106 06:27:44.132"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 06:27:44.133" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 06:27:44.133" starttime="20191106 06:27:44.133"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 06:27:44.133" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 06:27:44.134" starttime="20191106 06:27:44.133"></status>
</kw>
<msg timestamp="20191106 06:27:44.134" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 06:27:44.134" starttime="20191106 06:27:41.733"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:27:44.135" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 06:27:44.135" starttime="20191106 06:27:44.135"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:44.136" starttime="20191106 06:27:44.136"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:27:44.137" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:27:45.336" level="INFO">Read output: Last login: Wed Nov  6 06:26:51 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:27:45.336" starttime="20191106 06:27:44.136"></status>
</kw>
<status status="PASS" endtime="20191106 06:27:45.337" starttime="20191106 06:27:44.135"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 06:27:45.338" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 06:27:46.496" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:27:46.497" starttime="20191106 06:27:45.337"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 06:27:46.498" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:27:46.597" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:27:46.597" level="INFO">${shutdownMsg} = hadoop    1662  0.0  0.0   9556  1164 ?        Ss   06:27   0:00 bash -c sudo ps aux | grep om
hadoop    1664  0.0  0.0   9088   672 ?        S    06:27   0:00 grep om</msg>
<status status="PASS" endtime="20191106 06:27:46.597" starttime="20191106 06:27:46.498"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:27:46.662" starttime="20191106 06:27:46.598"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:46.663" starttime="20191106 06:27:46.663"></status>
</kw>
<msg timestamp="20191106 06:27:46.664" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 06:27:46.664" starttime="20191106 06:27:44.134"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:27:46.668" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:27:49.011" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:27:49.012" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:49.012" starttime="20191106 06:27:46.666"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:27:49.013" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:49.014" starttime="20191106 06:27:49.012"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:27:49.015" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:27:49.015" starttime="20191106 06:27:49.014"></status>
</kw>
<msg timestamp="20191106 06:27:49.015" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:49.015" starttime="20191106 06:27:46.665"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 06:27:49.016" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:49.016" starttime="20191106 06:27:49.016"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:49.017" starttime="20191106 06:27:49.016"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:49.017" starttime="20191106 06:27:49.017"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 06:27:49.018" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 06:27:49.018" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:27:49.018" starttime="20191106 06:27:49.017"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 06:27:49.019" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191106 06:27:49.019" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 06:27:49.019" starttime="20191106 06:27:49.018"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 06:27:49.019" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 06:27:49.019" starttime="20191106 06:27:49.019"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 06:27:49.020" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191106 06:27:49.020" starttime="20191106 06:27:49.020"></status>
</kw>
<msg timestamp="20191106 06:27:49.020" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191106 06:27:49.021" starttime="20191106 06:27:46.664"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:49.021" starttime="20191106 06:27:49.021"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 06:27:49.022" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191106 06:27:49.022" starttime="20191106 06:27:49.022"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 06:27:49.023" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191106 06:27:49.023" starttime="20191106 06:27:49.023"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 06:27:49.024" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191106 06:27:49.024" starttime="20191106 06:27:49.023"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:27:49.025" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:27:49.026" starttime="20191106 06:27:49.024"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:27:49.028" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:27:53.468" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:27:53.468" level="INFO">${output} = 2019-11-06 06:27:51 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 06:27:51 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 06:27:53.469" starttime="20191106 06:27:49.026"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:27:53.470" level="INFO">2019-11-06 06:27:51 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 06:27:51 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 06:27:51 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 06:27:53.471" starttime="20191106 06:27:53.469"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:27:53.471" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:27:53.472" starttime="20191106 06:27:53.471"></status>
</kw>
<status status="PASS" endtime="20191106 06:27:53.472" starttime="20191106 06:27:49.026"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:27:53.476" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:27:55.818" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:27:55.818" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:27:55.818" starttime="20191106 06:27:53.474"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:27:55.820" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:27:55.821" starttime="20191106 06:27:55.819"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:27:55.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:27:55.822" starttime="20191106 06:27:55.821"></status>
</kw>
<msg timestamp="20191106 06:27:55.822" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:27:55.823" starttime="20191106 06:27:53.472"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:55.824" starttime="20191106 06:27:55.823"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:27:55.826" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:27:55.826" starttime="20191106 06:27:55.824"></status>
</kw>
<status status="PASS" endtime="20191106 06:27:55.826" starttime="20191106 06:27:49.021"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:27:55.829" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 06:27:55.829" starttime="20191106 06:27:55.828"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:55.831" starttime="20191106 06:27:55.830"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:27:55.832" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:27:57.021" level="INFO">Read output: Last login: Wed Nov  6 06:27:44 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:27:57.022" starttime="20191106 06:27:55.831"></status>
</kw>
<status status="PASS" endtime="20191106 06:27:57.022" starttime="20191106 06:27:55.829"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 06:27:57.023" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 06:27:59.173" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:27:59.173" starttime="20191106 06:27:57.023"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 06:27:59.174" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:27:59.281" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:27:59.281" level="INFO">${startupMsg} = hadoop    1714  340  0.0 34477312 205680 ?     Sl   06:27   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 06:27:59.282" starttime="20191106 06:27:59.173"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:27:59.315" starttime="20191106 06:27:59.282"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:27:59.316" starttime="20191106 06:27:59.316"></status>
</kw>
<status status="PASS" endtime="20191106 06:27:59.317" starttime="20191106 06:27:55.827"></status>
</kw>
<status status="PASS" endtime="20191106 06:27:59.317" starttime="20191106 06:27:41.733"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:27:59.321" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:28:01.195" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:28:01.195" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:28:01.195" starttime="20191106 06:27:59.319"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:28:01.196" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:28:01.196" starttime="20191106 06:28:01.195"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:28:01.197" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:28:01.197" starttime="20191106 06:28:01.196"></status>
</kw>
<msg timestamp="20191106 06:28:01.197" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:28:01.197" starttime="20191106 06:27:59.318"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 06:28:01.198" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:28:01.198" starttime="20191106 06:28:01.197"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 06:28:01.198" starttime="20191106 06:28:01.198"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 06:28:01.199" starttime="20191106 06:28:01.199"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 06:28:01.199" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 06:28:01.200" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191106 06:28:01.200" starttime="20191106 06:28:01.199"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 06:28:01.200" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191106 06:28:01.200" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 06:28:01.200" starttime="20191106 06:28:01.200"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 06:28:01.201" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 06:28:01.201" starttime="20191106 06:28:01.201"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 06:28:01.202" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191106 06:28:01.202" starttime="20191106 06:28:01.201"></status>
</kw>
<msg timestamp="20191106 06:28:01.202" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 06:28:01.202" starttime="20191106 06:27:59.317"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:28:01.203" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 06:28:01.203" starttime="20191106 06:28:01.203"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:28:01.205" starttime="20191106 06:28:01.204"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:28:01.206" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:28:02.406" level="INFO">Read output: Last login: Wed Nov  6 06:26:34 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:28:02.406" starttime="20191106 06:28:01.205"></status>
</kw>
<status status="PASS" endtime="20191106 06:28:02.407" starttime="20191106 06:28:01.204"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 06:28:02.408" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 06:28:03.568" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:28:03.568" starttime="20191106 06:28:02.407"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 06:28:03.569" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:28:03.666" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:28:03.666" level="INFO">${shutdownMsg} = hadoop    1094  0.0  0.0   9556  1168 ?        Ss   06:28   0:00 bash -c sudo ps aux | grep om
hadoop    1096  0.0  0.0   9088   668 ?        S    06:28   0:00 grep om</msg>
<status status="PASS" endtime="20191106 06:28:03.666" starttime="20191106 06:28:03.568"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:28:03.731" starttime="20191106 06:28:03.666"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:28:03.732" starttime="20191106 06:28:03.731"></status>
</kw>
<msg timestamp="20191106 06:28:03.732" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 06:28:03.732" starttime="20191106 06:28:01.202"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:28:03.736" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:28:05.762" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:28:05.762" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:28:05.762" starttime="20191106 06:28:03.733"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:28:05.763" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:28:05.763" starttime="20191106 06:28:05.762"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:28:05.764" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:28:05.764" starttime="20191106 06:28:05.763"></status>
</kw>
<msg timestamp="20191106 06:28:05.764" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:28:05.764" starttime="20191106 06:28:03.733"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 06:28:05.765" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:28:05.765" starttime="20191106 06:28:05.765"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 06:28:05.765" starttime="20191106 06:28:05.765"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 06:28:05.766" starttime="20191106 06:28:05.766"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 06:28:05.767" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 06:28:05.767" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 06:28:05.767" starttime="20191106 06:28:05.766"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 06:28:05.767" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 06:28:05.767" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 06:28:05.767" starttime="20191106 06:28:05.767"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 06:28:05.768" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 06:28:05.768" starttime="20191106 06:28:05.768"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 06:28:05.769" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 06:28:05.769" starttime="20191106 06:28:05.768"></status>
</kw>
<msg timestamp="20191106 06:28:05.769" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191106 06:28:05.769" starttime="20191106 06:28:03.733"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 06:28:05.770" starttime="20191106 06:28:05.769"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 06:28:05.771" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191106 06:28:05.771" starttime="20191106 06:28:05.770"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 06:28:05.772" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191106 06:28:05.772" starttime="20191106 06:28:05.771"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 06:28:05.772" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191106 06:28:05.772" starttime="20191106 06:28:05.772"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:28:05.774" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:28:05.774" starttime="20191106 06:28:05.773"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:28:05.777" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:28:10.360" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:28:10.361" level="INFO">${output} = 2019-11-06 06:28:08 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 06:28:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 06:28:10.361" starttime="20191106 06:28:05.775"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:28:10.362" level="INFO">2019-11-06 06:28:08 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 06:28:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 06:28:08 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 06:28:10.362" starttime="20191106 06:28:10.361"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:28:10.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:28:10.363" starttime="20191106 06:28:10.362"></status>
</kw>
<status status="PASS" endtime="20191106 06:28:10.363" starttime="20191106 06:28:05.774"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 06:28:10.367" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 06:28:12.650" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 06:28:12.650" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:28:12.651" starttime="20191106 06:28:10.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 06:28:12.652" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:28:12.652" starttime="20191106 06:28:12.651"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 06:28:12.653" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 06:28:12.653" starttime="20191106 06:28:12.653"></status>
</kw>
<msg timestamp="20191106 06:28:12.654" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 06:28:12.654" starttime="20191106 06:28:10.364"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:28:12.655" starttime="20191106 06:28:12.654"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 06:28:12.656" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 06:28:12.656" starttime="20191106 06:28:12.655"></status>
</kw>
<status status="PASS" endtime="20191106 06:28:12.656" starttime="20191106 06:28:05.770"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 06:28:12.658" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 06:28:12.659" starttime="20191106 06:28:12.658"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 06:28:12.660" starttime="20191106 06:28:12.659"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 06:28:12.661" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 06:28:13.849" level="INFO">Read output: Last login: Wed Nov  6 06:28:01 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 06:28:13.849" starttime="20191106 06:28:12.660"></status>
</kw>
<status status="PASS" endtime="20191106 06:28:13.849" starttime="20191106 06:28:12.659"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 06:28:13.851" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 06:28:16.019" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 06:28:16.019" starttime="20191106 06:28:13.850"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 06:28:16.021" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 06:28:16.118" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 06:28:16.118" level="INFO">${startupMsg} = hadoop    1145  379  0.0 34481656 246452 ?     Sl   06:28   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 06:28:16.118" starttime="20191106 06:28:16.020"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 06:28:16.184" starttime="20191106 06:28:16.119"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 06:28:16.185" starttime="20191106 06:28:16.184"></status>
</kw>
<status status="PASS" endtime="20191106 06:28:16.185" starttime="20191106 06:28:12.657"></status>
</kw>
<status status="PASS" endtime="20191106 06:28:16.185" starttime="20191106 06:27:59.317"></status>
</kw>
<status status="PASS" endtime="20191106 06:28:16.185" starttime="20191106 06:26:12.085"></status>
</kw>
<status status="PASS" endtime="20191106 06:28:16.186" critical="yes" starttime="20191106 06:26:12.084"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191106 06:28:16.187" starttime="20191106 06:24:06.374"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
