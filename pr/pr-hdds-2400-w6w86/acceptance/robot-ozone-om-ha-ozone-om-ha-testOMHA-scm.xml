<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191107 08:34:01.340" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:01.469" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:34:04.438" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:34:04.438" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191107 08:34:04.438" starttime="20191107 08:34:01.467"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:34:04.440" level="INFO"></msg>
<status status="PASS" endtime="20191107 08:34:04.440" starttime="20191107 08:34:04.439"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:34:04.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:34:04.441" starttime="20191107 08:34:04.440"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:04.441" starttime="20191107 08:34:01.466"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:04.448" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:34:06.648" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:34:06.648" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191107 08:34:06.648" starttime="20191107 08:34:04.446"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:34:06.649" level="INFO"></msg>
<status status="PASS" endtime="20191107 08:34:06.650" starttime="20191107 08:34:06.649"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:34:06.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:34:06.650" starttime="20191107 08:34:06.650"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:06.651" starttime="20191107 08:34:04.441"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:06.651" starttime="20191107 08:34:01.465"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 08:34:06.652" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191107 08:34:06.653" starttime="20191107 08:34:06.652"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 08:34:06.653" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191107 08:34:06.654" starttime="20191107 08:34:06.653"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 08:34:06.654" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191107 08:34:06.654" starttime="20191107 08:34:06.654"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:34:06.656" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:34:06.657" starttime="20191107 08:34:06.655"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:06.659" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:34:11.590" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:34:11.590" level="INFO">${output} = 2019-11-07 08:34:09 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 08:34:09 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 08:34:11.591" starttime="20191107 08:34:06.658"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:34:11.592" level="INFO">2019-11-07 08:34:09 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 08:34:09 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 08:34:09 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 08:34:11.592" starttime="20191107 08:34:11.591"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:34:11.593" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:34:11.593" starttime="20191107 08:34:11.592"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:11.593" starttime="20191107 08:34:06.657"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:11.597" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:34:13.969" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:34:13.970" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191107 08:34:13.970" starttime="20191107 08:34:11.595"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:34:13.971" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191107 08:34:13.971" starttime="20191107 08:34:13.970"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:34:13.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:34:13.972" starttime="20191107 08:34:13.971"></status>
</kw>
<msg timestamp="20191107 08:34:13.972" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191107 08:34:13.972" starttime="20191107 08:34:11.594"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:13.973" starttime="20191107 08:34:13.972"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:34:13.974" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:34:13.974" starttime="20191107 08:34:13.973"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:13.974" starttime="20191107 08:34:06.651"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:13.977" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:34:15.921" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:34:15.922" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:15.922" starttime="20191107 08:34:13.975"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:34:15.923" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:15.923" starttime="20191107 08:34:15.922"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:34:15.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:34:15.924" starttime="20191107 08:34:15.923"></status>
</kw>
<msg timestamp="20191107 08:34:15.925" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:15.925" starttime="20191107 08:34:13.975"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 08:34:15.925" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:15.925" starttime="20191107 08:34:15.925"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:15.927" starttime="20191107 08:34:15.926"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:15.927" starttime="20191107 08:34:15.927"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 08:34:15.928" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 08:34:15.928" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:15.928" starttime="20191107 08:34:15.927"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 08:34:15.929" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 08:34:15.929" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 08:34:15.929" starttime="20191107 08:34:15.928"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 08:34:15.930" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 08:34:15.930" starttime="20191107 08:34:15.929"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 08:34:15.930" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 08:34:15.930" starttime="20191107 08:34:15.930"></status>
</kw>
<msg timestamp="20191107 08:34:15.931" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 08:34:15.931" starttime="20191107 08:34:13.974"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:34:15.932" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 08:34:15.932" starttime="20191107 08:34:15.932"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:15.934" starttime="20191107 08:34:15.933"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:34:15.935" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:34:17.142" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:34:17.143" starttime="20191107 08:34:15.934"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:17.143" starttime="20191107 08:34:15.933"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 08:34:17.144" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 08:34:27.295" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:34:27.296" starttime="20191107 08:34:17.143"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 08:34:27.297" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:34:27.405" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:34:27.405" level="INFO">${shutdownMsg} = hadoop     436  0.0  0.0   9556  1168 ?        Ss   08:34   0:00 bash -c sudo ps aux | grep om
hadoop     438  0.0  0.0   9088   672 ?        S    08:34   0:00 grep om</msg>
<status status="PASS" endtime="20191107 08:34:27.405" starttime="20191107 08:34:27.296"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:34:27.471" starttime="20191107 08:34:27.406"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:27.472" starttime="20191107 08:34:27.471"></status>
</kw>
<msg timestamp="20191107 08:34:27.472" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 08:34:27.472" starttime="20191107 08:34:15.931"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:27.477" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:34:29.642" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:34:29.643" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:29.643" starttime="20191107 08:34:27.474"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:34:29.645" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:29.645" starttime="20191107 08:34:29.644"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:34:29.646" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:34:29.646" starttime="20191107 08:34:29.645"></status>
</kw>
<msg timestamp="20191107 08:34:29.647" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:29.647" starttime="20191107 08:34:27.473"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 08:34:29.648" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:29.648" starttime="20191107 08:34:29.647"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:29.649" starttime="20191107 08:34:29.648"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:29.650" starttime="20191107 08:34:29.649"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 08:34:29.651" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 08:34:29.651" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:29.651" starttime="20191107 08:34:29.650"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 08:34:29.652" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 08:34:29.652" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 08:34:29.652" starttime="20191107 08:34:29.652"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 08:34:29.653" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:34:29.653" starttime="20191107 08:34:29.653"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 08:34:29.654" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 08:34:29.655" starttime="20191107 08:34:29.654"></status>
</kw>
<msg timestamp="20191107 08:34:29.655" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:34:29.655" starttime="20191107 08:34:27.473"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:29.656" starttime="20191107 08:34:29.655"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 08:34:29.658" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191107 08:34:29.658" starttime="20191107 08:34:29.657"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 08:34:29.660" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191107 08:34:29.660" starttime="20191107 08:34:29.659"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 08:34:29.661" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191107 08:34:29.661" starttime="20191107 08:34:29.660"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:34:29.663" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:34:29.663" starttime="20191107 08:34:29.661"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:29.667" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:34:34.389" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:34:34.389" level="INFO">${output} = 2019-11-07 08:34:32 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 08:34:32 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 08:34:34.389" starttime="20191107 08:34:29.665"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:34:34.391" level="INFO">2019-11-07 08:34:32 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 08:34:32 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 08:34:32 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 08:34:34.391" starttime="20191107 08:34:34.390"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:34:34.392" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:34:34.393" starttime="20191107 08:34:34.392"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:34.393" starttime="20191107 08:34:29.664"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:34.397" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:34:36.703" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:34:36.703" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191107 08:34:36.703" starttime="20191107 08:34:34.395"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:34:36.705" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191107 08:34:36.705" starttime="20191107 08:34:36.704"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:34:36.706" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:34:36.706" starttime="20191107 08:34:36.705"></status>
</kw>
<msg timestamp="20191107 08:34:36.706" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191107 08:34:36.706" starttime="20191107 08:34:34.394"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:36.707" starttime="20191107 08:34:36.707"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:34:36.708" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:34:36.709" starttime="20191107 08:34:36.708"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:36.709" starttime="20191107 08:34:29.656"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:34:36.711" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 08:34:36.711" starttime="20191107 08:34:36.710"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:36.712" starttime="20191107 08:34:36.712"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:34:36.713" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:34:37.918" level="INFO">Read output: Last login: Thu Nov  7 08:34:16 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:34:37.919" starttime="20191107 08:34:36.713"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:37.919" starttime="20191107 08:34:36.711"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 08:34:37.920" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 08:34:40.089" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:34:40.090" starttime="20191107 08:34:37.919"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 08:34:40.092" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:34:40.189" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:34:40.190" level="INFO">${startupMsg} = hadoop     489  350  0.0 34477124 206108 ?     Sl   08:34   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 08:34:40.190" starttime="20191107 08:34:40.091"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:34:40.254" starttime="20191107 08:34:40.190"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:40.255" starttime="20191107 08:34:40.255"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:40.256" starttime="20191107 08:34:36.709"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:40.256" critical="yes" starttime="20191107 08:34:01.464"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191107 08:34:40.260" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191107 08:34:40.260" starttime="20191107 08:34:40.258"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191107 08:34:40.262" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191107 08:34:40.262" starttime="20191107 08:34:40.260"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:34:40.264" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 08:34:40.264" starttime="20191107 08:34:40.263"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:40.266" starttime="20191107 08:34:40.265"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:34:40.267" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:34:41.470" level="INFO">Read output: Last login: Thu Nov  7 08:34:36 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:34:41.471" starttime="20191107 08:34:40.266"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:41.471" starttime="20191107 08:34:40.264"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 08:34:41.472" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 08:34:42.612" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:34:42.612" starttime="20191107 08:34:41.471"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 08:34:42.613" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:34:42.689" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:34:42.690" level="INFO">${shutdownMsg} = hadoop     837  0.0  0.0   9556  1164 ?        Ss   08:34   0:00 bash -c sudo ps aux | grep om
hadoop     839  0.0  0.0   9088   668 ?        S    08:34   0:00 grep om</msg>
<status status="PASS" endtime="20191107 08:34:42.690" starttime="20191107 08:34:42.613"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:34:42.723" starttime="20191107 08:34:42.690"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:42.724" starttime="20191107 08:34:42.723"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:42.724" starttime="20191107 08:34:40.262"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:34:42.727" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 08:34:42.727" starttime="20191107 08:34:42.726"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:42.729" starttime="20191107 08:34:42.728"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:34:42.730" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:34:43.934" level="INFO">Read output: Last login: Thu Nov  7 08:34:40 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:34:43.935" starttime="20191107 08:34:42.729"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:43.935" starttime="20191107 08:34:42.727"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 08:34:43.936" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 08:34:43.962" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:34:43.963" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 08:34:43.963" starttime="20191107 08:34:43.936"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 08:34:43.964" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 08:34:43.964" starttime="20191107 08:34:43.963"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 08:34:43.966" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 08:34:43.966" starttime="20191107 08:34:43.964"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 08:34:44.011" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 08:34:44.023" level="INFO">1 file:
log_inprogress_0</msg>
<msg timestamp="20191107 08:34:44.023" level="INFO">@{logs} = [ log_inprogress_0 ]</msg>
<status status="PASS" endtime="20191107 08:34:44.023" starttime="20191107 08:34:43.966"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 08:34:44.025" level="INFO">Length is 1</msg>
<msg timestamp="20191107 08:34:44.025" level="INFO">${numLogs} = 1</msg>
<status status="PASS" endtime="20191107 08:34:44.025" starttime="20191107 08:34:44.024"></status>
</kw>
<msg timestamp="20191107 08:34:44.025" level="INFO">${numLogsBefore} = 1</msg>
<msg timestamp="20191107 08:34:44.025" level="INFO">@{logsBefore} = [ [u'log_inprogress_0'] ]</msg>
<status status="PASS" endtime="20191107 08:34:44.025" starttime="20191107 08:34:42.725"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:44.029" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:34:46.028" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:34:46.028" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:46.028" starttime="20191107 08:34:44.027"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:34:46.029" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:46.029" starttime="20191107 08:34:46.029"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:34:46.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:34:46.030" starttime="20191107 08:34:46.029"></status>
</kw>
<msg timestamp="20191107 08:34:46.030" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:46.030" starttime="20191107 08:34:44.026"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 08:34:46.031" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:46.031" starttime="20191107 08:34:46.031"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:46.031" starttime="20191107 08:34:46.031"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:46.032" starttime="20191107 08:34:46.032"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 08:34:46.033" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 08:34:46.033" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:34:46.033" starttime="20191107 08:34:46.032"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 08:34:46.033" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 08:34:46.033" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 08:34:46.034" starttime="20191107 08:34:46.033"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 08:34:46.034" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:34:46.034" starttime="20191107 08:34:46.034"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 08:34:46.035" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 08:34:46.035" starttime="20191107 08:34:46.034"></status>
</kw>
<msg timestamp="20191107 08:34:46.035" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:34:46.035" starttime="20191107 08:34:44.026"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191107 08:34:46.037" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191107 08:34:46.037" starttime="20191107 08:34:46.036"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 08:34:46.039" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191107 08:34:46.039" starttime="20191107 08:34:46.038"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 08:34:46.039" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191107 08:34:46.040" starttime="20191107 08:34:46.039"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:46.043" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:34:50.437" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:34:50.438" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 08:34:50.438" starttime="20191107 08:34:46.041"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:34:50.439" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 08:34:50.439" starttime="20191107 08:34:50.438"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:34:50.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:34:50.440" starttime="20191107 08:34:50.440"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:50.441" starttime="20191107 08:34:46.040"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:50.445" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:34:52.948" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:34:52.948" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573115688231,
  "modificationTime": 1573115690021,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 08:34:52.948" starttime="20191107 08:34:50.443"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:34:52.950" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573115688231,
  "modificationTime": 1573115690021,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103095709743775740,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 08:34:52.950" starttime="20191107 08:34:52.949"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:34:52.951" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:34:52.951" starttime="20191107 08:34:52.951"></status>
</kw>
<msg timestamp="20191107 08:34:52.952" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573115688231,
  "modificationTime": 1573115690021,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 08:34:52.952" starttime="20191107 08:34:50.441"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:52.953" starttime="20191107 08:34:52.952"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:52.953" starttime="20191107 08:34:46.040"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:52.953" starttime="20191107 08:34:46.038"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 08:34:52.955" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191107 08:34:52.955" starttime="20191107 08:34:52.954"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 08:34:52.956" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191107 08:34:52.956" starttime="20191107 08:34:52.955"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:52.961" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:34:57.463" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:34:57.463" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 08:34:57.463" starttime="20191107 08:34:52.958"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:34:57.465" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 08:34:57.465" starttime="20191107 08:34:57.464"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:34:57.466" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:34:57.466" starttime="20191107 08:34:57.465"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:57.467" starttime="20191107 08:34:52.957"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:57.471" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:34:59.778" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:34:59.778" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573115695247,
  "modificationTime": 1573115697062,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 08:34:59.778" starttime="20191107 08:34:57.469"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:34:59.780" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573115695247,
  "modificationTime": 1573115697062,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103095710203576320,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 08:34:59.780" starttime="20191107 08:34:59.779"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:34:59.781" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:34:59.781" starttime="20191107 08:34:59.780"></status>
</kw>
<msg timestamp="20191107 08:34:59.781" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573115695247,
  "modificationTime": 1573115697062,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 08:34:59.781" starttime="20191107 08:34:57.467"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 08:34:59.782" starttime="20191107 08:34:59.782"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:59.782" starttime="20191107 08:34:52.956"></status>
</kw>
<status status="PASS" endtime="20191107 08:34:59.783" starttime="20191107 08:34:52.954"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 08:34:59.784" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191107 08:34:59.784" starttime="20191107 08:34:59.783"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 08:34:59.784" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191107 08:34:59.785" starttime="20191107 08:34:59.784"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:34:59.789" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:35:04.124" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:35:04.124" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 08:35:04.124" starttime="20191107 08:34:59.787"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:35:04.126" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 08:35:04.126" starttime="20191107 08:35:04.125"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:35:04.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:35:04.127" starttime="20191107 08:35:04.126"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:04.127" starttime="20191107 08:34:59.786"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:35:04.131" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:35:06.396" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:35:06.396" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573115701940,
  "modificationTime": 1573115703710,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 08:35:06.396" starttime="20191107 08:35:04.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:35:06.398" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573115701940,
  "modificationTime": 1573115703710,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103095710642274300,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 08:35:06.399" starttime="20191107 08:35:06.397"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:35:06.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:35:06.400" starttime="20191107 08:35:06.399"></status>
</kw>
<msg timestamp="20191107 08:35:06.400" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573115701940,
  "modificationTime": 1573115703710,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 08:35:06.401" starttime="20191107 08:35:04.127"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:06.401" starttime="20191107 08:35:06.401"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:06.402" starttime="20191107 08:34:59.785"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:06.402" starttime="20191107 08:34:59.783"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 08:35:06.403" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191107 08:35:06.403" starttime="20191107 08:35:06.402"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 08:35:06.404" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191107 08:35:06.404" starttime="20191107 08:35:06.404"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:35:06.410" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:35:11.225" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:35:11.225" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 08:35:11.225" starttime="20191107 08:35:06.407"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:35:11.227" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 08:35:11.227" starttime="20191107 08:35:11.226"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:35:11.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:35:11.227" starttime="20191107 08:35:11.227"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:11.228" starttime="20191107 08:35:06.406"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:35:11.231" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:35:13.339" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:35:13.339" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573115708579,
  "modificationTime": 1573115710826,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 08:35:13.339" starttime="20191107 08:35:11.229"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:35:13.341" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573115708579,
  "modificationTime": 1573115710826,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103095711077302270,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 08:35:13.341" starttime="20191107 08:35:13.340"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:35:13.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:35:13.342" starttime="20191107 08:35:13.341"></status>
</kw>
<msg timestamp="20191107 08:35:13.343" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573115708579,
  "modificationTime": 1573115710826,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 08:35:13.343" starttime="20191107 08:35:11.228"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:13.344" starttime="20191107 08:35:13.343"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:13.344" starttime="20191107 08:35:06.405"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:13.344" starttime="20191107 08:35:06.402"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 08:35:13.346" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:35:13.346" starttime="20191107 08:35:13.345"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 08:35:13.347" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:35:13.347" starttime="20191107 08:35:13.346"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:35:13.352" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:35:17.805" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:35:17.805" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 08:35:17.805" starttime="20191107 08:35:13.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:35:17.807" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 08:35:17.807" starttime="20191107 08:35:17.806"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:35:17.808" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:35:17.808" starttime="20191107 08:35:17.807"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:17.809" starttime="20191107 08:35:13.348"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:35:17.813" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:35:20.099" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:35:20.099" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573115715567,
  "modificationTime": 1573115717380,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 08:35:20.099" starttime="20191107 08:35:17.811"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:35:20.101" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573115715567,
  "modificationTime": 1573115717380,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103095711535267840,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 08:35:20.101" starttime="20191107 08:35:20.100"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:35:20.101" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:35:20.101" starttime="20191107 08:35:20.101"></status>
</kw>
<msg timestamp="20191107 08:35:20.102" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573115715567,
  "modificationTime": 1573115717380,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 08:35:20.102" starttime="20191107 08:35:17.809"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:20.102" starttime="20191107 08:35:20.102"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:20.103" starttime="20191107 08:35:13.347"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:20.103" starttime="20191107 08:35:13.345"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:20.103" starttime="20191107 08:34:46.038"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:20.103" starttime="20191107 08:34:46.037"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:35:20.104" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 08:35:20.104" starttime="20191107 08:35:20.104"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:20.105" starttime="20191107 08:35:20.105"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:35:20.106" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:35:21.295" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:35:21.296" starttime="20191107 08:35:20.106"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:21.296" starttime="20191107 08:35:20.104"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 08:35:21.298" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 08:35:21.314" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:35:21.314" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 08:35:21.314" starttime="20191107 08:35:21.297"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 08:35:21.316" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 08:35:21.316" starttime="20191107 08:35:21.315"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 08:35:21.317" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 08:35:21.317" starttime="20191107 08:35:21.316"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 08:35:21.397" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 08:35:21.408" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191107 08:35:21.408" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191107 08:35:21.408" starttime="20191107 08:35:21.317"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 08:35:21.409" level="INFO">Length is 2</msg>
<msg timestamp="20191107 08:35:21.410" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191107 08:35:21.410" starttime="20191107 08:35:21.409"></status>
</kw>
<msg timestamp="20191107 08:35:21.410" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191107 08:35:21.410" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191107 08:35:21.410" starttime="20191107 08:35:20.103"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191107 08:35:21.411" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191107 08:35:21.412" starttime="20191107 08:35:21.411"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:21.412" starttime="20191107 08:34:46.035"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:21.412" starttime="20191107 08:34:46.035"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:21.413" starttime="20191107 08:35:21.412"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:35:21.415" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 08:35:21.415" starttime="20191107 08:35:21.414"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:21.418" starttime="20191107 08:35:21.417"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:35:21.419" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:35:22.623" level="INFO">Read output: Last login: Thu Nov  7 08:34:42 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:35:22.624" starttime="20191107 08:35:21.418"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:22.624" starttime="20191107 08:35:21.415"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 08:35:22.625" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 08:35:24.805" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:35:24.805" starttime="20191107 08:35:22.625"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 08:35:24.806" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:35:24.904" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:35:24.905" level="INFO">${startupMsg} = hadoop     910  357  0.0 34474812 207928 ?     Sl   08:35   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 08:35:24.905" starttime="20191107 08:35:24.806"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:35:24.971" starttime="20191107 08:35:24.905"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:24.972" starttime="20191107 08:35:24.971"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:24.972" starttime="20191107 08:35:21.413"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:35:24.974" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 08:35:24.975" starttime="20191107 08:35:24.974"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:24.976" starttime="20191107 08:35:24.975"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:35:24.977" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:35:26.180" level="INFO">Read output: Last login: Thu Nov  7 08:35:21 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:35:26.180" starttime="20191107 08:35:24.976"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:26.181" starttime="20191107 08:35:24.975"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 08:35:26.181" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 08:35:26.196" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:35:26.196" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 08:35:26.196" starttime="20191107 08:35:26.181"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 08:35:26.197" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 08:35:26.197" starttime="20191107 08:35:26.196"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 08:35:26.197" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 08:35:26.197" starttime="20191107 08:35:26.197"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 08:35:26.277" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 08:35:26.288" level="INFO">1 file:
log_inprogress_0</msg>
<msg timestamp="20191107 08:35:26.288" level="INFO">@{logs} = [ log_inprogress_0 ]</msg>
<status status="PASS" endtime="20191107 08:35:26.288" starttime="20191107 08:35:26.198"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 08:35:26.290" level="INFO">Length is 1</msg>
<msg timestamp="20191107 08:35:26.290" level="INFO">${numLogs} = 1</msg>
<status status="PASS" endtime="20191107 08:35:26.290" starttime="20191107 08:35:26.289"></status>
</kw>
<msg timestamp="20191107 08:35:26.291" level="INFO">${numLogsAfter} = 1</msg>
<msg timestamp="20191107 08:35:26.291" level="INFO">@{logsAfter} = [ [u'log_inprogress_0'] ]</msg>
<status status="PASS" endtime="20191107 08:35:26.291" starttime="20191107 08:35:24.973"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:26.293" starttime="20191107 08:35:26.292"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191107 08:35:27.294" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191107 08:35:27.294" starttime="20191107 08:35:26.293"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:27.294" starttime="20191107 08:35:24.973"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:35:27.297" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 08:35:27.297" starttime="20191107 08:35:27.296"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:27.299" starttime="20191107 08:35:27.298"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:35:27.300" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:35:28.487" level="INFO">Read output: Last login: Thu Nov  7 08:35:25 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:35:28.488" starttime="20191107 08:35:27.299"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:28.488" starttime="20191107 08:35:27.297"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 08:35:28.490" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 08:35:28.506" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:35:28.507" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 08:35:28.507" starttime="20191107 08:35:28.489"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 08:35:28.508" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 08:35:28.508" starttime="20191107 08:35:28.507"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 08:35:28.510" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 08:35:28.510" starttime="20191107 08:35:28.509"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 08:35:28.592" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 08:35:28.604" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191107 08:35:28.604" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191107 08:35:28.605" starttime="20191107 08:35:28.511"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 08:35:28.606" level="INFO">Length is 2</msg>
<msg timestamp="20191107 08:35:28.606" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191107 08:35:28.606" starttime="20191107 08:35:28.605"></status>
</kw>
<msg timestamp="20191107 08:35:28.607" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191107 08:35:28.607" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191107 08:35:28.607" starttime="20191107 08:35:27.295"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191107 08:35:28.608" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191107 08:35:28.609" starttime="20191107 08:35:28.607"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:28.609" starttime="20191107 08:35:27.295"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:28.609" starttime="20191107 08:35:24.972"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:28.610" starttime="20191107 08:35:28.609"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:28.611" starttime="20191107 08:35:28.610"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:28.611" critical="yes" starttime="20191107 08:34:40.257"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:35:28.618" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:35:30.621" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:35:30.621" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:35:30.621" starttime="20191107 08:35:28.615"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:35:30.623" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:35:30.623" starttime="20191107 08:35:30.622"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:35:30.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:35:30.624" starttime="20191107 08:35:30.623"></status>
</kw>
<msg timestamp="20191107 08:35:30.624" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:35:30.624" starttime="20191107 08:35:28.615"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 08:35:30.624" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:35:30.625" starttime="20191107 08:35:30.624"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:30.625" starttime="20191107 08:35:30.625"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:30.626" starttime="20191107 08:35:30.626"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 08:35:30.627" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 08:35:30.627" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:35:30.627" starttime="20191107 08:35:30.626"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 08:35:30.628" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 08:35:30.628" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 08:35:30.628" starttime="20191107 08:35:30.627"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 08:35:30.628" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:35:30.628" starttime="20191107 08:35:30.628"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 08:35:30.629" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 08:35:30.629" starttime="20191107 08:35:30.628"></status>
</kw>
<msg timestamp="20191107 08:35:30.629" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:35:30.629" starttime="20191107 08:35:28.614"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:35:30.630" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 08:35:30.630" starttime="20191107 08:35:30.630"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:30.632" starttime="20191107 08:35:30.631"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:35:30.632" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:35:31.820" level="INFO">Read output: Last login: Thu Nov  7 08:35:20 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:35:31.823" starttime="20191107 08:35:30.632"></status>
</kw>
<status status="PASS" endtime="20191107 08:35:31.823" starttime="20191107 08:35:30.631"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 08:35:31.824" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 08:35:42.007" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:35:42.007" starttime="20191107 08:35:31.824"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 08:35:42.008" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:35:42.117" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:35:42.117" level="INFO">${shutdownMsg} = hadoop     532  0.0  0.0   9556  1168 ?        Ss   08:35   0:00 bash -c sudo ps aux | grep om
hadoop     534  0.0  0.0   9088   672 ?        S    08:35   0:00 grep om</msg>
<status status="PASS" endtime="20191107 08:35:42.117" starttime="20191107 08:35:42.008"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:35:42.183" starttime="20191107 08:35:42.118"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:42.184" starttime="20191107 08:35:42.183"></status>
</kw>
<msg timestamp="20191107 08:35:42.184" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 08:35:42.184" starttime="20191107 08:35:30.629"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:35:42.188" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:35:54.421" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:35:54.421" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:35:54.421" starttime="20191107 08:35:42.186"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:35:54.423" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:35:54.423" starttime="20191107 08:35:54.422"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:35:54.424" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:35:54.424" starttime="20191107 08:35:54.424"></status>
</kw>
<msg timestamp="20191107 08:35:54.425" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:35:54.425" starttime="20191107 08:35:42.185"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 08:35:54.425" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:35:54.426" starttime="20191107 08:35:54.425"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:54.426" starttime="20191107 08:35:54.426"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:54.427" starttime="20191107 08:35:54.427"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 08:35:54.428" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 08:35:54.428" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:35:54.428" starttime="20191107 08:35:54.428"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 08:35:54.429" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 08:35:54.429" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 08:35:54.429" starttime="20191107 08:35:54.429"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 08:35:54.430" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 08:35:54.430" starttime="20191107 08:35:54.430"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 08:35:54.431" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 08:35:54.431" starttime="20191107 08:35:54.430"></status>
</kw>
<msg timestamp="20191107 08:35:54.431" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191107 08:35:54.432" starttime="20191107 08:35:42.184"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 08:35:54.432" starttime="20191107 08:35:54.432"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 08:35:54.434" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191107 08:35:54.434" starttime="20191107 08:35:54.433"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 08:35:54.435" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191107 08:35:54.435" starttime="20191107 08:35:54.434"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 08:35:54.436" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191107 08:35:54.436" starttime="20191107 08:35:54.435"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:35:54.438" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:35:54.438" starttime="20191107 08:35:54.436"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:35:54.441" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:36:09.043" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:36:09.043" level="INFO">${output} = 2019-11-07 08:35:57 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191107 08:36:09.043" starttime="20191107 08:35:54.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:36:09.045" level="INFO">2019-11-07 08:35:57 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:35:58 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:35:59 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:36:00 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:36:01 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:36:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:36:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:36:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:36:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:36:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:36:07 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 08:36:07 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 08:36:07 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 08:36:09.046" starttime="20191107 08:36:09.044"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:36:09.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:36:09.047" starttime="20191107 08:36:09.046"></status>
</kw>
<status status="PASS" endtime="20191107 08:36:09.047" starttime="20191107 08:35:54.438"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:36:09.051" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:36:21.429" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:36:21.429" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:36:21.429" starttime="20191107 08:36:09.049"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:36:21.431" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:36:21.431" starttime="20191107 08:36:21.430"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:36:21.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:36:21.432" starttime="20191107 08:36:21.432"></status>
</kw>
<msg timestamp="20191107 08:36:21.433" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:36:21.433" starttime="20191107 08:36:09.048"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:21.434" starttime="20191107 08:36:21.433"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:36:21.436" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:36:21.436" starttime="20191107 08:36:21.434"></status>
</kw>
<status status="PASS" endtime="20191107 08:36:21.436" starttime="20191107 08:35:54.433"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:36:21.438" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 08:36:21.439" starttime="20191107 08:36:21.438"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:21.440" starttime="20191107 08:36:21.439"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:36:21.441" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:36:22.643" level="INFO">Read output: Last login: Thu Nov  7 08:35:30 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:36:22.643" starttime="20191107 08:36:21.441"></status>
</kw>
<status status="PASS" endtime="20191107 08:36:22.644" starttime="20191107 08:36:21.439"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 08:36:22.645" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 08:36:24.835" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:36:24.835" starttime="20191107 08:36:22.644"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 08:36:24.836" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:36:24.944" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:36:24.945" level="INFO">${startupMsg} = hadoop     585  340  0.0 34477784 222284 ?     Sl   08:36   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 08:36:24.945" starttime="20191107 08:36:24.836"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:36:24.978" starttime="20191107 08:36:24.945"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:24.979" starttime="20191107 08:36:24.978"></status>
</kw>
<status status="PASS" endtime="20191107 08:36:24.979" starttime="20191107 08:36:21.437"></status>
</kw>
<status status="PASS" endtime="20191107 08:36:24.979" starttime="20191107 08:35:28.614"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:36:24.982" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:36:27.436" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:36:27.436" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:27.436" starttime="20191107 08:36:24.980"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:36:27.437" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:27.437" starttime="20191107 08:36:27.436"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:36:27.437" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:36:27.438" starttime="20191107 08:36:27.437"></status>
</kw>
<msg timestamp="20191107 08:36:27.438" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:27.438" starttime="20191107 08:36:24.980"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 08:36:27.439" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:27.440" starttime="20191107 08:36:27.439"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:27.441" starttime="20191107 08:36:27.440"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:27.442" starttime="20191107 08:36:27.441"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 08:36:27.443" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 08:36:27.443" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:27.443" starttime="20191107 08:36:27.442"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 08:36:27.444" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 08:36:27.444" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 08:36:27.444" starttime="20191107 08:36:27.443"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 08:36:27.445" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 08:36:27.445" starttime="20191107 08:36:27.444"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 08:36:27.446" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 08:36:27.446" starttime="20191107 08:36:27.445"></status>
</kw>
<msg timestamp="20191107 08:36:27.446" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 08:36:27.446" starttime="20191107 08:36:24.979"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:36:27.456" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 08:36:27.456" starttime="20191107 08:36:27.455"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:27.460" starttime="20191107 08:36:27.459"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:36:27.461" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:36:28.652" level="INFO">Read output: Last login: Thu Nov  7 08:35:27 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:36:28.652" starttime="20191107 08:36:27.461"></status>
</kw>
<status status="PASS" endtime="20191107 08:36:28.653" starttime="20191107 08:36:27.457"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 08:36:28.654" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 08:36:29.813" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:36:29.814" starttime="20191107 08:36:28.653"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 08:36:29.815" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:36:29.923" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:36:29.924" level="INFO">${shutdownMsg} = hadoop    1461  0.0  0.0   9556  1168 ?        Ss   08:36   0:00 bash -c sudo ps aux | grep om
hadoop    1463  0.0  0.0   9088   668 ?        S    08:36   0:00 grep om</msg>
<status status="PASS" endtime="20191107 08:36:29.924" starttime="20191107 08:36:29.814"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:36:29.989" starttime="20191107 08:36:29.924"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:29.990" starttime="20191107 08:36:29.989"></status>
</kw>
<msg timestamp="20191107 08:36:29.990" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 08:36:29.991" starttime="20191107 08:36:27.450"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:36:29.995" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:36:32.249" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:36:32.250" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:32.250" starttime="20191107 08:36:29.992"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:36:32.251" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:32.251" starttime="20191107 08:36:32.250"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:36:32.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:36:32.252" starttime="20191107 08:36:32.252"></status>
</kw>
<msg timestamp="20191107 08:36:32.253" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:32.253" starttime="20191107 08:36:29.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 08:36:32.254" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:32.254" starttime="20191107 08:36:32.253"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:32.255" starttime="20191107 08:36:32.254"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:32.255" starttime="20191107 08:36:32.255"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 08:36:32.256" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 08:36:32.256" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:32.257" starttime="20191107 08:36:32.256"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 08:36:32.257" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 08:36:32.257" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 08:36:32.257" starttime="20191107 08:36:32.257"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 08:36:32.258" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:36:32.258" starttime="20191107 08:36:32.258"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 08:36:32.259" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 08:36:32.259" starttime="20191107 08:36:32.259"></status>
</kw>
<msg timestamp="20191107 08:36:32.259" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:36:32.259" starttime="20191107 08:36:29.991"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:32.261" starttime="20191107 08:36:32.260"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 08:36:32.262" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191107 08:36:32.262" starttime="20191107 08:36:32.261"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 08:36:32.263" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191107 08:36:32.263" starttime="20191107 08:36:32.262"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 08:36:32.264" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191107 08:36:32.264" starttime="20191107 08:36:32.264"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:36:32.266" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:36:32.266" starttime="20191107 08:36:32.264"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:36:32.270" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:36:36.670" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:36:36.670" level="INFO">${output} = 2019-11-07 08:36:35 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 08:36:35 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 08:36:36.670" starttime="20191107 08:36:32.268"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:36:36.671" level="INFO">2019-11-07 08:36:35 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 08:36:35 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 08:36:35 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 08:36:36.671" starttime="20191107 08:36:36.671"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:36:36.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:36:36.672" starttime="20191107 08:36:36.672"></status>
</kw>
<status status="PASS" endtime="20191107 08:36:36.673" starttime="20191107 08:36:32.267"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:36:36.676" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:36:38.861" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:36:38.861" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:36:38.861" starttime="20191107 08:36:36.674"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:36:38.863" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:36:38.863" starttime="20191107 08:36:38.862"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:36:38.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:36:38.865" starttime="20191107 08:36:38.864"></status>
</kw>
<msg timestamp="20191107 08:36:38.865" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:36:38.865" starttime="20191107 08:36:36.673"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:38.866" starttime="20191107 08:36:38.866"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:36:38.868" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:36:38.868" starttime="20191107 08:36:38.867"></status>
</kw>
<status status="PASS" endtime="20191107 08:36:38.868" starttime="20191107 08:36:32.261"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:36:38.870" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 08:36:38.870" starttime="20191107 08:36:38.869"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:38.872" starttime="20191107 08:36:38.871"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:36:38.873" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:36:40.080" level="INFO">Read output: Last login: Thu Nov  7 08:36:27 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:36:40.081" starttime="20191107 08:36:38.872"></status>
</kw>
<status status="PASS" endtime="20191107 08:36:40.081" starttime="20191107 08:36:38.870"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 08:36:40.083" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 08:36:42.244" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:36:42.244" starttime="20191107 08:36:40.082"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 08:36:42.245" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:36:42.321" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:36:42.321" level="INFO">${startupMsg} = hadoop    1513  369  0.0 34482416 220216 ?     Sl   08:36   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 08:36:42.321" starttime="20191107 08:36:42.245"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:36:42.354" starttime="20191107 08:36:42.322"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:42.355" starttime="20191107 08:36:42.355"></status>
</kw>
<status status="PASS" endtime="20191107 08:36:42.356" starttime="20191107 08:36:38.868"></status>
</kw>
<status status="PASS" endtime="20191107 08:36:42.356" starttime="20191107 08:36:24.979"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:36:42.360" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:36:44.247" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:36:44.247" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:44.247" starttime="20191107 08:36:42.358"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:36:44.248" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:44.249" starttime="20191107 08:36:44.248"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:36:44.249" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:36:44.249" starttime="20191107 08:36:44.249"></status>
</kw>
<msg timestamp="20191107 08:36:44.250" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:44.250" starttime="20191107 08:36:42.357"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 08:36:44.250" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:44.250" starttime="20191107 08:36:44.250"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:44.251" starttime="20191107 08:36:44.250"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:44.251" starttime="20191107 08:36:44.251"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 08:36:44.253" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 08:36:44.253" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:44.253" starttime="20191107 08:36:44.252"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 08:36:44.254" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 08:36:44.254" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 08:36:44.254" starttime="20191107 08:36:44.253"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 08:36:44.254" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:36:44.254" starttime="20191107 08:36:44.254"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 08:36:44.255" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 08:36:44.255" starttime="20191107 08:36:44.255"></status>
</kw>
<msg timestamp="20191107 08:36:44.255" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:36:44.255" starttime="20191107 08:36:42.356"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:36:44.256" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 08:36:44.257" starttime="20191107 08:36:44.256"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:44.258" starttime="20191107 08:36:44.257"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:36:44.258" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:36:45.446" level="INFO">Read output: Last login: Thu Nov  7 08:36:21 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:36:45.446" starttime="20191107 08:36:44.258"></status>
</kw>
<status status="PASS" endtime="20191107 08:36:45.447" starttime="20191107 08:36:44.257"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 08:36:45.448" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 08:36:46.600" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:36:46.600" starttime="20191107 08:36:45.448"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 08:36:46.601" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:36:46.677" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:36:46.678" level="INFO">${shutdownMsg} = hadoop    1077  0.0  0.0   9556  1164 ?        Ss   08:36   0:00 bash -c sudo ps aux | grep om
hadoop    1079  0.0  0.0   9088   668 ?        S    08:36   0:00 grep om</msg>
<status status="PASS" endtime="20191107 08:36:46.678" starttime="20191107 08:36:46.601"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:36:46.711" starttime="20191107 08:36:46.678"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:46.712" starttime="20191107 08:36:46.712"></status>
</kw>
<msg timestamp="20191107 08:36:46.713" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 08:36:46.713" starttime="20191107 08:36:44.255"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:36:46.717" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:36:58.863" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:36:58.863" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:58.863" starttime="20191107 08:36:46.715"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:36:58.865" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:58.865" starttime="20191107 08:36:58.864"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:36:58.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:36:58.866" starttime="20191107 08:36:58.866"></status>
</kw>
<msg timestamp="20191107 08:36:58.867" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:58.867" starttime="20191107 08:36:46.714"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 08:36:58.868" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:58.868" starttime="20191107 08:36:58.867"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:58.869" starttime="20191107 08:36:58.869"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:58.870" starttime="20191107 08:36:58.869"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 08:36:58.871" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 08:36:58.871" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:36:58.871" starttime="20191107 08:36:58.870"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 08:36:58.872" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 08:36:58.873" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 08:36:58.873" starttime="20191107 08:36:58.872"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 08:36:58.874" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 08:36:58.874" starttime="20191107 08:36:58.873"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 08:36:58.874" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 08:36:58.875" starttime="20191107 08:36:58.874"></status>
</kw>
<msg timestamp="20191107 08:36:58.875" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191107 08:36:58.875" starttime="20191107 08:36:46.713"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 08:36:58.876" starttime="20191107 08:36:58.875"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 08:36:58.879" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191107 08:36:58.879" starttime="20191107 08:36:58.878"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 08:36:58.880" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191107 08:36:58.880" starttime="20191107 08:36:58.879"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 08:36:58.881" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191107 08:36:58.881" starttime="20191107 08:36:58.881"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:36:58.884" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:36:58.884" starttime="20191107 08:36:58.882"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:36:58.887" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:37:13.469" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:37:13.469" level="INFO">${output} = 2019-11-07 08:37:01 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191107 08:37:13.469" starttime="20191107 08:36:58.885"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:37:13.470" level="INFO">2019-11-07 08:37:01 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:37:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:37:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:37:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:37:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:37:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:37:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:37:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:37:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:37:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:37:10 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-07 08:37:11 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 08:37:11 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 08:37:11 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 08:37:13.471" starttime="20191107 08:37:13.470"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:37:13.471" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:37:13.471" starttime="20191107 08:37:13.471"></status>
</kw>
<status status="PASS" endtime="20191107 08:37:13.472" starttime="20191107 08:36:58.884"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:37:13.475" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:37:25.853" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:37:25.853" level="INFO">${output} = 1.txt
2.txt
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:37:25.853" starttime="20191107 08:37:13.473"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:37:25.855" level="INFO">1.txt
2.txt
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:37:25.855" starttime="20191107 08:37:25.854"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:37:25.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:37:25.856" starttime="20191107 08:37:25.855"></status>
</kw>
<msg timestamp="20191107 08:37:25.857" level="INFO">${result} = 1.txt
2.txt
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:37:25.857" starttime="20191107 08:37:13.472"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:25.858" starttime="20191107 08:37:25.857"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:37:25.859" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:37:25.859" starttime="20191107 08:37:25.858"></status>
</kw>
<status status="PASS" endtime="20191107 08:37:25.859" starttime="20191107 08:36:58.877"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:37:25.861" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 08:37:25.862" starttime="20191107 08:37:25.861"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:25.863" starttime="20191107 08:37:25.862"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:37:25.864" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:37:27.070" level="INFO">Read output: Last login: Thu Nov  7 08:36:44 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:37:27.070" starttime="20191107 08:37:25.864"></status>
</kw>
<status status="PASS" endtime="20191107 08:37:27.071" starttime="20191107 08:37:25.862"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 08:37:27.072" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 08:37:29.232" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:37:29.232" starttime="20191107 08:37:27.071"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 08:37:29.233" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:37:29.331" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:37:29.331" level="INFO">${startupMsg} = hadoop    1128  346  0.0 34477224 228100 ?     Sl   08:37   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 08:37:29.331" starttime="20191107 08:37:29.233"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:37:29.396" starttime="20191107 08:37:29.331"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:29.397" starttime="20191107 08:37:29.397"></status>
</kw>
<status status="PASS" endtime="20191107 08:37:29.397" starttime="20191107 08:37:25.860"></status>
</kw>
<status status="PASS" endtime="20191107 08:37:29.398" starttime="20191107 08:36:42.356"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:37:29.401" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:37:31.649" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:37:31.649" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:31.649" starttime="20191107 08:37:29.399"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:37:31.650" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:31.650" starttime="20191107 08:37:31.650"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:37:31.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:37:31.651" starttime="20191107 08:37:31.650"></status>
</kw>
<msg timestamp="20191107 08:37:31.651" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:31.651" starttime="20191107 08:37:29.398"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 08:37:31.652" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:31.652" starttime="20191107 08:37:31.651"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:31.653" starttime="20191107 08:37:31.652"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:31.653" starttime="20191107 08:37:31.653"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 08:37:31.654" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 08:37:31.654" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:31.654" starttime="20191107 08:37:31.653"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 08:37:31.654" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 08:37:31.654" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 08:37:31.655" starttime="20191107 08:37:31.654"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 08:37:31.655" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 08:37:31.655" starttime="20191107 08:37:31.655"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 08:37:31.656" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 08:37:31.657" starttime="20191107 08:37:31.655"></status>
</kw>
<msg timestamp="20191107 08:37:31.657" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 08:37:31.657" starttime="20191107 08:37:29.398"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:37:31.660" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 08:37:31.660" starttime="20191107 08:37:31.659"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:31.663" starttime="20191107 08:37:31.662"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:37:31.664" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:37:32.869" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:37:32.870" starttime="20191107 08:37:31.663"></status>
</kw>
<status status="PASS" endtime="20191107 08:37:32.870" starttime="20191107 08:37:31.661"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 08:37:32.871" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 08:37:43.053" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:37:43.053" starttime="20191107 08:37:32.871"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 08:37:43.055" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:37:43.122" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:37:43.122" level="INFO">${shutdownMsg} = hadoop     526  0.0  0.0   9556  1164 ?        Ss   08:37   0:00 bash -c sudo ps aux | grep om
hadoop     528  0.0  0.0   9088   668 ?        S    08:37   0:00 grep om</msg>
<status status="PASS" endtime="20191107 08:37:43.122" starttime="20191107 08:37:43.054"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:37:43.188" starttime="20191107 08:37:43.123"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:43.189" starttime="20191107 08:37:43.188"></status>
</kw>
<msg timestamp="20191107 08:37:43.190" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 08:37:43.190" starttime="20191107 08:37:31.658"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:37:43.196" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:37:45.301" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:37:45.301" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:45.301" starttime="20191107 08:37:43.192"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:37:45.303" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:45.303" starttime="20191107 08:37:45.302"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:37:45.304" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:37:45.304" starttime="20191107 08:37:45.304"></status>
</kw>
<msg timestamp="20191107 08:37:45.305" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:45.305" starttime="20191107 08:37:43.191"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 08:37:45.306" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:45.306" starttime="20191107 08:37:45.305"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:45.307" starttime="20191107 08:37:45.306"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:45.308" starttime="20191107 08:37:45.307"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 08:37:45.309" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 08:37:45.309" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:45.309" starttime="20191107 08:37:45.308"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 08:37:45.310" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 08:37:45.310" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 08:37:45.310" starttime="20191107 08:37:45.309"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 08:37:45.311" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:37:45.312" starttime="20191107 08:37:45.311"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 08:37:45.312" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 08:37:45.313" starttime="20191107 08:37:45.312"></status>
</kw>
<msg timestamp="20191107 08:37:45.313" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:37:45.313" starttime="20191107 08:37:43.190"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:45.315" starttime="20191107 08:37:45.314"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 08:37:45.317" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191107 08:37:45.317" starttime="20191107 08:37:45.316"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 08:37:45.318" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191107 08:37:45.318" starttime="20191107 08:37:45.317"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 08:37:45.319" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191107 08:37:45.319" starttime="20191107 08:37:45.319"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:37:45.321" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:37:45.321" starttime="20191107 08:37:45.319"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:37:45.324" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:37:49.742" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:37:49.742" level="INFO">${output} = 2019-11-07 08:37:48 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 08:37:48 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 08:37:49.742" starttime="20191107 08:37:45.322"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:37:49.744" level="INFO">2019-11-07 08:37:48 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 08:37:48 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 08:37:48 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 08:37:49.744" starttime="20191107 08:37:49.743"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:37:49.745" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:37:49.746" starttime="20191107 08:37:49.745"></status>
</kw>
<status status="PASS" endtime="20191107 08:37:49.746" starttime="20191107 08:37:45.321"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:37:49.750" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:37:52.115" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:37:52.116" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:37:52.116" starttime="20191107 08:37:49.747"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:37:52.118" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:37:52.118" starttime="20191107 08:37:52.117"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:37:52.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:37:52.120" starttime="20191107 08:37:52.119"></status>
</kw>
<msg timestamp="20191107 08:37:52.120" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:37:52.120" starttime="20191107 08:37:49.746"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:52.122" starttime="20191107 08:37:52.121"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:37:52.124" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:37:52.124" starttime="20191107 08:37:52.122"></status>
</kw>
<status status="PASS" endtime="20191107 08:37:52.124" starttime="20191107 08:37:45.315"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:37:52.127" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 08:37:52.127" starttime="20191107 08:37:52.126"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:52.129" starttime="20191107 08:37:52.128"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:37:52.130" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:37:53.335" level="INFO">Read output: Last login: Thu Nov  7 08:37:31 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:37:53.335" starttime="20191107 08:37:52.129"></status>
</kw>
<status status="PASS" endtime="20191107 08:37:53.336" starttime="20191107 08:37:52.127"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 08:37:53.337" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 08:37:55.528" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:37:55.528" starttime="20191107 08:37:53.336"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 08:37:55.529" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:37:55.627" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:37:55.628" level="INFO">${startupMsg} = hadoop     579  368  0.0 34481128 226072 ?     Sl   08:37   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 08:37:55.628" starttime="20191107 08:37:55.528"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:37:55.693" starttime="20191107 08:37:55.628"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:55.694" starttime="20191107 08:37:55.693"></status>
</kw>
<status status="PASS" endtime="20191107 08:37:55.694" starttime="20191107 08:37:52.125"></status>
</kw>
<status status="PASS" endtime="20191107 08:37:55.694" starttime="20191107 08:37:29.398"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:37:55.697" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:37:57.654" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:37:57.654" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:57.654" starttime="20191107 08:37:55.695"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:37:57.655" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:57.656" starttime="20191107 08:37:57.655"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:37:57.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:37:57.656" starttime="20191107 08:37:57.656"></status>
</kw>
<msg timestamp="20191107 08:37:57.657" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:57.657" starttime="20191107 08:37:55.695"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 08:37:57.657" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:57.657" starttime="20191107 08:37:57.657"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:57.658" starttime="20191107 08:37:57.657"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:57.658" starttime="20191107 08:37:57.658"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 08:37:57.659" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 08:37:57.659" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 08:37:57.659" starttime="20191107 08:37:57.658"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 08:37:57.660" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 08:37:57.660" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 08:37:57.660" starttime="20191107 08:37:57.659"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 08:37:57.660" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:37:57.660" starttime="20191107 08:37:57.660"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 08:37:57.661" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 08:37:57.661" starttime="20191107 08:37:57.660"></status>
</kw>
<msg timestamp="20191107 08:37:57.661" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 08:37:57.661" starttime="20191107 08:37:55.694"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:37:57.662" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 08:37:57.662" starttime="20191107 08:37:57.662"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:37:57.664" starttime="20191107 08:37:57.663"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:37:57.664" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:37:58.864" level="INFO">Read output: Last login: Thu Nov  7 08:37:26 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:37:58.864" starttime="20191107 08:37:57.664"></status>
</kw>
<status status="PASS" endtime="20191107 08:37:58.865" starttime="20191107 08:37:57.663"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 08:37:58.866" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 08:38:00.025" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:38:00.026" starttime="20191107 08:37:58.865"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 08:38:00.027" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:38:00.135" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:38:00.135" level="INFO">${shutdownMsg} = hadoop    1630  0.0  0.0   9556  1168 ?        Ss   08:37   0:00 bash -c sudo ps aux | grep om
hadoop    1632  0.0  0.0   9088   672 ?        S    08:37   0:00 grep om</msg>
<status status="PASS" endtime="20191107 08:38:00.136" starttime="20191107 08:38:00.026"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:38:00.169" starttime="20191107 08:38:00.136"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:38:00.170" starttime="20191107 08:38:00.169"></status>
</kw>
<msg timestamp="20191107 08:38:00.170" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 08:38:00.170" starttime="20191107 08:37:57.661"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:38:00.176" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:38:12.487" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:38:12.488" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:38:12.488" starttime="20191107 08:38:00.172"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:38:12.489" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:38:12.489" starttime="20191107 08:38:12.488"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:38:12.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:38:12.490" starttime="20191107 08:38:12.490"></status>
</kw>
<msg timestamp="20191107 08:38:12.491" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:38:12.491" starttime="20191107 08:38:00.171"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 08:38:12.492" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:38:12.492" starttime="20191107 08:38:12.491"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 08:38:12.493" starttime="20191107 08:38:12.492"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 08:38:12.493" starttime="20191107 08:38:12.493"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 08:38:12.494" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 08:38:12.494" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 08:38:12.494" starttime="20191107 08:38:12.494"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 08:38:12.495" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 08:38:12.495" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 08:38:12.495" starttime="20191107 08:38:12.495"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 08:38:12.496" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 08:38:12.496" starttime="20191107 08:38:12.496"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 08:38:12.497" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 08:38:12.497" starttime="20191107 08:38:12.496"></status>
</kw>
<msg timestamp="20191107 08:38:12.497" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191107 08:38:12.498" starttime="20191107 08:38:00.171"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 08:38:12.498" starttime="20191107 08:38:12.498"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 08:38:12.500" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191107 08:38:12.500" starttime="20191107 08:38:12.499"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 08:38:12.501" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191107 08:38:12.501" starttime="20191107 08:38:12.500"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 08:38:12.502" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191107 08:38:12.502" starttime="20191107 08:38:12.501"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:38:12.504" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:38:12.504" starttime="20191107 08:38:12.502"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:38:12.507" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:38:27.032" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:38:27.032" level="INFO">${output} = 2019-11-07 08:38:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191107 08:38:27.032" starttime="20191107 08:38:12.505"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:38:27.034" level="INFO">2019-11-07 08:38:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:38:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:38:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:38:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:38:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:38:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:38:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:38:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:38:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:38:24 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 08:38:24 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-07 08:38:25 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 08:38:25 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 08:38:25 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 08:38:27.035" starttime="20191107 08:38:27.033"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:38:27.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:38:27.036" starttime="20191107 08:38:27.035"></status>
</kw>
<status status="PASS" endtime="20191107 08:38:27.037" starttime="20191107 08:38:12.504"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 08:38:27.043" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 08:38:39.368" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 08:38:39.368" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191107 08:38:39.368" starttime="20191107 08:38:27.039"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 08:38:39.370" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 08:38:39.370" starttime="20191107 08:38:39.369"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 08:38:39.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 08:38:39.371" starttime="20191107 08:38:39.371"></status>
</kw>
<msg timestamp="20191107 08:38:39.372" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191107 08:38:39.372" starttime="20191107 08:38:27.037"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:38:39.373" starttime="20191107 08:38:39.372"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 08:38:39.374" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 08:38:39.375" starttime="20191107 08:38:39.374"></status>
</kw>
<status status="PASS" endtime="20191107 08:38:39.375" starttime="20191107 08:38:12.499"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 08:38:39.377" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 08:38:39.377" starttime="20191107 08:38:39.376"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 08:38:39.379" starttime="20191107 08:38:39.378"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 08:38:39.380" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 08:38:40.569" level="INFO">Read output: Last login: Thu Nov  7 08:37:57 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 08:38:40.570" starttime="20191107 08:38:39.379"></status>
</kw>
<status status="PASS" endtime="20191107 08:38:40.570" starttime="20191107 08:38:39.377"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 08:38:40.571" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 08:38:42.741" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 08:38:42.742" starttime="20191107 08:38:40.571"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 08:38:42.743" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 08:38:42.839" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 08:38:42.840" level="INFO">${startupMsg} = hadoop    1682  237  0.0 34475932 207276 ?     Sl   08:38   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 08:38:42.840" starttime="20191107 08:38:42.742"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 08:38:42.905" starttime="20191107 08:38:42.840"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 08:38:42.906" starttime="20191107 08:38:42.905"></status>
</kw>
<status status="PASS" endtime="20191107 08:38:42.906" starttime="20191107 08:38:39.375"></status>
</kw>
<status status="PASS" endtime="20191107 08:38:42.906" starttime="20191107 08:37:55.694"></status>
</kw>
<status status="PASS" endtime="20191107 08:38:42.906" starttime="20191107 08:35:28.613"></status>
</kw>
<status status="PASS" endtime="20191107 08:38:42.907" critical="yes" starttime="20191107 08:35:28.612"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191107 08:38:42.908" starttime="20191107 08:34:01.340"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
