<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191111 13:37:02.734" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:37:02.905" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:37:05.691" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:37:05.691" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191111 13:37:05.691" starttime="20191111 13:37:02.904"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:37:05.692" level="INFO"></msg>
<status status="PASS" endtime="20191111 13:37:05.692" starttime="20191111 13:37:05.692"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:37:05.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:37:05.693" starttime="20191111 13:37:05.693"></status>
</kw>
<status status="PASS" endtime="20191111 13:37:05.693" starttime="20191111 13:37:02.903"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:37:05.699" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:37:08.002" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:37:08.002" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191111 13:37:08.003" starttime="20191111 13:37:05.697"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:37:08.004" level="INFO"></msg>
<status status="PASS" endtime="20191111 13:37:08.004" starttime="20191111 13:37:08.003"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:37:08.005" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:37:08.005" starttime="20191111 13:37:08.004"></status>
</kw>
<status status="PASS" endtime="20191111 13:37:08.005" starttime="20191111 13:37:05.694"></status>
</kw>
<status status="PASS" endtime="20191111 13:37:08.006" starttime="20191111 13:37:02.903"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 13:37:08.007" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191111 13:37:08.007" starttime="20191111 13:37:08.006"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 13:37:08.008" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191111 13:37:08.008" starttime="20191111 13:37:08.008"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 13:37:08.009" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191111 13:37:08.009" starttime="20191111 13:37:08.009"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:37:08.022" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:37:08.023" starttime="20191111 13:37:08.009"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:37:08.026" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:37:17.233" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:37:17.233" level="INFO">${output} = 2019-11-11 13:37:11 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 13:37:11 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191111 13:37:17.233" starttime="20191111 13:37:08.024"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:37:17.235" level="INFO">2019-11-11 13:37:11 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 13:37:11 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 13:37:11 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 13:37:17.235" starttime="20191111 13:37:17.234"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:37:17.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:37:17.236" starttime="20191111 13:37:17.235"></status>
</kw>
<status status="PASS" endtime="20191111 13:37:17.237" starttime="20191111 13:37:08.023"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:37:17.241" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:37:19.397" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:37:19.397" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191111 13:37:19.397" starttime="20191111 13:37:17.238"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:37:19.399" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191111 13:37:19.399" starttime="20191111 13:37:19.398"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:37:19.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:37:19.400" starttime="20191111 13:37:19.399"></status>
</kw>
<msg timestamp="20191111 13:37:19.401" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191111 13:37:19.401" starttime="20191111 13:37:17.237"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:37:19.402" starttime="20191111 13:37:19.401"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:37:19.404" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:37:19.404" starttime="20191111 13:37:19.403"></status>
</kw>
<status status="PASS" endtime="20191111 13:37:19.404" starttime="20191111 13:37:08.006"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:37:19.407" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:37:21.359" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:37:21.359" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:37:21.359" starttime="20191111 13:37:19.405"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:37:21.361" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:37:21.361" starttime="20191111 13:37:21.360"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:37:21.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:37:21.362" starttime="20191111 13:37:21.361"></status>
</kw>
<msg timestamp="20191111 13:37:21.362" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:37:21.362" starttime="20191111 13:37:19.405"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 13:37:21.363" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:37:21.363" starttime="20191111 13:37:21.363"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 13:37:21.365" starttime="20191111 13:37:21.364"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 13:37:21.365" starttime="20191111 13:37:21.365"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 13:37:21.366" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 13:37:21.366" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:37:21.366" starttime="20191111 13:37:21.366"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 13:37:21.367" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 13:37:21.367" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 13:37:21.367" starttime="20191111 13:37:21.367"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 13:37:21.368" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 13:37:21.368" starttime="20191111 13:37:21.368"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 13:37:21.369" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 13:37:21.369" starttime="20191111 13:37:21.368"></status>
</kw>
<msg timestamp="20191111 13:37:21.369" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 13:37:21.369" starttime="20191111 13:37:19.404"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:37:21.370" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 13:37:21.370" starttime="20191111 13:37:21.370"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:37:21.371" starttime="20191111 13:37:21.371"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:37:21.372" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:37:22.648" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:37:22.649" starttime="20191111 13:37:21.372"></status>
</kw>
<status status="PASS" endtime="20191111 13:37:22.649" starttime="20191111 13:37:21.370"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 13:37:22.650" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 13:37:32.831" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:37:32.832" starttime="20191111 13:37:22.650"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 13:37:32.833" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:37:32.941" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:37:32.942" level="INFO">${shutdownMsg} = hadoop     461  0.0  0.0   9556  1168 ?        Ss   13:37   0:00 bash -c sudo ps aux | grep om
hadoop     463  0.0  0.0   9088   668 ?        S    13:37   0:00 grep om</msg>
<status status="PASS" endtime="20191111 13:37:32.942" starttime="20191111 13:37:32.832"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:37:33.007" starttime="20191111 13:37:32.942"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:37:33.009" starttime="20191111 13:37:33.008"></status>
</kw>
<msg timestamp="20191111 13:37:33.009" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 13:37:33.009" starttime="20191111 13:37:21.369"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:37:33.014" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:37:45.295" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:37:45.296" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:37:45.296" starttime="20191111 13:37:33.011"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:37:45.297" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:37:45.297" starttime="20191111 13:37:45.296"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:37:45.298" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:37:45.298" starttime="20191111 13:37:45.297"></status>
</kw>
<msg timestamp="20191111 13:37:45.298" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:37:45.298" starttime="20191111 13:37:33.010"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 13:37:45.299" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:37:45.299" starttime="20191111 13:37:45.298"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 13:37:45.300" starttime="20191111 13:37:45.299"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 13:37:45.300" starttime="20191111 13:37:45.300"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 13:37:45.301" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 13:37:45.301" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:37:45.301" starttime="20191111 13:37:45.300"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 13:37:45.302" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 13:37:45.302" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 13:37:45.302" starttime="20191111 13:37:45.301"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 13:37:45.302" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 13:37:45.303" starttime="20191111 13:37:45.302"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 13:37:45.303" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 13:37:45.303" starttime="20191111 13:37:45.303"></status>
</kw>
<msg timestamp="20191111 13:37:45.303" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191111 13:37:45.304" starttime="20191111 13:37:33.009"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 13:37:45.304" starttime="20191111 13:37:45.304"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 13:37:45.305" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191111 13:37:45.306" starttime="20191111 13:37:45.305"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 13:37:45.306" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191111 13:37:45.306" starttime="20191111 13:37:45.306"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 13:37:45.307" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191111 13:37:45.307" starttime="20191111 13:37:45.307"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:37:45.309" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:37:45.309" starttime="20191111 13:37:45.307"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:37:45.312" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:37:59.850" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:37:59.850" level="INFO">${output} = 2019-11-11 13:37:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191111 13:37:59.850" starttime="20191111 13:37:45.310"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:37:59.852" level="INFO">2019-11-11 13:37:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:37:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:37:50 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:37:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:37:52 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:37:53 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:37:54 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:37:55 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:37:56 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:37:57 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:37:58 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 13:37:58 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 13:37:58 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 13:37:59.852" starttime="20191111 13:37:59.851"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:37:59.852" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:37:59.853" starttime="20191111 13:37:59.852"></status>
</kw>
<status status="PASS" endtime="20191111 13:37:59.853" starttime="20191111 13:37:45.309"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:37:59.856" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:38:12.028" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:38:12.028" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191111 13:38:12.029" starttime="20191111 13:37:59.854"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:38:12.031" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191111 13:38:12.031" starttime="20191111 13:38:12.030"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:38:12.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:38:12.032" starttime="20191111 13:38:12.031"></status>
</kw>
<msg timestamp="20191111 13:38:12.033" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191111 13:38:12.033" starttime="20191111 13:37:59.854"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:38:12.034" starttime="20191111 13:38:12.033"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:38:12.035" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:38:12.035" starttime="20191111 13:38:12.034"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:12.035" starttime="20191111 13:37:45.304"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:38:12.038" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 13:38:12.038" starttime="20191111 13:38:12.037"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:38:12.040" starttime="20191111 13:38:12.039"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:38:12.041" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:38:13.247" level="INFO">Read output: Last login: Mon Nov 11 13:37:21 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:38:13.247" starttime="20191111 13:38:12.040"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:13.248" starttime="20191111 13:38:12.038"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 13:38:13.249" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 13:38:15.429" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:38:15.429" starttime="20191111 13:38:13.248"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 13:38:15.430" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:38:15.528" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:38:15.529" level="INFO">${startupMsg} = hadoop     514  379  0.0 34478388 227020 ?     Sl   13:38   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 13:38:15.529" starttime="20191111 13:38:15.429"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:38:15.594" starttime="20191111 13:38:15.529"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:38:15.595" starttime="20191111 13:38:15.594"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:15.595" starttime="20191111 13:38:12.036"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:15.595" critical="yes" starttime="20191111 13:37:02.902"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191111 13:38:15.597" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191111 13:38:15.597" starttime="20191111 13:38:15.596"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191111 13:38:15.599" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191111 13:38:15.599" starttime="20191111 13:38:15.598"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:38:15.600" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 13:38:15.600" starttime="20191111 13:38:15.600"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:38:15.601" starttime="20191111 13:38:15.601"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:38:15.602" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:38:16.800" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:38:16.801" starttime="20191111 13:38:15.602"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:16.801" starttime="20191111 13:38:15.600"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 13:38:16.801" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 13:38:26.970" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:38:26.970" starttime="20191111 13:38:16.801"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 13:38:26.971" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:38:27.070" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:38:27.070" level="INFO">${shutdownMsg} = hadoop     493  0.0  0.0   9556  1164 ?        Ss   13:38   0:00 bash -c sudo ps aux | grep om
hadoop     495  0.0  0.0   9088   672 ?        S    13:38   0:00 grep om</msg>
<status status="PASS" endtime="20191111 13:38:27.071" starttime="20191111 13:38:26.971"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:38:27.136" starttime="20191111 13:38:27.071"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:38:27.138" starttime="20191111 13:38:27.137"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:27.138" starttime="20191111 13:38:15.599"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:38:27.140" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 13:38:27.140" starttime="20191111 13:38:27.139"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:38:27.142" starttime="20191111 13:38:27.141"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:38:27.143" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:38:28.348" level="INFO">Read output: Last login: Mon Nov 11 13:38:15 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:38:28.348" starttime="20191111 13:38:27.142"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:28.349" starttime="20191111 13:38:27.140"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191111 13:38:28.350" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191111 13:38:28.366" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:38:28.366" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 13:38:28.366" starttime="20191111 13:38:28.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191111 13:38:28.367" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 13:38:28.368" starttime="20191111 13:38:28.367"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191111 13:38:28.369" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191111 13:38:28.370" starttime="20191111 13:38:28.368"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191111 13:38:28.451" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191111 13:38:28.463" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191111 13:38:28.464" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191111 13:38:28.464" starttime="20191111 13:38:28.370"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191111 13:38:28.466" level="INFO">Length is 2</msg>
<msg timestamp="20191111 13:38:28.466" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191111 13:38:28.466" starttime="20191111 13:38:28.464"></status>
</kw>
<msg timestamp="20191111 13:38:28.467" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191111 13:38:28.467" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191111 13:38:28.467" starttime="20191111 13:38:27.138"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:38:28.473" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:38:30.690" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:38:30.690" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:38:30.690" starttime="20191111 13:38:28.470"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:38:30.692" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:38:30.692" starttime="20191111 13:38:30.691"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:38:30.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:38:30.694" starttime="20191111 13:38:30.693"></status>
</kw>
<msg timestamp="20191111 13:38:30.694" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:38:30.694" starttime="20191111 13:38:28.469"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 13:38:30.695" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:38:30.695" starttime="20191111 13:38:30.695"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 13:38:30.696" starttime="20191111 13:38:30.696"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 13:38:30.697" starttime="20191111 13:38:30.697"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 13:38:30.698" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 13:38:30.698" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:38:30.699" starttime="20191111 13:38:30.698"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 13:38:30.700" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191111 13:38:30.700" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 13:38:30.700" starttime="20191111 13:38:30.699"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 13:38:30.701" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 13:38:30.701" starttime="20191111 13:38:30.700"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 13:38:30.702" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191111 13:38:30.702" starttime="20191111 13:38:30.701"></status>
</kw>
<msg timestamp="20191111 13:38:30.702" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 13:38:30.702" starttime="20191111 13:38:28.468"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191111 13:38:30.706" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191111 13:38:30.706" starttime="20191111 13:38:30.703"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 13:38:30.708" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191111 13:38:30.708" starttime="20191111 13:38:30.708"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 13:38:30.709" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191111 13:38:30.709" starttime="20191111 13:38:30.709"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:38:30.714" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:38:35.569" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:38:35.569" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 13:38:35.569" starttime="20191111 13:38:30.712"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:38:35.570" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 13:38:35.570" starttime="20191111 13:38:35.569"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:38:35.571" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:38:35.571" starttime="20191111 13:38:35.571"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:35.572" starttime="20191111 13:38:30.710"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:38:35.576" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:38:37.964" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:38:37.964" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573479513193,
  "modificationTime": 1573479515139,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 13:38:37.964" starttime="20191111 13:38:35.574"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:38:37.966" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573479513193,
  "modificationTime": 1573479515139,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103119553375698940,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 13:38:37.966" starttime="20191111 13:38:37.965"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:38:37.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:38:37.967" starttime="20191111 13:38:37.966"></status>
</kw>
<msg timestamp="20191111 13:38:37.967" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573479513193,
  "modificationTime": 1573479515139,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 13:38:37.967" starttime="20191111 13:38:35.572"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 13:38:37.968" starttime="20191111 13:38:37.967"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:37.968" starttime="20191111 13:38:30.710"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:37.968" starttime="20191111 13:38:30.707"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 13:38:37.969" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191111 13:38:37.969" starttime="20191111 13:38:37.968"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 13:38:37.970" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191111 13:38:37.970" starttime="20191111 13:38:37.969"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:38:37.974" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:38:42.535" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:38:42.535" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 13:38:42.535" starttime="20191111 13:38:37.972"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:38:42.537" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 13:38:42.537" starttime="20191111 13:38:42.536"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:38:42.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:38:42.538" starttime="20191111 13:38:42.537"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:42.538" starttime="20191111 13:38:37.971"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:38:42.542" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:38:45.255" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:38:45.255" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573479520175,
  "modificationTime": 1573479522118,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 13:38:45.255" starttime="20191111 13:38:42.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:38:45.256" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573479520175,
  "modificationTime": 1573479522118,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103119553833992200,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 13:38:45.256" starttime="20191111 13:38:45.256"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:38:45.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:38:45.257" starttime="20191111 13:38:45.257"></status>
</kw>
<msg timestamp="20191111 13:38:45.258" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573479520175,
  "modificationTime": 1573479522118,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 13:38:45.258" starttime="20191111 13:38:42.539"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 13:38:45.258" starttime="20191111 13:38:45.258"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:45.259" starttime="20191111 13:38:37.970"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:45.259" starttime="20191111 13:38:37.968"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 13:38:45.260" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191111 13:38:45.260" starttime="20191111 13:38:45.259"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 13:38:45.260" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191111 13:38:45.261" starttime="20191111 13:38:45.260"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:38:45.265" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:38:52.575" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:38:52.575" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 13:38:52.575" starttime="20191111 13:38:45.263"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:38:52.576" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 13:38:52.577" starttime="20191111 13:38:52.576"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:38:52.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:38:52.578" starttime="20191111 13:38:52.577"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:52.578" starttime="20191111 13:38:45.262"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:38:52.582" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:38:54.952" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:38:54.952" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573479527493,
  "modificationTime": 1573479531853,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 13:38:54.952" starttime="20191111 13:38:52.580"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:38:54.953" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573479527493,
  "modificationTime": 1573479531853,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103119554313715710,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 13:38:54.954" starttime="20191111 13:38:54.953"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:38:54.954" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:38:54.955" starttime="20191111 13:38:54.954"></status>
</kw>
<msg timestamp="20191111 13:38:54.955" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573479527493,
  "modificationTime": 1573479531853,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 13:38:54.955" starttime="20191111 13:38:52.578"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 13:38:54.956" starttime="20191111 13:38:54.956"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:54.956" starttime="20191111 13:38:45.261"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:54.956" starttime="20191111 13:38:45.259"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 13:38:54.958" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191111 13:38:54.958" starttime="20191111 13:38:54.957"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 13:38:54.958" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191111 13:38:54.959" starttime="20191111 13:38:54.958"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:38:54.963" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:38:59.555" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:38:59.556" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 13:38:59.556" starttime="20191111 13:38:54.961"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:38:59.558" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 13:38:59.558" starttime="20191111 13:38:59.557"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:38:59.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:38:59.559" starttime="20191111 13:38:59.558"></status>
</kw>
<status status="PASS" endtime="20191111 13:38:59.560" starttime="20191111 13:38:54.960"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:38:59.565" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:39:01.818" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:39:01.818" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573479537193,
  "modificationTime": 1573479539139,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 13:39:01.818" starttime="20191111 13:38:59.562"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:39:01.820" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573479537193,
  "modificationTime": 1573479539139,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103119554949349380,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 13:39:01.820" starttime="20191111 13:39:01.819"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:39:01.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:39:01.822" starttime="20191111 13:39:01.821"></status>
</kw>
<msg timestamp="20191111 13:39:01.822" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573479537193,
  "modificationTime": 1573479539139,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 13:39:01.822" starttime="20191111 13:38:59.560"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:01.823" starttime="20191111 13:39:01.823"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:01.823" starttime="20191111 13:38:54.959"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:01.823" starttime="20191111 13:38:54.957"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 13:39:01.825" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:39:01.825" starttime="20191111 13:39:01.824"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 13:39:01.826" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:39:01.826" starttime="20191111 13:39:01.825"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:39:01.831" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:39:06.841" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:39:06.841" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191111 13:39:06.841" starttime="20191111 13:39:01.828"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:39:06.842" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 13:39:06.842" starttime="20191111 13:39:06.842"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:39:06.843" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:39:06.843" starttime="20191111 13:39:06.842"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:06.843" starttime="20191111 13:39:01.827"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:39:06.848" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:39:09.451" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:39:09.451" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573479544032,
  "modificationTime": 1573479546422,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 13:39:09.451" starttime="20191111 13:39:06.846"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:39:09.453" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573479544032,
  "modificationTime": 1573479546422,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103119555397550080,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191111 13:39:09.453" starttime="20191111 13:39:09.452"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:39:09.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:39:09.454" starttime="20191111 13:39:09.453"></status>
</kw>
<msg timestamp="20191111 13:39:09.454" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573479544032,
  "modificationTime": 1573479546422,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191111 13:39:09.454" starttime="20191111 13:39:06.844"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:09.456" starttime="20191111 13:39:09.455"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:09.457" starttime="20191111 13:39:01.826"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:09.457" starttime="20191111 13:39:01.824"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:09.457" starttime="20191111 13:38:30.707"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:09.457" starttime="20191111 13:38:30.706"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:39:09.460" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191111 13:39:09.460" starttime="20191111 13:39:09.459"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:09.462" starttime="20191111 13:39:09.461"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:39:09.463" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:39:10.652" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:39:10.652" starttime="20191111 13:39:09.462"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:10.653" starttime="20191111 13:39:09.460"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191111 13:39:10.654" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191111 13:39:10.670" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:39:10.670" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 13:39:10.670" starttime="20191111 13:39:10.653"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191111 13:39:10.671" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 13:39:10.671" starttime="20191111 13:39:10.670"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191111 13:39:10.672" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191111 13:39:10.672" starttime="20191111 13:39:10.672"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191111 13:39:10.753" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191111 13:39:10.763" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191111 13:39:10.764" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191111 13:39:10.764" starttime="20191111 13:39:10.673"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191111 13:39:10.765" level="INFO">Length is 3</msg>
<msg timestamp="20191111 13:39:10.765" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191111 13:39:10.765" starttime="20191111 13:39:10.764"></status>
</kw>
<msg timestamp="20191111 13:39:10.766" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191111 13:39:10.766" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191111 13:39:10.766" starttime="20191111 13:39:09.457"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191111 13:39:10.767" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191111 13:39:10.768" starttime="20191111 13:39:10.767"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:10.768" starttime="20191111 13:38:30.703"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:10.768" starttime="20191111 13:38:30.703"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:10.769" starttime="20191111 13:39:10.768"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:39:10.771" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 13:39:10.771" starttime="20191111 13:39:10.770"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:10.773" starttime="20191111 13:39:10.773"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:39:10.774" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:39:11.979" level="INFO">Read output: Last login: Mon Nov 11 13:38:27 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:39:11.979" starttime="20191111 13:39:10.774"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:11.980" starttime="20191111 13:39:10.771"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 13:39:11.981" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 13:39:14.160" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:39:14.160" starttime="20191111 13:39:11.980"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 13:39:14.162" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:39:14.269" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:39:14.270" level="INFO">${startupMsg} = hadoop     568  362  0.0 34477188 209040 ?     Sl   13:39   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 13:39:14.270" starttime="20191111 13:39:14.161"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:39:14.335" starttime="20191111 13:39:14.270"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:14.336" starttime="20191111 13:39:14.335"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:14.336" starttime="20191111 13:39:10.769"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:39:14.339" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 13:39:14.339" starttime="20191111 13:39:14.338"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:14.340" starttime="20191111 13:39:14.339"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:39:14.340" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:39:15.527" level="INFO">Read output: Last login: Mon Nov 11 13:39:10 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:39:15.528" starttime="20191111 13:39:14.340"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:15.528" starttime="20191111 13:39:14.339"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191111 13:39:15.529" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191111 13:39:15.544" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:39:15.545" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 13:39:15.545" starttime="20191111 13:39:15.529"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191111 13:39:15.546" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 13:39:15.546" starttime="20191111 13:39:15.545"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191111 13:39:15.547" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191111 13:39:15.547" starttime="20191111 13:39:15.546"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191111 13:39:15.625" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191111 13:39:15.634" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191111 13:39:15.635" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191111 13:39:15.635" starttime="20191111 13:39:15.547"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191111 13:39:15.636" level="INFO">Length is 2</msg>
<msg timestamp="20191111 13:39:15.636" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191111 13:39:15.636" starttime="20191111 13:39:15.635"></status>
</kw>
<msg timestamp="20191111 13:39:15.636" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191111 13:39:15.636" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191111 13:39:15.637" starttime="20191111 13:39:14.337"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:15.638" starttime="20191111 13:39:15.637"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191111 13:39:16.638" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191111 13:39:16.639" starttime="20191111 13:39:15.638"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:16.639" starttime="20191111 13:39:14.337"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:39:16.641" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 13:39:16.641" starttime="20191111 13:39:16.640"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:16.642" starttime="20191111 13:39:16.641"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:39:16.642" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:39:17.845" level="INFO">Read output: Last login: Mon Nov 11 13:39:14 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:39:17.846" starttime="20191111 13:39:16.642"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:17.846" starttime="20191111 13:39:16.641"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191111 13:39:17.847" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191111 13:39:17.862" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:39:17.862" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 13:39:17.862" starttime="20191111 13:39:17.846"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191111 13:39:17.863" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 13:39:17.863" starttime="20191111 13:39:17.863"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191111 13:39:17.864" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191111 13:39:17.864" starttime="20191111 13:39:17.863"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191111 13:39:17.943" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191111 13:39:17.953" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191111 13:39:17.953" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191111 13:39:17.953" starttime="20191111 13:39:17.864"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191111 13:39:17.954" level="INFO">Length is 3</msg>
<msg timestamp="20191111 13:39:17.955" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191111 13:39:17.955" starttime="20191111 13:39:17.954"></status>
</kw>
<msg timestamp="20191111 13:39:17.955" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191111 13:39:17.955" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191111 13:39:17.955" starttime="20191111 13:39:16.639"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191111 13:39:17.956" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191111 13:39:17.957" starttime="20191111 13:39:17.956"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:17.957" starttime="20191111 13:39:16.639"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:17.957" starttime="20191111 13:39:14.337"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:17.958" starttime="20191111 13:39:17.957"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:17.959" starttime="20191111 13:39:17.958"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:17.959" critical="yes" starttime="20191111 13:38:15.595"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:39:17.966" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:39:20.045" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:39:20.046" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:20.046" starttime="20191111 13:39:17.963"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:39:20.048" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:20.048" starttime="20191111 13:39:20.047"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:39:20.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:39:20.049" starttime="20191111 13:39:20.048"></status>
</kw>
<msg timestamp="20191111 13:39:20.050" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:20.050" starttime="20191111 13:39:17.962"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 13:39:20.051" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:20.051" starttime="20191111 13:39:20.050"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:20.052" starttime="20191111 13:39:20.051"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:20.053" starttime="20191111 13:39:20.052"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 13:39:20.053" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 13:39:20.054" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:20.054" starttime="20191111 13:39:20.053"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 13:39:20.055" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191111 13:39:20.055" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 13:39:20.055" starttime="20191111 13:39:20.054"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 13:39:20.056" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 13:39:20.056" starttime="20191111 13:39:20.055"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 13:39:20.057" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191111 13:39:20.057" starttime="20191111 13:39:20.056"></status>
</kw>
<msg timestamp="20191111 13:39:20.058" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 13:39:20.058" starttime="20191111 13:39:17.962"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:39:20.059" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191111 13:39:20.059" starttime="20191111 13:39:20.059"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:20.060" starttime="20191111 13:39:20.060"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:39:20.061" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:39:21.251" level="INFO">Read output: Last login: Mon Nov 11 13:39:09 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:39:21.251" starttime="20191111 13:39:20.061"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:21.252" starttime="20191111 13:39:20.059"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 13:39:21.253" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 13:39:31.415" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:39:31.415" starttime="20191111 13:39:21.253"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 13:39:31.416" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:39:31.492" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:39:31.493" level="INFO">${shutdownMsg} = hadoop     525  0.0  0.0   9556  1164 ?        Ss   13:39   0:00 bash -c sudo ps aux | grep om
hadoop     527  0.0  0.0   9088   668 ?        S    13:39   0:00 grep om</msg>
<status status="PASS" endtime="20191111 13:39:31.493" starttime="20191111 13:39:31.416"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:39:31.529" starttime="20191111 13:39:31.493"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:31.536" starttime="20191111 13:39:31.533"></status>
</kw>
<msg timestamp="20191111 13:39:31.537" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 13:39:31.537" starttime="20191111 13:39:20.058"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:39:31.541" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:39:33.650" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:39:33.650" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:33.650" starttime="20191111 13:39:31.539"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:39:33.653" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:33.653" starttime="20191111 13:39:33.651"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:39:33.654" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:39:33.654" starttime="20191111 13:39:33.653"></status>
</kw>
<msg timestamp="20191111 13:39:33.655" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:33.655" starttime="20191111 13:39:31.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 13:39:33.656" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:33.656" starttime="20191111 13:39:33.655"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:33.657" starttime="20191111 13:39:33.657"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:33.658" starttime="20191111 13:39:33.658"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 13:39:33.660" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 13:39:33.660" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:33.660" starttime="20191111 13:39:33.659"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 13:39:33.661" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 13:39:33.661" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 13:39:33.661" starttime="20191111 13:39:33.660"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 13:39:33.662" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 13:39:33.662" starttime="20191111 13:39:33.662"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 13:39:33.663" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 13:39:33.664" starttime="20191111 13:39:33.663"></status>
</kw>
<msg timestamp="20191111 13:39:33.664" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191111 13:39:33.664" starttime="20191111 13:39:31.537"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:33.665" starttime="20191111 13:39:33.664"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 13:39:33.667" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191111 13:39:33.667" starttime="20191111 13:39:33.666"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 13:39:33.669" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191111 13:39:33.669" starttime="20191111 13:39:33.668"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 13:39:33.670" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191111 13:39:33.670" starttime="20191111 13:39:33.669"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:39:33.673" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:39:33.674" starttime="20191111 13:39:33.670"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:39:33.678" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:39:38.300" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:39:38.301" level="INFO">${output} = 2019-11-11 13:39:36 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 13:39:36 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191111 13:39:38.301" starttime="20191111 13:39:33.675"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:39:38.303" level="INFO">2019-11-11 13:39:36 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 13:39:36 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 13:39:36 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 13:39:38.303" starttime="20191111 13:39:38.302"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:39:38.304" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:39:38.304" starttime="20191111 13:39:38.303"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:38.304" starttime="20191111 13:39:33.674"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:39:38.309" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:39:40.568" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:39:40.568" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:39:40.568" starttime="20191111 13:39:38.306"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:39:40.569" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:39:40.569" starttime="20191111 13:39:40.569"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:39:40.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:39:40.570" starttime="20191111 13:39:40.570"></status>
</kw>
<msg timestamp="20191111 13:39:40.570" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:39:40.571" starttime="20191111 13:39:38.305"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:40.571" starttime="20191111 13:39:40.571"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:39:40.573" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:39:40.573" starttime="20191111 13:39:40.571"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:40.573" starttime="20191111 13:39:33.666"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:39:40.574" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191111 13:39:40.574" starttime="20191111 13:39:40.574"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:40.576" starttime="20191111 13:39:40.575"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:39:40.577" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:39:41.784" level="INFO">Read output: Last login: Mon Nov 11 13:39:20 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:39:41.785" starttime="20191111 13:39:40.576"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:41.785" starttime="20191111 13:39:40.575"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 13:39:41.786" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 13:39:43.966" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:39:43.967" starttime="20191111 13:39:41.786"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 13:39:43.968" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:39:44.076" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:39:44.076" level="INFO">${startupMsg} = hadoop     578  345  0.0 34475920 212452 ?     Sl   13:39   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 13:39:44.076" starttime="20191111 13:39:43.967"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:39:44.141" starttime="20191111 13:39:44.076"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:44.143" starttime="20191111 13:39:44.142"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:44.143" starttime="20191111 13:39:40.573"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:44.144" starttime="20191111 13:39:17.961"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:39:44.150" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:39:45.995" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:39:45.995" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:45.995" starttime="20191111 13:39:44.146"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:39:45.996" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:45.997" starttime="20191111 13:39:45.996"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:39:45.997" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:39:45.997" starttime="20191111 13:39:45.997"></status>
</kw>
<msg timestamp="20191111 13:39:45.998" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:45.998" starttime="20191111 13:39:44.145"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 13:39:45.998" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:45.999" starttime="20191111 13:39:45.998"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:45.999" starttime="20191111 13:39:45.999"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:46.000" starttime="20191111 13:39:46.000"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 13:39:46.001" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 13:39:46.001" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:39:46.001" starttime="20191111 13:39:46.000"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 13:39:46.002" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 13:39:46.002" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 13:39:46.002" starttime="20191111 13:39:46.001"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 13:39:46.003" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 13:39:46.003" starttime="20191111 13:39:46.002"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 13:39:46.003" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 13:39:46.003" starttime="20191111 13:39:46.003"></status>
</kw>
<msg timestamp="20191111 13:39:46.004" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 13:39:46.004" starttime="20191111 13:39:44.144"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:39:46.005" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 13:39:46.005" starttime="20191111 13:39:46.004"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:46.007" starttime="20191111 13:39:46.006"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:39:46.007" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:39:47.210" level="INFO">Read output: Last login: Mon Nov 11 13:38:12 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:39:47.210" starttime="20191111 13:39:46.007"></status>
</kw>
<status status="PASS" endtime="20191111 13:39:47.211" starttime="20191111 13:39:46.005"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 13:39:47.212" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 13:39:48.362" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:39:48.362" starttime="20191111 13:39:47.211"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 13:39:48.364" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:39:48.429" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:39:48.429" level="INFO">${shutdownMsg} = hadoop    1026  0.0  0.0   9556  1168 ?        Ss   13:39   0:00 bash -c sudo ps aux | grep om
hadoop    1028  0.0  0.0   9088   668 ?        S    13:39   0:00 grep om</msg>
<status status="PASS" endtime="20191111 13:39:48.430" starttime="20191111 13:39:48.363"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:39:48.495" starttime="20191111 13:39:48.430"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:39:48.496" starttime="20191111 13:39:48.495"></status>
</kw>
<msg timestamp="20191111 13:39:48.496" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 13:39:48.496" starttime="20191111 13:39:46.004"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:39:48.501" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:40:00.809" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:40:00.809" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:00.809" starttime="20191111 13:39:48.498"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:40:00.811" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:00.811" starttime="20191111 13:40:00.810"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:40:00.812" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:40:00.812" starttime="20191111 13:40:00.812"></status>
</kw>
<msg timestamp="20191111 13:40:00.813" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:00.813" starttime="20191111 13:39:48.497"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 13:40:00.814" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:00.814" starttime="20191111 13:40:00.814"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:00.815" starttime="20191111 13:40:00.815"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:00.816" starttime="20191111 13:40:00.816"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 13:40:00.817" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 13:40:00.817" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:00.818" starttime="20191111 13:40:00.817"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 13:40:00.819" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 13:40:00.819" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 13:40:00.819" starttime="20191111 13:40:00.818"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 13:40:00.820" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 13:40:00.820" starttime="20191111 13:40:00.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 13:40:00.821" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 13:40:00.821" starttime="20191111 13:40:00.820"></status>
</kw>
<msg timestamp="20191111 13:40:00.821" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191111 13:40:00.822" starttime="20191111 13:39:48.497"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:00.823" starttime="20191111 13:40:00.822"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 13:40:00.825" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191111 13:40:00.825" starttime="20191111 13:40:00.824"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 13:40:00.826" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191111 13:40:00.826" starttime="20191111 13:40:00.825"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 13:40:00.827" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191111 13:40:00.827" starttime="20191111 13:40:00.826"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:40:00.830" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:40:00.830" starttime="20191111 13:40:00.827"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:40:00.834" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:40:15.529" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:40:15.529" level="INFO">${output} = 2019-11-11 13:40:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191111 13:40:15.529" starttime="20191111 13:40:00.831"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:40:15.531" level="INFO">2019-11-11 13:40:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:40:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:40:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:40:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:40:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:40:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:40:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:40:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:40:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:40:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:40:13 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 13:40:13 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 13:40:13 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 13:40:15.531" starttime="20191111 13:40:15.530"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:40:15.532" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:40:15.532" starttime="20191111 13:40:15.531"></status>
</kw>
<status status="PASS" endtime="20191111 13:40:15.532" starttime="20191111 13:40:00.830"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:40:15.536" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:40:28.008" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:40:28.008" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:40:28.009" starttime="20191111 13:40:15.533"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:40:28.011" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:40:28.011" starttime="20191111 13:40:28.010"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:40:28.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:40:28.013" starttime="20191111 13:40:28.012"></status>
</kw>
<msg timestamp="20191111 13:40:28.014" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:40:28.014" starttime="20191111 13:40:15.532"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:28.015" starttime="20191111 13:40:28.014"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:40:28.017" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:40:28.017" starttime="20191111 13:40:28.016"></status>
</kw>
<status status="PASS" endtime="20191111 13:40:28.017" starttime="20191111 13:40:00.823"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:40:28.020" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 13:40:28.020" starttime="20191111 13:40:28.019"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:28.022" starttime="20191111 13:40:28.021"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:40:28.023" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:40:29.230" level="INFO">Read output: Last login: Mon Nov 11 13:39:46 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:40:29.231" starttime="20191111 13:40:28.022"></status>
</kw>
<status status="PASS" endtime="20191111 13:40:29.231" starttime="20191111 13:40:28.020"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 13:40:29.232" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 13:40:31.402" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:40:31.403" starttime="20191111 13:40:29.232"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 13:40:31.403" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:40:31.501" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:40:31.501" level="INFO">${startupMsg} = hadoop    1077  361  0.0 34481196 226920 ?     Sl   13:40   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 13:40:31.501" starttime="20191111 13:40:31.403"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:40:31.566" starttime="20191111 13:40:31.502"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:31.568" starttime="20191111 13:40:31.567"></status>
</kw>
<status status="PASS" endtime="20191111 13:40:31.568" starttime="20191111 13:40:28.018"></status>
</kw>
<status status="PASS" endtime="20191111 13:40:31.568" starttime="20191111 13:39:44.144"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:40:31.571" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:40:33.960" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:40:33.960" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:33.960" starttime="20191111 13:40:31.569"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:40:33.962" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:33.962" starttime="20191111 13:40:33.961"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:40:33.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:40:33.963" starttime="20191111 13:40:33.962"></status>
</kw>
<msg timestamp="20191111 13:40:33.964" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:33.964" starttime="20191111 13:40:31.569"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 13:40:33.965" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:33.965" starttime="20191111 13:40:33.964"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:33.966" starttime="20191111 13:40:33.965"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:33.967" starttime="20191111 13:40:33.966"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 13:40:33.969" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 13:40:33.969" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:33.969" starttime="20191111 13:40:33.967"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 13:40:33.970" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 13:40:33.970" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 13:40:33.970" starttime="20191111 13:40:33.969"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 13:40:33.971" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 13:40:33.971" starttime="20191111 13:40:33.971"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 13:40:33.972" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 13:40:33.972" starttime="20191111 13:40:33.972"></status>
</kw>
<msg timestamp="20191111 13:40:33.973" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 13:40:33.973" starttime="20191111 13:40:31.568"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:40:33.975" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 13:40:33.975" starttime="20191111 13:40:33.974"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:33.977" starttime="20191111 13:40:33.976"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:40:33.979" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:40:35.180" level="INFO">Read output: Last login: Mon Nov 11 13:39:16 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:40:35.180" starttime="20191111 13:40:33.978"></status>
</kw>
<status status="PASS" endtime="20191111 13:40:35.181" starttime="20191111 13:40:33.975"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 13:40:35.182" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 13:40:36.342" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:40:36.343" starttime="20191111 13:40:35.181"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 13:40:36.344" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:40:36.442" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:40:36.442" level="INFO">${shutdownMsg} = hadoop    1122  0.0  0.0   9556  1168 ?        Ss   13:40   0:00 bash -c sudo ps aux | grep om
hadoop    1124  0.0  0.0   9088   672 ?        S    13:40   0:00 grep om</msg>
<status status="PASS" endtime="20191111 13:40:36.443" starttime="20191111 13:40:36.343"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:40:36.508" starttime="20191111 13:40:36.443"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:36.509" starttime="20191111 13:40:36.508"></status>
</kw>
<msg timestamp="20191111 13:40:36.509" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 13:40:36.509" starttime="20191111 13:40:33.973"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:40:36.514" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:40:38.576" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:40:38.577" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:38.577" starttime="20191111 13:40:36.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:40:38.579" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:38.579" starttime="20191111 13:40:38.578"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:40:38.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:40:38.580" starttime="20191111 13:40:38.579"></status>
</kw>
<msg timestamp="20191111 13:40:38.581" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:38.581" starttime="20191111 13:40:36.510"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 13:40:38.581" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:38.582" starttime="20191111 13:40:38.581"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:38.583" starttime="20191111 13:40:38.582"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:38.584" starttime="20191111 13:40:38.583"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 13:40:38.585" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 13:40:38.585" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:38.585" starttime="20191111 13:40:38.584"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 13:40:38.586" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 13:40:38.586" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 13:40:38.586" starttime="20191111 13:40:38.585"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 13:40:38.587" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 13:40:38.587" starttime="20191111 13:40:38.587"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 13:40:38.588" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 13:40:38.588" starttime="20191111 13:40:38.588"></status>
</kw>
<msg timestamp="20191111 13:40:38.589" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191111 13:40:38.589" starttime="20191111 13:40:36.510"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:38.590" starttime="20191111 13:40:38.589"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 13:40:38.592" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191111 13:40:38.592" starttime="20191111 13:40:38.592"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 13:40:38.594" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191111 13:40:38.594" starttime="20191111 13:40:38.593"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 13:40:38.595" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191111 13:40:38.595" starttime="20191111 13:40:38.594"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:40:38.597" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:40:38.598" starttime="20191111 13:40:38.595"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:40:38.601" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:40:43.257" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:40:43.257" level="INFO">${output} = 2019-11-11 13:40:41 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 13:40:41 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191111 13:40:43.258" starttime="20191111 13:40:38.599"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:40:43.259" level="INFO">2019-11-11 13:40:41 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 13:40:41 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 13:40:41 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 13:40:43.259" starttime="20191111 13:40:43.258"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:40:43.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:40:43.260" starttime="20191111 13:40:43.259"></status>
</kw>
<status status="PASS" endtime="20191111 13:40:43.260" starttime="20191111 13:40:38.598"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:40:43.264" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:40:45.483" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:40:45.483" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:40:45.484" starttime="20191111 13:40:43.261"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:40:45.485" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:40:45.485" starttime="20191111 13:40:45.484"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:40:45.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:40:45.485" starttime="20191111 13:40:45.485"></status>
</kw>
<msg timestamp="20191111 13:40:45.486" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:40:45.486" starttime="20191111 13:40:43.261"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:45.486" starttime="20191111 13:40:45.486"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:40:45.487" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:40:45.487" starttime="20191111 13:40:45.487"></status>
</kw>
<status status="PASS" endtime="20191111 13:40:45.487" starttime="20191111 13:40:38.590"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:40:45.489" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 13:40:45.489" starttime="20191111 13:40:45.488"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:45.490" starttime="20191111 13:40:45.489"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:40:45.490" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:40:46.679" level="INFO">Read output: Last login: Mon Nov 11 13:40:34 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:40:46.679" starttime="20191111 13:40:45.490"></status>
</kw>
<status status="PASS" endtime="20191111 13:40:46.680" starttime="20191111 13:40:45.489"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 13:40:46.681" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 13:40:48.862" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:40:48.863" starttime="20191111 13:40:46.680"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 13:40:48.864" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:40:48.972" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:40:48.973" level="INFO">${startupMsg} = hadoop    1173  331  0.0 34475796 202900 ?     Sl   13:40   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 13:40:48.973" starttime="20191111 13:40:48.863"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:40:49.007" starttime="20191111 13:40:48.973"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:49.008" starttime="20191111 13:40:49.007"></status>
</kw>
<status status="PASS" endtime="20191111 13:40:49.008" starttime="20191111 13:40:45.488"></status>
</kw>
<status status="PASS" endtime="20191111 13:40:49.008" starttime="20191111 13:40:31.568"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:40:49.012" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:40:50.969" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:40:50.969" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:50.969" starttime="20191111 13:40:49.010"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:40:50.971" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:50.971" starttime="20191111 13:40:50.970"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:40:50.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:40:50.973" starttime="20191111 13:40:50.972"></status>
</kw>
<msg timestamp="20191111 13:40:50.973" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:50.973" starttime="20191111 13:40:49.009"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 13:40:50.974" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:50.974" starttime="20191111 13:40:50.973"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:50.974" starttime="20191111 13:40:50.974"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:50.975" starttime="20191111 13:40:50.974"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 13:40:50.975" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 13:40:50.975" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 13:40:50.976" starttime="20191111 13:40:50.975"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 13:40:50.976" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 13:40:50.976" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 13:40:50.976" starttime="20191111 13:40:50.976"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 13:40:50.977" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 13:40:50.977" starttime="20191111 13:40:50.977"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 13:40:50.977" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 13:40:50.977" starttime="20191111 13:40:50.977"></status>
</kw>
<msg timestamp="20191111 13:40:50.978" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 13:40:50.978" starttime="20191111 13:40:49.008"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:40:50.979" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 13:40:50.979" starttime="20191111 13:40:50.979"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:50.980" starttime="20191111 13:40:50.980"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:40:50.981" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:40:52.179" level="INFO">Read output: Last login: Mon Nov 11 13:40:28 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:40:52.179" starttime="20191111 13:40:50.980"></status>
</kw>
<status status="PASS" endtime="20191111 13:40:52.180" starttime="20191111 13:40:50.979"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 13:40:52.181" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 13:40:53.340" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:40:53.341" starttime="20191111 13:40:52.180"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 13:40:53.342" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:40:53.440" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:40:53.441" level="INFO">${shutdownMsg} = hadoop    1570  0.0  0.0   9556  1168 ?        Ss   13:40   0:00 bash -c sudo ps aux | grep om
hadoop    1572  0.0  0.0   9088   672 ?        S    13:40   0:00 grep om</msg>
<status status="PASS" endtime="20191111 13:40:53.441" starttime="20191111 13:40:53.341"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:40:53.506" starttime="20191111 13:40:53.441"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:40:53.507" starttime="20191111 13:40:53.506"></status>
</kw>
<msg timestamp="20191111 13:40:53.507" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 13:40:53.508" starttime="20191111 13:40:50.978"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:40:53.512" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:41:05.706" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:41:05.706" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:05.706" starttime="20191111 13:40:53.509"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:41:05.708" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:05.709" starttime="20191111 13:41:05.707"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:41:05.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:41:05.710" starttime="20191111 13:41:05.709"></status>
</kw>
<msg timestamp="20191111 13:41:05.711" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:05.711" starttime="20191111 13:40:53.508"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 13:41:05.712" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:05.712" starttime="20191111 13:41:05.711"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:05.713" starttime="20191111 13:41:05.712"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:05.714" starttime="20191111 13:41:05.713"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 13:41:05.715" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 13:41:05.715" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:05.715" starttime="20191111 13:41:05.714"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 13:41:05.716" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 13:41:05.716" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 13:41:05.716" starttime="20191111 13:41:05.715"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 13:41:05.718" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 13:41:05.718" starttime="20191111 13:41:05.717"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 13:41:05.719" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 13:41:05.719" starttime="20191111 13:41:05.718"></status>
</kw>
<msg timestamp="20191111 13:41:05.719" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191111 13:41:05.719" starttime="20191111 13:40:53.508"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:05.721" starttime="20191111 13:41:05.720"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 13:41:05.722" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191111 13:41:05.722" starttime="20191111 13:41:05.722"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 13:41:05.724" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191111 13:41:05.724" starttime="20191111 13:41:05.723"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 13:41:05.725" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191111 13:41:05.725" starttime="20191111 13:41:05.724"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:41:05.728" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:41:05.728" starttime="20191111 13:41:05.725"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:41:05.732" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:41:20.244" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:41:20.244" level="INFO">${output} = 2019-11-11 13:41:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191111 13:41:20.245" starttime="20191111 13:41:05.729"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:41:20.246" level="INFO">2019-11-11 13:41:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:41:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:41:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:41:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:41:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:41:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:41:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:41:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:41:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:41:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-11 13:41:18 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 13:41:18 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 13:41:18 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 13:41:20.246" starttime="20191111 13:41:20.245"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:41:20.247" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:41:20.247" starttime="20191111 13:41:20.246"></status>
</kw>
<status status="PASS" endtime="20191111 13:41:20.248" starttime="20191111 13:41:05.728"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:41:20.251" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:41:32.785" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:41:32.785" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:41:32.785" starttime="20191111 13:41:20.249"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:41:32.786" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:41:32.787" starttime="20191111 13:41:32.786"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:41:32.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:41:32.787" starttime="20191111 13:41:32.787"></status>
</kw>
<msg timestamp="20191111 13:41:32.788" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:41:32.788" starttime="20191111 13:41:20.248"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:32.789" starttime="20191111 13:41:32.788"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:41:32.790" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:41:32.790" starttime="20191111 13:41:32.789"></status>
</kw>
<status status="PASS" endtime="20191111 13:41:32.790" starttime="20191111 13:41:05.721"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:41:32.792" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 13:41:32.792" starttime="20191111 13:41:32.791"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:32.793" starttime="20191111 13:41:32.792"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:41:32.794" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:41:33.983" level="INFO">Read output: Last login: Mon Nov 11 13:40:51 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:41:33.983" starttime="20191111 13:41:32.793"></status>
</kw>
<status status="PASS" endtime="20191111 13:41:33.984" starttime="20191111 13:41:32.792"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 13:41:33.985" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 13:41:36.154" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:41:36.154" starttime="20191111 13:41:33.984"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 13:41:36.155" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:41:36.264" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:41:36.264" level="INFO">${startupMsg} = hadoop    1622  356  0.0 34477360 223336 ?     Sl   13:41   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 13:41:36.264" starttime="20191111 13:41:36.155"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:41:36.297" starttime="20191111 13:41:36.265"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:36.298" starttime="20191111 13:41:36.298"></status>
</kw>
<status status="PASS" endtime="20191111 13:41:36.299" starttime="20191111 13:41:32.790"></status>
</kw>
<status status="PASS" endtime="20191111 13:41:36.299" starttime="20191111 13:40:49.008"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:41:36.302" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:41:39.277" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:41:39.277" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:39.277" starttime="20191111 13:41:36.300"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:41:39.279" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:39.279" starttime="20191111 13:41:39.278"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:41:39.280" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:41:39.280" starttime="20191111 13:41:39.279"></status>
</kw>
<msg timestamp="20191111 13:41:39.281" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:39.281" starttime="20191111 13:41:36.300"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 13:41:39.281" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:39.282" starttime="20191111 13:41:39.281"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:39.283" starttime="20191111 13:41:39.282"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:39.283" starttime="20191111 13:41:39.283"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 13:41:39.284" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 13:41:39.284" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:39.284" starttime="20191111 13:41:39.284"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 13:41:39.285" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191111 13:41:39.285" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 13:41:39.285" starttime="20191111 13:41:39.285"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 13:41:39.286" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 13:41:39.286" starttime="20191111 13:41:39.286"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 13:41:39.287" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191111 13:41:39.287" starttime="20191111 13:41:39.287"></status>
</kw>
<msg timestamp="20191111 13:41:39.288" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191111 13:41:39.288" starttime="20191111 13:41:36.299"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:41:39.289" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 13:41:39.290" starttime="20191111 13:41:39.289"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:39.292" starttime="20191111 13:41:39.291"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:41:39.292" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:41:40.482" level="INFO">Read output: Last login: Mon Nov 11 13:40:45 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:41:40.483" starttime="20191111 13:41:39.292"></status>
</kw>
<status status="PASS" endtime="20191111 13:41:40.483" starttime="20191111 13:41:39.290"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 13:41:40.484" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 13:41:41.634" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:41:41.634" starttime="20191111 13:41:40.483"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 13:41:41.635" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:41:41.743" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:41:41.743" level="INFO">${shutdownMsg} = hadoop    1694  0.0  0.0   9556  1168 ?        Ss   13:41   0:00 bash -c sudo ps aux | grep om
hadoop    1696  0.0  0.0   9088   668 ?        S    13:41   0:00 grep om</msg>
<status status="PASS" endtime="20191111 13:41:41.743" starttime="20191111 13:41:41.635"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:41:41.809" starttime="20191111 13:41:41.744"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:41.810" starttime="20191111 13:41:41.809"></status>
</kw>
<msg timestamp="20191111 13:41:41.811" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 13:41:41.811" starttime="20191111 13:41:39.288"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:41:41.815" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:41:43.753" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:41:43.754" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:43.754" starttime="20191111 13:41:41.812"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:41:43.755" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:43.755" starttime="20191111 13:41:43.754"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:41:43.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:41:43.756" starttime="20191111 13:41:43.755"></status>
</kw>
<msg timestamp="20191111 13:41:43.756" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:43.756" starttime="20191111 13:41:41.812"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 13:41:43.757" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:43.757" starttime="20191111 13:41:43.757"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:43.758" starttime="20191111 13:41:43.757"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:43.758" starttime="20191111 13:41:43.758"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 13:41:43.759" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 13:41:43.759" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191111 13:41:43.759" starttime="20191111 13:41:43.759"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 13:41:43.760" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191111 13:41:43.760" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 13:41:43.760" starttime="20191111 13:41:43.759"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 13:41:43.761" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191111 13:41:43.761" starttime="20191111 13:41:43.760"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 13:41:43.762" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191111 13:41:43.762" starttime="20191111 13:41:43.761"></status>
</kw>
<msg timestamp="20191111 13:41:43.763" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191111 13:41:43.763" starttime="20191111 13:41:41.811"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:43.764" starttime="20191111 13:41:43.763"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191111 13:41:43.766" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191111 13:41:43.766" starttime="20191111 13:41:43.765"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191111 13:41:43.767" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191111 13:41:43.767" starttime="20191111 13:41:43.766"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191111 13:41:43.768" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191111 13:41:43.768" starttime="20191111 13:41:43.767"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:41:43.771" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:41:43.771" starttime="20191111 13:41:43.769"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:41:43.775" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:41:48.623" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:41:48.623" level="INFO">${output} = 2019-11-11 13:41:46 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 13:41:47 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191111 13:41:48.623" starttime="20191111 13:41:43.772"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:41:48.625" level="INFO">2019-11-11 13:41:46 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-11 13:41:47 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-11 13:41:47 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191111 13:41:48.625" starttime="20191111 13:41:48.624"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:41:48.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:41:48.626" starttime="20191111 13:41:48.625"></status>
</kw>
<status status="PASS" endtime="20191111 13:41:48.626" starttime="20191111 13:41:43.771"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 13:41:48.631" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 13:41:50.911" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 13:41:50.911" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:41:50.911" starttime="20191111 13:41:48.628"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 13:41:50.913" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:41:50.913" starttime="20191111 13:41:50.912"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 13:41:50.914" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 13:41:50.914" starttime="20191111 13:41:50.914"></status>
</kw>
<msg timestamp="20191111 13:41:50.915" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191111 13:41:50.915" starttime="20191111 13:41:48.627"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:50.916" starttime="20191111 13:41:50.915"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191111 13:41:50.917" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191111 13:41:50.917" starttime="20191111 13:41:50.916"></status>
</kw>
<status status="PASS" endtime="20191111 13:41:50.917" starttime="20191111 13:41:43.764"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 13:41:50.919" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 13:41:50.919" starttime="20191111 13:41:50.918"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:50.921" starttime="20191111 13:41:50.920"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 13:41:50.922" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 13:41:52.128" level="INFO">Read output: Last login: Mon Nov 11 13:41:39 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 13:41:52.128" starttime="20191111 13:41:50.921"></status>
</kw>
<status status="PASS" endtime="20191111 13:41:52.128" starttime="20191111 13:41:50.920"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191111 13:41:52.130" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191111 13:41:54.309" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 13:41:54.309" starttime="20191111 13:41:52.129"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191111 13:41:54.311" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 13:41:54.419" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 13:41:54.420" level="INFO">${startupMsg} = hadoop    1746  347  0.0 34479116 206500 ?     Sl   13:41   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191111 13:41:54.420" starttime="20191111 13:41:54.310"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 13:41:54.485" starttime="20191111 13:41:54.420"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 13:41:54.487" starttime="20191111 13:41:54.486"></status>
</kw>
<status status="PASS" endtime="20191111 13:41:54.487" starttime="20191111 13:41:50.918"></status>
</kw>
<status status="PASS" endtime="20191111 13:41:54.487" starttime="20191111 13:41:36.299"></status>
</kw>
<status status="PASS" endtime="20191111 13:41:54.487" starttime="20191111 13:39:17.960"></status>
</kw>
<status status="PASS" endtime="20191111 13:41:54.488" critical="yes" starttime="20191111 13:39:17.959"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191111 13:41:54.490" starttime="20191111 13:37:02.737"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
