<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191105 14:40:25.606" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 14:40:25.824" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 14:40:32.204" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 14:40:32.204" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191105 14:40:32.204" starttime="20191105 14:40:25.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 14:40:32.205" level="INFO"></msg>
<status status="PASS" endtime="20191105 14:40:32.205" starttime="20191105 14:40:32.205"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 14:40:32.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 14:40:32.206" starttime="20191105 14:40:32.206"></status>
</kw>
<status status="PASS" endtime="20191105 14:40:32.207" starttime="20191105 14:40:25.821"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 14:40:32.216" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 14:40:36.016" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 14:40:36.016" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191105 14:40:36.016" starttime="20191105 14:40:32.213"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 14:40:36.018" level="INFO"></msg>
<status status="PASS" endtime="20191105 14:40:36.018" starttime="20191105 14:40:36.017"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 14:40:36.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 14:40:36.019" starttime="20191105 14:40:36.018"></status>
</kw>
<status status="PASS" endtime="20191105 14:40:36.019" starttime="20191105 14:40:32.207"></status>
</kw>
<status status="PASS" endtime="20191105 14:40:36.020" starttime="20191105 14:40:25.819"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191105 14:40:36.021" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191105 14:40:36.021" starttime="20191105 14:40:36.021"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191105 14:40:36.022" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191105 14:40:36.023" starttime="20191105 14:40:36.022"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191105 14:40:36.024" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191105 14:40:36.024" starttime="20191105 14:40:36.023"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 14:40:36.026" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 14:40:36.026" starttime="20191105 14:40:36.024"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 14:40:36.030" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 14:40:45.482" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 14:40:45.482" level="INFO">${output} = 2019-11-05 14:40:41 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 14:40:41 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191105 14:40:45.483" starttime="20191105 14:40:36.028"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 14:40:45.484" level="INFO">2019-11-05 14:40:41 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 14:40:41 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-05 14:40:41 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 14:40:45.484" starttime="20191105 14:40:45.483"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 14:40:45.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 14:40:45.485" starttime="20191105 14:40:45.484"></status>
</kw>
<status status="PASS" endtime="20191105 14:40:45.486" starttime="20191105 14:40:36.026"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 14:40:45.491" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 14:40:49.689" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 14:40:49.689" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191105 14:40:49.689" starttime="20191105 14:40:45.487"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 14:40:49.691" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191105 14:40:49.691" starttime="20191105 14:40:49.690"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 14:40:49.692" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 14:40:49.692" starttime="20191105 14:40:49.691"></status>
</kw>
<msg timestamp="20191105 14:40:49.693" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191105 14:40:49.693" starttime="20191105 14:40:45.486"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191105 14:40:49.694" starttime="20191105 14:40:49.693"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 14:40:49.695" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 14:40:49.695" starttime="20191105 14:40:49.694"></status>
</kw>
<status status="PASS" endtime="20191105 14:40:49.695" starttime="20191105 14:40:36.020"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 14:40:49.700" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 14:40:53.360" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 14:40:53.360" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 14:40:53.361" starttime="20191105 14:40:49.697"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 14:40:53.362" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 14:40:53.362" starttime="20191105 14:40:53.361"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 14:40:53.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 14:40:53.363" starttime="20191105 14:40:53.362"></status>
</kw>
<msg timestamp="20191105 14:40:53.363" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 14:40:53.364" starttime="20191105 14:40:49.696"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 14:40:53.364" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 14:40:53.364" starttime="20191105 14:40:53.364"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 14:40:53.366" starttime="20191105 14:40:53.365"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 14:40:53.366" starttime="20191105 14:40:53.366"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 14:40:53.367" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 14:40:53.367" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191105 14:40:53.367" starttime="20191105 14:40:53.367"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 14:40:53.368" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191105 14:40:53.368" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 14:40:53.368" starttime="20191105 14:40:53.368"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 14:40:53.369" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191105 14:40:53.369" starttime="20191105 14:40:53.368"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 14:40:53.370" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191105 14:40:53.370" starttime="20191105 14:40:53.369"></status>
</kw>
<msg timestamp="20191105 14:40:53.370" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191105 14:40:53.370" starttime="20191105 14:40:49.696"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 14:40:53.372" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 14:40:53.372" starttime="20191105 14:40:53.371"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 14:40:53.374" starttime="20191105 14:40:53.373"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 14:40:53.375" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 14:40:54.745" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 14:40:54.746" starttime="20191105 14:40:53.374"></status>
</kw>
<status status="PASS" endtime="20191105 14:40:54.746" starttime="20191105 14:40:53.372"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 14:40:54.747" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 14:40:54.761" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 14:40:54.762" starttime="20191105 14:40:54.746"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 14:40:54.763" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 14:40:54.840" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 14:40:54.840" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 14:40:54.840" starttime="20191105 14:40:54.762"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 14:40:54.955" starttime="20191105 14:40:54.840"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 14:40:54.956" starttime="20191105 14:40:54.955"></status>
</kw>
<msg timestamp="20191105 14:40:54.956" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191105 14:40:54.956" starttime="20191105 14:40:53.371"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 14:40:54.959" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 14:40:58.425" level="INFO">${rc} = 255</msg>
<msg timestamp="20191105 14:40:58.425" level="INFO">${output} = Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Could not determine or connect to OM Leader.</msg>
<status status="PASS" endtime="20191105 14:40:58.425" starttime="20191105 14:40:54.957"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 14:40:58.426" level="INFO">Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Could not determine or connect to OM Leader.</msg>
<status status="PASS" endtime="20191105 14:40:58.427" starttime="20191105 14:40:58.426"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 14:40:58.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191105 14:40:58.428" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191105 14:40:58.428" starttime="20191105 14:40:58.427"></status>
</kw>
<status status="FAIL" endtime="20191105 14:40:58.429" starttime="20191105 14:40:54.956"></status>
</kw>
<status status="FAIL" endtime="20191105 14:40:58.429" starttime="20191105 14:40:54.956"></status>
</kw>
<status status="FAIL" endtime="20191105 14:40:58.429" critical="yes" starttime="20191105 14:40:25.817">255 != 0</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191105 14:40:58.437" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191105 14:40:58.437" starttime="20191105 14:40:58.434"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191105 14:40:58.438" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191105 14:40:58.438" starttime="20191105 14:40:58.437"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 14:40:58.439" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 14:40:58.439" starttime="20191105 14:40:58.439"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 14:40:58.440" starttime="20191105 14:40:58.440"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 14:40:58.441" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 14:40:59.664" level="INFO">Read output: Last login: Tue Nov  5 14:40:53 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 14:40:59.664" starttime="20191105 14:40:58.441"></status>
</kw>
<status status="PASS" endtime="20191105 14:40:59.664" starttime="20191105 14:40:58.439"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 14:40:59.665" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 14:40:59.679" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 14:40:59.680" starttime="20191105 14:40:59.664"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 14:40:59.680" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 14:40:59.758" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 14:40:59.758" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 14:40:59.758" starttime="20191105 14:40:59.680"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 14:40:59.873" starttime="20191105 14:40:59.759"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 14:40:59.889" starttime="20191105 14:40:59.874"></status>
</kw>
<status status="PASS" endtime="20191105 14:40:59.889" starttime="20191105 14:40:58.438"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 14:40:59.891" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 14:40:59.891" starttime="20191105 14:40:59.890"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 14:40:59.892" starttime="20191105 14:40:59.892"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 14:40:59.893" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 14:41:01.060" level="INFO">Read output: Last login: Tue Nov  5 14:40:58 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 14:41:01.061" starttime="20191105 14:40:59.892"></status>
</kw>
<status status="PASS" endtime="20191105 14:41:01.061" starttime="20191105 14:40:59.891"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191105 14:41:01.062" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191105 14:41:01.077" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 14:41:01.077" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191105 14:41:01.077" starttime="20191105 14:41:01.061"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191105 14:41:01.078" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191105 14:41:01.079" starttime="20191105 14:41:01.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191105 14:41:01.080" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191105 14:41:01.080" starttime="20191105 14:41:01.079"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191105 14:41:01.122" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191105 14:41:01.123" starttime="20191105 14:41:01.080"></status>
</kw>
<status status="FAIL" endtime="20191105 14:41:01.123" starttime="20191105 14:40:59.889"></status>
</kw>
<status status="FAIL" endtime="20191105 14:41:01.123" critical="yes" starttime="20191105 14:40:58.431">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 14:41:01.131" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 14:41:05.641" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 14:41:05.642" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 14:41:05.642" starttime="20191105 14:41:01.128"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 14:41:05.643" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 14:41:05.643" starttime="20191105 14:41:05.642"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 14:41:05.645" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 14:41:05.645" starttime="20191105 14:41:05.644"></status>
</kw>
<msg timestamp="20191105 14:41:05.645" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 14:41:05.645" starttime="20191105 14:41:01.128"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 14:41:05.646" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 14:41:05.646" starttime="20191105 14:41:05.645"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 14:41:05.646" starttime="20191105 14:41:05.646"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 14:41:05.647" starttime="20191105 14:41:05.646"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 14:41:05.648" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 14:41:05.648" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191105 14:41:05.648" starttime="20191105 14:41:05.647"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 14:41:05.649" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191105 14:41:05.649" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 14:41:05.649" starttime="20191105 14:41:05.648"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 14:41:05.649" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191105 14:41:05.649" starttime="20191105 14:41:05.649"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 14:41:05.650" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191105 14:41:05.650" starttime="20191105 14:41:05.650"></status>
</kw>
<msg timestamp="20191105 14:41:05.650" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191105 14:41:05.650" starttime="20191105 14:41:01.127"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 14:41:05.651" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191105 14:41:05.652" starttime="20191105 14:41:05.651"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 14:41:05.653" starttime="20191105 14:41:05.652"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 14:41:05.653" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191105 14:41:06.846" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 14:41:06.846" starttime="20191105 14:41:05.653"></status>
</kw>
<status status="PASS" endtime="20191105 14:41:06.846" starttime="20191105 14:41:05.652"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 14:41:06.847" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 14:41:06.861" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 14:41:06.861" starttime="20191105 14:41:06.847"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 14:41:06.862" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 14:41:06.939" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 14:41:06.940" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 14:41:06.940" starttime="20191105 14:41:06.862"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 14:41:07.055" starttime="20191105 14:41:06.940"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 14:41:07.056" starttime="20191105 14:41:07.056"></status>
</kw>
<msg timestamp="20191105 14:41:07.057" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191105 14:41:07.057" starttime="20191105 14:41:05.650"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 14:41:07.061" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 14:41:11.211" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 14:41:11.211" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 14:41:11.212" starttime="20191105 14:41:07.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 14:41:11.213" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 14:41:11.213" starttime="20191105 14:41:11.212"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 14:41:11.214" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 14:41:11.214" starttime="20191105 14:41:11.213"></status>
</kw>
<msg timestamp="20191105 14:41:11.214" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 14:41:11.214" starttime="20191105 14:41:07.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 14:41:11.214" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 14:41:11.215" starttime="20191105 14:41:11.214"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 14:41:11.216" starttime="20191105 14:41:11.215"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 14:41:11.216" starttime="20191105 14:41:11.216"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 14:41:11.217" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 14:41:11.217" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191105 14:41:11.217" starttime="20191105 14:41:11.216"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 14:41:11.217" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191105 14:41:11.217" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 14:41:11.218" starttime="20191105 14:41:11.217"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 14:41:11.218" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191105 14:41:11.218" starttime="20191105 14:41:11.218"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 14:41:11.219" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191105 14:41:11.219" starttime="20191105 14:41:11.218"></status>
</kw>
<msg timestamp="20191105 14:41:11.270" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191105 14:41:11.270" starttime="20191105 14:41:07.057"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191105 14:41:11.271" level="FAIL">OMs did not failover: om3 == om3</msg>
<status status="FAIL" endtime="20191105 14:41:11.271" starttime="20191105 14:41:11.270"></status>
</kw>
<status status="FAIL" endtime="20191105 14:41:11.271" starttime="20191105 14:41:01.127"></status>
</kw>
<status status="FAIL" endtime="20191105 14:41:11.271" starttime="20191105 14:41:01.126"></status>
</kw>
<status status="FAIL" endtime="20191105 14:41:11.272" critical="yes" starttime="20191105 14:41:01.125">OMs did not failover: om3 == om3</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191105 14:41:11.273" starttime="20191105 14:40:25.607"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
