<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191113 17:13:37.028" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:13:37.176" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:13:39.592" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:13:39.592" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 17:13:39.592" starttime="20191113 17:13:37.174"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:13:39.593" level="INFO"></msg>
<status status="PASS" endtime="20191113 17:13:39.594" starttime="20191113 17:13:39.593"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:13:39.594" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:13:39.594" starttime="20191113 17:13:39.594"></status>
</kw>
<status status="PASS" endtime="20191113 17:13:39.594" starttime="20191113 17:13:37.174"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:13:39.600" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:13:41.685" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:13:41.685" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 17:13:41.685" starttime="20191113 17:13:39.598"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:13:41.686" level="INFO"></msg>
<status status="PASS" endtime="20191113 17:13:41.686" starttime="20191113 17:13:41.686"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:13:41.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:13:41.687" starttime="20191113 17:13:41.686"></status>
</kw>
<status status="PASS" endtime="20191113 17:13:41.687" starttime="20191113 17:13:39.595"></status>
</kw>
<status status="PASS" endtime="20191113 17:13:41.687" starttime="20191113 17:13:37.174"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 17:13:41.688" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191113 17:13:41.688" starttime="20191113 17:13:41.688"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 17:13:41.689" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191113 17:13:41.689" starttime="20191113 17:13:41.689"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 17:13:41.690" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191113 17:13:41.690" starttime="20191113 17:13:41.689"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 17:13:41.691" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 17:13:41.691" starttime="20191113 17:13:41.690"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:13:41.693" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:13:45.915" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:13:45.916" level="INFO">${output} = 2019-11-13 17:13:44 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 17:13:44 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 17:13:45.916" starttime="20191113 17:13:41.692"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:13:45.917" level="INFO">2019-11-13 17:13:44 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 17:13:44 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 17:13:44 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 17:13:45.917" starttime="20191113 17:13:45.916"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:13:45.918" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:13:45.918" starttime="20191113 17:13:45.917"></status>
</kw>
<status status="PASS" endtime="20191113 17:13:45.918" starttime="20191113 17:13:41.691"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:13:45.921" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:13:47.972" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:13:47.973" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191113 17:13:47.973" starttime="20191113 17:13:45.919"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:13:47.974" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191113 17:13:47.974" starttime="20191113 17:13:47.973"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:13:47.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:13:47.974" starttime="20191113 17:13:47.974"></status>
</kw>
<msg timestamp="20191113 17:13:47.975" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191113 17:13:47.975" starttime="20191113 17:13:45.918"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:13:47.975" starttime="20191113 17:13:47.975"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 17:13:47.976" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 17:13:47.976" starttime="20191113 17:13:47.975"></status>
</kw>
<status status="PASS" endtime="20191113 17:13:47.976" starttime="20191113 17:13:41.687"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:13:47.979" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:13:49.812" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:13:49.812" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 17:13:49.812" starttime="20191113 17:13:47.977"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:13:49.814" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 17:13:49.814" starttime="20191113 17:13:49.813"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:13:49.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:13:49.815" starttime="20191113 17:13:49.814"></status>
</kw>
<msg timestamp="20191113 17:13:49.816" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 17:13:49.816" starttime="20191113 17:13:47.977"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 17:13:49.817" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 17:13:49.817" starttime="20191113 17:13:49.816"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 17:13:49.818" starttime="20191113 17:13:49.817"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 17:13:49.819" starttime="20191113 17:13:49.818"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 17:13:49.820" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 17:13:49.820" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 17:13:49.820" starttime="20191113 17:13:49.819"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 17:13:49.821" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 17:13:49.821" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 17:13:49.821" starttime="20191113 17:13:49.820"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 17:13:49.822" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 17:13:49.822" starttime="20191113 17:13:49.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 17:13:49.823" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 17:13:49.823" starttime="20191113 17:13:49.822"></status>
</kw>
<msg timestamp="20191113 17:13:49.823" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 17:13:49.823" starttime="20191113 17:13:47.976"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:13:49.825" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 17:13:49.826" starttime="20191113 17:13:49.825"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:13:49.827" starttime="20191113 17:13:49.826"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:13:49.828" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:13:51.080" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:13:51.080" starttime="20191113 17:13:49.827"></status>
</kw>
<status status="PASS" endtime="20191113 17:13:51.081" starttime="20191113 17:13:49.826"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 17:13:51.081" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 17:14:01.243" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 17:14:01.243" starttime="20191113 17:13:51.081"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 17:14:01.244" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 17:14:01.330" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:14:01.330" level="INFO">${shutdownMsg} = hadoop     438  0.0  0.0   9556  1168 ?        Ss   17:14   0:00 bash -c sudo ps aux | grep om
hadoop     440  0.0  0.0   9088   672 ?        S    17:14   0:00 grep om</msg>
<status status="PASS" endtime="20191113 17:14:01.330" starttime="20191113 17:14:01.243"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 17:14:01.395" starttime="20191113 17:14:01.331"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 17:14:01.396" starttime="20191113 17:14:01.396"></status>
</kw>
<msg timestamp="20191113 17:14:01.396" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 17:14:01.396" starttime="20191113 17:13:49.824"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:14:01.400" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:14:13.353" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:14:13.353" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 17:14:13.353" starttime="20191113 17:14:01.398"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:14:13.354" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 17:14:13.354" starttime="20191113 17:14:13.354"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:14:13.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:14:13.355" starttime="20191113 17:14:13.355"></status>
</kw>
<msg timestamp="20191113 17:14:13.355" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 17:14:13.356" starttime="20191113 17:14:01.397"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 17:14:13.356" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 17:14:13.356" starttime="20191113 17:14:13.356"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 17:14:13.357" starttime="20191113 17:14:13.356"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 17:14:13.357" starttime="20191113 17:14:13.357"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 17:14:13.358" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 17:14:13.358" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 17:14:13.358" starttime="20191113 17:14:13.357"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 17:14:13.358" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 17:14:13.358" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 17:14:13.359" starttime="20191113 17:14:13.358"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 17:14:13.359" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 17:14:13.359" starttime="20191113 17:14:13.359"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 17:14:13.360" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 17:14:13.360" starttime="20191113 17:14:13.359"></status>
</kw>
<msg timestamp="20191113 17:14:13.360" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191113 17:14:13.360" starttime="20191113 17:14:01.397"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 17:14:13.361" starttime="20191113 17:14:13.360"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 17:14:13.362" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191113 17:14:13.362" starttime="20191113 17:14:13.361"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 17:14:13.363" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191113 17:14:13.363" starttime="20191113 17:14:13.362"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 17:14:13.363" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191113 17:14:13.363" starttime="20191113 17:14:13.363"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 17:14:13.365" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 17:14:13.365" starttime="20191113 17:14:13.363"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:14:13.367" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:14:27.613" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:14:27.613" level="INFO">${output} = 2019-11-13 17:14:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191113 17:14:27.613" starttime="20191113 17:14:13.366"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:14:27.614" level="INFO">2019-11-13 17:14:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:14:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:14:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:14:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:14:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:14:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:14:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:14:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:14:24 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:14:25 INFO  Client:948 - Retrying connect to server: om1/172.18.0.7:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:14:25 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 17:14:26 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 17:14:26 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 17:14:27.615" starttime="20191113 17:14:27.614"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:14:27.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:14:27.616" starttime="20191113 17:14:27.615"></status>
</kw>
<status status="PASS" endtime="20191113 17:14:27.616" starttime="20191113 17:14:13.365"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:14:27.619" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:14:39.873" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:14:39.873" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 17:14:39.874" starttime="20191113 17:14:27.617"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:14:39.875" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 17:14:39.875" starttime="20191113 17:14:39.874"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:14:39.876" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:14:39.877" starttime="20191113 17:14:39.876"></status>
</kw>
<msg timestamp="20191113 17:14:39.877" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 17:14:39.877" starttime="20191113 17:14:27.616"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:14:39.878" starttime="20191113 17:14:39.878"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 17:14:39.879" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 17:14:39.879" starttime="20191113 17:14:39.878"></status>
</kw>
<status status="PASS" endtime="20191113 17:14:39.880" starttime="20191113 17:14:13.361"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:14:39.882" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 17:14:39.882" starttime="20191113 17:14:39.881"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:14:39.884" starttime="20191113 17:14:39.883"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:14:39.884" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:14:41.085" level="INFO">Read output: Last login: Wed Nov 13 17:13:50 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:14:41.085" starttime="20191113 17:14:39.884"></status>
</kw>
<status status="PASS" endtime="20191113 17:14:41.085" starttime="20191113 17:14:39.882"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 17:14:41.086" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 17:14:43.222" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 17:14:43.223" starttime="20191113 17:14:41.085"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 17:14:43.224" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 17:14:43.289" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:14:43.289" level="INFO">${startupMsg} = hadoop     491  353  0.0 34483680 236644 ?     Sl   17:14   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 17:14:43.289" starttime="20191113 17:14:43.223"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 17:14:43.354" starttime="20191113 17:14:43.289"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 17:14:43.355" starttime="20191113 17:14:43.354"></status>
</kw>
<status status="PASS" endtime="20191113 17:14:43.355" starttime="20191113 17:14:39.880"></status>
</kw>
<status status="PASS" endtime="20191113 17:14:43.355" critical="yes" starttime="20191113 17:13:37.173"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191113 17:14:43.358" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:14:43.358" starttime="20191113 17:14:43.357"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191113 17:14:43.360" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191113 17:14:43.360" starttime="20191113 17:14:43.358"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:14:43.361" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:14:43.361" starttime="20191113 17:14:43.361"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:14:43.363" starttime="20191113 17:14:43.362"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:14:43.363" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:14:44.561" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:14:44.562" starttime="20191113 17:14:43.363"></status>
</kw>
<status status="PASS" endtime="20191113 17:14:44.562" starttime="20191113 17:14:43.361"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 17:14:44.563" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 17:14:54.701" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 17:14:54.702" starttime="20191113 17:14:44.562"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 17:14:54.703" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 17:14:54.800" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:14:54.800" level="INFO">${shutdownMsg} = hadoop     493  0.0  0.0   9556  1168 ?        Ss   17:14   0:00 bash -c sudo ps aux | grep om
hadoop     495  0.0  0.0   9088   668 ?        S    17:14   0:00 grep om</msg>
<status status="PASS" endtime="20191113 17:14:54.800" starttime="20191113 17:14:54.702"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 17:14:54.833" starttime="20191113 17:14:54.801"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 17:14:54.834" starttime="20191113 17:14:54.833"></status>
</kw>
<status status="PASS" endtime="20191113 17:14:54.834" starttime="20191113 17:14:43.360"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:14:54.835" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:14:54.835" starttime="20191113 17:14:54.835"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:14:54.836" starttime="20191113 17:14:54.836"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:14:54.837" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:14:56.039" level="INFO">Read output: Last login: Wed Nov 13 17:14:43 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:14:56.040" starttime="20191113 17:14:54.837"></status>
</kw>
<status status="PASS" endtime="20191113 17:14:56.040" starttime="20191113 17:14:54.835"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 17:14:56.041" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 17:14:56.056" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:14:56.057" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:14:56.057" starttime="20191113 17:14:56.041"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 17:14:56.058" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:14:56.058" starttime="20191113 17:14:56.057"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 17:14:56.059" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 17:14:56.059" starttime="20191113 17:14:56.058"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 17:14:56.138" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 17:14:56.150" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 17:14:56.151" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 17:14:56.151" starttime="20191113 17:14:56.060"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 17:14:56.152" level="INFO">Length is 2</msg>
<msg timestamp="20191113 17:14:56.152" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 17:14:56.152" starttime="20191113 17:14:56.151"></status>
</kw>
<msg timestamp="20191113 17:14:56.153" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191113 17:14:56.153" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 17:14:56.153" starttime="20191113 17:14:54.834"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:14:56.157" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:14:58.282" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:14:58.282" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 17:14:58.282" starttime="20191113 17:14:56.155"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:14:58.283" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 17:14:58.283" starttime="20191113 17:14:58.283"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:14:58.284" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:14:58.284" starttime="20191113 17:14:58.284"></status>
</kw>
<msg timestamp="20191113 17:14:58.284" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 17:14:58.285" starttime="20191113 17:14:56.154"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 17:14:58.285" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 17:14:58.285" starttime="20191113 17:14:58.285"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 17:14:58.286" starttime="20191113 17:14:58.285"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 17:14:58.286" starttime="20191113 17:14:58.286"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 17:14:58.287" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 17:14:58.287" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191113 17:14:58.287" starttime="20191113 17:14:58.286"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 17:14:58.288" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191113 17:14:58.288" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 17:14:58.288" starttime="20191113 17:14:58.287"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 17:14:58.288" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 17:14:58.288" starttime="20191113 17:14:58.288"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 17:14:58.289" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191113 17:14:58.289" starttime="20191113 17:14:58.289"></status>
</kw>
<msg timestamp="20191113 17:14:58.289" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 17:14:58.289" starttime="20191113 17:14:56.153"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191113 17:14:58.292" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191113 17:14:58.292" starttime="20191113 17:14:58.290"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 17:14:58.293" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191113 17:14:58.294" starttime="20191113 17:14:58.293"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 17:14:58.294" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191113 17:14:58.294" starttime="20191113 17:14:58.294"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:14:58.297" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:15:02.891" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:15:02.891" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 17:15:02.891" starttime="20191113 17:14:58.296"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:15:02.893" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 17:15:02.893" starttime="20191113 17:15:02.892"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:15:02.893" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:15:02.893" starttime="20191113 17:15:02.893"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:02.894" starttime="20191113 17:14:58.295"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:15:02.897" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:15:05.397" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:15:05.397" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573665300425,
  "modificationTime": 1573665302482,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 17:15:05.398" starttime="20191113 17:15:02.895"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:15:05.399" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573665300425,
  "modificationTime": 1573665302482,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103131729127931900,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 17:15:05.399" starttime="20191113 17:15:05.398"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:15:05.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:15:05.400" starttime="20191113 17:15:05.399"></status>
</kw>
<msg timestamp="20191113 17:15:05.400" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573665300425,
  "modificationTime": 1573665302482,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 17:15:05.400" starttime="20191113 17:15:02.894"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:05.401" starttime="20191113 17:15:05.401"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:05.401" starttime="20191113 17:14:58.294"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:05.401" starttime="20191113 17:14:58.293"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 17:15:05.402" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191113 17:15:05.402" starttime="20191113 17:15:05.402"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 17:15:05.403" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191113 17:15:05.403" starttime="20191113 17:15:05.402"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:15:05.407" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:15:10.675" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:15:10.676" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 17:15:10.676" starttime="20191113 17:15:05.405"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:15:10.677" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 17:15:10.678" starttime="20191113 17:15:10.677"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:15:10.679" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:15:10.679" starttime="20191113 17:15:10.678"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:10.679" starttime="20191113 17:15:05.404"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:15:10.684" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:15:12.777" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:15:12.777" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573665307733,
  "modificationTime": 1573665310186,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 17:15:12.778" starttime="20191113 17:15:10.682"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:15:12.779" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573665307733,
  "modificationTime": 1573665310186,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103131729607458820,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 17:15:12.779" starttime="20191113 17:15:12.778"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:15:12.780" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:15:12.780" starttime="20191113 17:15:12.779"></status>
</kw>
<msg timestamp="20191113 17:15:12.780" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573665307733,
  "modificationTime": 1573665310186,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 17:15:12.781" starttime="20191113 17:15:10.680"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:12.781" starttime="20191113 17:15:12.781"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:12.781" starttime="20191113 17:15:05.403"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:12.781" starttime="20191113 17:15:05.401"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 17:15:12.783" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191113 17:15:12.783" starttime="20191113 17:15:12.782"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 17:15:12.783" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191113 17:15:12.783" starttime="20191113 17:15:12.783"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:15:12.787" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:15:17.110" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:15:17.110" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 17:15:17.110" starttime="20191113 17:15:12.785"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:15:17.112" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 17:15:17.112" starttime="20191113 17:15:17.111"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:15:17.113" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:15:17.113" starttime="20191113 17:15:17.113"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:17.114" starttime="20191113 17:15:12.784"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:15:17.119" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:15:19.349" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:15:19.349" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573665314823,
  "modificationTime": 1573665316701,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 17:15:19.349" starttime="20191113 17:15:17.117"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:15:19.350" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573665314823,
  "modificationTime": 1573665316701,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103131730072174600,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 17:15:19.350" starttime="20191113 17:15:19.350"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:15:19.351" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:15:19.351" starttime="20191113 17:15:19.351"></status>
</kw>
<msg timestamp="20191113 17:15:19.352" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573665314823,
  "modificationTime": 1573665316701,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 17:15:19.352" starttime="20191113 17:15:17.114"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:19.352" starttime="20191113 17:15:19.352"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:19.353" starttime="20191113 17:15:12.784"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:19.353" starttime="20191113 17:15:12.782"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 17:15:19.353" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191113 17:15:19.353" starttime="20191113 17:15:19.353"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 17:15:19.354" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191113 17:15:19.354" starttime="20191113 17:15:19.354"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:15:19.357" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:15:24.607" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:15:24.607" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 17:15:24.607" starttime="20191113 17:15:19.355"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:15:24.608" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 17:15:24.609" starttime="20191113 17:15:24.608"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:15:24.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:15:24.610" starttime="20191113 17:15:24.609"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:24.610" starttime="20191113 17:15:19.355"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:15:24.614" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:15:27.227" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:15:27.227" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573665321740,
  "modificationTime": 1573665324199,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 17:15:27.227" starttime="20191113 17:15:24.612"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:15:27.229" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573665321740,
  "modificationTime": 1573665324199,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103131730525421570,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 17:15:27.229" starttime="20191113 17:15:27.228"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:15:27.230" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:15:27.231" starttime="20191113 17:15:27.230"></status>
</kw>
<msg timestamp="20191113 17:15:27.231" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573665321740,
  "modificationTime": 1573665324199,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 17:15:27.231" starttime="20191113 17:15:24.610"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:27.232" starttime="20191113 17:15:27.232"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:27.233" starttime="20191113 17:15:19.354"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:27.233" starttime="20191113 17:15:19.353"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 17:15:27.234" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 17:15:27.234" starttime="20191113 17:15:27.233"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 17:15:27.235" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 17:15:27.235" starttime="20191113 17:15:27.235"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:15:27.240" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:15:31.338" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:15:31.338" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 17:15:31.338" starttime="20191113 17:15:27.238"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:15:31.339" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 17:15:31.339" starttime="20191113 17:15:31.339"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:15:31.340" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:15:31.340" starttime="20191113 17:15:31.340"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:31.340" starttime="20191113 17:15:27.237"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:15:31.344" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:15:33.561" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:15:33.561" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573665329200,
  "modificationTime": 1573665330904,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 17:15:33.561" starttime="20191113 17:15:31.342"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:15:33.562" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573665329200,
  "modificationTime": 1573665330904,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103131731014385660,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 17:15:33.562" starttime="20191113 17:15:33.561"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:15:33.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:15:33.563" starttime="20191113 17:15:33.562"></status>
</kw>
<msg timestamp="20191113 17:15:33.563" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573665329200,
  "modificationTime": 1573665330904,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 17:15:33.563" starttime="20191113 17:15:31.341"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:33.564" starttime="20191113 17:15:33.563"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:33.564" starttime="20191113 17:15:27.236"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:33.564" starttime="20191113 17:15:27.233"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:33.564" starttime="20191113 17:14:58.293"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:33.564" starttime="20191113 17:14:58.292"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:15:33.566" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 17:15:33.566" starttime="20191113 17:15:33.565"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:33.567" starttime="20191113 17:15:33.566"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:15:33.567" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:15:34.804" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:15:34.804" starttime="20191113 17:15:33.567"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:34.805" starttime="20191113 17:15:33.566"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 17:15:34.806" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 17:15:34.822" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:15:34.822" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:34.822" starttime="20191113 17:15:34.805"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 17:15:34.824" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:34.824" starttime="20191113 17:15:34.823"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 17:15:34.826" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 17:15:34.826" starttime="20191113 17:15:34.824"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 17:15:34.926" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 17:15:34.938" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191113 17:15:34.938" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191113 17:15:34.938" starttime="20191113 17:15:34.826"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 17:15:34.940" level="INFO">Length is 3</msg>
<msg timestamp="20191113 17:15:34.940" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191113 17:15:34.940" starttime="20191113 17:15:34.939"></status>
</kw>
<msg timestamp="20191113 17:15:34.940" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191113 17:15:34.941" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191113 17:15:34.941" starttime="20191113 17:15:33.564"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191113 17:15:34.942" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191113 17:15:34.942" starttime="20191113 17:15:34.941"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:34.942" starttime="20191113 17:14:58.290"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:34.942" starttime="20191113 17:14:58.290"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:34.944" starttime="20191113 17:15:34.943"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:15:34.946" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:15:34.946" starttime="20191113 17:15:34.945"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:34.948" starttime="20191113 17:15:34.947"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:15:34.949" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:15:36.137" level="INFO">Read output: Last login: Wed Nov 13 17:14:55 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:15:36.138" starttime="20191113 17:15:34.948"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:36.138" starttime="20191113 17:15:34.946"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 17:15:36.139" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 17:15:42.645" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 17:15:42.645" starttime="20191113 17:15:36.138"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 17:15:42.646" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 17:15:42.744" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:15:42.744" level="INFO">${startupMsg} = hadoop     568  169  0.1 34523580 290576 ?     Sl   17:15   0:10 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 17:15:42.744" starttime="20191113 17:15:42.646"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 17:15:42.809" starttime="20191113 17:15:42.744"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:42.810" starttime="20191113 17:15:42.809"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:42.810" starttime="20191113 17:15:34.944"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:15:42.811" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:15:42.811" starttime="20191113 17:15:42.811"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:42.812" starttime="20191113 17:15:42.812"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:15:42.813" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:15:44.012" level="INFO">Read output: Last login: Wed Nov 13 17:15:35 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:15:44.012" starttime="20191113 17:15:42.812"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:44.013" starttime="20191113 17:15:42.811"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 17:15:44.014" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 17:15:44.028" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:15:44.029" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:44.029" starttime="20191113 17:15:44.013"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 17:15:44.030" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:44.030" starttime="20191113 17:15:44.029"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 17:15:44.031" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 17:15:44.031" starttime="20191113 17:15:44.031"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 17:15:44.077" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 17:15:44.134" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 17:15:44.134" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 17:15:44.134" starttime="20191113 17:15:44.032"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 17:15:44.135" level="INFO">Length is 2</msg>
<msg timestamp="20191113 17:15:44.135" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 17:15:44.135" starttime="20191113 17:15:44.135"></status>
</kw>
<msg timestamp="20191113 17:15:44.136" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191113 17:15:44.136" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 17:15:44.136" starttime="20191113 17:15:42.810"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:44.137" starttime="20191113 17:15:44.136"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191113 17:15:45.137" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191113 17:15:45.138" starttime="20191113 17:15:44.137"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:45.138" starttime="20191113 17:15:42.810"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:15:45.141" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:15:45.141" starttime="20191113 17:15:45.140"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:45.144" starttime="20191113 17:15:45.142"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:15:45.145" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:15:46.481" level="INFO">Read output: Last login: Wed Nov 13 17:15:43 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:15:46.482" starttime="20191113 17:15:45.144"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:46.482" starttime="20191113 17:15:45.141"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 17:15:46.483" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 17:15:46.496" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:15:46.497" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:46.497" starttime="20191113 17:15:46.482"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 17:15:46.497" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:46.498" starttime="20191113 17:15:46.497"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 17:15:46.498" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 17:15:46.498" starttime="20191113 17:15:46.498"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 17:15:46.576" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 17:15:46.586" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 17:15:46.587" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 17:15:46.587" starttime="20191113 17:15:46.498"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 17:15:46.588" level="INFO">Length is 2</msg>
<msg timestamp="20191113 17:15:46.588" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 17:15:46.588" starttime="20191113 17:15:46.587"></status>
</kw>
<msg timestamp="20191113 17:15:46.589" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191113 17:15:46.589" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 17:15:46.589" starttime="20191113 17:15:45.139"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:46.590" starttime="20191113 17:15:46.589"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191113 17:15:47.591" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191113 17:15:47.592" starttime="20191113 17:15:46.591"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:47.592" starttime="20191113 17:15:45.138"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:15:47.594" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:15:47.594" starttime="20191113 17:15:47.593"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:47.595" starttime="20191113 17:15:47.594"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:15:47.595" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:15:48.781" level="INFO">Read output: Last login: Wed Nov 13 17:15:45 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:15:48.782" starttime="20191113 17:15:47.595"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:48.782" starttime="20191113 17:15:47.594"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 17:15:48.783" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 17:15:48.798" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:15:48.799" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:48.799" starttime="20191113 17:15:48.783"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 17:15:48.799" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:48.800" starttime="20191113 17:15:48.799"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 17:15:48.801" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 17:15:48.801" starttime="20191113 17:15:48.800"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 17:15:48.881" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 17:15:48.892" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 17:15:48.892" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 17:15:48.893" starttime="20191113 17:15:48.801"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 17:15:48.894" level="INFO">Length is 2</msg>
<msg timestamp="20191113 17:15:48.894" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 17:15:48.894" starttime="20191113 17:15:48.893"></status>
</kw>
<msg timestamp="20191113 17:15:48.894" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191113 17:15:48.895" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 17:15:48.895" starttime="20191113 17:15:47.592"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:48.896" starttime="20191113 17:15:48.895"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191113 17:15:49.897" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191113 17:15:49.898" starttime="20191113 17:15:48.896"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:49.898" starttime="20191113 17:15:47.592"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:15:49.899" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:15:49.899" starttime="20191113 17:15:49.899"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:49.900" starttime="20191113 17:15:49.900"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:15:49.902" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:15:51.100" level="INFO">Read output: Last login: Wed Nov 13 17:15:47 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:15:51.100" starttime="20191113 17:15:49.901"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:51.101" starttime="20191113 17:15:49.899"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 17:15:51.102" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 17:15:51.117" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:15:51.117" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:51.117" starttime="20191113 17:15:51.101"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 17:15:51.118" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:51.118" starttime="20191113 17:15:51.118"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 17:15:51.120" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 17:15:51.120" starttime="20191113 17:15:51.119"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 17:15:51.198" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 17:15:51.208" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 17:15:51.209" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 17:15:51.209" starttime="20191113 17:15:51.120"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 17:15:51.210" level="INFO">Length is 2</msg>
<msg timestamp="20191113 17:15:51.210" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 17:15:51.210" starttime="20191113 17:15:51.209"></status>
</kw>
<msg timestamp="20191113 17:15:51.211" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191113 17:15:51.211" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 17:15:51.211" starttime="20191113 17:15:49.898"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:51.212" starttime="20191113 17:15:51.211"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191113 17:15:52.213" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191113 17:15:52.213" starttime="20191113 17:15:51.212"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:52.213" starttime="20191113 17:15:49.898"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:15:52.216" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:15:52.216" starttime="20191113 17:15:52.215"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:52.218" starttime="20191113 17:15:52.217"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:15:52.219" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:15:53.405" level="INFO">Read output: Last login: Wed Nov 13 17:15:50 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:15:53.405" starttime="20191113 17:15:52.218"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:53.406" starttime="20191113 17:15:52.216"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 17:15:53.406" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 17:15:53.420" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:15:53.420" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:53.421" starttime="20191113 17:15:53.406"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 17:15:53.421" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:53.421" starttime="20191113 17:15:53.421"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 17:15:53.422" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 17:15:53.422" starttime="20191113 17:15:53.421"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 17:15:53.497" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 17:15:53.504" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 17:15:53.504" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 17:15:53.504" starttime="20191113 17:15:53.422"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 17:15:53.505" level="INFO">Length is 2</msg>
<msg timestamp="20191113 17:15:53.505" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 17:15:53.505" starttime="20191113 17:15:53.505"></status>
</kw>
<msg timestamp="20191113 17:15:53.506" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191113 17:15:53.506" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 17:15:53.506" starttime="20191113 17:15:52.214"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:53.507" starttime="20191113 17:15:53.506"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191113 17:15:54.508" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191113 17:15:54.508" starttime="20191113 17:15:53.507"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:54.508" starttime="20191113 17:15:52.214"></status>
</kw>
<kw type="foritem" name="${INDEX} = 5">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:15:54.511" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:15:54.511" starttime="20191113 17:15:54.510"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:54.513" starttime="20191113 17:15:54.512"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:15:54.514" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:15:55.718" level="INFO">Read output: Last login: Wed Nov 13 17:15:52 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:15:55.719" starttime="20191113 17:15:54.513"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:55.719" starttime="20191113 17:15:54.512"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 17:15:55.720" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 17:15:55.735" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:15:55.736" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:55.736" starttime="20191113 17:15:55.719"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 17:15:55.737" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:55.737" starttime="20191113 17:15:55.736"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 17:15:55.738" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 17:15:55.738" starttime="20191113 17:15:55.737"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 17:15:55.817" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 17:15:55.826" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 17:15:55.826" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 17:15:55.826" starttime="20191113 17:15:55.739"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 17:15:55.827" level="INFO">Length is 2</msg>
<msg timestamp="20191113 17:15:55.828" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 17:15:55.828" starttime="20191113 17:15:55.827"></status>
</kw>
<msg timestamp="20191113 17:15:55.828" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191113 17:15:55.829" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 17:15:55.829" starttime="20191113 17:15:54.509"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:55.830" starttime="20191113 17:15:55.829"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191113 17:15:56.831" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191113 17:15:56.832" starttime="20191113 17:15:55.831"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:56.832" starttime="20191113 17:15:54.509"></status>
</kw>
<kw type="foritem" name="${INDEX} = 6">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:15:56.834" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:15:56.834" starttime="20191113 17:15:56.833"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:56.835" starttime="20191113 17:15:56.835"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:15:56.836" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:15:58.039" level="INFO">Read output: Last login: Wed Nov 13 17:15:54 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:15:58.040" starttime="20191113 17:15:56.836"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:58.040" starttime="20191113 17:15:56.834"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 17:15:58.041" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 17:15:58.055" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:15:58.055" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:58.055" starttime="20191113 17:15:58.040"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 17:15:58.056" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:15:58.056" starttime="20191113 17:15:58.056"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 17:15:58.057" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 17:15:58.057" starttime="20191113 17:15:58.057"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 17:15:58.135" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 17:15:58.144" level="INFO">4 files:
log_0-10
log_11-18
log_19-40
log_inprogress_41</msg>
<msg timestamp="20191113 17:15:58.144" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_19-40 | log_inprogress_41 ]</msg>
<status status="PASS" endtime="20191113 17:15:58.144" starttime="20191113 17:15:58.057"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 17:15:58.145" level="INFO">Length is 4</msg>
<msg timestamp="20191113 17:15:58.145" level="INFO">${numLogs} = 4</msg>
<status status="PASS" endtime="20191113 17:15:58.145" starttime="20191113 17:15:58.144"></status>
</kw>
<msg timestamp="20191113 17:15:58.145" level="INFO">${numLogsAfter} = 4</msg>
<msg timestamp="20191113 17:15:58.145" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_19-40', u'log_inprogress_41'] ]</msg>
<status status="PASS" endtime="20191113 17:15:58.146" starttime="20191113 17:15:56.832"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191113 17:15:58.146" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191113 17:15:58.147" starttime="20191113 17:15:58.146"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:58.147" starttime="20191113 17:15:56.832"></status>
</kw>
<status status="PASS" endtime="20191113 17:15:58.147" starttime="20191113 17:15:42.810"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191113 17:15:58.148" starttime="20191113 17:15:58.147"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<msg timestamp="20191113 17:15:58.149" level="FAIL">Following values were not found from first list: [u'log_0-10', u'log_11-18', u'log_inprogress_19']</msg>
<status status="FAIL" endtime="20191113 17:15:58.149" starttime="20191113 17:15:58.148"></status>
</kw>
<status status="FAIL" endtime="20191113 17:15:58.149" critical="yes" starttime="20191113 17:14:43.356">Following values were not found from first list: [u'log_0-10', u'log_11-18', u'log_inprogress_19']</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:15:58.153" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:16:00.087" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:16:00.087" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 17:16:00.087" starttime="20191113 17:15:58.152"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:16:00.089" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 17:16:00.089" starttime="20191113 17:16:00.088"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:16:00.089" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:16:00.090" starttime="20191113 17:16:00.089"></status>
</kw>
<msg timestamp="20191113 17:16:00.090" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 17:16:00.090" starttime="20191113 17:15:58.151"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 17:16:00.091" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 17:16:00.091" starttime="20191113 17:16:00.090"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 17:16:00.092" starttime="20191113 17:16:00.091"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 17:16:00.092" starttime="20191113 17:16:00.092"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 17:16:00.093" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 17:16:00.093" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191113 17:16:00.093" starttime="20191113 17:16:00.093"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 17:16:00.094" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191113 17:16:00.094" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 17:16:00.094" starttime="20191113 17:16:00.094"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 17:16:00.095" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 17:16:00.095" starttime="20191113 17:16:00.095"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 17:16:00.099" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191113 17:16:00.099" starttime="20191113 17:16:00.095"></status>
</kw>
<msg timestamp="20191113 17:16:00.100" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 17:16:00.100" starttime="20191113 17:15:58.151"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:16:00.103" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 17:16:00.103" starttime="20191113 17:16:00.102"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:16:00.105" starttime="20191113 17:16:00.104"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:16:00.105" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:16:01.296" level="INFO">Read output: Last login: Wed Nov 13 17:15:33 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:16:01.296" starttime="20191113 17:16:00.105"></status>
</kw>
<status status="PASS" endtime="20191113 17:16:01.297" starttime="20191113 17:16:00.103"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 17:16:01.298" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 17:16:11.458" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 17:16:11.458" starttime="20191113 17:16:01.297"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 17:16:11.459" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 17:16:11.557" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:16:11.557" level="INFO">${shutdownMsg} = hadoop     549  0.0  0.0   9556  1164 ?        Ss   17:16   0:00 bash -c sudo ps aux | grep om
hadoop     551  0.0  0.0   9088   668 ?        S    17:16   0:00 grep om</msg>
<status status="PASS" endtime="20191113 17:16:11.557" starttime="20191113 17:16:11.459"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 17:16:11.623" starttime="20191113 17:16:11.558"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 17:16:11.624" starttime="20191113 17:16:11.623"></status>
</kw>
<msg timestamp="20191113 17:16:11.624" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 17:16:11.624" starttime="20191113 17:16:00.101"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:16:11.627" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:16:33.195" level="INFO">${rc} = 255</msg>
<msg timestamp="20191113 17:16:33.195" level="INFO">${output} = Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
jav...</msg>
<status status="PASS" endtime="20191113 17:16:33.196" starttime="20191113 17:16:11.625"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:16:33.197" level="INFO">Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
java.io.IOException: Could not determine or connect to OM Leader.
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.submitRequest(OzoneManagerProtocolClientSideTranslatorPB.java:378)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.getServiceInfo(OzoneManagerProtocolClientSideTranslatorPB.java:1252)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.hdds.tracing.TraceAllMethod.invoke(TraceAllMethod.java:66)
	at com.sun.proxy.$Proxy17.getServiceInfo(Unknown Source)
	at org.apache.hadoop.ozone.client.rpc.RpcClient.&lt;init&gt;(RpcClient.java:157)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getClientProtocol(OzoneClientFactory.java:256)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getRpcClient(OzoneClientFactory.java:187)
	at org.apache.hadoop.ozone.admin.om.OMAdmin.createClient(OMAdmin.java:59)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:49)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:32)
	at picocli.CommandLine.execute(CommandLine.java:1173)
	at picocli.CommandLine.access$800(CommandLine.java:141)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1367)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1335)
	at picocli.CommandLine$AbstractParseResultHandler.handleParseResult(CommandLine.java:1243)
	at picocli.CommandLine.parseWithHandlers(CommandLine.java:1526)
	at picocli.CommandLine.parseWithHandler(CommandLine.java:1465)
	at org.apache.hadoop.hdds.cli.GenericCli.execute(GenericCli.java:65)
	at org.apache.hadoop.hdds.cli.GenericCli.run(GenericCli.java:56)
	at org.apache.hadoop.ozone.admin.OzoneAdmin.main(OzoneAdmin.java:66)
Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191113 17:16:33.198" starttime="20191113 17:16:33.196"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:16:33.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191113 17:16:33.199" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191113 17:16:33.199" starttime="20191113 17:16:33.198"></status>
</kw>
<status status="FAIL" endtime="20191113 17:16:33.200" starttime="20191113 17:16:11.625"></status>
</kw>
<status status="FAIL" endtime="20191113 17:16:33.200" starttime="20191113 17:16:11.624"></status>
</kw>
<status status="FAIL" endtime="20191113 17:16:33.200" starttime="20191113 17:15:58.151"></status>
</kw>
<status status="FAIL" endtime="20191113 17:16:33.200" starttime="20191113 17:15:58.150"></status>
</kw>
<status status="FAIL" endtime="20191113 17:16:33.201" critical="yes" starttime="20191113 17:15:58.150">255 != 0</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191113 17:16:33.203" starttime="20191113 17:13:37.029"></status>
</suite>
<statistics>
<total>
<stat fail="2" pass="1">Critical Tests</stat>
<stat fail="2" pass="1">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="2" id="s1" name="ozone-om-ha-testOMHA" pass="1">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
