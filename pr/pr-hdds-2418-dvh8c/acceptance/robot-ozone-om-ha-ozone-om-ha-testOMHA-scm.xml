<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191114 18:16:38.077" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 18:16:38.214" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 18:16:40.779" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 18:16:40.779" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 18:16:40.779" starttime="20191114 18:16:38.212"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 18:16:40.781" level="INFO"></msg>
<status status="PASS" endtime="20191114 18:16:40.781" starttime="20191114 18:16:40.780"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 18:16:40.782" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 18:16:40.783" starttime="20191114 18:16:40.782"></status>
</kw>
<status status="PASS" endtime="20191114 18:16:40.783" starttime="20191114 18:16:38.212"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 18:16:40.790" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 18:16:42.953" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 18:16:42.954" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 18:16:42.954" starttime="20191114 18:16:40.788"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 18:16:42.955" level="INFO"></msg>
<status status="PASS" endtime="20191114 18:16:42.955" starttime="20191114 18:16:42.955"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 18:16:42.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 18:16:42.956" starttime="20191114 18:16:42.956"></status>
</kw>
<status status="PASS" endtime="20191114 18:16:42.957" starttime="20191114 18:16:40.783"></status>
</kw>
<status status="PASS" endtime="20191114 18:16:42.957" starttime="20191114 18:16:38.212"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 18:16:42.959" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191114 18:16:42.959" starttime="20191114 18:16:42.958"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 18:16:42.960" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191114 18:16:42.960" starttime="20191114 18:16:42.959"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 18:16:42.961" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191114 18:16:42.961" starttime="20191114 18:16:42.960"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 18:16:42.963" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 18:16:42.963" starttime="20191114 18:16:42.961"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 18:16:42.966" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 18:16:47.683" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 18:16:47.683" level="INFO">${output} = 2019-11-14 18:16:45 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 18:16:45 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 18:16:47.684" starttime="20191114 18:16:42.964"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 18:16:47.685" level="INFO">2019-11-14 18:16:45 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 18:16:45 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 18:16:45 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 18:16:47.685" starttime="20191114 18:16:47.684"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 18:16:47.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 18:16:47.686" starttime="20191114 18:16:47.685"></status>
</kw>
<status status="PASS" endtime="20191114 18:16:47.686" starttime="20191114 18:16:42.963"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 18:16:47.690" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 18:16:49.886" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 18:16:49.886" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191114 18:16:49.887" starttime="20191114 18:16:47.688"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 18:16:49.888" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191114 18:16:49.888" starttime="20191114 18:16:49.887"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 18:16:49.889" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 18:16:49.889" starttime="20191114 18:16:49.888"></status>
</kw>
<msg timestamp="20191114 18:16:49.890" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191114 18:16:49.890" starttime="20191114 18:16:47.687"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 18:16:49.890" starttime="20191114 18:16:49.890"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 18:16:49.891" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 18:16:49.892" starttime="20191114 18:16:49.891"></status>
</kw>
<status status="PASS" endtime="20191114 18:16:49.892" starttime="20191114 18:16:42.957"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 18:16:49.895" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 18:16:51.951" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 18:16:51.951" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:16:51.951" starttime="20191114 18:16:49.893"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 18:16:51.952" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:16:51.952" starttime="20191114 18:16:51.952"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 18:16:51.953" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 18:16:51.953" starttime="20191114 18:16:51.953"></status>
</kw>
<msg timestamp="20191114 18:16:51.953" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:16:51.954" starttime="20191114 18:16:49.893"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 18:16:51.954" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:16:51.954" starttime="20191114 18:16:51.954"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 18:16:51.955" starttime="20191114 18:16:51.954"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 18:16:51.955" starttime="20191114 18:16:51.955"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 18:16:51.956" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 18:16:51.956" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:16:51.956" starttime="20191114 18:16:51.956"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 18:16:51.957" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 18:16:51.957" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 18:16:51.957" starttime="20191114 18:16:51.956"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 18:16:51.957" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 18:16:51.957" starttime="20191114 18:16:51.957"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 18:16:51.958" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 18:16:51.958" starttime="20191114 18:16:51.958"></status>
</kw>
<msg timestamp="20191114 18:16:51.958" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 18:16:51.958" starttime="20191114 18:16:49.892"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 18:16:51.959" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 18:16:51.960" starttime="20191114 18:16:51.959"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 18:16:51.961" starttime="20191114 18:16:51.960"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 18:16:51.961" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 18:16:53.176" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 18:16:53.176" starttime="20191114 18:16:51.961"></status>
</kw>
<status status="PASS" endtime="20191114 18:16:53.177" starttime="20191114 18:16:51.960"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 18:16:53.178" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 18:16:53.193" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 18:16:53.193" starttime="20191114 18:16:53.177"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 18:16:53.194" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 18:16:53.271" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 18:16:53.272" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 18:16:53.272" starttime="20191114 18:16:53.193"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 18:16:53.387" starttime="20191114 18:16:53.272"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 18:16:53.388" starttime="20191114 18:16:53.387"></status>
</kw>
<msg timestamp="20191114 18:16:53.388" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 18:16:53.388" starttime="20191114 18:16:51.958"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 18:16:53.393" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 18:16:55.472" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 18:16:55.473" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:16:55.473" starttime="20191114 18:16:53.390"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 18:16:55.475" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:16:55.475" starttime="20191114 18:16:55.474"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 18:16:55.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 18:16:55.476" starttime="20191114 18:16:55.475"></status>
</kw>
<msg timestamp="20191114 18:16:55.476" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:16:55.476" starttime="20191114 18:16:53.389"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 18:16:55.477" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:16:55.477" starttime="20191114 18:16:55.477"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 18:16:55.478" starttime="20191114 18:16:55.477"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 18:16:55.479" starttime="20191114 18:16:55.478"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 18:16:55.480" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 18:16:55.480" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:16:55.480" starttime="20191114 18:16:55.479"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 18:16:55.481" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 18:16:55.481" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 18:16:55.481" starttime="20191114 18:16:55.480"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 18:16:55.482" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 18:16:55.482" starttime="20191114 18:16:55.481"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 18:16:55.483" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 18:16:55.483" starttime="20191114 18:16:55.482"></status>
</kw>
<msg timestamp="20191114 18:16:55.483" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 18:16:55.483" starttime="20191114 18:16:53.389"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 18:16:55.484" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191114 18:16:55.485" starttime="20191114 18:16:55.484"></status>
</kw>
<status status="FAIL" endtime="20191114 18:16:55.485" critical="yes" starttime="20191114 18:16:38.211">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191114 18:16:55.489" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191114 18:16:55.489" starttime="20191114 18:16:55.487"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191114 18:16:55.491" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191114 18:16:55.491" starttime="20191114 18:16:55.489"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 18:16:55.492" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 18:16:55.493" starttime="20191114 18:16:55.492"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 18:16:55.494" starttime="20191114 18:16:55.493"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 18:16:55.495" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 18:16:56.699" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 18:16:56.699" starttime="20191114 18:16:55.495"></status>
</kw>
<status status="PASS" endtime="20191114 18:16:56.700" starttime="20191114 18:16:55.493"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 18:16:56.701" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 18:16:56.716" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 18:16:56.716" starttime="20191114 18:16:56.700"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 18:16:56.717" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 18:16:56.794" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 18:16:56.794" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 18:16:56.795" starttime="20191114 18:16:56.716"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 18:16:56.909" starttime="20191114 18:16:56.795"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 18:16:56.911" starttime="20191114 18:16:56.910"></status>
</kw>
<status status="PASS" endtime="20191114 18:16:56.911" starttime="20191114 18:16:55.491"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 18:16:56.914" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 18:16:56.914" starttime="20191114 18:16:56.913"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 18:16:56.915" starttime="20191114 18:16:56.915"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 18:16:56.916" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 18:16:58.120" level="INFO">Read output: Last login: Thu Nov 14 18:16:55 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 18:16:58.120" starttime="20191114 18:16:56.916"></status>
</kw>
<status status="PASS" endtime="20191114 18:16:58.121" starttime="20191114 18:16:56.914"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 18:16:58.122" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 18:16:58.138" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 18:16:58.138" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191114 18:16:58.138" starttime="20191114 18:16:58.121"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 18:16:58.139" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191114 18:16:58.139" starttime="20191114 18:16:58.138"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 18:16:58.140" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191114 18:16:58.140" starttime="20191114 18:16:58.139"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 18:16:58.220" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191114 18:16:58.220" starttime="20191114 18:16:58.141"></status>
</kw>
<status status="FAIL" endtime="20191114 18:16:58.221" starttime="20191114 18:16:56.911"></status>
</kw>
<status status="FAIL" endtime="20191114 18:16:58.221" critical="yes" starttime="20191114 18:16:55.486">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 18:16:58.228" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 18:17:00.252" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 18:17:00.252" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:17:00.252" starttime="20191114 18:16:58.225"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 18:17:00.253" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:17:00.253" starttime="20191114 18:17:00.253"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 18:17:00.254" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 18:17:00.254" starttime="20191114 18:17:00.254"></status>
</kw>
<msg timestamp="20191114 18:17:00.255" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:17:00.255" starttime="20191114 18:16:58.224"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 18:17:00.255" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:17:00.255" starttime="20191114 18:17:00.255"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 18:17:00.256" starttime="20191114 18:17:00.256"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 18:17:00.257" starttime="20191114 18:17:00.256"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 18:17:00.257" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 18:17:00.257" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:17:00.258" starttime="20191114 18:17:00.257"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 18:17:00.258" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 18:17:00.258" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 18:17:00.258" starttime="20191114 18:17:00.258"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 18:17:00.259" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 18:17:00.259" starttime="20191114 18:17:00.259"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 18:17:00.260" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 18:17:00.260" starttime="20191114 18:17:00.259"></status>
</kw>
<msg timestamp="20191114 18:17:00.260" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 18:17:00.260" starttime="20191114 18:16:58.223"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 18:17:00.261" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 18:17:00.262" starttime="20191114 18:17:00.261"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 18:17:00.263" starttime="20191114 18:17:00.262"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 18:17:00.263" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 18:17:01.463" level="INFO">Read output: Last login: Thu Nov 14 18:16:52 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 18:17:01.463" starttime="20191114 18:17:00.263"></status>
</kw>
<status status="PASS" endtime="20191114 18:17:01.464" starttime="20191114 18:17:00.262"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 18:17:01.465" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 18:17:01.480" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 18:17:01.481" starttime="20191114 18:17:01.464"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 18:17:01.481" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 18:17:01.559" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 18:17:01.560" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 18:17:01.560" starttime="20191114 18:17:01.481"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 18:17:01.675" starttime="20191114 18:17:01.560"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 18:17:01.676" starttime="20191114 18:17:01.675"></status>
</kw>
<msg timestamp="20191114 18:17:01.676" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 18:17:01.676" starttime="20191114 18:17:00.260"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 18:17:01.681" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 18:17:03.756" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 18:17:03.756" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:17:03.756" starttime="20191114 18:17:01.678"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 18:17:03.757" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:17:03.758" starttime="20191114 18:17:03.757"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 18:17:03.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 18:17:03.758" starttime="20191114 18:17:03.758"></status>
</kw>
<msg timestamp="20191114 18:17:03.759" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:17:03.759" starttime="20191114 18:17:01.677"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 18:17:03.759" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:17:03.759" starttime="20191114 18:17:03.759"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 18:17:03.760" starttime="20191114 18:17:03.760"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 18:17:03.760" starttime="20191114 18:17:03.760"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 18:17:03.761" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 18:17:03.761" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 18:17:03.761" starttime="20191114 18:17:03.761"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 18:17:03.762" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 18:17:03.762" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 18:17:03.762" starttime="20191114 18:17:03.761"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 18:17:03.762" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 18:17:03.762" starttime="20191114 18:17:03.762"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 18:17:03.763" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 18:17:03.763" starttime="20191114 18:17:03.763"></status>
</kw>
<msg timestamp="20191114 18:17:03.763" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 18:17:03.763" starttime="20191114 18:17:01.677"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 18:17:03.764" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191114 18:17:03.764" starttime="20191114 18:17:03.764"></status>
</kw>
<status status="FAIL" endtime="20191114 18:17:03.764" starttime="20191114 18:16:58.223"></status>
</kw>
<status status="FAIL" endtime="20191114 18:17:03.765" starttime="20191114 18:16:58.223"></status>
</kw>
<status status="FAIL" endtime="20191114 18:17:03.765" critical="yes" starttime="20191114 18:16:58.222">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191114 18:17:03.766" starttime="20191114 18:16:38.078"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
