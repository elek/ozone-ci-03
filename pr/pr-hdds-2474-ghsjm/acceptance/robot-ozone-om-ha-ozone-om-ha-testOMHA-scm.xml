<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191113 23:57:24.430" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:57:24.653" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:57:27.292" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:57:27.292" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 23:57:27.292" starttime="20191113 23:57:24.651"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:57:27.293" level="INFO"></msg>
<status status="PASS" endtime="20191113 23:57:27.294" starttime="20191113 23:57:27.293"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:57:27.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:57:27.295" starttime="20191113 23:57:27.294"></status>
</kw>
<status status="PASS" endtime="20191113 23:57:27.295" starttime="20191113 23:57:24.651"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:57:27.302" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:57:29.421" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:57:29.421" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 23:57:29.421" starttime="20191113 23:57:27.299"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:57:29.422" level="INFO"></msg>
<status status="PASS" endtime="20191113 23:57:29.422" starttime="20191113 23:57:29.422"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:57:29.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:57:29.423" starttime="20191113 23:57:29.423"></status>
</kw>
<status status="PASS" endtime="20191113 23:57:29.423" starttime="20191113 23:57:27.295"></status>
</kw>
<status status="PASS" endtime="20191113 23:57:29.424" starttime="20191113 23:57:24.650"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 23:57:29.425" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191113 23:57:29.425" starttime="20191113 23:57:29.424"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 23:57:29.425" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191113 23:57:29.426" starttime="20191113 23:57:29.425"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 23:57:29.426" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191113 23:57:29.426" starttime="20191113 23:57:29.426"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 23:57:29.428" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 23:57:29.428" starttime="20191113 23:57:29.426"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:57:29.430" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:57:34.208" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:57:34.208" level="INFO">${output} = 2019-11-13 23:57:32 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 23:57:32 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 23:57:34.208" starttime="20191113 23:57:29.428"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:57:34.209" level="INFO">2019-11-13 23:57:32 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 23:57:32 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 23:57:32 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 23:57:34.210" starttime="20191113 23:57:34.209"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:57:34.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:57:34.210" starttime="20191113 23:57:34.210"></status>
</kw>
<status status="PASS" endtime="20191113 23:57:34.211" starttime="20191113 23:57:29.428"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:57:34.214" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:57:36.355" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:57:36.355" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191113 23:57:36.355" starttime="20191113 23:57:34.212"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:57:36.356" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191113 23:57:36.356" starttime="20191113 23:57:36.356"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:57:36.357" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:57:36.357" starttime="20191113 23:57:36.357"></status>
</kw>
<msg timestamp="20191113 23:57:36.357" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191113 23:57:36.358" starttime="20191113 23:57:34.211"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:57:36.358" starttime="20191113 23:57:36.358"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 23:57:36.359" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 23:57:36.359" starttime="20191113 23:57:36.358"></status>
</kw>
<status status="PASS" endtime="20191113 23:57:36.359" starttime="20191113 23:57:29.424"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:57:36.362" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:57:38.540" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:57:38.541" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 23:57:38.541" starttime="20191113 23:57:36.360"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:57:38.542" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 23:57:38.542" starttime="20191113 23:57:38.541"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:57:38.542" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:57:38.543" starttime="20191113 23:57:38.542"></status>
</kw>
<msg timestamp="20191113 23:57:38.543" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 23:57:38.543" starttime="20191113 23:57:36.360"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 23:57:38.544" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 23:57:38.544" starttime="20191113 23:57:38.543"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 23:57:38.546" starttime="20191113 23:57:38.545"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 23:57:38.548" starttime="20191113 23:57:38.547"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 23:57:38.549" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 23:57:38.549" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 23:57:38.549" starttime="20191113 23:57:38.548"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 23:57:38.550" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 23:57:38.551" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 23:57:38.551" starttime="20191113 23:57:38.550"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 23:57:38.552" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 23:57:38.552" starttime="20191113 23:57:38.551"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 23:57:38.553" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 23:57:38.553" starttime="20191113 23:57:38.552"></status>
</kw>
<msg timestamp="20191113 23:57:38.554" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 23:57:38.554" starttime="20191113 23:57:36.359"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 23:57:38.556" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 23:57:38.557" starttime="20191113 23:57:38.555"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:57:38.559" starttime="20191113 23:57:38.558"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 23:57:38.560" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 23:57:39.277" level="INFO">Read output:</msg>
<status status="PASS" endtime="20191113 23:57:39.277" starttime="20191113 23:57:38.559"></status>
</kw>
<status status="PASS" endtime="20191113 23:57:39.278" starttime="20191113 23:57:38.557"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 23:57:39.279" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 23:57:49.418" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 23:57:49.418" starttime="20191113 23:57:39.278"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 23:57:49.419" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 23:57:49.527" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 23:57:49.528" level="INFO">${shutdownMsg} = hadoop     456  0.0  0.0   9556  1168 ?        Ss   23:57   0:00 bash -c sudo ps aux | grep om
hadoop     458  0.0  0.0   9088   672 ?        S    23:57   0:00 grep om</msg>
<status status="PASS" endtime="20191113 23:57:49.528" starttime="20191113 23:57:49.419"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 23:57:49.561" starttime="20191113 23:57:49.528"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 23:57:49.562" starttime="20191113 23:57:49.561"></status>
</kw>
<msg timestamp="20191113 23:57:49.562" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 23:57:49.562" starttime="20191113 23:57:38.554"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:57:49.566" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:58:01.758" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:58:01.758" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 23:58:01.758" starttime="20191113 23:57:49.563"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:58:01.760" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 23:58:01.760" starttime="20191113 23:58:01.759"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:58:01.761" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:58:01.761" starttime="20191113 23:58:01.760"></status>
</kw>
<msg timestamp="20191113 23:58:01.762" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 23:58:01.762" starttime="20191113 23:57:49.563"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 23:58:01.762" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 23:58:01.763" starttime="20191113 23:58:01.762"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 23:58:01.763" starttime="20191113 23:58:01.763"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 23:58:01.764" starttime="20191113 23:58:01.764"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 23:58:01.765" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 23:58:01.765" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 23:58:01.765" starttime="20191113 23:58:01.764"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 23:58:01.766" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 23:58:01.766" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 23:58:01.766" starttime="20191113 23:58:01.765"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 23:58:01.766" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 23:58:01.766" starttime="20191113 23:58:01.766"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 23:58:01.767" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 23:58:01.767" starttime="20191113 23:58:01.766"></status>
</kw>
<msg timestamp="20191113 23:58:01.767" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191113 23:58:01.767" starttime="20191113 23:57:49.562"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 23:58:01.768" starttime="20191113 23:58:01.767"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 23:58:01.769" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191113 23:58:01.769" starttime="20191113 23:58:01.768"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 23:58:01.770" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191113 23:58:01.770" starttime="20191113 23:58:01.769"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 23:58:01.770" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191113 23:58:01.770" starttime="20191113 23:58:01.770"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 23:58:01.772" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 23:58:01.772" starttime="20191113 23:58:01.771"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:58:01.775" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:58:16.552" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:58:16.552" level="INFO">${output} = 2019-11-13 23:58:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191113 23:58:16.552" starttime="20191113 23:58:01.773"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:58:16.553" level="INFO">2019-11-13 23:58:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 23:58:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 23:58:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 23:58:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 23:58:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 23:58:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 23:58:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 23:58:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 23:58:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 23:58:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 23:58:14 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 23:58:14 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 23:58:14 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 23:58:16.554" starttime="20191113 23:58:16.553"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:58:16.554" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:58:16.555" starttime="20191113 23:58:16.554"></status>
</kw>
<status status="PASS" endtime="20191113 23:58:16.556" starttime="20191113 23:58:01.772"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:58:16.559" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:58:28.556" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:58:28.556" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 23:58:28.556" starttime="20191113 23:58:16.557"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:58:28.557" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 23:58:28.557" starttime="20191113 23:58:28.556"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:58:28.558" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:58:28.558" starttime="20191113 23:58:28.557"></status>
</kw>
<msg timestamp="20191113 23:58:28.558" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 23:58:28.558" starttime="20191113 23:58:16.556"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:58:28.559" starttime="20191113 23:58:28.558"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 23:58:28.559" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 23:58:28.560" starttime="20191113 23:58:28.559"></status>
</kw>
<status status="PASS" endtime="20191113 23:58:28.560" starttime="20191113 23:58:01.768"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 23:58:28.561" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 23:58:28.561" starttime="20191113 23:58:28.561"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:58:28.562" starttime="20191113 23:58:28.562"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 23:58:28.563" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 23:58:29.767" level="INFO">Read output: Last login: Wed Nov 13 23:57:38 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 23:58:29.768" starttime="20191113 23:58:28.562"></status>
</kw>
<status status="PASS" endtime="20191113 23:58:29.768" starttime="20191113 23:58:28.561"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 23:58:29.769" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 23:58:31.935" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 23:58:31.935" starttime="20191113 23:58:29.768"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 23:58:31.936" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 23:58:32.023" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 23:58:32.023" level="INFO">${startupMsg} = hadoop     509  343  0.0 34483040 229148 ?     Sl   23:58   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 23:58:32.023" starttime="20191113 23:58:31.936"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 23:58:32.087" starttime="20191113 23:58:32.023"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 23:58:32.088" starttime="20191113 23:58:32.088"></status>
</kw>
<status status="PASS" endtime="20191113 23:58:32.088" starttime="20191113 23:58:28.560"></status>
</kw>
<status status="PASS" endtime="20191113 23:58:32.089" critical="yes" starttime="20191113 23:57:24.650"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191113 23:58:32.091" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191113 23:58:32.091" starttime="20191113 23:58:32.090"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191113 23:58:32.092" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191113 23:58:32.092" starttime="20191113 23:58:32.091"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 23:58:32.093" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 23:58:32.093" starttime="20191113 23:58:32.093"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:58:32.094" starttime="20191113 23:58:32.094"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 23:58:32.095" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 23:58:33.281" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191113 23:58:33.282" starttime="20191113 23:58:32.095"></status>
</kw>
<status status="PASS" endtime="20191113 23:58:33.282" starttime="20191113 23:58:32.093"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 23:58:33.282" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 23:58:43.413" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 23:58:43.413" starttime="20191113 23:58:33.282"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 23:58:43.414" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 23:58:43.479" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 23:58:43.480" level="INFO">${shutdownMsg} = hadoop     490  0.0  0.0   9556  1164 ?        Ss   23:58   0:00 bash -c sudo ps aux | grep om
hadoop     492  0.0  0.0   9088   668 ?        S    23:58   0:00 grep om</msg>
<status status="PASS" endtime="20191113 23:58:43.480" starttime="20191113 23:58:43.414"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 23:58:43.545" starttime="20191113 23:58:43.480"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 23:58:43.546" starttime="20191113 23:58:43.546"></status>
</kw>
<status status="PASS" endtime="20191113 23:58:43.546" starttime="20191113 23:58:32.092"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 23:58:43.548" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 23:58:43.548" starttime="20191113 23:58:43.547"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:58:43.549" starttime="20191113 23:58:43.549"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 23:58:43.550" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 23:58:44.748" level="INFO">Read output: Last login: Wed Nov 13 23:58:32 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 23:58:44.749" starttime="20191113 23:58:43.550"></status>
</kw>
<status status="PASS" endtime="20191113 23:58:44.749" starttime="20191113 23:58:43.548"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 23:58:44.751" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 23:58:44.786" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 23:58:44.787" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 23:58:44.787" starttime="20191113 23:58:44.750"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 23:58:44.788" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 23:58:44.788" starttime="20191113 23:58:44.787"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 23:58:44.789" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 23:58:44.789" starttime="20191113 23:58:44.788"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 23:58:44.836" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 23:58:44.847" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 23:58:44.848" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 23:58:44.848" starttime="20191113 23:58:44.789"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 23:58:44.849" level="INFO">Length is 2</msg>
<msg timestamp="20191113 23:58:44.849" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 23:58:44.850" starttime="20191113 23:58:44.848"></status>
</kw>
<msg timestamp="20191113 23:58:44.850" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191113 23:58:44.850" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 23:58:44.850" starttime="20191113 23:58:43.547"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:58:44.855" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:58:47.036" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:58:47.036" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 23:58:47.036" starttime="20191113 23:58:44.852"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:58:47.037" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 23:58:47.038" starttime="20191113 23:58:47.037"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:58:47.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:58:47.038" starttime="20191113 23:58:47.038"></status>
</kw>
<msg timestamp="20191113 23:58:47.039" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 23:58:47.039" starttime="20191113 23:58:44.851"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 23:58:47.039" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191113 23:58:47.040" starttime="20191113 23:58:47.039"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 23:58:47.040" starttime="20191113 23:58:47.040"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 23:58:47.041" starttime="20191113 23:58:47.041"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 23:58:47.042" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 23:58:47.042" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191113 23:58:47.042" starttime="20191113 23:58:47.041"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 23:58:47.043" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191113 23:58:47.043" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 23:58:47.043" starttime="20191113 23:58:47.042"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 23:58:47.043" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 23:58:47.043" starttime="20191113 23:58:47.043"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 23:58:47.044" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191113 23:58:47.044" starttime="20191113 23:58:47.044"></status>
</kw>
<msg timestamp="20191113 23:58:47.044" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191113 23:58:47.045" starttime="20191113 23:58:44.851"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191113 23:58:47.047" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191113 23:58:47.047" starttime="20191113 23:58:47.045"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 23:58:47.049" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191113 23:58:47.049" starttime="20191113 23:58:47.049"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 23:58:47.050" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191113 23:58:47.050" starttime="20191113 23:58:47.050"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:58:47.054" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:58:53.124" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:58:53.125" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 23:58:53.125" starttime="20191113 23:58:47.052"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:58:53.127" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 23:58:53.128" starttime="20191113 23:58:53.126"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:58:53.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:58:53.130" starttime="20191113 23:58:53.128"></status>
</kw>
<status status="PASS" endtime="20191113 23:58:53.130" starttime="20191113 23:58:47.051"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:58:53.136" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:58:55.762" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:58:55.762" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573689529225,
  "modificationTime": 1573689531408,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 23:58:55.762" starttime="20191113 23:58:53.133"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:58:55.764" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573689529225,
  "modificationTime": 1573689531408,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103133316986765310,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 23:58:55.764" starttime="20191113 23:58:55.763"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:58:55.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:58:55.766" starttime="20191113 23:58:55.765"></status>
</kw>
<msg timestamp="20191113 23:58:55.766" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573689529225,
  "modificationTime": 1573689531408,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 23:58:55.766" starttime="20191113 23:58:53.130"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 23:58:55.767" starttime="20191113 23:58:55.767"></status>
</kw>
<status status="PASS" endtime="20191113 23:58:55.768" starttime="20191113 23:58:47.050"></status>
</kw>
<status status="PASS" endtime="20191113 23:58:55.768" starttime="20191113 23:58:47.049"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 23:58:55.769" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191113 23:58:55.769" starttime="20191113 23:58:55.768"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 23:58:55.770" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191113 23:58:55.770" starttime="20191113 23:58:55.770"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:58:55.776" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:59:03.381" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:59:03.381" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 23:59:03.382" starttime="20191113 23:58:55.773"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:59:03.383" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 23:59:03.383" starttime="20191113 23:59:03.382"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:59:03.384" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:59:03.384" starttime="20191113 23:59:03.384"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:03.385" starttime="20191113 23:58:55.772"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:59:03.389" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:59:05.759" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:59:05.759" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573689537921,
  "modificationTime": 1573689542966,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 23:59:05.759" starttime="20191113 23:59:03.386"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:59:05.760" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573689537921,
  "modificationTime": 1573689542966,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103133317557059580,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 23:59:05.760" starttime="20191113 23:59:05.759"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:59:05.761" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:59:05.761" starttime="20191113 23:59:05.760"></status>
</kw>
<msg timestamp="20191113 23:59:05.761" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573689537921,
  "modificationTime": 1573689542966,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 23:59:05.761" starttime="20191113 23:59:03.385"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:05.762" starttime="20191113 23:59:05.761"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:05.762" starttime="20191113 23:58:55.771"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:05.762" starttime="20191113 23:58:55.768"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 23:59:05.763" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191113 23:59:05.763" starttime="20191113 23:59:05.762"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 23:59:05.763" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191113 23:59:05.763" starttime="20191113 23:59:05.763"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:59:05.767" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:59:10.769" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:59:10.769" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 23:59:10.770" starttime="20191113 23:59:05.765"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:59:10.772" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 23:59:10.772" starttime="20191113 23:59:10.771"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:59:10.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:59:10.773" starttime="20191113 23:59:10.772"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:10.774" starttime="20191113 23:59:05.764"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:59:10.779" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:59:13.028" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:59:13.029" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573689547940,
  "modificationTime": 1573689550345,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 23:59:13.029" starttime="20191113 23:59:10.776"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:59:13.030" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573689547940,
  "modificationTime": 1573689550345,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103133318213664770,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 23:59:13.030" starttime="20191113 23:59:13.029"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:59:13.031" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:59:13.031" starttime="20191113 23:59:13.030"></status>
</kw>
<msg timestamp="20191113 23:59:13.031" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573689547940,
  "modificationTime": 1573689550345,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 23:59:13.031" starttime="20191113 23:59:10.774"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:13.032" starttime="20191113 23:59:13.031"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:13.032" starttime="20191113 23:59:05.764"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:13.032" starttime="20191113 23:59:05.762"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 23:59:13.033" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191113 23:59:13.033" starttime="20191113 23:59:13.032"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 23:59:13.033" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191113 23:59:13.033" starttime="20191113 23:59:13.033"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:59:13.037" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:59:17.551" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:59:17.552" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 23:59:17.552" starttime="20191113 23:59:13.035"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:59:17.553" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 23:59:17.553" starttime="20191113 23:59:17.552"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:59:17.554" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:59:17.554" starttime="20191113 23:59:17.553"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:17.554" starttime="20191113 23:59:13.034"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:59:17.558" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:59:19.695" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:59:19.695" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573689555186,
  "modificationTime": 1573689557132,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 23:59:19.695" starttime="20191113 23:59:17.556"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:59:19.697" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573689555186,
  "modificationTime": 1573689557132,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103133318688538620,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 23:59:19.697" starttime="20191113 23:59:19.696"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:59:19.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:59:19.698" starttime="20191113 23:59:19.697"></status>
</kw>
<msg timestamp="20191113 23:59:19.698" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573689555186,
  "modificationTime": 1573689557132,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 23:59:19.698" starttime="20191113 23:59:17.555"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:19.699" starttime="20191113 23:59:19.699"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:19.699" starttime="20191113 23:59:13.033"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:19.699" starttime="20191113 23:59:13.032"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191113 23:59:19.701" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 23:59:19.701" starttime="20191113 23:59:19.700"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191113 23:59:19.701" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191113 23:59:19.702" starttime="20191113 23:59:19.701"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:59:19.706" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:59:23.992" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:59:23.992" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191113 23:59:23.992" starttime="20191113 23:59:19.704"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:59:23.994" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 23:59:23.994" starttime="20191113 23:59:23.993"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:59:23.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:59:23.994" starttime="20191113 23:59:23.994"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:23.995" starttime="20191113 23:59:19.703"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:59:23.998" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:59:26.231" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:59:26.231" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573689561713,
  "modificationTime": 1573689563592,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 23:59:26.231" starttime="20191113 23:59:23.996"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:59:26.233" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573689561713,
  "modificationTime": 1573689563592,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103133319116357630,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191113 23:59:26.233" starttime="20191113 23:59:26.232"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:59:26.234" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:59:26.234" starttime="20191113 23:59:26.233"></status>
</kw>
<msg timestamp="20191113 23:59:26.234" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573689561713,
  "modificationTime": 1573689563592,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191113 23:59:26.234" starttime="20191113 23:59:23.995"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:26.235" starttime="20191113 23:59:26.235"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:26.235" starttime="20191113 23:59:19.702"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:26.235" starttime="20191113 23:59:19.700"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:26.236" starttime="20191113 23:58:47.048"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:26.236" starttime="20191113 23:58:47.048"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 23:59:26.237" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191113 23:59:26.238" starttime="20191113 23:59:26.237"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:26.239" starttime="20191113 23:59:26.238"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 23:59:26.240" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191113 23:59:27.429" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191113 23:59:27.429" starttime="20191113 23:59:26.239"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:27.430" starttime="20191113 23:59:26.238"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 23:59:27.431" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 23:59:27.446" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 23:59:27.446" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 23:59:27.446" starttime="20191113 23:59:27.430"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 23:59:27.447" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 23:59:27.447" starttime="20191113 23:59:27.446"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 23:59:27.448" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 23:59:27.448" starttime="20191113 23:59:27.447"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 23:59:27.527" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 23:59:27.536" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191113 23:59:27.537" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191113 23:59:27.537" starttime="20191113 23:59:27.448"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 23:59:27.538" level="INFO">Length is 3</msg>
<msg timestamp="20191113 23:59:27.538" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191113 23:59:27.539" starttime="20191113 23:59:27.537"></status>
</kw>
<msg timestamp="20191113 23:59:27.539" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191113 23:59:27.540" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191113 23:59:27.540" starttime="20191113 23:59:26.236"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191113 23:59:27.541" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191113 23:59:27.541" starttime="20191113 23:59:27.540"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:27.542" starttime="20191113 23:58:47.045"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:27.542" starttime="20191113 23:58:47.045"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:27.543" starttime="20191113 23:59:27.542"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 23:59:27.545" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 23:59:27.545" starttime="20191113 23:59:27.544"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:27.547" starttime="20191113 23:59:27.546"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 23:59:27.548" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 23:59:28.736" level="INFO">Read output: Last login: Wed Nov 13 23:58:43 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 23:59:28.736" starttime="20191113 23:59:27.547"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:28.736" starttime="20191113 23:59:27.545"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 23:59:28.737" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 23:59:30.896" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 23:59:30.897" starttime="20191113 23:59:28.737"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 23:59:30.898" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 23:59:30.995" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 23:59:30.995" level="INFO">${startupMsg} = hadoop     565  386  0.1 34484992 264036 ?     Sl   23:59   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 23:59:30.995" starttime="20191113 23:59:30.897"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 23:59:31.028" starttime="20191113 23:59:30.995"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:31.029" starttime="20191113 23:59:31.028"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:31.029" starttime="20191113 23:59:27.543"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 23:59:31.032" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 23:59:31.032" starttime="20191113 23:59:31.031"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:31.034" starttime="20191113 23:59:31.033"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 23:59:31.035" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 23:59:32.238" level="INFO">Read output: Last login: Wed Nov 13 23:59:27 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 23:59:32.239" starttime="20191113 23:59:31.034"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:32.239" starttime="20191113 23:59:31.032"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 23:59:32.240" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 23:59:32.255" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 23:59:32.255" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 23:59:32.255" starttime="20191113 23:59:32.239"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 23:59:32.256" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 23:59:32.256" starttime="20191113 23:59:32.256"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 23:59:32.257" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 23:59:32.257" starttime="20191113 23:59:32.256"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 23:59:32.334" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 23:59:32.344" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 23:59:32.344" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 23:59:32.344" starttime="20191113 23:59:32.257"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 23:59:32.345" level="INFO">Length is 2</msg>
<msg timestamp="20191113 23:59:32.345" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 23:59:32.345" starttime="20191113 23:59:32.344"></status>
</kw>
<msg timestamp="20191113 23:59:32.346" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191113 23:59:32.346" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 23:59:32.346" starttime="20191113 23:59:31.030"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:32.347" starttime="20191113 23:59:32.346"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191113 23:59:33.348" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191113 23:59:33.349" starttime="20191113 23:59:32.347"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:33.349" starttime="20191113 23:59:31.030"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 23:59:33.351" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 23:59:33.352" starttime="20191113 23:59:33.350"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:33.354" starttime="20191113 23:59:33.353"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 23:59:33.355" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 23:59:37.031" level="INFO">Read output:</msg>
<status status="PASS" endtime="20191113 23:59:37.032" starttime="20191113 23:59:33.354"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:37.032" starttime="20191113 23:59:33.352"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 23:59:37.033" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 23:59:37.049" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 23:59:37.049" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 23:59:37.049" starttime="20191113 23:59:37.033"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 23:59:37.050" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 23:59:37.050" starttime="20191113 23:59:37.049"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 23:59:37.051" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 23:59:37.051" starttime="20191113 23:59:37.050"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 23:59:37.131" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 23:59:37.141" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 23:59:37.142" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 23:59:37.142" starttime="20191113 23:59:37.051"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 23:59:37.143" level="INFO">Length is 2</msg>
<msg timestamp="20191113 23:59:37.143" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 23:59:37.143" starttime="20191113 23:59:37.142"></status>
</kw>
<msg timestamp="20191113 23:59:37.144" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191113 23:59:37.144" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 23:59:37.144" starttime="20191113 23:59:33.349"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:37.145" starttime="20191113 23:59:37.144"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191113 23:59:38.146" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191113 23:59:38.147" starttime="20191113 23:59:37.145"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:38.147" starttime="20191113 23:59:33.349"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 23:59:38.150" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 23:59:38.150" starttime="20191113 23:59:38.149"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:38.152" starttime="20191113 23:59:38.152"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 23:59:38.153" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 23:59:39.357" level="INFO">Read output: Last login: Wed Nov 13 23:59:36 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 23:59:39.358" starttime="20191113 23:59:38.153"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:39.358" starttime="20191113 23:59:38.151"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 23:59:39.360" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 23:59:39.376" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 23:59:39.376" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 23:59:39.376" starttime="20191113 23:59:39.359"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 23:59:39.378" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 23:59:39.378" starttime="20191113 23:59:39.377"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 23:59:39.380" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 23:59:39.380" starttime="20191113 23:59:39.378"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 23:59:39.458" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 23:59:39.466" level="INFO">4 files:
log_0-10
log_11-18
log_19-40
log_inprogress_41</msg>
<msg timestamp="20191113 23:59:39.466" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_19-40 | log_inprogress_41 ]</msg>
<status status="PASS" endtime="20191113 23:59:39.466" starttime="20191113 23:59:39.380"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 23:59:39.467" level="INFO">Length is 4</msg>
<msg timestamp="20191113 23:59:39.468" level="INFO">${numLogs} = 4</msg>
<status status="PASS" endtime="20191113 23:59:39.468" starttime="20191113 23:59:39.467"></status>
</kw>
<msg timestamp="20191113 23:59:39.468" level="INFO">${numLogsAfter} = 4</msg>
<msg timestamp="20191113 23:59:39.468" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_19-40', u'log_inprogress_41'] ]</msg>
<status status="PASS" endtime="20191113 23:59:39.468" starttime="20191113 23:59:38.147"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191113 23:59:39.469" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191113 23:59:39.470" starttime="20191113 23:59:39.469"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:39.470" starttime="20191113 23:59:38.147"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:39.470" starttime="20191113 23:59:31.029"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:39.471" starttime="20191113 23:59:39.470"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<msg timestamp="20191113 23:59:39.472" level="FAIL">Following values were not found from first list: [u'log_0-10', u'log_11-18', u'log_inprogress_19']</msg>
<status status="FAIL" endtime="20191113 23:59:39.472" starttime="20191113 23:59:39.471"></status>
</kw>
<status status="FAIL" endtime="20191113 23:59:39.472" critical="yes" starttime="20191113 23:58:32.089">Following values were not found from first list: [u'log_0-10', u'log_11-18', u'log_inprogress_19']</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:59:39.479" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:59:41.566" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:59:41.566" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 23:59:41.566" starttime="20191113 23:59:39.476"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:59:41.568" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 23:59:41.568" starttime="20191113 23:59:41.567"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:59:41.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:59:41.569" starttime="20191113 23:59:41.568"></status>
</kw>
<msg timestamp="20191113 23:59:41.569" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 23:59:41.569" starttime="20191113 23:59:39.474"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 23:59:41.569" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 23:59:41.570" starttime="20191113 23:59:41.569"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:41.570" starttime="20191113 23:59:41.570"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:41.571" starttime="20191113 23:59:41.570"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 23:59:41.572" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 23:59:41.573" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 23:59:41.573" starttime="20191113 23:59:41.572"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 23:59:41.574" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 23:59:41.574" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 23:59:41.574" starttime="20191113 23:59:41.573"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 23:59:41.575" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 23:59:41.575" starttime="20191113 23:59:41.574"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 23:59:41.576" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 23:59:41.576" starttime="20191113 23:59:41.575"></status>
</kw>
<msg timestamp="20191113 23:59:41.576" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 23:59:41.576" starttime="20191113 23:59:39.474"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 23:59:41.578" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 23:59:41.578" starttime="20191113 23:59:41.578"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:41.580" starttime="20191113 23:59:41.579"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 23:59:41.580" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 23:59:42.782" level="INFO">Read output: Last login: Wed Nov 13 23:58:28 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 23:59:42.785" starttime="20191113 23:59:41.580"></status>
</kw>
<status status="PASS" endtime="20191113 23:59:42.786" starttime="20191113 23:59:41.578"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 23:59:42.789" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 23:59:43.951" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 23:59:43.951" starttime="20191113 23:59:42.788"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 23:59:43.952" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 23:59:44.061" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 23:59:44.062" level="INFO">${shutdownMsg} = hadoop    1016  0.0  0.0   9556  1168 ?        Ss   23:59   0:00 bash -c sudo ps aux | grep om
hadoop    1018  0.0  0.0   9088   672 ?        S    23:59   0:00 grep om</msg>
<status status="PASS" endtime="20191113 23:59:44.062" starttime="20191113 23:59:43.952"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 23:59:44.096" starttime="20191113 23:59:44.062"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:44.097" starttime="20191113 23:59:44.096"></status>
</kw>
<msg timestamp="20191113 23:59:44.097" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 23:59:44.097" starttime="20191113 23:59:41.577"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:59:44.101" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 23:59:56.092" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 23:59:56.092" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 23:59:56.092" starttime="20191113 23:59:44.098"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 23:59:56.093" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 23:59:56.093" starttime="20191113 23:59:56.092"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 23:59:56.094" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 23:59:56.094" starttime="20191113 23:59:56.093"></status>
</kw>
<msg timestamp="20191113 23:59:56.095" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 23:59:56.095" starttime="20191113 23:59:44.098"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 23:59:56.095" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 23:59:56.095" starttime="20191113 23:59:56.095"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:56.096" starttime="20191113 23:59:56.095"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:56.096" starttime="20191113 23:59:56.096"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 23:59:56.096" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 23:59:56.097" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 23:59:56.097" starttime="20191113 23:59:56.096"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 23:59:56.098" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 23:59:56.099" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 23:59:56.099" starttime="20191113 23:59:56.097"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 23:59:56.100" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 23:59:56.100" starttime="20191113 23:59:56.099"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 23:59:56.101" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 23:59:56.102" starttime="20191113 23:59:56.101"></status>
</kw>
<msg timestamp="20191113 23:59:56.102" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191113 23:59:56.102" starttime="20191113 23:59:44.097"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 23:59:56.104" starttime="20191113 23:59:56.103"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 23:59:56.105" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191113 23:59:56.105" starttime="20191113 23:59:56.105"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 23:59:56.106" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191113 23:59:56.106" starttime="20191113 23:59:56.105"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 23:59:56.107" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191113 23:59:56.107" starttime="20191113 23:59:56.106"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 23:59:56.108" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 23:59:56.108" starttime="20191113 23:59:56.107"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 23:59:56.111" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:00:10.898" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:00:10.898" level="INFO">${output} = 2019-11-13 23:59:58 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191114 00:00:10.899" starttime="20191113 23:59:56.109"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:00:10.900" level="INFO">2019-11-13 23:59:58 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 23:59:59 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:00:00 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:00:01 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:00:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:00:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:00:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:00:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:00:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:00:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:00:08 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 00:00:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 00:00:08 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 00:00:10.900" starttime="20191114 00:00:10.899"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:00:10.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:00:10.901" starttime="20191114 00:00:10.901"></status>
</kw>
<status status="PASS" endtime="20191114 00:00:10.902" starttime="20191113 23:59:56.108"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:00:10.905" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:00:23.078" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:00:23.078" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:00:23.078" starttime="20191114 00:00:10.903"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:00:23.080" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:00:23.080" starttime="20191114 00:00:23.079"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:00:23.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:00:23.081" starttime="20191114 00:00:23.080"></status>
</kw>
<msg timestamp="20191114 00:00:23.081" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:00:23.081" starttime="20191114 00:00:10.902"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:23.082" starttime="20191114 00:00:23.081"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 00:00:23.082" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 00:00:23.083" starttime="20191114 00:00:23.082"></status>
</kw>
<status status="PASS" endtime="20191114 00:00:23.083" starttime="20191113 23:59:56.104"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 00:00:23.084" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 00:00:23.084" starttime="20191114 00:00:23.084"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:23.086" starttime="20191114 00:00:23.085"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 00:00:23.087" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 00:00:24.276" level="INFO">Read output: Last login: Wed Nov 13 23:59:41 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 00:00:24.276" starttime="20191114 00:00:23.087"></status>
</kw>
<status status="PASS" endtime="20191114 00:00:24.277" starttime="20191114 00:00:23.085"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 00:00:24.278" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 00:00:26.415" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 00:00:26.415" starttime="20191114 00:00:24.277"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 00:00:26.416" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 00:00:26.480" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 00:00:26.481" level="INFO">${startupMsg} = hadoop    1067  371  0.1 34486656 267128 ?     Sl   00:00   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 00:00:26.481" starttime="20191114 00:00:26.415"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 00:00:26.545" starttime="20191114 00:00:26.481"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:26.546" starttime="20191114 00:00:26.546"></status>
</kw>
<status status="PASS" endtime="20191114 00:00:26.546" starttime="20191114 00:00:23.083"></status>
</kw>
<status status="PASS" endtime="20191114 00:00:26.546" starttime="20191113 23:59:39.474"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:00:26.550" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:00:28.662" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:00:28.662" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:28.662" starttime="20191114 00:00:26.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:00:28.664" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:28.664" starttime="20191114 00:00:28.663"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:00:28.664" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:00:28.665" starttime="20191114 00:00:28.664"></status>
</kw>
<msg timestamp="20191114 00:00:28.665" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:28.665" starttime="20191114 00:00:26.547"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 00:00:28.666" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:28.666" starttime="20191114 00:00:28.665"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:28.667" starttime="20191114 00:00:28.666"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:28.667" starttime="20191114 00:00:28.667"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 00:00:28.668" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 00:00:28.668" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:28.668" starttime="20191114 00:00:28.668"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 00:00:28.669" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 00:00:28.669" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 00:00:28.669" starttime="20191114 00:00:28.669"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 00:00:28.670" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 00:00:28.670" starttime="20191114 00:00:28.670"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 00:00:28.671" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 00:00:28.671" starttime="20191114 00:00:28.670"></status>
</kw>
<msg timestamp="20191114 00:00:28.671" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 00:00:28.671" starttime="20191114 00:00:26.547"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 00:00:28.673" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 00:00:28.673" starttime="20191114 00:00:28.672"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:28.674" starttime="20191114 00:00:28.673"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 00:00:28.675" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 00:00:29.862" level="INFO">Read output: Last login: Wed Nov 13 23:59:38 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 00:00:29.863" starttime="20191114 00:00:28.674"></status>
</kw>
<status status="PASS" endtime="20191114 00:00:29.863" starttime="20191114 00:00:28.673"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 00:00:29.864" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 00:00:31.001" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 00:00:31.002" starttime="20191114 00:00:29.863"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 00:00:31.002" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 00:00:31.099" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 00:00:31.100" level="INFO">${shutdownMsg} = hadoop    1141  0.0  0.0   9556  1164 ?        Ss   00:00   0:00 bash -c sudo ps aux | grep om
hadoop    1143  0.0  0.0   9088   668 ?        S    00:00   0:00 grep om</msg>
<status status="PASS" endtime="20191114 00:00:31.100" starttime="20191114 00:00:31.002"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 00:00:31.165" starttime="20191114 00:00:31.100"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:31.165" starttime="20191114 00:00:31.165"></status>
</kw>
<msg timestamp="20191114 00:00:31.166" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 00:00:31.166" starttime="20191114 00:00:28.672"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:00:31.169" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:00:33.029" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:00:33.029" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:33.029" starttime="20191114 00:00:31.167"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:00:33.031" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:33.031" starttime="20191114 00:00:33.030"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:00:33.031" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:00:33.031" starttime="20191114 00:00:33.031"></status>
</kw>
<msg timestamp="20191114 00:00:33.032" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:33.032" starttime="20191114 00:00:31.166"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 00:00:33.032" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:33.032" starttime="20191114 00:00:33.032"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:33.033" starttime="20191114 00:00:33.032"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:33.033" starttime="20191114 00:00:33.033"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 00:00:33.034" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 00:00:33.034" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:33.034" starttime="20191114 00:00:33.033"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 00:00:33.034" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 00:00:33.035" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 00:00:33.035" starttime="20191114 00:00:33.034"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 00:00:33.035" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 00:00:33.035" starttime="20191114 00:00:33.035"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 00:00:33.036" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 00:00:33.036" starttime="20191114 00:00:33.035"></status>
</kw>
<msg timestamp="20191114 00:00:33.036" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 00:00:33.036" starttime="20191114 00:00:31.166"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:33.037" starttime="20191114 00:00:33.036"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 00:00:33.038" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191114 00:00:33.038" starttime="20191114 00:00:33.037"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 00:00:33.038" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191114 00:00:33.039" starttime="20191114 00:00:33.038"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 00:00:33.039" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191114 00:00:33.039" starttime="20191114 00:00:33.039"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 00:00:33.040" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 00:00:33.041" starttime="20191114 00:00:33.039"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:00:33.043" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:00:37.673" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:00:37.674" level="INFO">${output} = 2019-11-14 00:00:35 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 00:00:35 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 00:00:37.674" starttime="20191114 00:00:33.041"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:00:37.675" level="INFO">2019-11-14 00:00:35 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 00:00:35 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 00:00:35 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 00:00:37.675" starttime="20191114 00:00:37.674"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:00:37.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:00:37.676" starttime="20191114 00:00:37.675"></status>
</kw>
<status status="PASS" endtime="20191114 00:00:37.676" starttime="20191114 00:00:33.041"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:00:37.680" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:00:39.744" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:00:39.744" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:00:39.744" starttime="20191114 00:00:37.678"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:00:39.745" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:00:39.745" starttime="20191114 00:00:39.745"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:00:39.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:00:39.746" starttime="20191114 00:00:39.746"></status>
</kw>
<msg timestamp="20191114 00:00:39.747" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:00:39.747" starttime="20191114 00:00:37.677"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:39.748" starttime="20191114 00:00:39.747"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 00:00:39.749" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 00:00:39.749" starttime="20191114 00:00:39.748"></status>
</kw>
<status status="PASS" endtime="20191114 00:00:39.749" starttime="20191114 00:00:33.037"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 00:00:39.751" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 00:00:39.751" starttime="20191114 00:00:39.750"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:39.752" starttime="20191114 00:00:39.752"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 00:00:39.753" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 00:00:40.957" level="INFO">Read output: Last login: Thu Nov 14 00:00:28 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 00:00:40.958" starttime="20191114 00:00:39.753"></status>
</kw>
<status status="PASS" endtime="20191114 00:00:40.958" starttime="20191114 00:00:39.751"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 00:00:40.959" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 00:00:43.120" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 00:00:43.120" starttime="20191114 00:00:40.959"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 00:00:43.121" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 00:00:43.218" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 00:00:43.218" level="INFO">${startupMsg} = hadoop    1192  366  0.0 34483400 230024 ?     Sl   00:00   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 00:00:43.218" starttime="20191114 00:00:43.120"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 00:00:43.283" starttime="20191114 00:00:43.219"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:43.285" starttime="20191114 00:00:43.284"></status>
</kw>
<status status="PASS" endtime="20191114 00:00:43.285" starttime="20191114 00:00:39.750"></status>
</kw>
<status status="PASS" endtime="20191114 00:00:43.285" starttime="20191114 00:00:26.547"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:00:43.290" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:00:45.158" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:00:45.158" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:45.158" starttime="20191114 00:00:43.287"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:00:45.160" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:45.160" starttime="20191114 00:00:45.159"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:00:45.160" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:00:45.160" starttime="20191114 00:00:45.160"></status>
</kw>
<msg timestamp="20191114 00:00:45.161" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:45.161" starttime="20191114 00:00:43.286"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 00:00:45.161" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:45.161" starttime="20191114 00:00:45.161"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:45.162" starttime="20191114 00:00:45.161"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:45.162" starttime="20191114 00:00:45.162"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 00:00:45.163" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 00:00:45.163" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:45.163" starttime="20191114 00:00:45.162"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 00:00:45.163" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 00:00:45.164" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 00:00:45.164" starttime="20191114 00:00:45.163"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 00:00:45.164" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 00:00:45.164" starttime="20191114 00:00:45.164"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 00:00:45.165" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 00:00:45.165" starttime="20191114 00:00:45.164"></status>
</kw>
<msg timestamp="20191114 00:00:45.165" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 00:00:45.165" starttime="20191114 00:00:43.285"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 00:00:45.166" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 00:00:45.166" starttime="20191114 00:00:45.166"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:45.168" starttime="20191114 00:00:45.167"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 00:00:45.168" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 00:00:46.366" level="INFO">Read output: Last login: Thu Nov 14 00:00:23 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 00:00:46.366" starttime="20191114 00:00:45.168"></status>
</kw>
<status status="PASS" endtime="20191114 00:00:46.366" starttime="20191114 00:00:45.166"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 00:00:46.367" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 00:00:47.483" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 00:00:47.483" starttime="20191114 00:00:46.367"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 00:00:47.484" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 00:00:47.591" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 00:00:47.591" level="INFO">${shutdownMsg} = hadoop    1570  0.0  0.0   9556  1168 ?        Ss   00:00   0:00 bash -c sudo ps aux | grep om
hadoop    1572  0.0  0.0   9088   668 ?        S    00:00   0:00 grep om</msg>
<status status="PASS" endtime="20191114 00:00:47.591" starttime="20191114 00:00:47.484"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 00:00:47.656" starttime="20191114 00:00:47.591"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:47.657" starttime="20191114 00:00:47.656"></status>
</kw>
<msg timestamp="20191114 00:00:47.657" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 00:00:47.657" starttime="20191114 00:00:45.165"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:00:47.661" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:00:59.680" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:00:59.681" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:59.681" starttime="20191114 00:00:47.658"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:00:59.682" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:59.682" starttime="20191114 00:00:59.681"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:00:59.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:00:59.683" starttime="20191114 00:00:59.682"></status>
</kw>
<msg timestamp="20191114 00:00:59.683" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:59.683" starttime="20191114 00:00:47.658"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 00:00:59.683" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:59.684" starttime="20191114 00:00:59.683"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:59.684" starttime="20191114 00:00:59.684"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:59.685" starttime="20191114 00:00:59.684"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 00:00:59.685" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 00:00:59.685" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191114 00:00:59.685" starttime="20191114 00:00:59.685"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 00:00:59.686" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191114 00:00:59.686" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 00:00:59.686" starttime="20191114 00:00:59.686"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 00:00:59.687" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 00:00:59.687" starttime="20191114 00:00:59.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 00:00:59.687" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191114 00:00:59.687" starttime="20191114 00:00:59.687"></status>
</kw>
<msg timestamp="20191114 00:00:59.688" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191114 00:00:59.688" starttime="20191114 00:00:47.658"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 00:00:59.688" starttime="20191114 00:00:59.688"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 00:00:59.690" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191114 00:00:59.690" starttime="20191114 00:00:59.689"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 00:00:59.691" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191114 00:00:59.691" starttime="20191114 00:00:59.690"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 00:00:59.692" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191114 00:00:59.692" starttime="20191114 00:00:59.691"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 00:00:59.697" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 00:00:59.697" starttime="20191114 00:00:59.692"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:00:59.701" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:01:13.909" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:01:13.909" level="INFO">${output} = 2019-11-14 00:01:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191114 00:01:13.909" starttime="20191114 00:00:59.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:01:13.910" level="INFO">2019-11-14 00:01:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:01:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:01:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:01:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:01:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:01:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:01:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:01:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:01:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:01:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-14 00:01:11 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-14 00:01:12 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 00:01:12 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 00:01:12 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 00:01:13.911" starttime="20191114 00:01:13.910"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:01:13.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:01:13.911" starttime="20191114 00:01:13.911"></status>
</kw>
<status status="PASS" endtime="20191114 00:01:13.911" starttime="20191114 00:00:59.697"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:01:13.914" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:01:26.066" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:01:26.066" level="INFO">${output} = 1.txt
2.txt
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:01:26.066" starttime="20191114 00:01:13.912"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:01:26.068" level="INFO">1.txt
2.txt
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:01:26.068" starttime="20191114 00:01:26.067"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:01:26.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:01:26.069" starttime="20191114 00:01:26.068"></status>
</kw>
<msg timestamp="20191114 00:01:26.069" level="INFO">${result} = 1.txt
2.txt
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:01:26.069" starttime="20191114 00:01:13.912"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:26.070" starttime="20191114 00:01:26.070"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 00:01:26.071" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 00:01:26.071" starttime="20191114 00:01:26.071"></status>
</kw>
<status status="PASS" endtime="20191114 00:01:26.072" starttime="20191114 00:00:59.688"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 00:01:26.074" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 00:01:26.074" starttime="20191114 00:01:26.073"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:26.075" starttime="20191114 00:01:26.074"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 00:01:26.076" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 00:01:27.282" level="INFO">Read output: Last login: Thu Nov 14 00:00:45 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 00:01:27.282" starttime="20191114 00:01:26.076"></status>
</kw>
<status status="PASS" endtime="20191114 00:01:27.282" starttime="20191114 00:01:26.074"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 00:01:27.283" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 00:01:29.421" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 00:01:29.421" starttime="20191114 00:01:27.282"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 00:01:29.422" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 00:01:29.486" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 00:01:29.487" level="INFO">${startupMsg} = hadoop    1622  335  0.0 34484892 261992 ?     Sl   00:01   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 00:01:29.487" starttime="20191114 00:01:29.422"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 00:01:29.519" starttime="20191114 00:01:29.487"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:29.520" starttime="20191114 00:01:29.520"></status>
</kw>
<status status="PASS" endtime="20191114 00:01:29.520" starttime="20191114 00:01:26.072"></status>
</kw>
<status status="PASS" endtime="20191114 00:01:29.520" starttime="20191114 00:00:43.285"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:01:29.524" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:01:31.582" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:01:31.582" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:31.583" starttime="20191114 00:01:29.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:01:31.584" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:31.584" starttime="20191114 00:01:31.583"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:01:31.584" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:01:31.584" starttime="20191114 00:01:31.584"></status>
</kw>
<msg timestamp="20191114 00:01:31.585" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:31.585" starttime="20191114 00:01:29.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 00:01:31.585" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:31.585" starttime="20191114 00:01:31.585"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:31.586" starttime="20191114 00:01:31.586"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:31.586" starttime="20191114 00:01:31.586"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 00:01:31.588" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 00:01:31.588" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:31.588" starttime="20191114 00:01:31.587"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 00:01:31.588" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191114 00:01:31.588" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 00:01:31.588" starttime="20191114 00:01:31.588"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 00:01:31.589" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 00:01:31.589" starttime="20191114 00:01:31.589"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 00:01:31.589" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191114 00:01:31.589" starttime="20191114 00:01:31.589"></status>
</kw>
<msg timestamp="20191114 00:01:31.590" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191114 00:01:31.590" starttime="20191114 00:01:29.521"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 00:01:31.591" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191114 00:01:31.591" starttime="20191114 00:01:31.590"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:31.592" starttime="20191114 00:01:31.592"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 00:01:31.593" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191114 00:01:32.791" level="INFO">Read output: Last login: Wed Nov 13 23:59:26 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 00:01:32.792" starttime="20191114 00:01:31.593"></status>
</kw>
<status status="PASS" endtime="20191114 00:01:32.792" starttime="20191114 00:01:31.591"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 00:01:32.792" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 00:01:42.934" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 00:01:42.934" starttime="20191114 00:01:32.792"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 00:01:42.936" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 00:01:43.033" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 00:01:43.033" level="INFO">${shutdownMsg} = hadoop     586  0.0  0.0   9556  1168 ?        Ss   00:01   0:00 bash -c sudo ps aux | grep om
hadoop     588  0.0  0.0   9088   668 ?        S    00:01   0:00 grep om</msg>
<status status="PASS" endtime="20191114 00:01:43.033" starttime="20191114 00:01:42.935"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 00:01:43.098" starttime="20191114 00:01:43.034"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:43.100" starttime="20191114 00:01:43.099"></status>
</kw>
<msg timestamp="20191114 00:01:43.100" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 00:01:43.100" starttime="20191114 00:01:31.590"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:01:43.105" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:01:45.202" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:01:45.203" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:45.203" starttime="20191114 00:01:43.102"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:01:45.205" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:45.205" starttime="20191114 00:01:45.204"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:01:45.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:01:45.206" starttime="20191114 00:01:45.205"></status>
</kw>
<msg timestamp="20191114 00:01:45.207" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:45.207" starttime="20191114 00:01:43.101"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 00:01:45.207" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:45.208" starttime="20191114 00:01:45.207"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:45.209" starttime="20191114 00:01:45.208"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:45.210" starttime="20191114 00:01:45.209"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 00:01:45.211" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 00:01:45.211" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:45.211" starttime="20191114 00:01:45.210"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 00:01:45.212" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 00:01:45.212" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 00:01:45.212" starttime="20191114 00:01:45.211"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 00:01:45.213" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 00:01:45.213" starttime="20191114 00:01:45.213"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 00:01:45.214" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 00:01:45.214" starttime="20191114 00:01:45.214"></status>
</kw>
<msg timestamp="20191114 00:01:45.215" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191114 00:01:45.215" starttime="20191114 00:01:43.100"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:45.216" starttime="20191114 00:01:45.215"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 00:01:45.218" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191114 00:01:45.219" starttime="20191114 00:01:45.218"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 00:01:45.220" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191114 00:01:45.220" starttime="20191114 00:01:45.219"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 00:01:45.221" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191114 00:01:45.221" starttime="20191114 00:01:45.220"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 00:01:45.224" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 00:01:45.224" starttime="20191114 00:01:45.222"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:01:45.227" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:01:49.512" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:01:49.512" level="INFO">${output} = 2019-11-14 00:01:47 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 00:01:47 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 00:01:49.512" starttime="20191114 00:01:45.225"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:01:49.514" level="INFO">2019-11-14 00:01:47 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 00:01:47 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 00:01:47 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 00:01:49.514" starttime="20191114 00:01:49.513"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:01:49.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:01:49.515" starttime="20191114 00:01:49.514"></status>
</kw>
<status status="PASS" endtime="20191114 00:01:49.515" starttime="20191114 00:01:45.224"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:01:49.519" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:01:51.597" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:01:51.597" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:01:51.597" starttime="20191114 00:01:49.516"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:01:51.598" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:01:51.598" starttime="20191114 00:01:51.597"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:01:51.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:01:51.599" starttime="20191114 00:01:51.598"></status>
</kw>
<msg timestamp="20191114 00:01:51.599" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:01:51.599" starttime="20191114 00:01:49.515"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:51.600" starttime="20191114 00:01:51.599"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 00:01:51.600" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 00:01:51.600" starttime="20191114 00:01:51.600"></status>
</kw>
<status status="PASS" endtime="20191114 00:01:51.601" starttime="20191114 00:01:45.216"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 00:01:51.602" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191114 00:01:51.602" starttime="20191114 00:01:51.601"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:51.603" starttime="20191114 00:01:51.602"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 00:01:51.603" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191114 00:01:52.801" level="INFO">Read output: Last login: Thu Nov 14 00:01:31 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 00:01:52.802" starttime="20191114 00:01:51.603"></status>
</kw>
<status status="PASS" endtime="20191114 00:01:52.802" starttime="20191114 00:01:51.602"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 00:01:52.803" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 00:01:54.949" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 00:01:54.950" starttime="20191114 00:01:52.802"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 00:01:54.951" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 00:01:55.037" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 00:01:55.038" level="INFO">${startupMsg} = hadoop     639  376  0.0 34483884 226840 ?     Sl   00:01   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 00:01:55.038" starttime="20191114 00:01:54.950"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 00:01:55.102" starttime="20191114 00:01:55.038"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:55.103" starttime="20191114 00:01:55.103"></status>
</kw>
<status status="PASS" endtime="20191114 00:01:55.104" starttime="20191114 00:01:51.601"></status>
</kw>
<status status="PASS" endtime="20191114 00:01:55.104" starttime="20191114 00:01:29.520"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:01:55.108" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:01:57.056" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:01:57.057" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:57.057" starttime="20191114 00:01:55.105"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:01:57.058" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:57.058" starttime="20191114 00:01:57.057"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:01:57.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:01:57.059" starttime="20191114 00:01:57.058"></status>
</kw>
<msg timestamp="20191114 00:01:57.060" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:57.060" starttime="20191114 00:01:55.105"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 00:01:57.060" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:57.060" starttime="20191114 00:01:57.060"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:57.061" starttime="20191114 00:01:57.061"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:57.062" starttime="20191114 00:01:57.061"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 00:01:57.062" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 00:01:57.063" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191114 00:01:57.063" starttime="20191114 00:01:57.062"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 00:01:57.063" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191114 00:01:57.064" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 00:01:57.064" starttime="20191114 00:01:57.063"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 00:01:57.064" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 00:01:57.064" starttime="20191114 00:01:57.064"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 00:01:57.065" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191114 00:01:57.065" starttime="20191114 00:01:57.065"></status>
</kw>
<msg timestamp="20191114 00:01:57.066" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191114 00:01:57.066" starttime="20191114 00:01:55.104"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 00:01:57.067" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 00:01:57.067" starttime="20191114 00:01:57.067"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:57.069" starttime="20191114 00:01:57.068"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 00:01:57.069" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 00:01:58.267" level="INFO">Read output: Last login: Thu Nov 14 00:00:39 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 00:01:58.268" starttime="20191114 00:01:57.069"></status>
</kw>
<status status="PASS" endtime="20191114 00:01:58.268" starttime="20191114 00:01:57.067"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 00:01:58.269" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 00:01:59.404" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 00:01:59.405" starttime="20191114 00:01:58.269"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 00:01:59.405" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 00:01:59.513" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 00:01:59.514" level="INFO">${shutdownMsg} = hadoop    1697  0.0  0.0   9556  1168 ?        Ss   00:01   0:00 bash -c sudo ps aux | grep om
hadoop    1699  0.0  0.0   9088   672 ?        S    00:01   0:00 grep om</msg>
<status status="PASS" endtime="20191114 00:01:59.514" starttime="20191114 00:01:59.405"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 00:01:59.579" starttime="20191114 00:01:59.514"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 00:01:59.580" starttime="20191114 00:01:59.579"></status>
</kw>
<msg timestamp="20191114 00:01:59.580" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 00:01:59.580" starttime="20191114 00:01:57.066"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:01:59.583" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:02:01.639" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:02:01.639" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:02:01.639" starttime="20191114 00:01:59.581"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:02:01.641" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:02:01.641" starttime="20191114 00:02:01.640"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:02:01.641" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:02:01.642" starttime="20191114 00:02:01.641"></status>
</kw>
<msg timestamp="20191114 00:02:01.642" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:02:01.642" starttime="20191114 00:01:59.580"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 00:02:01.642" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:02:01.642" starttime="20191114 00:02:01.642"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 00:02:01.643" starttime="20191114 00:02:01.643"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 00:02:01.644" starttime="20191114 00:02:01.643"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 00:02:01.644" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 00:02:01.644" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 00:02:01.644" starttime="20191114 00:02:01.644"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 00:02:01.645" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 00:02:01.645" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 00:02:01.645" starttime="20191114 00:02:01.644"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 00:02:01.646" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 00:02:01.646" starttime="20191114 00:02:01.645"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 00:02:01.646" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 00:02:01.646" starttime="20191114 00:02:01.646"></status>
</kw>
<msg timestamp="20191114 00:02:01.647" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 00:02:01.647" starttime="20191114 00:01:59.580"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191114 00:02:01.647" starttime="20191114 00:02:01.647"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 00:02:01.648" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191114 00:02:01.648" starttime="20191114 00:02:01.648"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 00:02:01.649" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191114 00:02:01.649" starttime="20191114 00:02:01.649"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 00:02:01.650" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191114 00:02:01.650" starttime="20191114 00:02:01.649"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 00:02:01.651" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 00:02:01.651" starttime="20191114 00:02:01.650"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:02:01.654" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:02:05.908" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:02:05.908" level="INFO">${output} = 2019-11-14 00:02:04 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 00:02:04 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 00:02:05.908" starttime="20191114 00:02:01.652"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:02:05.909" level="INFO">2019-11-14 00:02:04 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 00:02:04 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 00:02:04 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 00:02:05.909" starttime="20191114 00:02:05.908"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:02:05.910" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:02:05.910" starttime="20191114 00:02:05.909"></status>
</kw>
<status status="PASS" endtime="20191114 00:02:05.910" starttime="20191114 00:02:01.651"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 00:02:05.913" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 00:02:07.923" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 00:02:07.923" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:02:07.923" starttime="20191114 00:02:05.911"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 00:02:07.925" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:02:07.925" starttime="20191114 00:02:07.924"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 00:02:07.926" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 00:02:07.926" starttime="20191114 00:02:07.926"></status>
</kw>
<msg timestamp="20191114 00:02:07.927" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191114 00:02:07.927" starttime="20191114 00:02:05.910"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:02:07.928" starttime="20191114 00:02:07.927"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 00:02:07.930" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 00:02:07.930" starttime="20191114 00:02:07.928"></status>
</kw>
<status status="PASS" endtime="20191114 00:02:07.930" starttime="20191114 00:02:01.647"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 00:02:07.932" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 00:02:07.932" starttime="20191114 00:02:07.931"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 00:02:07.934" starttime="20191114 00:02:07.933"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 00:02:07.935" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 00:02:09.123" level="INFO">Read output: Last login: Thu Nov 14 00:01:57 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191114 00:02:09.123" starttime="20191114 00:02:07.934"></status>
</kw>
<status status="PASS" endtime="20191114 00:02:09.123" starttime="20191114 00:02:07.933"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191114 00:02:09.124" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191114 00:02:11.251" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191114 00:02:11.251" starttime="20191114 00:02:09.123"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191114 00:02:11.252" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 00:02:11.338" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191114 00:02:11.339" level="INFO">${startupMsg} = hadoop    1749  378  0.0 34483356 263124 ?     Sl   00:02   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191114 00:02:11.339" starttime="20191114 00:02:11.252"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 00:02:11.403" starttime="20191114 00:02:11.339"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 00:02:11.404" starttime="20191114 00:02:11.404"></status>
</kw>
<status status="PASS" endtime="20191114 00:02:11.404" starttime="20191114 00:02:07.930"></status>
</kw>
<status status="PASS" endtime="20191114 00:02:11.404" starttime="20191114 00:01:55.104"></status>
</kw>
<status status="PASS" endtime="20191114 00:02:11.404" starttime="20191113 23:59:39.473"></status>
</kw>
<status status="PASS" endtime="20191114 00:02:11.405" critical="yes" starttime="20191113 23:59:39.473"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191114 00:02:11.406" starttime="20191113 23:57:24.431"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="2">Critical Tests</stat>
<stat fail="1" pass="2">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="1" id="s1" name="ozone-om-ha-testOMHA" pass="2">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
