<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191114 05:55:47.708" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:55:47.859" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:55:50.396" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:55:50.396" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 05:55:50.396" starttime="20191114 05:55:47.858"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:55:50.397" level="INFO"></msg>
<status status="PASS" endtime="20191114 05:55:50.397" starttime="20191114 05:55:50.397"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:55:50.398" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:55:50.398" starttime="20191114 05:55:50.398"></status>
</kw>
<status status="PASS" endtime="20191114 05:55:50.398" starttime="20191114 05:55:47.857"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:55:50.403" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:55:52.532" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:55:52.532" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 05:55:52.533" starttime="20191114 05:55:50.401"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:55:52.534" level="INFO"></msg>
<status status="PASS" endtime="20191114 05:55:52.534" starttime="20191114 05:55:52.533"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:55:52.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:55:52.535" starttime="20191114 05:55:52.534"></status>
</kw>
<status status="PASS" endtime="20191114 05:55:52.535" starttime="20191114 05:55:50.398"></status>
</kw>
<status status="PASS" endtime="20191114 05:55:52.535" starttime="20191114 05:55:47.857"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 05:55:52.537" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191114 05:55:52.537" starttime="20191114 05:55:52.536"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 05:55:52.538" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191114 05:55:52.538" starttime="20191114 05:55:52.537"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 05:55:52.538" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191114 05:55:52.539" starttime="20191114 05:55:52.538"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 05:55:52.541" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 05:55:52.541" starttime="20191114 05:55:52.539"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:55:52.544" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:55:57.166" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:55:57.166" level="INFO">${output} = 2019-11-14 05:55:55 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 05:55:55 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 05:55:57.166" starttime="20191114 05:55:52.542"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:55:57.168" level="INFO">2019-11-14 05:55:55 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 05:55:55 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 05:55:55 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 05:55:57.168" starttime="20191114 05:55:57.167"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:55:57.169" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:55:57.169" starttime="20191114 05:55:57.168"></status>
</kw>
<status status="PASS" endtime="20191114 05:55:57.169" starttime="20191114 05:55:52.541"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:55:57.173" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:55:59.254" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:55:59.255" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191114 05:55:59.255" starttime="20191114 05:55:57.171"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:55:59.256" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191114 05:55:59.256" starttime="20191114 05:55:59.255"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:55:59.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:55:59.257" starttime="20191114 05:55:59.256"></status>
</kw>
<msg timestamp="20191114 05:55:59.257" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191114 05:55:59.257" starttime="20191114 05:55:57.169"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 05:55:59.258" starttime="20191114 05:55:59.258"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 05:55:59.259" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 05:55:59.259" starttime="20191114 05:55:59.258"></status>
</kw>
<status status="PASS" endtime="20191114 05:55:59.259" starttime="20191114 05:55:52.536"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:55:59.263" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:56:01.229" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:56:01.229" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:01.229" starttime="20191114 05:55:59.261"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:56:01.230" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:01.230" starttime="20191114 05:56:01.229"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:56:01.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:56:01.231" starttime="20191114 05:56:01.230"></status>
</kw>
<msg timestamp="20191114 05:56:01.231" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:01.231" starttime="20191114 05:55:59.260"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 05:56:01.232" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:01.232" starttime="20191114 05:56:01.231"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:01.233" starttime="20191114 05:56:01.232"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:01.233" starttime="20191114 05:56:01.233"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 05:56:01.234" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 05:56:01.234" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:01.234" starttime="20191114 05:56:01.233"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 05:56:01.234" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 05:56:01.234" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 05:56:01.235" starttime="20191114 05:56:01.234"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 05:56:01.235" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 05:56:01.235" starttime="20191114 05:56:01.235"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 05:56:01.236" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 05:56:01.236" starttime="20191114 05:56:01.235"></status>
</kw>
<msg timestamp="20191114 05:56:01.236" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 05:56:01.236" starttime="20191114 05:55:59.259"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 05:56:01.237" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 05:56:01.237" starttime="20191114 05:56:01.237"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:01.238" starttime="20191114 05:56:01.238"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 05:56:01.239" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 05:56:02.446" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 05:56:02.446" starttime="20191114 05:56:01.239"></status>
</kw>
<status status="PASS" endtime="20191114 05:56:02.447" starttime="20191114 05:56:01.237"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 05:56:02.448" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 05:56:02.463" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 05:56:02.463" starttime="20191114 05:56:02.447"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 05:56:02.464" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 05:56:02.541" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 05:56:02.541" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 05:56:02.541" starttime="20191114 05:56:02.464"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 05:56:02.656" starttime="20191114 05:56:02.542"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:02.657" starttime="20191114 05:56:02.657"></status>
</kw>
<msg timestamp="20191114 05:56:02.657" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 05:56:02.657" starttime="20191114 05:56:01.236"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:56:02.661" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:56:04.444" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:56:04.444" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:04.444" starttime="20191114 05:56:02.659"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:56:04.446" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:04.446" starttime="20191114 05:56:04.445"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:56:04.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:56:04.446" starttime="20191114 05:56:04.446"></status>
</kw>
<msg timestamp="20191114 05:56:04.447" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:04.447" starttime="20191114 05:56:02.658"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 05:56:04.447" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:04.447" starttime="20191114 05:56:04.447"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:04.448" starttime="20191114 05:56:04.448"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:04.448" starttime="20191114 05:56:04.448"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 05:56:04.449" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 05:56:04.449" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:04.449" starttime="20191114 05:56:04.449"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 05:56:04.450" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 05:56:04.450" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 05:56:04.450" starttime="20191114 05:56:04.449"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 05:56:04.450" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 05:56:04.450" starttime="20191114 05:56:04.450"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 05:56:04.451" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 05:56:04.451" starttime="20191114 05:56:04.450"></status>
</kw>
<msg timestamp="20191114 05:56:04.451" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 05:56:04.451" starttime="20191114 05:56:02.658"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 05:56:04.452" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191114 05:56:04.452" starttime="20191114 05:56:04.451"></status>
</kw>
<status status="FAIL" endtime="20191114 05:56:04.452" critical="yes" starttime="20191114 05:55:47.856">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191114 05:56:04.455" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191114 05:56:04.455" starttime="20191114 05:56:04.453"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191114 05:56:04.456" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191114 05:56:04.456" starttime="20191114 05:56:04.455"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 05:56:04.457" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 05:56:04.457" starttime="20191114 05:56:04.457"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:04.458" starttime="20191114 05:56:04.458"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 05:56:04.459" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 05:56:05.657" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 05:56:05.657" starttime="20191114 05:56:04.459"></status>
</kw>
<status status="PASS" endtime="20191114 05:56:05.658" starttime="20191114 05:56:04.457"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 05:56:05.659" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 05:56:05.673" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 05:56:05.674" starttime="20191114 05:56:05.658"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 05:56:05.674" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 05:56:05.753" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 05:56:05.753" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 05:56:05.754" starttime="20191114 05:56:05.674"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 05:56:05.869" starttime="20191114 05:56:05.754"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:05.870" starttime="20191114 05:56:05.869"></status>
</kw>
<status status="PASS" endtime="20191114 05:56:05.870" starttime="20191114 05:56:04.456"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 05:56:05.872" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 05:56:05.872" starttime="20191114 05:56:05.871"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:05.874" starttime="20191114 05:56:05.873"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 05:56:05.875" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 05:56:07.079" level="INFO">Read output: Last login: Thu Nov 14 05:56:04 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 05:56:07.079" starttime="20191114 05:56:05.874"></status>
</kw>
<status status="PASS" endtime="20191114 05:56:07.080" starttime="20191114 05:56:05.872"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 05:56:07.081" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 05:56:07.096" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 05:56:07.097" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191114 05:56:07.097" starttime="20191114 05:56:07.080"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 05:56:07.098" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191114 05:56:07.098" starttime="20191114 05:56:07.097"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 05:56:07.099" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191114 05:56:07.099" starttime="20191114 05:56:07.098"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 05:56:07.176" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191114 05:56:07.176" starttime="20191114 05:56:07.099"></status>
</kw>
<status status="FAIL" endtime="20191114 05:56:07.177" starttime="20191114 05:56:05.870"></status>
</kw>
<status status="FAIL" endtime="20191114 05:56:07.177" critical="yes" starttime="20191114 05:56:04.453">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:56:07.183" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:56:09.239" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:56:09.239" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:09.239" starttime="20191114 05:56:07.180"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:56:09.240" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:09.240" starttime="20191114 05:56:09.239"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:56:09.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:56:09.241" starttime="20191114 05:56:09.240"></status>
</kw>
<msg timestamp="20191114 05:56:09.241" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:09.241" starttime="20191114 05:56:07.179"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 05:56:09.242" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:09.242" starttime="20191114 05:56:09.241"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:09.242" starttime="20191114 05:56:09.242"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:09.243" starttime="20191114 05:56:09.243"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 05:56:09.244" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 05:56:09.244" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:09.244" starttime="20191114 05:56:09.243"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 05:56:09.244" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 05:56:09.244" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 05:56:09.244" starttime="20191114 05:56:09.244"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 05:56:09.245" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 05:56:09.245" starttime="20191114 05:56:09.245"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 05:56:09.246" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 05:56:09.246" starttime="20191114 05:56:09.245"></status>
</kw>
<msg timestamp="20191114 05:56:09.246" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 05:56:09.246" starttime="20191114 05:56:07.179"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 05:56:09.247" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 05:56:09.247" starttime="20191114 05:56:09.247"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:09.249" starttime="20191114 05:56:09.248"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 05:56:09.249" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 05:56:10.450" level="INFO">Read output: Last login: Thu Nov 14 05:56:01 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 05:56:10.450" starttime="20191114 05:56:09.249"></status>
</kw>
<status status="PASS" endtime="20191114 05:56:10.451" starttime="20191114 05:56:09.248"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 05:56:10.451" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 05:56:10.466" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 05:56:10.466" starttime="20191114 05:56:10.451"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 05:56:10.467" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 05:56:10.545" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 05:56:10.545" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 05:56:10.545" starttime="20191114 05:56:10.467"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 05:56:10.660" starttime="20191114 05:56:10.546"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:10.662" starttime="20191114 05:56:10.661"></status>
</kw>
<msg timestamp="20191114 05:56:10.662" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 05:56:10.662" starttime="20191114 05:56:09.246"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 05:56:10.666" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 05:56:12.720" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 05:56:12.721" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:12.721" starttime="20191114 05:56:10.664"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 05:56:12.722" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:12.722" starttime="20191114 05:56:12.721"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 05:56:12.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 05:56:12.723" starttime="20191114 05:56:12.722"></status>
</kw>
<msg timestamp="20191114 05:56:12.724" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:12.724" starttime="20191114 05:56:10.663"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 05:56:12.725" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:12.725" starttime="20191114 05:56:12.724"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:12.725" starttime="20191114 05:56:12.725"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 05:56:12.726" starttime="20191114 05:56:12.726"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 05:56:12.726" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 05:56:12.727" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 05:56:12.727" starttime="20191114 05:56:12.726"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 05:56:12.727" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 05:56:12.727" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 05:56:12.727" starttime="20191114 05:56:12.727"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 05:56:12.728" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 05:56:12.728" starttime="20191114 05:56:12.728"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 05:56:12.729" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 05:56:12.729" starttime="20191114 05:56:12.728"></status>
</kw>
<msg timestamp="20191114 05:56:12.729" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 05:56:12.729" starttime="20191114 05:56:10.663"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 05:56:12.730" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191114 05:56:12.730" starttime="20191114 05:56:12.729"></status>
</kw>
<status status="FAIL" endtime="20191114 05:56:12.730" starttime="20191114 05:56:07.179"></status>
</kw>
<status status="FAIL" endtime="20191114 05:56:12.730" starttime="20191114 05:56:07.178"></status>
</kw>
<status status="FAIL" endtime="20191114 05:56:12.730" critical="yes" starttime="20191114 05:56:07.178">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191114 05:56:12.732" starttime="20191114 05:55:47.709"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
