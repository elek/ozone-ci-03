<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191031 02:20:30.573" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:20:30.718" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:20:33.373" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:20:33.373" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191031 02:20:33.373" starttime="20191031 02:20:30.716"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:20:33.374" level="INFO"></msg>
<status status="PASS" endtime="20191031 02:20:33.374" starttime="20191031 02:20:33.374"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:20:33.375" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:20:33.375" starttime="20191031 02:20:33.375"></status>
</kw>
<status status="PASS" endtime="20191031 02:20:33.376" starttime="20191031 02:20:30.715"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:20:33.381" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:20:35.537" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:20:35.538" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191031 02:20:35.538" starttime="20191031 02:20:33.380"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:20:35.540" level="INFO"></msg>
<status status="PASS" endtime="20191031 02:20:35.540" starttime="20191031 02:20:35.539"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:20:35.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:20:35.541" starttime="20191031 02:20:35.540"></status>
</kw>
<status status="PASS" endtime="20191031 02:20:35.541" starttime="20191031 02:20:33.376"></status>
</kw>
<status status="PASS" endtime="20191031 02:20:35.542" starttime="20191031 02:20:30.715"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191031 02:20:35.544" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191031 02:20:35.544" starttime="20191031 02:20:35.543"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191031 02:20:35.545" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191031 02:20:35.545" starttime="20191031 02:20:35.544"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191031 02:20:35.546" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191031 02:20:35.546" starttime="20191031 02:20:35.545"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:20:35.548" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:20:35.549" starttime="20191031 02:20:35.546"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:20:35.552" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:20:40.322" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:20:40.322" level="INFO">${output} = 2019-10-31 02:20:38 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-31 02:20:38 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191031 02:20:40.322" starttime="20191031 02:20:35.550"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:20:40.324" level="INFO">2019-10-31 02:20:38 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-31 02:20:38 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-31 02:20:38 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191031 02:20:40.324" starttime="20191031 02:20:40.323"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:20:40.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:20:40.325" starttime="20191031 02:20:40.324"></status>
</kw>
<status status="PASS" endtime="20191031 02:20:40.325" starttime="20191031 02:20:35.549"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:20:40.328" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:20:42.693" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:20:42.694" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191031 02:20:42.694" starttime="20191031 02:20:40.326"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:20:42.696" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191031 02:20:42.696" starttime="20191031 02:20:42.695"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:20:42.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:20:42.697" starttime="20191031 02:20:42.697"></status>
</kw>
<msg timestamp="20191031 02:20:42.698" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191031 02:20:42.698" starttime="20191031 02:20:40.325"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:20:42.699" starttime="20191031 02:20:42.699"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:20:42.701" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:20:42.701" starttime="20191031 02:20:42.700"></status>
</kw>
<status status="PASS" endtime="20191031 02:20:42.701" starttime="20191031 02:20:35.542"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:20:42.706" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:20:44.826" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:20:44.826" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:20:44.826" starttime="20191031 02:20:42.703"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:20:44.827" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:20:44.827" starttime="20191031 02:20:44.826"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:20:44.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:20:44.828" starttime="20191031 02:20:44.827"></status>
</kw>
<msg timestamp="20191031 02:20:44.828" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:20:44.828" starttime="20191031 02:20:42.702"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191031 02:20:44.829" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:20:44.829" starttime="20191031 02:20:44.828"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191031 02:20:44.830" starttime="20191031 02:20:44.829"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191031 02:20:44.830" starttime="20191031 02:20:44.830"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191031 02:20:44.831" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191031 02:20:44.831" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:20:44.831" starttime="20191031 02:20:44.830"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191031 02:20:44.831" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191031 02:20:44.832" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191031 02:20:44.832" starttime="20191031 02:20:44.831"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191031 02:20:44.832" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191031 02:20:44.832" starttime="20191031 02:20:44.832"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191031 02:20:44.833" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191031 02:20:44.833" starttime="20191031 02:20:44.832"></status>
</kw>
<msg timestamp="20191031 02:20:44.833" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191031 02:20:44.833" starttime="20191031 02:20:42.702"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:20:44.834" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191031 02:20:44.834" starttime="20191031 02:20:44.834"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:20:44.835" starttime="20191031 02:20:44.835"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:20:44.836" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:20:46.044" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:20:46.045" starttime="20191031 02:20:44.836"></status>
</kw>
<status status="PASS" endtime="20191031 02:20:46.045" starttime="20191031 02:20:44.835"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191031 02:20:46.046" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191031 02:20:56.228" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:20:56.228" starttime="20191031 02:20:46.046"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191031 02:20:56.229" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:20:56.358" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:20:56.358" level="INFO">${shutdownMsg} = hadoop     452  0.0  0.0   9556  1168 ?        Ss   02:20   0:00 bash -c sudo ps aux | grep om
hadoop     454  0.0  0.0   9088   672 ?        S    02:20   0:00 grep om</msg>
<status status="PASS" endtime="20191031 02:20:56.359" starttime="20191031 02:20:56.228"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:20:56.423" starttime="20191031 02:20:56.359"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:20:56.425" starttime="20191031 02:20:56.424"></status>
</kw>
<msg timestamp="20191031 02:20:56.425" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191031 02:20:56.425" starttime="20191031 02:20:44.833"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:20:56.429" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:21:08.587" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:21:08.587" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:21:08.587" starttime="20191031 02:20:56.427"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:21:08.588" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:21:08.588" starttime="20191031 02:21:08.588"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:21:08.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:21:08.589" starttime="20191031 02:21:08.589"></status>
</kw>
<msg timestamp="20191031 02:21:08.590" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:21:08.590" starttime="20191031 02:20:56.426"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191031 02:21:08.590" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:21:08.590" starttime="20191031 02:21:08.590"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191031 02:21:08.591" starttime="20191031 02:21:08.590"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191031 02:21:08.592" starttime="20191031 02:21:08.591"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191031 02:21:08.592" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191031 02:21:08.592" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:21:08.592" starttime="20191031 02:21:08.592"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191031 02:21:08.593" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191031 02:21:08.593" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191031 02:21:08.593" starttime="20191031 02:21:08.593"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191031 02:21:08.594" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191031 02:21:08.594" starttime="20191031 02:21:08.593"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191031 02:21:08.594" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191031 02:21:08.595" starttime="20191031 02:21:08.594"></status>
</kw>
<msg timestamp="20191031 02:21:08.595" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191031 02:21:08.595" starttime="20191031 02:20:56.425"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191031 02:21:08.596" starttime="20191031 02:21:08.595"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191031 02:21:08.597" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191031 02:21:08.597" starttime="20191031 02:21:08.596"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191031 02:21:08.598" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191031 02:21:08.598" starttime="20191031 02:21:08.597"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191031 02:21:08.599" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191031 02:21:08.599" starttime="20191031 02:21:08.598"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:21:08.600" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:21:08.601" starttime="20191031 02:21:08.599"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:21:08.603" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:21:23.317" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:21:23.318" level="INFO">${output} = 2019-10-31 02:21:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191031 02:21:23.318" starttime="20191031 02:21:08.602"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:21:23.320" level="INFO">2019-10-31 02:21:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:21:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:21:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:21:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:21:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:21:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:21:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:21:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:21:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:21:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:21:21 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-31 02:21:21 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-31 02:21:21 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191031 02:21:23.321" starttime="20191031 02:21:23.319"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:21:23.322" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:21:23.323" starttime="20191031 02:21:23.321"></status>
</kw>
<status status="PASS" endtime="20191031 02:21:23.323" starttime="20191031 02:21:08.601"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:21:23.328" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:21:35.813" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:21:35.813" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191031 02:21:35.813" starttime="20191031 02:21:23.325"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:21:35.815" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191031 02:21:35.815" starttime="20191031 02:21:35.814"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:21:35.816" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:21:35.816" starttime="20191031 02:21:35.815"></status>
</kw>
<msg timestamp="20191031 02:21:35.817" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191031 02:21:35.817" starttime="20191031 02:21:23.324"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:21:35.818" starttime="20191031 02:21:35.817"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:21:35.819" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:21:35.819" starttime="20191031 02:21:35.818"></status>
</kw>
<status status="PASS" endtime="20191031 02:21:35.820" starttime="20191031 02:21:08.596"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:21:35.822" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191031 02:21:35.822" starttime="20191031 02:21:35.821"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:21:35.824" starttime="20191031 02:21:35.823"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:21:35.825" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:21:37.031" level="INFO">Read output: Last login: Thu Oct 31 02:20:45 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:21:37.031" starttime="20191031 02:21:35.824"></status>
</kw>
<status status="PASS" endtime="20191031 02:21:37.032" starttime="20191031 02:21:35.822"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191031 02:21:37.033" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191031 02:21:39.221" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:21:39.222" starttime="20191031 02:21:37.032"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191031 02:21:39.223" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:21:39.321" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:21:39.321" level="INFO">${startupMsg} = hadoop     505  372  0.0 34484568 255100 ?     Sl   02:21   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191031 02:21:39.321" starttime="20191031 02:21:39.222"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:21:39.387" starttime="20191031 02:21:39.322"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:21:39.388" starttime="20191031 02:21:39.387"></status>
</kw>
<status status="PASS" endtime="20191031 02:21:39.388" starttime="20191031 02:21:35.820"></status>
</kw>
<status status="PASS" endtime="20191031 02:21:39.389" critical="yes" starttime="20191031 02:20:30.714"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191031 02:21:39.393" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191031 02:21:39.393" starttime="20191031 02:21:39.391"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191031 02:21:39.396" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191031 02:21:39.396" starttime="20191031 02:21:39.394"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:21:39.398" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191031 02:21:39.398" starttime="20191031 02:21:39.397"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:21:39.400" starttime="20191031 02:21:39.399"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:21:39.401" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:21:40.600" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:21:40.601" starttime="20191031 02:21:39.400"></status>
</kw>
<status status="PASS" endtime="20191031 02:21:40.601" starttime="20191031 02:21:39.398"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191031 02:21:40.602" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191031 02:21:50.752" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:21:50.752" starttime="20191031 02:21:40.602"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191031 02:21:50.753" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:21:50.862" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:21:50.862" level="INFO">${shutdownMsg} = hadoop     493  0.0  0.0   9556  1168 ?        Ss   02:21   0:00 bash -c sudo ps aux | grep om
hadoop     495  0.0  0.0   9088   668 ?        S    02:21   0:00 grep om</msg>
<status status="PASS" endtime="20191031 02:21:50.862" starttime="20191031 02:21:50.753"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:21:50.896" starttime="20191031 02:21:50.863"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:21:50.897" starttime="20191031 02:21:50.896"></status>
</kw>
<status status="PASS" endtime="20191031 02:21:50.897" starttime="20191031 02:21:39.396"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:21:50.899" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191031 02:21:50.900" starttime="20191031 02:21:50.899"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:21:50.902" starttime="20191031 02:21:50.901"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:21:50.903" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:21:52.108" level="INFO">Read output: Last login: Thu Oct 31 02:21:39 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:21:52.108" starttime="20191031 02:21:50.902"></status>
</kw>
<status status="PASS" endtime="20191031 02:21:52.108" starttime="20191031 02:21:50.900"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191031 02:21:52.110" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191031 02:21:52.135" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:21:52.136" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191031 02:21:52.136" starttime="20191031 02:21:52.109"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191031 02:21:52.137" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191031 02:21:52.137" starttime="20191031 02:21:52.136"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191031 02:21:52.138" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191031 02:21:52.139" starttime="20191031 02:21:52.138"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191031 02:21:52.187" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191031 02:21:52.198" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191031 02:21:52.198" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191031 02:21:52.198" starttime="20191031 02:21:52.139"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191031 02:21:52.200" level="INFO">Length is 2</msg>
<msg timestamp="20191031 02:21:52.200" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191031 02:21:52.200" starttime="20191031 02:21:52.199"></status>
</kw>
<msg timestamp="20191031 02:21:52.201" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191031 02:21:52.201" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191031 02:21:52.201" starttime="20191031 02:21:50.898"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:21:52.205" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:22:04.567" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:22:04.567" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:22:04.568" starttime="20191031 02:21:52.203"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:22:04.569" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:22:04.570" starttime="20191031 02:22:04.568"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:22:04.571" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:22:04.571" starttime="20191031 02:22:04.570"></status>
</kw>
<msg timestamp="20191031 02:22:04.572" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:22:04.572" starttime="20191031 02:21:52.202"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191031 02:22:04.573" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:22:04.573" starttime="20191031 02:22:04.572"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191031 02:22:04.574" starttime="20191031 02:22:04.573"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191031 02:22:04.575" starttime="20191031 02:22:04.574"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191031 02:22:04.576" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191031 02:22:04.576" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:22:04.576" starttime="20191031 02:22:04.575"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191031 02:22:04.577" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191031 02:22:04.577" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191031 02:22:04.577" starttime="20191031 02:22:04.576"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191031 02:22:04.578" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191031 02:22:04.578" starttime="20191031 02:22:04.578"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191031 02:22:04.579" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191031 02:22:04.579" starttime="20191031 02:22:04.579"></status>
</kw>
<msg timestamp="20191031 02:22:04.580" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191031 02:22:04.580" starttime="20191031 02:21:52.201"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191031 02:22:04.584" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191031 02:22:04.584" starttime="20191031 02:22:04.581"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191031 02:22:04.587" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191031 02:22:04.587" starttime="20191031 02:22:04.586"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191031 02:22:04.587" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191031 02:22:04.588" starttime="20191031 02:22:04.587"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:22:04.592" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:22:19.775" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:22:19.776" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191031 02:22:19.776" starttime="20191031 02:22:04.590"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:22:19.778" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191031 02:22:19.778" starttime="20191031 02:22:19.777"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:22:19.779" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:22:19.779" starttime="20191031 02:22:19.778"></status>
</kw>
<status status="PASS" endtime="20191031 02:22:19.780" starttime="20191031 02:22:04.589"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:22:19.787" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:22:32.215" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:22:32.215" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1572488537006,
  "modificationTime": 1572488539338,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191031 02:22:32.215" starttime="20191031 02:22:19.784"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:22:32.217" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1572488537006,
  "modificationTime": 1572488539338,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103054608760766460,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191031 02:22:32.217" starttime="20191031 02:22:32.216"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:22:32.218" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:22:32.218" starttime="20191031 02:22:32.217"></status>
</kw>
<msg timestamp="20191031 02:22:32.218" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1572488537006,
  "modificationTime": 1572488539338,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191031 02:22:32.218" starttime="20191031 02:22:19.780"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191031 02:22:32.219" starttime="20191031 02:22:32.218"></status>
</kw>
<status status="PASS" endtime="20191031 02:22:32.219" starttime="20191031 02:22:04.588"></status>
</kw>
<status status="PASS" endtime="20191031 02:22:32.219" starttime="20191031 02:22:04.585"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191031 02:22:32.220" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191031 02:22:32.220" starttime="20191031 02:22:32.220"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191031 02:22:32.221" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191031 02:22:32.221" starttime="20191031 02:22:32.220"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:22:32.225" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:22:46.661" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:22:46.661" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191031 02:22:46.661" starttime="20191031 02:22:32.223"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:22:46.663" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191031 02:22:46.663" starttime="20191031 02:22:46.662"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:22:46.664" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:22:46.664" starttime="20191031 02:22:46.663"></status>
</kw>
<status status="PASS" endtime="20191031 02:22:46.664" starttime="20191031 02:22:32.222"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:22:46.668" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:22:58.999" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:22:58.999" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1572488564477,
  "modificationTime": 1572488566248,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191031 02:22:58.999" starttime="20191031 02:22:46.666"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:22:59.001" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1572488564477,
  "modificationTime": 1572488566248,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103054610561433600,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191031 02:22:59.001" starttime="20191031 02:22:59.000"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:22:59.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:22:59.002" starttime="20191031 02:22:59.001"></status>
</kw>
<msg timestamp="20191031 02:22:59.003" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1572488564477,
  "modificationTime": 1572488566248,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191031 02:22:59.003" starttime="20191031 02:22:46.664"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191031 02:22:59.004" starttime="20191031 02:22:59.003"></status>
</kw>
<status status="PASS" endtime="20191031 02:22:59.004" starttime="20191031 02:22:32.221"></status>
</kw>
<status status="PASS" endtime="20191031 02:22:59.004" starttime="20191031 02:22:32.219"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191031 02:22:59.006" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191031 02:22:59.006" starttime="20191031 02:22:59.005"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191031 02:22:59.007" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191031 02:22:59.007" starttime="20191031 02:22:59.006"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:22:59.012" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:23:13.783" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:23:13.784" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191031 02:23:13.784" starttime="20191031 02:22:59.010"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:23:13.785" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191031 02:23:13.786" starttime="20191031 02:23:13.784"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:23:13.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:23:13.786" starttime="20191031 02:23:13.786"></status>
</kw>
<status status="PASS" endtime="20191031 02:23:13.787" starttime="20191031 02:22:59.008"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:23:13.791" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:23:26.373" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:23:26.373" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1572488591366,
  "modificationTime": 1572488593362,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191031 02:23:26.373" starttime="20191031 02:23:13.789"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:23:26.375" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1572488591366,
  "modificationTime": 1572488593362,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103054612323631100,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191031 02:23:26.375" starttime="20191031 02:23:26.374"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:23:26.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:23:26.376" starttime="20191031 02:23:26.375"></status>
</kw>
<msg timestamp="20191031 02:23:26.377" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1572488591366,
  "modificationTime": 1572488593362,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191031 02:23:26.377" starttime="20191031 02:23:13.787"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191031 02:23:26.378" starttime="20191031 02:23:26.377"></status>
</kw>
<status status="PASS" endtime="20191031 02:23:26.378" starttime="20191031 02:22:59.007"></status>
</kw>
<status status="PASS" endtime="20191031 02:23:26.378" starttime="20191031 02:22:59.005"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191031 02:23:26.380" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191031 02:23:26.380" starttime="20191031 02:23:26.379"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191031 02:23:26.381" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191031 02:23:26.381" starttime="20191031 02:23:26.380"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:23:26.386" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:23:40.736" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:23:40.737" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191031 02:23:40.737" starttime="20191031 02:23:26.383"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:23:40.739" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191031 02:23:40.739" starttime="20191031 02:23:40.738"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:23:40.740" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:23:40.740" starttime="20191031 02:23:40.739"></status>
</kw>
<status status="PASS" endtime="20191031 02:23:40.741" starttime="20191031 02:23:26.382"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:23:40.746" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:23:53.354" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:23:53.354" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1572488618675,
  "modificationTime": 1572488620312,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191031 02:23:53.354" starttime="20191031 02:23:40.743"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:23:53.356" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1572488618675,
  "modificationTime": 1572488620312,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103054614113353730,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191031 02:23:53.356" starttime="20191031 02:23:53.355"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:23:53.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:23:53.357" starttime="20191031 02:23:53.356"></status>
</kw>
<msg timestamp="20191031 02:23:53.357" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1572488618675,
  "modificationTime": 1572488620312,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191031 02:23:53.357" starttime="20191031 02:23:40.741"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191031 02:23:53.358" starttime="20191031 02:23:53.357"></status>
</kw>
<status status="PASS" endtime="20191031 02:23:53.358" starttime="20191031 02:23:26.381"></status>
</kw>
<status status="PASS" endtime="20191031 02:23:53.358" starttime="20191031 02:23:26.379"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191031 02:23:53.359" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:23:53.359" starttime="20191031 02:23:53.359"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191031 02:23:53.360" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:23:53.360" starttime="20191031 02:23:53.359"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:23:53.364" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:24:07.957" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:24:07.958" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191031 02:24:07.958" starttime="20191031 02:23:53.362"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:24:07.960" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191031 02:24:07.960" starttime="20191031 02:24:07.959"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:24:07.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:24:07.961" starttime="20191031 02:24:07.960"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:07.962" starttime="20191031 02:23:53.361"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:24:07.969" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:24:20.262" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:24:20.262" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1572488645642,
  "modificationTime": 1572488647533,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191031 02:24:20.262" starttime="20191031 02:24:07.966"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:24:20.264" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1572488645642,
  "modificationTime": 1572488647533,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103054615880663040,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191031 02:24:20.264" starttime="20191031 02:24:20.263"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:24:20.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:24:20.265" starttime="20191031 02:24:20.264"></status>
</kw>
<msg timestamp="20191031 02:24:20.265" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1572488645642,
  "modificationTime": 1572488647533,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191031 02:24:20.266" starttime="20191031 02:24:07.962"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:20.266" starttime="20191031 02:24:20.266"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:20.267" starttime="20191031 02:23:53.360"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:20.267" starttime="20191031 02:23:53.358"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:20.267" starttime="20191031 02:22:04.585"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:20.267" starttime="20191031 02:22:04.584"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:24:20.269" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191031 02:24:20.269" starttime="20191031 02:24:20.268"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:20.270" starttime="20191031 02:24:20.270"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:24:20.271" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:24:21.477" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:24:21.478" starttime="20191031 02:24:20.270"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:21.478" starttime="20191031 02:24:20.269"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191031 02:24:21.480" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191031 02:24:21.496" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:24:21.496" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191031 02:24:21.496" starttime="20191031 02:24:21.479"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191031 02:24:21.497" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191031 02:24:21.497" starttime="20191031 02:24:21.496"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191031 02:24:21.498" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191031 02:24:21.498" starttime="20191031 02:24:21.497"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191031 02:24:21.579" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191031 02:24:21.591" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191031 02:24:21.592" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191031 02:24:21.592" starttime="20191031 02:24:21.499"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191031 02:24:21.593" level="INFO">Length is 3</msg>
<msg timestamp="20191031 02:24:21.593" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191031 02:24:21.593" starttime="20191031 02:24:21.592"></status>
</kw>
<msg timestamp="20191031 02:24:21.594" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191031 02:24:21.594" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191031 02:24:21.594" starttime="20191031 02:24:20.267"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191031 02:24:21.595" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191031 02:24:21.595" starttime="20191031 02:24:21.594"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:21.596" starttime="20191031 02:22:04.581"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:21.596" starttime="20191031 02:22:04.580"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:21.597" starttime="20191031 02:24:21.596"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:24:21.599" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191031 02:24:21.599" starttime="20191031 02:24:21.598"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:21.601" starttime="20191031 02:24:21.601"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:24:21.602" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:24:22.807" level="INFO">Read output: Last login: Thu Oct 31 02:21:51 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:24:22.807" starttime="20191031 02:24:21.602"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:22.808" starttime="20191031 02:24:21.599"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191031 02:24:22.809" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191031 02:24:24.978" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:24:24.979" starttime="20191031 02:24:22.808"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191031 02:24:24.980" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:24:25.056" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:24:25.057" level="INFO">${startupMsg} = hadoop     568  334  0.0 34476312 215240 ?     Sl   02:24   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191031 02:24:25.057" starttime="20191031 02:24:24.979"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:24:25.090" starttime="20191031 02:24:25.057"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:25.091" starttime="20191031 02:24:25.090"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:25.092" starttime="20191031 02:24:21.597"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:24:25.094" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191031 02:24:25.095" starttime="20191031 02:24:25.094"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:25.097" starttime="20191031 02:24:25.096"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:24:25.097" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:24:26.301" level="INFO">Read output: Last login: Thu Oct 31 02:24:21 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:24:26.302" starttime="20191031 02:24:25.097"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:26.302" starttime="20191031 02:24:25.095"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191031 02:24:26.304" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191031 02:24:26.319" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:24:26.319" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191031 02:24:26.320" starttime="20191031 02:24:26.303"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191031 02:24:26.320" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191031 02:24:26.321" starttime="20191031 02:24:26.320"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191031 02:24:26.322" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191031 02:24:26.322" starttime="20191031 02:24:26.321"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191031 02:24:26.402" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191031 02:24:26.412" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191031 02:24:26.413" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191031 02:24:26.413" starttime="20191031 02:24:26.322"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191031 02:24:26.414" level="INFO">Length is 2</msg>
<msg timestamp="20191031 02:24:26.414" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191031 02:24:26.414" starttime="20191031 02:24:26.413"></status>
</kw>
<msg timestamp="20191031 02:24:26.415" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191031 02:24:26.415" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191031 02:24:26.415" starttime="20191031 02:24:25.092"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:26.417" starttime="20191031 02:24:26.416"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191031 02:24:27.419" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191031 02:24:27.419" starttime="20191031 02:24:26.418"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:27.419" starttime="20191031 02:24:25.092"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:24:27.421" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191031 02:24:27.421" starttime="20191031 02:24:27.420"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:27.422" starttime="20191031 02:24:27.422"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:24:27.423" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:24:28.609" level="INFO">Read output: Last login: Thu Oct 31 02:24:25 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:24:28.610" starttime="20191031 02:24:27.423"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:28.610" starttime="20191031 02:24:27.421"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191031 02:24:28.612" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191031 02:24:28.627" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:24:28.628" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191031 02:24:28.628" starttime="20191031 02:24:28.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191031 02:24:28.629" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191031 02:24:28.629" starttime="20191031 02:24:28.628"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191031 02:24:28.630" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191031 02:24:28.630" starttime="20191031 02:24:28.629"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191031 02:24:28.710" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191031 02:24:28.722" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191031 02:24:28.723" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191031 02:24:28.723" starttime="20191031 02:24:28.631"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191031 02:24:28.724" level="INFO">Length is 3</msg>
<msg timestamp="20191031 02:24:28.724" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191031 02:24:28.724" starttime="20191031 02:24:28.723"></status>
</kw>
<msg timestamp="20191031 02:24:28.725" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191031 02:24:28.725" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191031 02:24:28.725" starttime="20191031 02:24:27.419"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191031 02:24:28.727" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191031 02:24:28.727" starttime="20191031 02:24:28.726"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:28.727" starttime="20191031 02:24:27.419"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:28.728" starttime="20191031 02:24:25.092"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:28.729" starttime="20191031 02:24:28.728"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:28.731" starttime="20191031 02:24:28.730"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:28.731" critical="yes" starttime="20191031 02:21:39.389"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:24:28.738" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:24:30.791" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:24:30.792" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:30.792" starttime="20191031 02:24:28.735"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:24:30.793" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:30.794" starttime="20191031 02:24:30.792"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:24:30.794" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:24:30.795" starttime="20191031 02:24:30.794"></status>
</kw>
<msg timestamp="20191031 02:24:30.795" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:30.795" starttime="20191031 02:24:28.735"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191031 02:24:30.796" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:30.796" starttime="20191031 02:24:30.796"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:30.797" starttime="20191031 02:24:30.796"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:30.798" starttime="20191031 02:24:30.797"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191031 02:24:30.799" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191031 02:24:30.799" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:30.799" starttime="20191031 02:24:30.798"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191031 02:24:30.800" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191031 02:24:30.800" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191031 02:24:30.800" starttime="20191031 02:24:30.799"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191031 02:24:30.801" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191031 02:24:30.801" starttime="20191031 02:24:30.800"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191031 02:24:30.802" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191031 02:24:30.802" starttime="20191031 02:24:30.802"></status>
</kw>
<msg timestamp="20191031 02:24:30.803" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191031 02:24:30.803" starttime="20191031 02:24:28.734"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:24:30.805" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191031 02:24:30.805" starttime="20191031 02:24:30.804"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:30.806" starttime="20191031 02:24:30.805"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:24:30.807" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:24:32.015" level="INFO">Read output: Last login: Thu Oct 31 02:24:20 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:24:32.015" starttime="20191031 02:24:30.807"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:32.015" starttime="20191031 02:24:30.805"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191031 02:24:32.016" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191031 02:24:42.201" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:24:42.203" starttime="20191031 02:24:32.016"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191031 02:24:42.205" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:24:42.282" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:24:42.282" level="INFO">${shutdownMsg} = hadoop     567  0.0  0.0   9556  1168 ?        Ss   02:24   0:00 bash -c sudo ps aux | grep om
hadoop     569  0.0  0.0   9088   672 ?        S    02:24   0:00 grep om</msg>
<status status="PASS" endtime="20191031 02:24:42.282" starttime="20191031 02:24:42.204"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:24:42.316" starttime="20191031 02:24:42.283"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:42.317" starttime="20191031 02:24:42.316"></status>
</kw>
<msg timestamp="20191031 02:24:42.318" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191031 02:24:42.318" starttime="20191031 02:24:30.803"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:24:42.323" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:24:44.580" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:24:44.580" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:44.580" starttime="20191031 02:24:42.320"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:24:44.582" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:44.582" starttime="20191031 02:24:44.581"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:24:44.583" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:24:44.584" starttime="20191031 02:24:44.583"></status>
</kw>
<msg timestamp="20191031 02:24:44.584" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:44.584" starttime="20191031 02:24:42.319"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191031 02:24:44.585" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:44.585" starttime="20191031 02:24:44.585"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:44.586" starttime="20191031 02:24:44.586"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:44.587" starttime="20191031 02:24:44.587"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191031 02:24:44.588" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191031 02:24:44.588" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:44.589" starttime="20191031 02:24:44.588"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191031 02:24:44.590" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191031 02:24:44.590" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191031 02:24:44.590" starttime="20191031 02:24:44.589"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191031 02:24:44.591" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191031 02:24:44.591" starttime="20191031 02:24:44.590"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191031 02:24:44.592" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191031 02:24:44.592" starttime="20191031 02:24:44.591"></status>
</kw>
<msg timestamp="20191031 02:24:44.592" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191031 02:24:44.593" starttime="20191031 02:24:42.318"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:44.594" starttime="20191031 02:24:44.593"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191031 02:24:44.596" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191031 02:24:44.596" starttime="20191031 02:24:44.595"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191031 02:24:44.597" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191031 02:24:44.597" starttime="20191031 02:24:44.596"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191031 02:24:44.598" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191031 02:24:44.598" starttime="20191031 02:24:44.597"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:24:44.601" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:24:44.601" starttime="20191031 02:24:44.598"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:24:44.605" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:24:49.118" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:24:49.119" level="INFO">${output} = 2019-10-31 02:24:47 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-31 02:24:47 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191031 02:24:49.119" starttime="20191031 02:24:44.602"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:24:49.120" level="INFO">2019-10-31 02:24:47 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-31 02:24:47 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-31 02:24:47 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191031 02:24:49.120" starttime="20191031 02:24:49.119"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:24:49.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:24:49.121" starttime="20191031 02:24:49.121"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:49.122" starttime="20191031 02:24:44.601"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:24:49.125" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:24:51.537" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:24:51.537" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:24:51.537" starttime="20191031 02:24:49.123"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:24:51.539" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:24:51.540" starttime="20191031 02:24:51.538"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:24:51.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:24:51.541" starttime="20191031 02:24:51.540"></status>
</kw>
<msg timestamp="20191031 02:24:51.541" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:24:51.542" starttime="20191031 02:24:49.122"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:51.543" starttime="20191031 02:24:51.542"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:24:51.545" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:24:51.545" starttime="20191031 02:24:51.543"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:51.545" starttime="20191031 02:24:44.594"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:24:51.548" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191031 02:24:51.548" starttime="20191031 02:24:51.547"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:51.550" starttime="20191031 02:24:51.549"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:24:51.551" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:24:52.758" level="INFO">Read output: Last login: Thu Oct 31 02:24:31 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:24:52.759" starttime="20191031 02:24:51.551"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:52.759" starttime="20191031 02:24:51.548"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191031 02:24:52.761" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191031 02:24:54.952" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:24:54.952" starttime="20191031 02:24:52.760"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191031 02:24:54.953" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:24:55.060" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:24:55.061" level="INFO">${startupMsg} = hadoop     620  339  0.0 34478092 206056 ?     Sl   02:24   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191031 02:24:55.061" starttime="20191031 02:24:54.952"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:24:55.094" starttime="20191031 02:24:55.062"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:55.095" starttime="20191031 02:24:55.095"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:55.096" starttime="20191031 02:24:51.546"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:55.096" starttime="20191031 02:24:28.734"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:24:55.101" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:24:57.179" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:24:57.180" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:57.180" starttime="20191031 02:24:55.098"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:24:57.181" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:57.181" starttime="20191031 02:24:57.180"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:24:57.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:24:57.182" starttime="20191031 02:24:57.181"></status>
</kw>
<msg timestamp="20191031 02:24:57.182" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:57.182" starttime="20191031 02:24:55.097"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191031 02:24:57.183" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:57.183" starttime="20191031 02:24:57.182"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:57.184" starttime="20191031 02:24:57.183"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:57.185" starttime="20191031 02:24:57.184"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191031 02:24:57.185" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191031 02:24:57.185" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:24:57.185" starttime="20191031 02:24:57.185"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191031 02:24:57.186" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191031 02:24:57.186" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191031 02:24:57.186" starttime="20191031 02:24:57.186"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191031 02:24:57.187" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191031 02:24:57.187" starttime="20191031 02:24:57.186"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191031 02:24:57.187" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191031 02:24:57.187" starttime="20191031 02:24:57.187"></status>
</kw>
<msg timestamp="20191031 02:24:57.188" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191031 02:24:57.188" starttime="20191031 02:24:55.096"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:24:57.189" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191031 02:24:57.189" starttime="20191031 02:24:57.189"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:57.191" starttime="20191031 02:24:57.190"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:24:57.191" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:24:58.393" level="INFO">Read output: Last login: Thu Oct 31 02:21:36 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:24:58.393" starttime="20191031 02:24:57.191"></status>
</kw>
<status status="PASS" endtime="20191031 02:24:58.394" starttime="20191031 02:24:57.189"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191031 02:24:58.395" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191031 02:24:59.554" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:24:59.555" starttime="20191031 02:24:58.394"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191031 02:24:59.556" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:24:59.664" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:24:59.665" level="INFO">${shutdownMsg} = hadoop    1048  0.0  0.0   9556  1168 ?        Ss   02:24   0:00 bash -c sudo ps aux | grep om
hadoop    1050  0.0  0.0   9088   672 ?        S    02:24   0:00 grep om</msg>
<status status="PASS" endtime="20191031 02:24:59.665" starttime="20191031 02:24:59.555"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:24:59.730" starttime="20191031 02:24:59.665"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:24:59.732" starttime="20191031 02:24:59.731"></status>
</kw>
<msg timestamp="20191031 02:24:59.733" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191031 02:24:59.733" starttime="20191031 02:24:57.188"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:24:59.739" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:25:11.968" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:25:11.968" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:25:11.968" starttime="20191031 02:24:59.735"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:25:11.970" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:25:11.970" starttime="20191031 02:25:11.969"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:25:11.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:25:11.971" starttime="20191031 02:25:11.970"></status>
</kw>
<msg timestamp="20191031 02:25:11.972" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:25:11.972" starttime="20191031 02:24:59.734"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191031 02:25:11.973" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:25:11.973" starttime="20191031 02:25:11.972"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191031 02:25:11.974" starttime="20191031 02:25:11.973"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191031 02:25:11.975" starttime="20191031 02:25:11.974"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191031 02:25:11.976" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191031 02:25:11.976" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:25:11.976" starttime="20191031 02:25:11.975"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191031 02:25:11.977" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191031 02:25:11.978" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191031 02:25:11.978" starttime="20191031 02:25:11.977"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191031 02:25:11.979" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191031 02:25:11.979" starttime="20191031 02:25:11.978"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191031 02:25:11.980" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191031 02:25:11.980" starttime="20191031 02:25:11.979"></status>
</kw>
<msg timestamp="20191031 02:25:11.980" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191031 02:25:11.980" starttime="20191031 02:24:59.733"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191031 02:25:11.982" starttime="20191031 02:25:11.981"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191031 02:25:11.983" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191031 02:25:11.984" starttime="20191031 02:25:11.983"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191031 02:25:11.985" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191031 02:25:11.985" starttime="20191031 02:25:11.984"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191031 02:25:11.986" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191031 02:25:11.986" starttime="20191031 02:25:11.985"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:25:11.989" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:25:11.989" starttime="20191031 02:25:11.986"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:25:11.994" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:25:26.894" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:25:26.894" level="INFO">${output} = 2019-10-31 02:25:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191031 02:25:26.895" starttime="20191031 02:25:11.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:25:26.896" level="INFO">2019-10-31 02:25:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:25:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:25:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:25:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:25:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:25:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:25:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:25:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:25:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:25:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:25:24 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-31 02:25:25 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-31 02:25:25 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191031 02:25:26.897" starttime="20191031 02:25:26.895"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:25:26.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:25:26.898" starttime="20191031 02:25:26.897"></status>
</kw>
<status status="PASS" endtime="20191031 02:25:26.898" starttime="20191031 02:25:11.989"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:25:26.903" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:25:39.358" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:25:39.358" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:25:39.358" starttime="20191031 02:25:26.900"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:25:39.359" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:25:39.360" starttime="20191031 02:25:39.359"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:25:39.361" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:25:39.361" starttime="20191031 02:25:39.360"></status>
</kw>
<msg timestamp="20191031 02:25:39.361" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:25:39.361" starttime="20191031 02:25:26.899"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:25:39.362" starttime="20191031 02:25:39.362"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:25:39.363" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:25:39.363" starttime="20191031 02:25:39.363"></status>
</kw>
<status status="PASS" endtime="20191031 02:25:39.364" starttime="20191031 02:25:11.982"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:25:39.366" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191031 02:25:39.366" starttime="20191031 02:25:39.365"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:25:39.369" starttime="20191031 02:25:39.368"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:25:39.370" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:25:40.558" level="INFO">Read output: Last login: Thu Oct 31 02:24:57 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:25:40.559" starttime="20191031 02:25:39.369"></status>
</kw>
<status status="PASS" endtime="20191031 02:25:40.559" starttime="20191031 02:25:39.367"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191031 02:25:40.560" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191031 02:25:42.741" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:25:42.741" starttime="20191031 02:25:40.560"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191031 02:25:42.742" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:25:42.818" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:25:42.819" level="INFO">${startupMsg} = hadoop    1099  347  0.0 34478548 223860 ?     Sl   02:25   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191031 02:25:42.819" starttime="20191031 02:25:42.742"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:25:42.852" starttime="20191031 02:25:42.819"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:25:42.853" starttime="20191031 02:25:42.852"></status>
</kw>
<status status="PASS" endtime="20191031 02:25:42.854" starttime="20191031 02:25:39.364"></status>
</kw>
<status status="PASS" endtime="20191031 02:25:42.854" starttime="20191031 02:24:55.096"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:25:42.859" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:25:45.811" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:25:45.811" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:25:45.811" starttime="20191031 02:25:42.856"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:25:45.813" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:25:45.813" starttime="20191031 02:25:45.812"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:25:45.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:25:45.815" starttime="20191031 02:25:45.814"></status>
</kw>
<msg timestamp="20191031 02:25:45.815" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:25:45.815" starttime="20191031 02:25:42.855"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191031 02:25:45.816" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:25:45.816" starttime="20191031 02:25:45.815"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191031 02:25:45.817" starttime="20191031 02:25:45.816"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191031 02:25:45.818" starttime="20191031 02:25:45.817"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191031 02:25:45.820" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191031 02:25:45.820" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:25:45.820" starttime="20191031 02:25:45.818"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191031 02:25:45.821" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191031 02:25:45.821" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191031 02:25:45.821" starttime="20191031 02:25:45.820"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191031 02:25:45.822" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191031 02:25:45.822" starttime="20191031 02:25:45.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191031 02:25:45.823" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191031 02:25:45.823" starttime="20191031 02:25:45.823"></status>
</kw>
<msg timestamp="20191031 02:25:45.824" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191031 02:25:45.824" starttime="20191031 02:25:42.854"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:25:45.826" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191031 02:25:45.826" starttime="20191031 02:25:45.825"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:25:45.827" starttime="20191031 02:25:45.827"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:25:45.828" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:25:47.034" level="INFO">Read output: Last login: Thu Oct 31 02:24:27 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:25:47.034" starttime="20191031 02:25:45.828"></status>
</kw>
<status status="PASS" endtime="20191031 02:25:47.035" starttime="20191031 02:25:45.826"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191031 02:25:47.036" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191031 02:25:48.206" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:25:48.207" starttime="20191031 02:25:47.035"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191031 02:25:48.208" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:25:48.283" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:25:48.283" level="INFO">${shutdownMsg} = hadoop    1131  0.0  0.0   9556  1168 ?        Ss   02:25   0:00 bash -c sudo ps aux | grep om
hadoop    1133  0.0  0.0   9088   668 ?        S    02:25   0:00 grep om</msg>
<status status="PASS" endtime="20191031 02:25:48.284" starttime="20191031 02:25:48.207"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:25:48.349" starttime="20191031 02:25:48.284"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:25:48.350" starttime="20191031 02:25:48.350"></status>
</kw>
<msg timestamp="20191031 02:25:48.351" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191031 02:25:48.351" starttime="20191031 02:25:45.824"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:25:48.356" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:26:10.684" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:26:10.684" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:10.684" starttime="20191031 02:25:48.353"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:26:10.686" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:10.686" starttime="20191031 02:26:10.685"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:26:10.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:26:10.688" starttime="20191031 02:26:10.687"></status>
</kw>
<msg timestamp="20191031 02:26:10.688" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:10.688" starttime="20191031 02:25:48.352"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191031 02:26:10.689" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:10.689" starttime="20191031 02:26:10.689"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191031 02:26:10.690" starttime="20191031 02:26:10.690"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191031 02:26:10.691" starttime="20191031 02:26:10.691"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191031 02:26:10.692" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191031 02:26:10.692" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:10.693" starttime="20191031 02:26:10.692"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191031 02:26:10.694" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191031 02:26:10.694" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191031 02:26:10.694" starttime="20191031 02:26:10.693"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191031 02:26:10.695" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191031 02:26:10.695" starttime="20191031 02:26:10.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191031 02:26:10.696" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191031 02:26:10.696" starttime="20191031 02:26:10.695"></status>
</kw>
<msg timestamp="20191031 02:26:10.696" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191031 02:26:10.696" starttime="20191031 02:25:48.351"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191031 02:26:10.697" starttime="20191031 02:26:10.697"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191031 02:26:10.700" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191031 02:26:10.700" starttime="20191031 02:26:10.699"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191031 02:26:10.701" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191031 02:26:10.701" starttime="20191031 02:26:10.700"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191031 02:26:10.702" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191031 02:26:10.702" starttime="20191031 02:26:10.702"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:26:10.705" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:26:10.705" starttime="20191031 02:26:10.703"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:26:10.708" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:26:15.125" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:26:15.125" level="INFO">${output} = 2019-10-31 02:26:13 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-31 02:26:13 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191031 02:26:15.125" starttime="20191031 02:26:10.706"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:26:15.127" level="INFO">2019-10-31 02:26:13 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-31 02:26:13 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-31 02:26:13 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191031 02:26:15.127" starttime="20191031 02:26:15.126"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:26:15.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:26:15.128" starttime="20191031 02:26:15.127"></status>
</kw>
<status status="PASS" endtime="20191031 02:26:15.128" starttime="20191031 02:26:10.705"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:26:15.132" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:26:17.398" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:26:17.398" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:26:17.398" starttime="20191031 02:26:15.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:26:17.399" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:26:17.399" starttime="20191031 02:26:17.398"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:26:17.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:26:17.400" starttime="20191031 02:26:17.399"></status>
</kw>
<msg timestamp="20191031 02:26:17.400" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:26:17.400" starttime="20191031 02:26:15.128"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:26:17.401" starttime="20191031 02:26:17.401"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:26:17.402" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:26:17.402" starttime="20191031 02:26:17.401"></status>
</kw>
<status status="PASS" endtime="20191031 02:26:17.402" starttime="20191031 02:26:10.698"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:26:17.403" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191031 02:26:17.403" starttime="20191031 02:26:17.403"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:26:17.404" starttime="20191031 02:26:17.404"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:26:17.405" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:26:18.610" level="INFO">Read output: Last login: Thu Oct 31 02:25:46 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:26:18.611" starttime="20191031 02:26:17.405"></status>
</kw>
<status status="PASS" endtime="20191031 02:26:18.611" starttime="20191031 02:26:17.403"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191031 02:26:18.612" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191031 02:26:20.772" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:26:20.772" starttime="20191031 02:26:18.612"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191031 02:26:20.773" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:26:20.870" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:26:20.871" level="INFO">${startupMsg} = hadoop    1182  350  0.0 34482296 258748 ?     Sl   02:26   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191031 02:26:20.871" starttime="20191031 02:26:20.773"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:26:20.904" starttime="20191031 02:26:20.871"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:26:20.905" starttime="20191031 02:26:20.904"></status>
</kw>
<status status="PASS" endtime="20191031 02:26:20.905" starttime="20191031 02:26:17.402"></status>
</kw>
<status status="PASS" endtime="20191031 02:26:20.905" starttime="20191031 02:25:42.854"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:26:20.908" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:26:22.786" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:26:22.787" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:22.787" starttime="20191031 02:26:20.906"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:26:22.788" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:22.788" starttime="20191031 02:26:22.787"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:26:22.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:26:22.789" starttime="20191031 02:26:22.788"></status>
</kw>
<msg timestamp="20191031 02:26:22.789" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:22.789" starttime="20191031 02:26:20.906"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191031 02:26:22.789" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:22.790" starttime="20191031 02:26:22.789"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191031 02:26:22.790" starttime="20191031 02:26:22.790"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191031 02:26:22.791" starttime="20191031 02:26:22.790"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191031 02:26:22.791" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191031 02:26:22.791" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:22.791" starttime="20191031 02:26:22.791"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191031 02:26:22.792" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191031 02:26:22.792" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191031 02:26:22.792" starttime="20191031 02:26:22.792"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191031 02:26:22.793" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191031 02:26:22.793" starttime="20191031 02:26:22.792"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191031 02:26:22.793" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191031 02:26:22.793" starttime="20191031 02:26:22.793"></status>
</kw>
<msg timestamp="20191031 02:26:22.794" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191031 02:26:22.794" starttime="20191031 02:26:20.905"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:26:22.795" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191031 02:26:22.795" starttime="20191031 02:26:22.795"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:26:22.796" starttime="20191031 02:26:22.796"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:26:22.797" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:26:23.995" level="INFO">Read output: Last login: Thu Oct 31 02:25:39 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:26:23.996" starttime="20191031 02:26:22.797"></status>
</kw>
<status status="PASS" endtime="20191031 02:26:23.996" starttime="20191031 02:26:22.795"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191031 02:26:23.997" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191031 02:26:25.157" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:26:25.157" starttime="20191031 02:26:23.997"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191031 02:26:25.158" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:26:25.256" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:26:25.257" level="INFO">${shutdownMsg} = hadoop    1636  0.0  0.0   9556  1164 ?        Ss   02:26   0:00 bash -c sudo ps aux | grep om
hadoop    1638  0.0  0.0   9088   668 ?        S    02:26   0:00 grep om</msg>
<status status="PASS" endtime="20191031 02:26:25.257" starttime="20191031 02:26:25.158"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:26:25.322" starttime="20191031 02:26:25.257"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:26:25.324" starttime="20191031 02:26:25.323"></status>
</kw>
<msg timestamp="20191031 02:26:25.325" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191031 02:26:25.325" starttime="20191031 02:26:22.794"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:26:25.331" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:26:37.440" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:26:37.441" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:37.441" starttime="20191031 02:26:25.327"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:26:37.442" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:37.443" starttime="20191031 02:26:37.442"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:26:37.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:26:37.444" starttime="20191031 02:26:37.443"></status>
</kw>
<msg timestamp="20191031 02:26:37.444" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:37.444" starttime="20191031 02:26:25.326"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191031 02:26:37.445" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:37.445" starttime="20191031 02:26:37.445"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191031 02:26:37.446" starttime="20191031 02:26:37.445"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191031 02:26:37.447" starttime="20191031 02:26:37.446"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191031 02:26:37.448" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191031 02:26:37.448" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:26:37.448" starttime="20191031 02:26:37.447"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191031 02:26:37.449" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191031 02:26:37.449" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191031 02:26:37.449" starttime="20191031 02:26:37.448"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191031 02:26:37.450" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191031 02:26:37.450" starttime="20191031 02:26:37.449"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191031 02:26:37.451" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191031 02:26:37.451" starttime="20191031 02:26:37.451"></status>
</kw>
<msg timestamp="20191031 02:26:37.452" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191031 02:26:37.452" starttime="20191031 02:26:25.325"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191031 02:26:37.453" starttime="20191031 02:26:37.452"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191031 02:26:37.454" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191031 02:26:37.454" starttime="20191031 02:26:37.454"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191031 02:26:37.456" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191031 02:26:37.456" starttime="20191031 02:26:37.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191031 02:26:37.457" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191031 02:26:37.457" starttime="20191031 02:26:37.456"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:26:37.459" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:26:37.459" starttime="20191031 02:26:37.457"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:26:37.463" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:26:52.250" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:26:52.250" level="INFO">${output} = 2019-10-31 02:26:40 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191031 02:26:52.250" starttime="20191031 02:26:37.460"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:26:52.252" level="INFO">2019-10-31 02:26:40 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:26:41 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:26:42 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:26:43 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:26:44 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:26:45 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:26:46 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:26:47 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:26:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:26:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:26:50 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-31 02:26:50 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-31 02:26:50 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191031 02:26:52.252" starttime="20191031 02:26:52.251"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:26:52.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:26:52.254" starttime="20191031 02:26:52.253"></status>
</kw>
<status status="PASS" endtime="20191031 02:26:52.254" starttime="20191031 02:26:37.459"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:26:52.259" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:27:04.691" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:27:04.691" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:27:04.691" starttime="20191031 02:26:52.256"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:27:04.692" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:27:04.692" starttime="20191031 02:27:04.691"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:27:04.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:27:04.693" starttime="20191031 02:27:04.692"></status>
</kw>
<msg timestamp="20191031 02:27:04.693" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:27:04.693" starttime="20191031 02:26:52.254"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:27:04.694" starttime="20191031 02:27:04.693"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:27:04.695" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:27:04.695" starttime="20191031 02:27:04.694"></status>
</kw>
<status status="PASS" endtime="20191031 02:27:04.695" starttime="20191031 02:26:37.453"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:27:04.697" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191031 02:27:04.697" starttime="20191031 02:27:04.696"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:27:04.698" starttime="20191031 02:27:04.697"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:27:04.698" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:27:05.904" level="INFO">Read output: Last login: Thu Oct 31 02:26:22 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:27:05.904" starttime="20191031 02:27:04.698"></status>
</kw>
<status status="PASS" endtime="20191031 02:27:05.905" starttime="20191031 02:27:04.697"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191031 02:27:05.906" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191031 02:27:08.076" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:27:08.077" starttime="20191031 02:27:05.905"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191031 02:27:08.078" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:27:08.175" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:27:08.176" level="INFO">${startupMsg} = hadoop    1688  354  0.0 34480540 211264 ?     Sl   02:27   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191031 02:27:08.176" starttime="20191031 02:27:08.077"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:27:08.242" starttime="20191031 02:27:08.176"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:27:08.243" starttime="20191031 02:27:08.242"></status>
</kw>
<status status="PASS" endtime="20191031 02:27:08.243" starttime="20191031 02:27:04.696"></status>
</kw>
<status status="PASS" endtime="20191031 02:27:08.243" starttime="20191031 02:26:20.905"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:27:08.248" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:27:11.142" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:27:11.143" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:27:11.143" starttime="20191031 02:27:08.245"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:27:11.145" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:27:11.145" starttime="20191031 02:27:11.144"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:27:11.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:27:11.147" starttime="20191031 02:27:11.146"></status>
</kw>
<msg timestamp="20191031 02:27:11.148" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:27:11.148" starttime="20191031 02:27:08.244"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191031 02:27:11.149" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:27:11.149" starttime="20191031 02:27:11.148"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191031 02:27:11.150" starttime="20191031 02:27:11.150"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191031 02:27:11.151" starttime="20191031 02:27:11.151"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191031 02:27:11.152" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191031 02:27:11.152" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191031 02:27:11.152" starttime="20191031 02:27:11.152"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191031 02:27:11.154" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191031 02:27:11.154" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191031 02:27:11.154" starttime="20191031 02:27:11.153"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191031 02:27:11.155" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191031 02:27:11.155" starttime="20191031 02:27:11.154"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191031 02:27:11.156" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191031 02:27:11.156" starttime="20191031 02:27:11.155"></status>
</kw>
<msg timestamp="20191031 02:27:11.157" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191031 02:27:11.157" starttime="20191031 02:27:08.244"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:27:11.159" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191031 02:27:11.159" starttime="20191031 02:27:11.158"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:27:11.161" starttime="20191031 02:27:11.160"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:27:11.162" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:27:12.367" level="INFO">Read output: Last login: Thu Oct 31 02:26:17 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:27:12.367" starttime="20191031 02:27:11.162"></status>
</kw>
<status status="PASS" endtime="20191031 02:27:12.368" starttime="20191031 02:27:11.159"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191031 02:27:12.369" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191031 02:27:13.548" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:27:13.548" starttime="20191031 02:27:12.368"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191031 02:27:13.549" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:27:13.657" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:27:13.658" level="INFO">${shutdownMsg} = hadoop    1681  0.0  0.0   9556  1168 ?        Ss   02:27   0:00 bash -c sudo ps aux | grep om
hadoop    1683  0.0  0.0   9088   672 ?        S    02:27   0:00 grep om</msg>
<status status="PASS" endtime="20191031 02:27:13.658" starttime="20191031 02:27:13.549"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:27:13.691" starttime="20191031 02:27:13.658"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:27:13.692" starttime="20191031 02:27:13.691"></status>
</kw>
<msg timestamp="20191031 02:27:13.692" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191031 02:27:13.693" starttime="20191031 02:27:11.157"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:27:13.698" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:27:26.005" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:27:26.006" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:27:26.006" starttime="20191031 02:27:13.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:27:26.008" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:27:26.008" starttime="20191031 02:27:26.007"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:27:26.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:27:26.009" starttime="20191031 02:27:26.008"></status>
</kw>
<msg timestamp="20191031 02:27:26.010" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:27:26.010" starttime="20191031 02:27:13.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191031 02:27:26.011" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:27:26.011" starttime="20191031 02:27:26.010"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191031 02:27:26.012" starttime="20191031 02:27:26.011"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191031 02:27:26.013" starttime="20191031 02:27:26.013"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191031 02:27:26.014" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191031 02:27:26.014" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191031 02:27:26.015" starttime="20191031 02:27:26.014"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191031 02:27:26.016" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191031 02:27:26.016" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191031 02:27:26.016" starttime="20191031 02:27:26.015"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191031 02:27:26.017" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191031 02:27:26.017" starttime="20191031 02:27:26.016"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191031 02:27:26.018" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191031 02:27:26.018" starttime="20191031 02:27:26.017"></status>
</kw>
<msg timestamp="20191031 02:27:26.019" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191031 02:27:26.019" starttime="20191031 02:27:13.693"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191031 02:27:26.020" starttime="20191031 02:27:26.019"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191031 02:27:26.021" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191031 02:27:26.022" starttime="20191031 02:27:26.021"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191031 02:27:26.023" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191031 02:27:26.023" starttime="20191031 02:27:26.022"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191031 02:27:26.024" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191031 02:27:26.024" starttime="20191031 02:27:26.023"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:27:26.026" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:27:26.026" starttime="20191031 02:27:26.024"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:27:26.030" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:27:40.915" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:27:40.915" level="INFO">${output} = 2019-10-31 02:27:29 INFO  Client:948 - Retrying connect to server: om2/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191031 02:27:40.915" starttime="20191031 02:27:26.028"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:27:40.917" level="INFO">2019-10-31 02:27:29 INFO  Client:948 - Retrying connect to server: om2/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:27:30 INFO  Client:948 - Retrying connect to server: om2/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:27:31 INFO  Client:948 - Retrying connect to server: om2/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:27:32 INFO  Client:948 - Retrying connect to server: om2/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:27:33 INFO  Client:948 - Retrying connect to server: om2/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:27:34 INFO  Client:948 - Retrying connect to server: om2/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:27:35 INFO  Client:948 - Retrying connect to server: om2/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:27:36 INFO  Client:948 - Retrying connect to server: om2/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:27:37 INFO  Client:948 - Retrying connect to server: om2/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:27:38 INFO  Client:948 - Retrying connect to server: om2/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-10-31 02:27:38 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: java.net.ConnectException: Call From b9c10f7512a3/172.18.0.8 to om2:9862 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-10-31 02:27:39 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-10-31 02:27:39 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-10-31 02:27:39 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191031 02:27:40.918" starttime="20191031 02:27:40.916"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:27:40.918" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:27:40.919" starttime="20191031 02:27:40.918"></status>
</kw>
<status status="PASS" endtime="20191031 02:27:40.919" starttime="20191031 02:27:26.027"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191031 02:27:40.924" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191031 02:27:53.401" level="INFO">${rc} = 0</msg>
<msg timestamp="20191031 02:27:53.402" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:27:53.402" starttime="20191031 02:27:40.921"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191031 02:27:53.403" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:27:53.404" starttime="20191031 02:27:53.403"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191031 02:27:53.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191031 02:27:53.405" starttime="20191031 02:27:53.404"></status>
</kw>
<msg timestamp="20191031 02:27:53.405" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191031 02:27:53.405" starttime="20191031 02:27:40.919"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:27:53.406" starttime="20191031 02:27:53.406"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191031 02:27:53.408" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191031 02:27:53.408" starttime="20191031 02:27:53.407"></status>
</kw>
<status status="PASS" endtime="20191031 02:27:53.408" starttime="20191031 02:27:26.020"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191031 02:27:53.410" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191031 02:27:53.410" starttime="20191031 02:27:53.409"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191031 02:27:53.412" starttime="20191031 02:27:53.411"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191031 02:27:53.413" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191031 02:27:54.621" level="INFO">Read output: Last login: Thu Oct 31 02:27:11 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191031 02:27:54.621" starttime="20191031 02:27:53.412"></status>
</kw>
<status status="PASS" endtime="20191031 02:27:54.622" starttime="20191031 02:27:53.410"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191031 02:27:54.623" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191031 02:27:56.792" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191031 02:27:56.792" starttime="20191031 02:27:54.622"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191031 02:27:56.793" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191031 02:27:56.891" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191031 02:27:56.892" level="INFO">${startupMsg} = hadoop    1733  347  0.0 34475560 204024 ?     Sl   02:27   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191031 02:27:56.892" starttime="20191031 02:27:56.793"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191031 02:27:56.957" starttime="20191031 02:27:56.892"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191031 02:27:56.958" starttime="20191031 02:27:56.957"></status>
</kw>
<status status="PASS" endtime="20191031 02:27:56.958" starttime="20191031 02:27:53.408"></status>
</kw>
<status status="PASS" endtime="20191031 02:27:56.959" starttime="20191031 02:27:08.243"></status>
</kw>
<status status="PASS" endtime="20191031 02:27:56.959" starttime="20191031 02:24:28.733"></status>
</kw>
<status status="PASS" endtime="20191031 02:27:56.959" critical="yes" starttime="20191031 02:24:28.732"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191031 02:27:56.962" starttime="20191031 02:20:30.574"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
