<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191116 07:29:22.178" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191116 07:29:22.317" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191116 07:29:25.047" level="INFO">${rc} = 0</msg>
<msg timestamp="20191116 07:29:25.047" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191116 07:29:25.047" starttime="20191116 07:29:22.316"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191116 07:29:25.048" level="INFO"></msg>
<status status="PASS" endtime="20191116 07:29:25.048" starttime="20191116 07:29:25.047"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191116 07:29:25.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191116 07:29:25.049" starttime="20191116 07:29:25.048"></status>
</kw>
<status status="PASS" endtime="20191116 07:29:25.049" starttime="20191116 07:29:22.315"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191116 07:29:25.054" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191116 07:29:27.172" level="INFO">${rc} = 0</msg>
<msg timestamp="20191116 07:29:27.172" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191116 07:29:27.172" starttime="20191116 07:29:25.053"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191116 07:29:27.173" level="INFO"></msg>
<status status="PASS" endtime="20191116 07:29:27.174" starttime="20191116 07:29:27.173"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191116 07:29:27.174" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191116 07:29:27.174" starttime="20191116 07:29:27.174"></status>
</kw>
<status status="PASS" endtime="20191116 07:29:27.175" starttime="20191116 07:29:25.049"></status>
</kw>
<status status="PASS" endtime="20191116 07:29:27.175" starttime="20191116 07:29:22.315"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191116 07:29:27.176" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191116 07:29:27.176" starttime="20191116 07:29:27.175"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191116 07:29:27.177" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191116 07:29:27.177" starttime="20191116 07:29:27.176"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191116 07:29:27.178" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191116 07:29:27.178" starttime="20191116 07:29:27.177"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191116 07:29:27.179" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191116 07:29:27.180" starttime="20191116 07:29:27.178"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191116 07:29:27.182" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191116 07:29:31.962" level="INFO">${rc} = 0</msg>
<msg timestamp="20191116 07:29:31.962" level="INFO">${output} = 2019-11-16 07:29:29 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-16 07:29:30 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191116 07:29:31.962" starttime="20191116 07:29:27.180"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191116 07:29:31.964" level="INFO">2019-11-16 07:29:29 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-16 07:29:30 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-16 07:29:30 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191116 07:29:31.964" starttime="20191116 07:29:31.963"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191116 07:29:31.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191116 07:29:31.966" starttime="20191116 07:29:31.965"></status>
</kw>
<status status="PASS" endtime="20191116 07:29:31.966" starttime="20191116 07:29:27.180"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191116 07:29:31.970" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191116 07:29:34.073" level="INFO">${rc} = 0</msg>
<msg timestamp="20191116 07:29:34.073" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191116 07:29:34.073" starttime="20191116 07:29:31.968"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191116 07:29:34.074" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191116 07:29:34.074" starttime="20191116 07:29:34.074"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191116 07:29:34.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191116 07:29:34.075" starttime="20191116 07:29:34.075"></status>
</kw>
<msg timestamp="20191116 07:29:34.076" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191116 07:29:34.076" starttime="20191116 07:29:31.966"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:34.078" starttime="20191116 07:29:34.077"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191116 07:29:34.079" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191116 07:29:34.080" starttime="20191116 07:29:34.078"></status>
</kw>
<status status="PASS" endtime="20191116 07:29:34.080" starttime="20191116 07:29:27.175"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191116 07:29:34.085" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191116 07:29:35.934" level="INFO">${rc} = 0</msg>
<msg timestamp="20191116 07:29:35.934" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:35.934" starttime="20191116 07:29:34.083"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191116 07:29:35.935" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:35.935" starttime="20191116 07:29:35.934"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191116 07:29:35.936" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191116 07:29:35.936" starttime="20191116 07:29:35.935"></status>
</kw>
<msg timestamp="20191116 07:29:35.936" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:35.936" starttime="20191116 07:29:34.081"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191116 07:29:35.936" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:35.937" starttime="20191116 07:29:35.936"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:35.937" starttime="20191116 07:29:35.937"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:35.938" starttime="20191116 07:29:35.937"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191116 07:29:35.938" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191116 07:29:35.938" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:35.938" starttime="20191116 07:29:35.938"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191116 07:29:35.939" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191116 07:29:35.939" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191116 07:29:35.939" starttime="20191116 07:29:35.938"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191116 07:29:35.939" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191116 07:29:35.939" starttime="20191116 07:29:35.939"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191116 07:29:35.940" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191116 07:29:35.940" starttime="20191116 07:29:35.939"></status>
</kw>
<msg timestamp="20191116 07:29:35.940" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191116 07:29:35.940" starttime="20191116 07:29:34.080"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191116 07:29:35.941" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191116 07:29:35.941" starttime="20191116 07:29:35.941"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:35.942" starttime="20191116 07:29:35.942"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191116 07:29:35.942" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191116 07:29:37.132" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191116 07:29:37.132" starttime="20191116 07:29:35.942"></status>
</kw>
<status status="PASS" endtime="20191116 07:29:37.133" starttime="20191116 07:29:35.941"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191116 07:29:37.133" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191116 07:29:37.148" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191116 07:29:37.149" starttime="20191116 07:29:37.133"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191116 07:29:37.149" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191116 07:29:37.227" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191116 07:29:37.227" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191116 07:29:37.227" starttime="20191116 07:29:37.149"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191116 07:29:37.342" starttime="20191116 07:29:37.228"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:37.343" starttime="20191116 07:29:37.343"></status>
</kw>
<msg timestamp="20191116 07:29:37.343" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191116 07:29:37.344" starttime="20191116 07:29:35.940"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191116 07:29:37.347" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191116 07:29:39.355" level="INFO">${rc} = 0</msg>
<msg timestamp="20191116 07:29:39.355" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:39.355" starttime="20191116 07:29:37.345"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191116 07:29:39.356" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:39.356" starttime="20191116 07:29:39.356"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191116 07:29:39.357" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191116 07:29:39.357" starttime="20191116 07:29:39.357"></status>
</kw>
<msg timestamp="20191116 07:29:39.358" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:39.358" starttime="20191116 07:29:37.344"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191116 07:29:39.358" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:39.358" starttime="20191116 07:29:39.358"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:39.359" starttime="20191116 07:29:39.359"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:39.360" starttime="20191116 07:29:39.359"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191116 07:29:39.360" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191116 07:29:39.361" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:39.361" starttime="20191116 07:29:39.360"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191116 07:29:39.361" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191116 07:29:39.362" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191116 07:29:39.362" starttime="20191116 07:29:39.361"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191116 07:29:39.362" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191116 07:29:39.362" starttime="20191116 07:29:39.362"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191116 07:29:39.363" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191116 07:29:39.363" starttime="20191116 07:29:39.363"></status>
</kw>
<msg timestamp="20191116 07:29:39.363" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191116 07:29:39.363" starttime="20191116 07:29:37.344"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191116 07:29:39.365" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191116 07:29:39.365" starttime="20191116 07:29:39.364"></status>
</kw>
<status status="FAIL" endtime="20191116 07:29:39.365" critical="yes" starttime="20191116 07:29:22.314">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191116 07:29:39.368" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191116 07:29:39.368" starttime="20191116 07:29:39.366"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191116 07:29:39.370" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191116 07:29:39.370" starttime="20191116 07:29:39.368"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191116 07:29:39.371" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191116 07:29:39.371" starttime="20191116 07:29:39.371"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:39.373" starttime="20191116 07:29:39.372"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191116 07:29:39.374" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191116 07:29:40.572" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191116 07:29:40.573" starttime="20191116 07:29:39.373"></status>
</kw>
<status status="PASS" endtime="20191116 07:29:40.573" starttime="20191116 07:29:39.372"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191116 07:29:40.574" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191116 07:29:40.588" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191116 07:29:40.588" starttime="20191116 07:29:40.573"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191116 07:29:40.589" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191116 07:29:40.665" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191116 07:29:40.666" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191116 07:29:40.666" starttime="20191116 07:29:40.588"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191116 07:29:40.781" starttime="20191116 07:29:40.666"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:40.782" starttime="20191116 07:29:40.781"></status>
</kw>
<status status="PASS" endtime="20191116 07:29:40.782" starttime="20191116 07:29:39.370"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191116 07:29:40.784" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191116 07:29:40.785" starttime="20191116 07:29:40.784"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:40.786" starttime="20191116 07:29:40.785"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191116 07:29:40.787" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191116 07:29:41.992" level="INFO">Read output: Last login: Sat Nov 16 07:29:39 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191116 07:29:41.992" starttime="20191116 07:29:40.787"></status>
</kw>
<status status="PASS" endtime="20191116 07:29:41.993" starttime="20191116 07:29:40.785"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191116 07:29:41.994" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191116 07:29:42.009" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191116 07:29:42.009" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191116 07:29:42.010" starttime="20191116 07:29:41.993"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191116 07:29:42.011" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191116 07:29:42.011" starttime="20191116 07:29:42.010"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191116 07:29:42.012" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191116 07:29:42.012" starttime="20191116 07:29:42.011"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191116 07:29:42.057" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191116 07:29:42.057" starttime="20191116 07:29:42.012"></status>
</kw>
<status status="FAIL" endtime="20191116 07:29:42.058" starttime="20191116 07:29:40.783"></status>
</kw>
<status status="FAIL" endtime="20191116 07:29:42.058" critical="yes" starttime="20191116 07:29:39.366">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191116 07:29:42.064" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191116 07:29:44.032" level="INFO">${rc} = 0</msg>
<msg timestamp="20191116 07:29:44.032" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:44.032" starttime="20191116 07:29:42.061"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191116 07:29:44.033" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:44.033" starttime="20191116 07:29:44.032"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191116 07:29:44.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191116 07:29:44.034" starttime="20191116 07:29:44.033"></status>
</kw>
<msg timestamp="20191116 07:29:44.034" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:44.034" starttime="20191116 07:29:42.061"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191116 07:29:44.035" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:44.035" starttime="20191116 07:29:44.035"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:44.036" starttime="20191116 07:29:44.035"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:44.036" starttime="20191116 07:29:44.036"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191116 07:29:44.037" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191116 07:29:44.037" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:44.037" starttime="20191116 07:29:44.036"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191116 07:29:44.037" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191116 07:29:44.038" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191116 07:29:44.038" starttime="20191116 07:29:44.037"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191116 07:29:44.038" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191116 07:29:44.038" starttime="20191116 07:29:44.038"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191116 07:29:44.039" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191116 07:29:44.039" starttime="20191116 07:29:44.038"></status>
</kw>
<msg timestamp="20191116 07:29:44.039" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191116 07:29:44.039" starttime="20191116 07:29:42.060"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191116 07:29:44.040" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191116 07:29:44.040" starttime="20191116 07:29:44.040"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:44.042" starttime="20191116 07:29:44.041"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191116 07:29:44.042" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191116 07:29:45.240" level="INFO">Read output: Last login: Sat Nov 16 07:29:36 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191116 07:29:45.241" starttime="20191116 07:29:44.042"></status>
</kw>
<status status="PASS" endtime="20191116 07:29:45.241" starttime="20191116 07:29:44.041"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191116 07:29:45.242" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191116 07:29:45.257" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191116 07:29:45.258" starttime="20191116 07:29:45.242"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191116 07:29:45.259" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191116 07:29:45.336" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191116 07:29:45.337" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191116 07:29:45.337" starttime="20191116 07:29:45.258"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191116 07:29:45.451" starttime="20191116 07:29:45.337"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:45.452" starttime="20191116 07:29:45.452"></status>
</kw>
<msg timestamp="20191116 07:29:45.452" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191116 07:29:45.452" starttime="20191116 07:29:44.039"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191116 07:29:45.455" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191116 07:29:47.344" level="INFO">${rc} = 0</msg>
<msg timestamp="20191116 07:29:47.344" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:47.344" starttime="20191116 07:29:45.453"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191116 07:29:47.346" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:47.346" starttime="20191116 07:29:47.345"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191116 07:29:47.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191116 07:29:47.347" starttime="20191116 07:29:47.347"></status>
</kw>
<msg timestamp="20191116 07:29:47.348" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:47.348" starttime="20191116 07:29:45.453"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191116 07:29:47.349" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:47.349" starttime="20191116 07:29:47.348"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:47.350" starttime="20191116 07:29:47.349"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191116 07:29:47.351" starttime="20191116 07:29:47.350"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191116 07:29:47.351" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191116 07:29:47.352" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191116 07:29:47.352" starttime="20191116 07:29:47.351"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191116 07:29:47.353" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191116 07:29:47.353" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191116 07:29:47.353" starttime="20191116 07:29:47.352"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191116 07:29:47.354" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191116 07:29:47.354" starttime="20191116 07:29:47.353"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191116 07:29:47.354" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191116 07:29:47.354" starttime="20191116 07:29:47.354"></status>
</kw>
<msg timestamp="20191116 07:29:47.355" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191116 07:29:47.355" starttime="20191116 07:29:45.453"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191116 07:29:47.356" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191116 07:29:47.356" starttime="20191116 07:29:47.355"></status>
</kw>
<status status="FAIL" endtime="20191116 07:29:47.356" starttime="20191116 07:29:42.060"></status>
</kw>
<status status="FAIL" endtime="20191116 07:29:47.357" starttime="20191116 07:29:42.059"></status>
</kw>
<status status="FAIL" endtime="20191116 07:29:47.357" critical="yes" starttime="20191116 07:29:42.059">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191116 07:29:47.358" starttime="20191116 07:29:22.179"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
