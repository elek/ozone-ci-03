<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191113 12:34:58.871" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 12:34:59.018" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 12:35:01.939" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 12:35:01.939" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 12:35:01.939" starttime="20191113 12:34:59.016"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 12:35:01.941" level="INFO"></msg>
<status status="PASS" endtime="20191113 12:35:01.941" starttime="20191113 12:35:01.940"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 12:35:01.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 12:35:01.942" starttime="20191113 12:35:01.941"></status>
</kw>
<status status="PASS" endtime="20191113 12:35:01.942" starttime="20191113 12:34:59.015"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 12:35:01.948" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 12:35:04.045" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 12:35:04.045" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 12:35:04.045" starttime="20191113 12:35:01.946"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 12:35:04.047" level="INFO"></msg>
<status status="PASS" endtime="20191113 12:35:04.047" starttime="20191113 12:35:04.046"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 12:35:04.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 12:35:04.048" starttime="20191113 12:35:04.047"></status>
</kw>
<status status="PASS" endtime="20191113 12:35:04.048" starttime="20191113 12:35:01.942"></status>
</kw>
<status status="PASS" endtime="20191113 12:35:04.048" starttime="20191113 12:34:59.015"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 12:35:04.049" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191113 12:35:04.049" starttime="20191113 12:35:04.049"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 12:35:04.050" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191113 12:35:04.050" starttime="20191113 12:35:04.050"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 12:35:04.051" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191113 12:35:04.051" starttime="20191113 12:35:04.050"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 12:35:04.053" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 12:35:04.053" starttime="20191113 12:35:04.051"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 12:35:04.056" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 12:35:08.538" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 12:35:08.538" level="INFO">${output} = 2019-11-13 12:35:06 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 12:35:06 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 12:35:08.538" starttime="20191113 12:35:04.054"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 12:35:08.540" level="INFO">2019-11-13 12:35:06 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 12:35:06 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 12:35:06 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 12:35:08.540" starttime="20191113 12:35:08.539"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 12:35:08.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 12:35:08.541" starttime="20191113 12:35:08.540"></status>
</kw>
<status status="PASS" endtime="20191113 12:35:08.542" starttime="20191113 12:35:04.053"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 12:35:08.546" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 12:35:10.641" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 12:35:10.641" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191113 12:35:10.641" starttime="20191113 12:35:08.544"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 12:35:10.643" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191113 12:35:10.643" starttime="20191113 12:35:10.642"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 12:35:10.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 12:35:10.644" starttime="20191113 12:35:10.643"></status>
</kw>
<msg timestamp="20191113 12:35:10.644" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191113 12:35:10.644" starttime="20191113 12:35:08.542"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:10.645" starttime="20191113 12:35:10.645"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 12:35:10.646" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 12:35:10.646" starttime="20191113 12:35:10.645"></status>
</kw>
<status status="PASS" endtime="20191113 12:35:10.647" starttime="20191113 12:35:04.048"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 12:35:10.650" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 12:35:12.552" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 12:35:12.552" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:12.552" starttime="20191113 12:35:10.648"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 12:35:12.554" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:12.554" starttime="20191113 12:35:12.553"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 12:35:12.554" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 12:35:12.554" starttime="20191113 12:35:12.554"></status>
</kw>
<msg timestamp="20191113 12:35:12.555" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:12.555" starttime="20191113 12:35:10.647"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 12:35:12.555" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:12.555" starttime="20191113 12:35:12.555"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:12.556" starttime="20191113 12:35:12.556"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:12.557" starttime="20191113 12:35:12.556"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 12:35:12.557" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 12:35:12.557" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:12.557" starttime="20191113 12:35:12.557"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 12:35:12.558" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 12:35:12.558" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 12:35:12.558" starttime="20191113 12:35:12.558"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 12:35:12.559" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 12:35:12.559" starttime="20191113 12:35:12.558"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 12:35:12.559" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 12:35:12.559" starttime="20191113 12:35:12.559"></status>
</kw>
<msg timestamp="20191113 12:35:12.560" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 12:35:12.560" starttime="20191113 12:35:10.647"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 12:35:12.561" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 12:35:12.561" starttime="20191113 12:35:12.560"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:12.562" starttime="20191113 12:35:12.561"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 12:35:12.563" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 12:35:13.768" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191113 12:35:13.768" starttime="20191113 12:35:12.562"></status>
</kw>
<status status="PASS" endtime="20191113 12:35:13.769" starttime="20191113 12:35:12.561"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 12:35:13.770" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 12:35:31.906" level="INFO">Command exited with return code 254.</msg>
<status status="PASS" endtime="20191113 12:35:31.907" starttime="20191113 12:35:13.769"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 12:35:31.908" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 12:35:31.985" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 12:35:31.986" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191113 12:35:31.986" starttime="20191113 12:35:31.907"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 12:35:32.051" starttime="20191113 12:35:31.986"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:32.052" starttime="20191113 12:35:32.051"></status>
</kw>
<msg timestamp="20191113 12:35:32.052" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 12:35:32.052" starttime="20191113 12:35:12.560"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 12:35:32.056" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 12:35:34.140" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 12:35:34.140" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:34.141" starttime="20191113 12:35:32.054"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 12:35:34.142" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:34.142" starttime="20191113 12:35:34.141"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 12:35:34.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 12:35:34.143" starttime="20191113 12:35:34.143"></status>
</kw>
<msg timestamp="20191113 12:35:34.144" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:34.144" starttime="20191113 12:35:32.053"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 12:35:34.145" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:34.145" starttime="20191113 12:35:34.144"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:34.146" starttime="20191113 12:35:34.145"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:34.146" starttime="20191113 12:35:34.146"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 12:35:34.147" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 12:35:34.147" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:34.147" starttime="20191113 12:35:34.146"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 12:35:34.148" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 12:35:34.148" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 12:35:34.148" starttime="20191113 12:35:34.147"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 12:35:34.149" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 12:35:34.149" starttime="20191113 12:35:34.148"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 12:35:34.150" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 12:35:34.150" starttime="20191113 12:35:34.149"></status>
</kw>
<msg timestamp="20191113 12:35:34.150" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191113 12:35:34.150" starttime="20191113 12:35:32.053"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:34.151" starttime="20191113 12:35:34.150"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 12:35:34.153" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191113 12:35:34.153" starttime="20191113 12:35:34.152"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 12:35:34.154" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191113 12:35:34.154" starttime="20191113 12:35:34.153"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 12:35:34.155" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191113 12:35:34.155" starttime="20191113 12:35:34.154"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 12:35:34.157" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 12:35:34.157" starttime="20191113 12:35:34.155"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 12:35:34.161" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 12:35:38.838" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 12:35:38.838" level="INFO">${output} = 2019-11-13 12:35:36 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 12:35:36 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 12:35:38.838" starttime="20191113 12:35:34.158"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 12:35:38.840" level="INFO">2019-11-13 12:35:36 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 12:35:36 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 12:35:36 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 12:35:38.840" starttime="20191113 12:35:38.839"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 12:35:38.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 12:35:38.842" starttime="20191113 12:35:38.841"></status>
</kw>
<status status="PASS" endtime="20191113 12:35:38.843" starttime="20191113 12:35:34.157"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 12:35:38.847" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 12:35:41.004" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 12:35:41.004" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 12:35:41.004" starttime="20191113 12:35:38.844"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 12:35:41.005" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 12:35:41.005" starttime="20191113 12:35:41.005"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 12:35:41.006" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 12:35:41.006" starttime="20191113 12:35:41.006"></status>
</kw>
<msg timestamp="20191113 12:35:41.007" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 12:35:41.007" starttime="20191113 12:35:38.843"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:41.007" starttime="20191113 12:35:41.007"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 12:35:41.008" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 12:35:41.008" starttime="20191113 12:35:41.008"></status>
</kw>
<status status="PASS" endtime="20191113 12:35:41.009" starttime="20191113 12:35:34.151"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 12:35:41.010" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 12:35:41.010" starttime="20191113 12:35:41.010"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:41.012" starttime="20191113 12:35:41.011"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 12:35:41.012" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 12:35:42.210" level="INFO">Read output: Last login: Wed Nov 13 12:35:12 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 12:35:42.211" starttime="20191113 12:35:41.012"></status>
</kw>
<status status="PASS" endtime="20191113 12:35:42.211" starttime="20191113 12:35:41.010"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 12:35:42.212" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 12:35:42.227" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191113 12:35:42.227" starttime="20191113 12:35:42.212"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 12:35:42.228" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 12:35:42.305" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 12:35:42.306" level="INFO">${startupMsg} = </msg>
<status status="PASS" endtime="20191113 12:35:42.306" starttime="20191113 12:35:42.228"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 12:35:42.420" starttime="20191113 12:35:42.306"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<msg timestamp="20191113 12:35:42.422" level="FAIL">'' does not contain 'OzoneManagerStarter'</msg>
<status status="FAIL" endtime="20191113 12:35:42.422" starttime="20191113 12:35:42.421"></status>
</kw>
<status status="FAIL" endtime="20191113 12:35:42.422" starttime="20191113 12:35:41.009"></status>
</kw>
<status status="FAIL" endtime="20191113 12:35:42.423" critical="yes" starttime="20191113 12:34:59.014">'' does not contain 'OzoneManagerStarter'</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191113 12:35:42.426" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191113 12:35:42.426" starttime="20191113 12:35:42.424"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191113 12:35:42.428" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191113 12:35:42.428" starttime="20191113 12:35:42.427"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 12:35:42.430" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 12:35:42.430" starttime="20191113 12:35:42.429"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:42.432" starttime="20191113 12:35:42.431"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 12:35:42.433" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 12:35:43.637" level="INFO">Read output: Last login: Wed Nov 13 12:35:41 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 12:35:43.637" starttime="20191113 12:35:42.433"></status>
</kw>
<status status="PASS" endtime="20191113 12:35:43.637" starttime="20191113 12:35:42.430"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 12:35:43.638" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 12:35:43.654" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191113 12:35:43.654" starttime="20191113 12:35:43.638"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 12:35:43.654" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 12:35:43.732" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 12:35:43.732" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191113 12:35:43.732" starttime="20191113 12:35:43.654"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 12:35:43.847" starttime="20191113 12:35:43.732"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:43.848" starttime="20191113 12:35:43.847"></status>
</kw>
<status status="PASS" endtime="20191113 12:35:43.849" starttime="20191113 12:35:42.429"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 12:35:43.851" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 12:35:43.851" starttime="20191113 12:35:43.850"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:43.853" starttime="20191113 12:35:43.852"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 12:35:43.854" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 12:35:45.057" level="INFO">Read output: Last login: Wed Nov 13 12:35:42 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 12:35:45.057" starttime="20191113 12:35:43.853"></status>
</kw>
<status status="PASS" endtime="20191113 12:35:45.058" starttime="20191113 12:35:43.851"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 12:35:45.059" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 12:35:45.074" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 12:35:45.075" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191113 12:35:45.075" starttime="20191113 12:35:45.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 12:35:45.076" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191113 12:35:45.076" starttime="20191113 12:35:45.075"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 12:35:45.077" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191113 12:35:45.077" starttime="20191113 12:35:45.076"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 12:35:45.123" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191113 12:35:45.123" starttime="20191113 12:35:45.078"></status>
</kw>
<status status="FAIL" endtime="20191113 12:35:45.124" starttime="20191113 12:35:43.849"></status>
</kw>
<status status="FAIL" endtime="20191113 12:35:45.124" critical="yes" starttime="20191113 12:35:42.423">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 12:35:45.130" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 12:35:47.225" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 12:35:47.225" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:47.225" starttime="20191113 12:35:45.127"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 12:35:47.226" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:47.226" starttime="20191113 12:35:47.226"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 12:35:47.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 12:35:47.227" starttime="20191113 12:35:47.226"></status>
</kw>
<msg timestamp="20191113 12:35:47.227" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:47.227" starttime="20191113 12:35:45.127"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 12:35:47.228" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:47.228" starttime="20191113 12:35:47.228"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:47.229" starttime="20191113 12:35:47.228"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:47.229" starttime="20191113 12:35:47.229"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 12:35:47.230" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 12:35:47.230" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:47.230" starttime="20191113 12:35:47.229"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 12:35:47.230" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 12:35:47.231" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 12:35:47.231" starttime="20191113 12:35:47.230"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 12:35:47.231" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 12:35:47.231" starttime="20191113 12:35:47.231"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 12:35:47.232" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 12:35:47.232" starttime="20191113 12:35:47.231"></status>
</kw>
<msg timestamp="20191113 12:35:47.232" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 12:35:47.232" starttime="20191113 12:35:45.126"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 12:35:47.233" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 12:35:47.234" starttime="20191113 12:35:47.233"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:47.235" starttime="20191113 12:35:47.234"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 12:35:47.235" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 12:35:48.440" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 12:35:48.440" starttime="20191113 12:35:47.235"></status>
</kw>
<status status="PASS" endtime="20191113 12:35:48.441" starttime="20191113 12:35:47.234"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 12:35:48.442" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 12:35:48.457" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191113 12:35:48.457" starttime="20191113 12:35:48.441"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 12:35:48.458" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 12:35:48.535" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 12:35:48.536" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191113 12:35:48.536" starttime="20191113 12:35:48.457"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 12:35:48.651" starttime="20191113 12:35:48.536"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:48.652" starttime="20191113 12:35:48.651"></status>
</kw>
<msg timestamp="20191113 12:35:48.653" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 12:35:48.653" starttime="20191113 12:35:47.232"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 12:35:48.658" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 12:35:50.668" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 12:35:50.669" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:50.669" starttime="20191113 12:35:48.654"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 12:35:50.670" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:50.670" starttime="20191113 12:35:50.669"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 12:35:50.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 12:35:50.671" starttime="20191113 12:35:50.671"></status>
</kw>
<msg timestamp="20191113 12:35:50.672" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:50.672" starttime="20191113 12:35:48.654"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 12:35:50.672" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:50.673" starttime="20191113 12:35:50.672"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:50.673" starttime="20191113 12:35:50.673"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 12:35:50.674" starttime="20191113 12:35:50.673"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 12:35:50.675" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 12:35:50.675" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 12:35:50.675" starttime="20191113 12:35:50.674"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 12:35:50.676" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 12:35:50.676" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 12:35:50.676" starttime="20191113 12:35:50.675"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 12:35:50.677" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 12:35:50.677" starttime="20191113 12:35:50.676"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 12:35:50.677" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 12:35:50.677" starttime="20191113 12:35:50.677"></status>
</kw>
<msg timestamp="20191113 12:35:50.678" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191113 12:35:50.678" starttime="20191113 12:35:48.653"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191113 12:35:50.679" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191113 12:35:50.679" starttime="20191113 12:35:50.678"></status>
</kw>
<status status="FAIL" endtime="20191113 12:35:50.679" starttime="20191113 12:35:45.126"></status>
</kw>
<status status="FAIL" endtime="20191113 12:35:50.679" starttime="20191113 12:35:45.125"></status>
</kw>
<status status="FAIL" endtime="20191113 12:35:50.680" critical="yes" starttime="20191113 12:35:45.125">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191113 12:35:50.681" starttime="20191113 12:34:58.871"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
