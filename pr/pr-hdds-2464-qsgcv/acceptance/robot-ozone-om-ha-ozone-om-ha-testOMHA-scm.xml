<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191112 23:00:58.399" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191112 23:00:58.575" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191112 23:01:01.033" level="INFO">${rc} = 0</msg>
<msg timestamp="20191112 23:01:01.033" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191112 23:01:01.033" starttime="20191112 23:00:58.574"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191112 23:01:01.034" level="INFO"></msg>
<status status="PASS" endtime="20191112 23:01:01.034" starttime="20191112 23:01:01.033"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191112 23:01:01.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191112 23:01:01.035" starttime="20191112 23:01:01.034"></status>
</kw>
<status status="PASS" endtime="20191112 23:01:01.035" starttime="20191112 23:00:58.573"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191112 23:01:01.041" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191112 23:01:02.984" level="INFO">${rc} = 0</msg>
<msg timestamp="20191112 23:01:02.984" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191112 23:01:02.984" starttime="20191112 23:01:01.039"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191112 23:01:02.986" level="INFO"></msg>
<status status="PASS" endtime="20191112 23:01:02.986" starttime="20191112 23:01:02.985"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191112 23:01:02.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191112 23:01:02.987" starttime="20191112 23:01:02.986"></status>
</kw>
<status status="PASS" endtime="20191112 23:01:02.987" starttime="20191112 23:01:01.036"></status>
</kw>
<status status="PASS" endtime="20191112 23:01:02.987" starttime="20191112 23:00:58.573"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191112 23:01:02.989" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191112 23:01:02.989" starttime="20191112 23:01:02.988"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191112 23:01:02.990" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191112 23:01:02.990" starttime="20191112 23:01:02.989"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191112 23:01:02.991" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191112 23:01:02.991" starttime="20191112 23:01:02.990"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191112 23:01:02.992" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191112 23:01:02.993" starttime="20191112 23:01:02.991"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191112 23:01:02.995" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191112 23:01:07.392" level="INFO">${rc} = 0</msg>
<msg timestamp="20191112 23:01:07.392" level="INFO">${output} = 2019-11-12 23:01:05 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-12 23:01:05 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191112 23:01:07.392" starttime="20191112 23:01:02.994"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191112 23:01:07.394" level="INFO">2019-11-12 23:01:05 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-12 23:01:05 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-12 23:01:05 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191112 23:01:07.394" starttime="20191112 23:01:07.393"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191112 23:01:07.394" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191112 23:01:07.395" starttime="20191112 23:01:07.394"></status>
</kw>
<status status="PASS" endtime="20191112 23:01:07.395" starttime="20191112 23:01:02.993"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191112 23:01:07.398" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191112 23:01:09.309" level="INFO">${rc} = 0</msg>
<msg timestamp="20191112 23:01:09.309" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191112 23:01:09.309" starttime="20191112 23:01:07.396"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191112 23:01:09.310" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191112 23:01:09.310" starttime="20191112 23:01:09.310"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191112 23:01:09.311" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191112 23:01:09.311" starttime="20191112 23:01:09.311"></status>
</kw>
<msg timestamp="20191112 23:01:09.311" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191112 23:01:09.311" starttime="20191112 23:01:07.395"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:09.312" starttime="20191112 23:01:09.312"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191112 23:01:09.312" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191112 23:01:09.313" starttime="20191112 23:01:09.312"></status>
</kw>
<status status="PASS" endtime="20191112 23:01:09.313" starttime="20191112 23:01:02.987"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191112 23:01:09.315" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191112 23:01:11.042" level="INFO">${rc} = 0</msg>
<msg timestamp="20191112 23:01:11.042" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:11.042" starttime="20191112 23:01:09.314"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191112 23:01:11.043" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:11.043" starttime="20191112 23:01:11.042"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191112 23:01:11.044" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191112 23:01:11.044" starttime="20191112 23:01:11.043"></status>
</kw>
<msg timestamp="20191112 23:01:11.044" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:11.044" starttime="20191112 23:01:09.313"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191112 23:01:11.044" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:11.045" starttime="20191112 23:01:11.044"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:11.045" starttime="20191112 23:01:11.045"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:11.046" starttime="20191112 23:01:11.046"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191112 23:01:11.046" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191112 23:01:11.047" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:11.047" starttime="20191112 23:01:11.046"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191112 23:01:11.047" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191112 23:01:11.047" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191112 23:01:11.047" starttime="20191112 23:01:11.047"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191112 23:01:11.048" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191112 23:01:11.048" starttime="20191112 23:01:11.047"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191112 23:01:11.048" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191112 23:01:11.048" starttime="20191112 23:01:11.048"></status>
</kw>
<msg timestamp="20191112 23:01:11.049" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191112 23:01:11.049" starttime="20191112 23:01:09.313"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191112 23:01:11.050" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191112 23:01:11.050" starttime="20191112 23:01:11.049"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:11.051" starttime="20191112 23:01:11.050"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191112 23:01:11.051" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191112 23:01:12.325" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191112 23:01:12.325" starttime="20191112 23:01:11.051"></status>
</kw>
<status status="PASS" endtime="20191112 23:01:12.326" starttime="20191112 23:01:11.050"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191112 23:01:12.326" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191112 23:01:12.341" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191112 23:01:12.341" starttime="20191112 23:01:12.326"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191112 23:01:12.342" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191112 23:01:12.418" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191112 23:01:12.418" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191112 23:01:12.418" starttime="20191112 23:01:12.341"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191112 23:01:12.533" starttime="20191112 23:01:12.419"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:12.534" starttime="20191112 23:01:12.533"></status>
</kw>
<msg timestamp="20191112 23:01:12.534" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191112 23:01:12.534" starttime="20191112 23:01:11.049"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191112 23:01:12.537" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191112 23:01:14.349" level="INFO">${rc} = 0</msg>
<msg timestamp="20191112 23:01:14.349" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:14.349" starttime="20191112 23:01:12.535"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191112 23:01:14.350" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:14.350" starttime="20191112 23:01:14.350"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191112 23:01:14.351" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191112 23:01:14.351" starttime="20191112 23:01:14.351"></status>
</kw>
<msg timestamp="20191112 23:01:14.352" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:14.352" starttime="20191112 23:01:12.535"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191112 23:01:14.352" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:14.352" starttime="20191112 23:01:14.352"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:14.353" starttime="20191112 23:01:14.352"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:14.354" starttime="20191112 23:01:14.353"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191112 23:01:14.354" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191112 23:01:14.354" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:14.354" starttime="20191112 23:01:14.354"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191112 23:01:14.355" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191112 23:01:14.355" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191112 23:01:14.355" starttime="20191112 23:01:14.355"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191112 23:01:14.356" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191112 23:01:14.356" starttime="20191112 23:01:14.355"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191112 23:01:14.357" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191112 23:01:14.357" starttime="20191112 23:01:14.356"></status>
</kw>
<msg timestamp="20191112 23:01:14.357" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191112 23:01:14.357" starttime="20191112 23:01:12.534"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191112 23:01:14.358" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191112 23:01:14.358" starttime="20191112 23:01:14.357"></status>
</kw>
<status status="FAIL" endtime="20191112 23:01:14.359" critical="yes" starttime="20191112 23:00:58.572">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191112 23:01:14.361" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191112 23:01:14.362" starttime="20191112 23:01:14.360"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191112 23:01:14.363" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191112 23:01:14.363" starttime="20191112 23:01:14.362"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191112 23:01:14.364" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191112 23:01:14.365" starttime="20191112 23:01:14.364"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:14.366" starttime="20191112 23:01:14.365"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191112 23:01:14.367" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191112 23:01:15.565" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191112 23:01:15.566" starttime="20191112 23:01:14.366"></status>
</kw>
<status status="PASS" endtime="20191112 23:01:15.566" starttime="20191112 23:01:14.365"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191112 23:01:15.567" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191112 23:01:15.581" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191112 23:01:15.581" starttime="20191112 23:01:15.566"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191112 23:01:15.582" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191112 23:01:15.658" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191112 23:01:15.658" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191112 23:01:15.659" starttime="20191112 23:01:15.581"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191112 23:01:15.773" starttime="20191112 23:01:15.659"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:15.775" starttime="20191112 23:01:15.774"></status>
</kw>
<status status="PASS" endtime="20191112 23:01:15.775" starttime="20191112 23:01:14.363"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191112 23:01:15.777" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191112 23:01:15.777" starttime="20191112 23:01:15.776"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:15.779" starttime="20191112 23:01:15.778"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191112 23:01:15.780" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191112 23:01:16.966" level="INFO">Read output: Last login: Tue Nov 12 23:01:14 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191112 23:01:16.966" starttime="20191112 23:01:15.779"></status>
</kw>
<status status="PASS" endtime="20191112 23:01:16.967" starttime="20191112 23:01:15.777"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191112 23:01:16.968" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191112 23:01:16.982" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191112 23:01:16.983" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191112 23:01:16.983" starttime="20191112 23:01:16.967"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191112 23:01:16.984" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191112 23:01:16.984" starttime="20191112 23:01:16.983"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191112 23:01:16.985" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191112 23:01:16.985" starttime="20191112 23:01:16.984"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191112 23:01:17.029" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191112 23:01:17.030" starttime="20191112 23:01:16.985"></status>
</kw>
<status status="FAIL" endtime="20191112 23:01:17.030" starttime="20191112 23:01:15.775"></status>
</kw>
<status status="FAIL" endtime="20191112 23:01:17.030" critical="yes" starttime="20191112 23:01:14.359">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191112 23:01:17.034" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191112 23:01:18.839" level="INFO">${rc} = 0</msg>
<msg timestamp="20191112 23:01:18.839" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:18.839" starttime="20191112 23:01:17.032"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191112 23:01:18.840" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:18.840" starttime="20191112 23:01:18.840"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191112 23:01:18.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191112 23:01:18.841" starttime="20191112 23:01:18.840"></status>
</kw>
<msg timestamp="20191112 23:01:18.841" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:18.841" starttime="20191112 23:01:17.032"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191112 23:01:18.842" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:18.842" starttime="20191112 23:01:18.842"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:18.843" starttime="20191112 23:01:18.842"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:18.843" starttime="20191112 23:01:18.843"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191112 23:01:18.844" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191112 23:01:18.844" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:18.844" starttime="20191112 23:01:18.843"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191112 23:01:18.844" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191112 23:01:18.844" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191112 23:01:18.845" starttime="20191112 23:01:18.844"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191112 23:01:18.845" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191112 23:01:18.845" starttime="20191112 23:01:18.845"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191112 23:01:18.846" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191112 23:01:18.846" starttime="20191112 23:01:18.845"></status>
</kw>
<msg timestamp="20191112 23:01:18.846" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191112 23:01:18.846" starttime="20191112 23:01:17.031"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191112 23:01:18.847" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191112 23:01:18.847" starttime="20191112 23:01:18.847"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:18.848" starttime="20191112 23:01:18.848"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191112 23:01:18.849" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191112 23:01:20.047" level="INFO">Read output: Last login: Tue Nov 12 23:01:11 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191112 23:01:20.047" starttime="20191112 23:01:18.849"></status>
</kw>
<status status="PASS" endtime="20191112 23:01:20.047" starttime="20191112 23:01:18.847"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191112 23:01:20.048" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191112 23:01:20.063" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191112 23:01:20.063" starttime="20191112 23:01:20.048"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191112 23:01:20.064" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191112 23:01:20.140" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191112 23:01:20.140" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191112 23:01:20.140" starttime="20191112 23:01:20.063"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191112 23:01:20.255" starttime="20191112 23:01:20.141"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:20.256" starttime="20191112 23:01:20.255"></status>
</kw>
<msg timestamp="20191112 23:01:20.256" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191112 23:01:20.256" starttime="20191112 23:01:18.846"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191112 23:01:20.261" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191112 23:01:22.080" level="INFO">${rc} = 0</msg>
<msg timestamp="20191112 23:01:22.080" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:22.080" starttime="20191112 23:01:20.258"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191112 23:01:22.081" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:22.081" starttime="20191112 23:01:22.081"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191112 23:01:22.082" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191112 23:01:22.082" starttime="20191112 23:01:22.082"></status>
</kw>
<msg timestamp="20191112 23:01:22.082" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:22.082" starttime="20191112 23:01:20.257"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191112 23:01:22.083" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:22.083" starttime="20191112 23:01:22.083"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:22.084" starttime="20191112 23:01:22.083"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191112 23:01:22.084" starttime="20191112 23:01:22.084"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191112 23:01:22.085" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191112 23:01:22.085" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191112 23:01:22.085" starttime="20191112 23:01:22.084"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191112 23:01:22.085" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191112 23:01:22.085" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191112 23:01:22.086" starttime="20191112 23:01:22.085"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191112 23:01:22.086" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191112 23:01:22.086" starttime="20191112 23:01:22.086"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191112 23:01:22.087" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191112 23:01:22.087" starttime="20191112 23:01:22.086"></status>
</kw>
<msg timestamp="20191112 23:01:22.087" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191112 23:01:22.087" starttime="20191112 23:01:20.257"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191112 23:01:22.088" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191112 23:01:22.088" starttime="20191112 23:01:22.087"></status>
</kw>
<status status="FAIL" endtime="20191112 23:01:22.088" starttime="20191112 23:01:17.031"></status>
</kw>
<status status="FAIL" endtime="20191112 23:01:22.088" starttime="20191112 23:01:17.031"></status>
</kw>
<status status="FAIL" endtime="20191112 23:01:22.088" critical="yes" starttime="20191112 23:01:17.031">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191112 23:01:22.089" starttime="20191112 23:00:58.400"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
