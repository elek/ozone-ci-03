<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191113 21:41:45.313" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:41:45.481" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:41:47.937" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:41:47.937" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 21:41:47.937" starttime="20191113 21:41:45.479"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:41:47.938" level="INFO"></msg>
<status status="PASS" endtime="20191113 21:41:47.938" starttime="20191113 21:41:47.937"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:41:47.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:41:47.939" starttime="20191113 21:41:47.938"></status>
</kw>
<status status="PASS" endtime="20191113 21:41:47.939" starttime="20191113 21:41:45.479"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:41:47.945" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:41:49.826" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:41:49.826" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 21:41:49.826" starttime="20191113 21:41:47.942"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:41:49.827" level="INFO"></msg>
<status status="PASS" endtime="20191113 21:41:49.827" starttime="20191113 21:41:49.827"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:41:49.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:41:49.828" starttime="20191113 21:41:49.828"></status>
</kw>
<status status="PASS" endtime="20191113 21:41:49.828" starttime="20191113 21:41:47.939"></status>
</kw>
<status status="PASS" endtime="20191113 21:41:49.828" starttime="20191113 21:41:45.478"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 21:41:49.830" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191113 21:41:49.830" starttime="20191113 21:41:49.829"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 21:41:49.830" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191113 21:41:49.830" starttime="20191113 21:41:49.830"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 21:41:49.831" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191113 21:41:49.831" starttime="20191113 21:41:49.831"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 21:41:49.832" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 21:41:49.832" starttime="20191113 21:41:49.831"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:41:49.835" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:41:58.693" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:41:58.693" level="INFO">${output} = 2019-11-13 21:41:52 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 21:41:52 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 21:41:58.693" starttime="20191113 21:41:49.833"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:41:58.695" level="INFO">2019-11-13 21:41:52 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 21:41:52 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 21:41:52 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 21:41:58.695" starttime="20191113 21:41:58.694"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:41:58.695" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:41:58.696" starttime="20191113 21:41:58.695"></status>
</kw>
<status status="PASS" endtime="20191113 21:41:58.696" starttime="20191113 21:41:49.833"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:41:58.700" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:42:00.840" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:42:00.840" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191113 21:42:00.840" starttime="20191113 21:41:58.697"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:42:00.841" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191113 21:42:00.841" starttime="20191113 21:42:00.840"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:42:00.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:42:00.842" starttime="20191113 21:42:00.841"></status>
</kw>
<msg timestamp="20191113 21:42:00.842" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191113 21:42:00.842" starttime="20191113 21:41:58.696"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:00.843" starttime="20191113 21:42:00.842"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 21:42:00.844" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 21:42:00.844" starttime="20191113 21:42:00.843"></status>
</kw>
<status status="PASS" endtime="20191113 21:42:00.844" starttime="20191113 21:41:49.829"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:42:00.847" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:42:02.712" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:42:02.712" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:02.712" starttime="20191113 21:42:00.845"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:42:02.713" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:02.713" starttime="20191113 21:42:02.713"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:42:02.714" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:42:02.714" starttime="20191113 21:42:02.714"></status>
</kw>
<msg timestamp="20191113 21:42:02.714" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:02.714" starttime="20191113 21:42:00.845"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 21:42:02.715" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:02.715" starttime="20191113 21:42:02.715"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:02.716" starttime="20191113 21:42:02.715"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:02.716" starttime="20191113 21:42:02.716"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 21:42:02.717" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 21:42:02.717" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:02.717" starttime="20191113 21:42:02.717"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 21:42:02.718" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 21:42:02.718" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 21:42:02.718" starttime="20191113 21:42:02.717"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 21:42:02.718" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:42:02.718" starttime="20191113 21:42:02.718"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 21:42:02.719" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 21:42:02.719" starttime="20191113 21:42:02.719"></status>
</kw>
<msg timestamp="20191113 21:42:02.719" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:42:02.719" starttime="20191113 21:42:00.844"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 21:42:02.720" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 21:42:02.720" starttime="20191113 21:42:02.720"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:02.722" starttime="20191113 21:42:02.721"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 21:42:02.722" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 21:42:04.007" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 21:42:04.008" starttime="20191113 21:42:02.722"></status>
</kw>
<status status="PASS" endtime="20191113 21:42:04.008" starttime="20191113 21:42:02.721"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 21:42:04.009" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 21:42:04.024" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191113 21:42:04.025" starttime="20191113 21:42:04.009"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 21:42:04.025" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 21:42:04.102" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 21:42:04.102" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191113 21:42:04.102" starttime="20191113 21:42:04.025"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 21:42:04.217" starttime="20191113 21:42:04.103"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:04.218" starttime="20191113 21:42:04.217"></status>
</kw>
<msg timestamp="20191113 21:42:04.218" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 21:42:04.218" starttime="20191113 21:42:02.719"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:42:04.222" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:42:06.077" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:42:06.077" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:06.077" starttime="20191113 21:42:04.220"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:42:06.078" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:06.078" starttime="20191113 21:42:06.078"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:42:06.079" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:42:06.079" starttime="20191113 21:42:06.079"></status>
</kw>
<msg timestamp="20191113 21:42:06.079" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:06.079" starttime="20191113 21:42:04.219"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 21:42:06.080" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:06.080" starttime="20191113 21:42:06.080"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:06.080" starttime="20191113 21:42:06.080"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:06.081" starttime="20191113 21:42:06.081"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 21:42:06.081" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 21:42:06.081" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:06.081" starttime="20191113 21:42:06.081"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 21:42:06.082" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 21:42:06.082" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 21:42:06.082" starttime="20191113 21:42:06.082"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 21:42:06.083" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:42:06.083" starttime="20191113 21:42:06.082"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 21:42:06.083" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 21:42:06.083" starttime="20191113 21:42:06.083"></status>
</kw>
<msg timestamp="20191113 21:42:06.083" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:42:06.083" starttime="20191113 21:42:04.218"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191113 21:42:06.084" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191113 21:42:06.084" starttime="20191113 21:42:06.084"></status>
</kw>
<status status="FAIL" endtime="20191113 21:42:06.085" critical="yes" starttime="20191113 21:41:45.478">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191113 21:42:06.087" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191113 21:42:06.087" starttime="20191113 21:42:06.086"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191113 21:42:06.088" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191113 21:42:06.088" starttime="20191113 21:42:06.087"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 21:42:06.089" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 21:42:06.089" starttime="20191113 21:42:06.089"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:06.091" starttime="20191113 21:42:06.090"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 21:42:06.091" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 21:42:07.278" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 21:42:07.278" starttime="20191113 21:42:06.091"></status>
</kw>
<status status="PASS" endtime="20191113 21:42:07.278" starttime="20191113 21:42:06.090"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 21:42:07.279" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 21:42:07.293" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191113 21:42:07.293" starttime="20191113 21:42:07.279"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 21:42:07.294" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 21:42:07.371" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 21:42:07.371" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191113 21:42:07.371" starttime="20191113 21:42:07.293"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 21:42:07.486" starttime="20191113 21:42:07.371"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:07.487" starttime="20191113 21:42:07.487"></status>
</kw>
<status status="PASS" endtime="20191113 21:42:07.488" starttime="20191113 21:42:06.088"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 21:42:07.490" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 21:42:07.490" starttime="20191113 21:42:07.489"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:07.492" starttime="20191113 21:42:07.491"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 21:42:07.493" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 21:42:08.692" level="INFO">Read output: Last login: Wed Nov 13 21:42:06 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 21:42:08.692" starttime="20191113 21:42:07.492"></status>
</kw>
<status status="PASS" endtime="20191113 21:42:08.693" starttime="20191113 21:42:07.490"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 21:42:08.694" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 21:42:08.709" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 21:42:08.710" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191113 21:42:08.710" starttime="20191113 21:42:08.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 21:42:08.711" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191113 21:42:08.711" starttime="20191113 21:42:08.710"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 21:42:08.712" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191113 21:42:08.712" starttime="20191113 21:42:08.711"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 21:42:08.756" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191113 21:42:08.756" starttime="20191113 21:42:08.713"></status>
</kw>
<status status="FAIL" endtime="20191113 21:42:08.756" starttime="20191113 21:42:07.488"></status>
</kw>
<status status="FAIL" endtime="20191113 21:42:08.757" critical="yes" starttime="20191113 21:42:06.085">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:42:08.761" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:42:10.730" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:42:10.730" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:10.730" starttime="20191113 21:42:08.759"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:42:10.732" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:10.732" starttime="20191113 21:42:10.731"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:42:10.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:42:10.733" starttime="20191113 21:42:10.732"></status>
</kw>
<msg timestamp="20191113 21:42:10.734" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:10.734" starttime="20191113 21:42:08.759"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 21:42:10.735" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:10.735" starttime="20191113 21:42:10.734"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:10.736" starttime="20191113 21:42:10.735"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:10.737" starttime="20191113 21:42:10.736"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 21:42:10.738" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 21:42:10.738" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:10.738" starttime="20191113 21:42:10.737"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 21:42:10.739" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 21:42:10.739" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 21:42:10.739" starttime="20191113 21:42:10.738"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 21:42:10.740" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:42:10.740" starttime="20191113 21:42:10.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 21:42:10.741" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 21:42:10.741" starttime="20191113 21:42:10.741"></status>
</kw>
<msg timestamp="20191113 21:42:10.742" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:42:10.742" starttime="20191113 21:42:08.758"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 21:42:10.744" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 21:42:10.744" starttime="20191113 21:42:10.743"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:10.746" starttime="20191113 21:42:10.745"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 21:42:10.747" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 21:42:11.947" level="INFO">Read output: Last login: Wed Nov 13 21:42:03 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191113 21:42:11.947" starttime="20191113 21:42:10.746"></status>
</kw>
<status status="PASS" endtime="20191113 21:42:11.947" starttime="20191113 21:42:10.744"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 21:42:11.948" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 21:42:11.962" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191113 21:42:11.963" starttime="20191113 21:42:11.948"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 21:42:11.963" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 21:42:12.040" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191113 21:42:12.040" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191113 21:42:12.040" starttime="20191113 21:42:11.963"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 21:42:12.155" starttime="20191113 21:42:12.041"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:12.157" starttime="20191113 21:42:12.156"></status>
</kw>
<msg timestamp="20191113 21:42:12.157" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 21:42:12.157" starttime="20191113 21:42:10.742"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 21:42:12.161" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 21:42:14.036" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 21:42:14.036" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:14.036" starttime="20191113 21:42:12.159"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 21:42:14.037" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:14.037" starttime="20191113 21:42:14.036"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 21:42:14.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 21:42:14.038" starttime="20191113 21:42:14.037"></status>
</kw>
<msg timestamp="20191113 21:42:14.038" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:14.038" starttime="20191113 21:42:12.158"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 21:42:14.039" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:14.039" starttime="20191113 21:42:14.038"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:14.039" starttime="20191113 21:42:14.039"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 21:42:14.040" starttime="20191113 21:42:14.039"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 21:42:14.040" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 21:42:14.040" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 21:42:14.040" starttime="20191113 21:42:14.040"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 21:42:14.041" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 21:42:14.041" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 21:42:14.041" starttime="20191113 21:42:14.040"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 21:42:14.041" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:42:14.041" starttime="20191113 21:42:14.041"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 21:42:14.042" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 21:42:14.042" starttime="20191113 21:42:14.042"></status>
</kw>
<msg timestamp="20191113 21:42:14.042" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191113 21:42:14.042" starttime="20191113 21:42:12.157"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191113 21:42:14.043" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191113 21:42:14.043" starttime="20191113 21:42:14.042"></status>
</kw>
<status status="FAIL" endtime="20191113 21:42:14.043" starttime="20191113 21:42:08.758"></status>
</kw>
<status status="FAIL" endtime="20191113 21:42:14.043" starttime="20191113 21:42:08.758"></status>
</kw>
<status status="FAIL" endtime="20191113 21:42:14.043" critical="yes" starttime="20191113 21:42:08.757">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191113 21:42:14.044" starttime="20191113 21:41:45.314"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
