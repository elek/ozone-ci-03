<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191105 15:30:23.698" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:30:23.848" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:30:26.534" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:30:26.535" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191105 15:30:26.535" starttime="20191105 15:30:23.846"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:30:26.537" level="INFO"></msg>
<status status="PASS" endtime="20191105 15:30:26.537" starttime="20191105 15:30:26.536"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:30:26.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:30:26.538" starttime="20191105 15:30:26.537"></status>
</kw>
<status status="PASS" endtime="20191105 15:30:26.539" starttime="20191105 15:30:23.845"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:30:26.547" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:30:28.728" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:30:28.728" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191105 15:30:28.728" starttime="20191105 15:30:26.545"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:30:28.729" level="INFO"></msg>
<status status="PASS" endtime="20191105 15:30:28.730" starttime="20191105 15:30:28.729"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:30:28.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:30:28.731" starttime="20191105 15:30:28.730"></status>
</kw>
<status status="PASS" endtime="20191105 15:30:28.731" starttime="20191105 15:30:26.539"></status>
</kw>
<status status="PASS" endtime="20191105 15:30:28.731" starttime="20191105 15:30:23.845"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191105 15:30:28.733" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191105 15:30:28.733" starttime="20191105 15:30:28.732"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191105 15:30:28.734" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191105 15:30:28.734" starttime="20191105 15:30:28.733"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191105 15:30:28.735" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191105 15:30:28.735" starttime="20191105 15:30:28.734"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 15:30:28.737" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 15:30:28.738" starttime="20191105 15:30:28.735"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:30:28.741" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:30:33.532" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:30:33.532" level="INFO">${output} = 2019-11-05 15:30:31 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 15:30:31 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191105 15:30:33.532" starttime="20191105 15:30:28.739"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:30:33.534" level="INFO">2019-11-05 15:30:31 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 15:30:31 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-05 15:30:31 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 15:30:33.534" starttime="20191105 15:30:33.533"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:30:33.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:30:33.535" starttime="20191105 15:30:33.534"></status>
</kw>
<status status="PASS" endtime="20191105 15:30:33.536" starttime="20191105 15:30:28.738"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:30:33.540" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:30:35.726" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:30:35.726" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191105 15:30:35.727" starttime="20191105 15:30:33.537"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:30:35.728" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191105 15:30:35.728" starttime="20191105 15:30:35.727"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:30:35.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:30:35.729" starttime="20191105 15:30:35.729"></status>
</kw>
<msg timestamp="20191105 15:30:35.730" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191105 15:30:35.730" starttime="20191105 15:30:33.536"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:30:35.731" starttime="20191105 15:30:35.730"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 15:30:35.732" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 15:30:35.732" starttime="20191105 15:30:35.731"></status>
</kw>
<status status="PASS" endtime="20191105 15:30:35.732" starttime="20191105 15:30:28.731"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:30:35.736" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:30:37.761" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:30:37.761" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:30:37.761" starttime="20191105 15:30:35.734"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:30:37.762" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:30:37.763" starttime="20191105 15:30:37.762"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:30:37.763" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:30:37.763" starttime="20191105 15:30:37.763"></status>
</kw>
<msg timestamp="20191105 15:30:37.764" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:30:37.764" starttime="20191105 15:30:35.733"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 15:30:37.764" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:30:37.764" starttime="20191105 15:30:37.764"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 15:30:37.765" starttime="20191105 15:30:37.765"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 15:30:37.766" starttime="20191105 15:30:37.766"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 15:30:37.767" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 15:30:37.767" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:30:37.767" starttime="20191105 15:30:37.766"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 15:30:37.767" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 15:30:37.768" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 15:30:37.768" starttime="20191105 15:30:37.767"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 15:30:37.768" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 15:30:37.768" starttime="20191105 15:30:37.768"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 15:30:37.769" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 15:30:37.769" starttime="20191105 15:30:37.768"></status>
</kw>
<msg timestamp="20191105 15:30:37.769" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 15:30:37.769" starttime="20191105 15:30:35.733"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 15:30:37.771" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191105 15:30:37.771" starttime="20191105 15:30:37.770"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:30:37.772" starttime="20191105 15:30:37.771"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 15:30:37.773" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191105 15:30:39.012" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191105 15:30:39.012" starttime="20191105 15:30:37.772"></status>
</kw>
<status status="PASS" endtime="20191105 15:30:39.013" starttime="20191105 15:30:37.771"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 15:30:39.014" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 15:30:49.187" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191105 15:30:49.187" starttime="20191105 15:30:39.013"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 15:30:49.189" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 15:30:49.297" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191105 15:30:49.298" level="INFO">${shutdownMsg} = hadoop     457  0.0  0.0   9556  1168 ?        Ss   15:30   0:00 bash -c sudo ps aux | grep om
hadoop     459  0.0  0.0   9088   672 ?        S    15:30   0:00 grep om</msg>
<status status="PASS" endtime="20191105 15:30:49.298" starttime="20191105 15:30:49.188"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 15:30:49.331" starttime="20191105 15:30:49.298"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 15:30:49.332" starttime="20191105 15:30:49.331"></status>
</kw>
<msg timestamp="20191105 15:30:49.332" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191105 15:30:49.332" starttime="20191105 15:30:37.769"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:30:49.336" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:31:01.614" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:31:01.614" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 15:31:01.614" starttime="20191105 15:30:49.334"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:31:01.615" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 15:31:01.615" starttime="20191105 15:31:01.615"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:31:01.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:31:01.616" starttime="20191105 15:31:01.616"></status>
</kw>
<msg timestamp="20191105 15:31:01.617" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 15:31:01.617" starttime="20191105 15:30:49.333"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 15:31:01.618" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 15:31:01.618" starttime="20191105 15:31:01.617"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 15:31:01.619" starttime="20191105 15:31:01.618"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 15:31:01.619" starttime="20191105 15:31:01.619"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 15:31:01.620" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 15:31:01.620" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191105 15:31:01.620" starttime="20191105 15:31:01.620"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 15:31:01.621" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191105 15:31:01.621" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 15:31:01.621" starttime="20191105 15:31:01.620"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 15:31:01.622" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191105 15:31:01.622" starttime="20191105 15:31:01.621"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 15:31:01.622" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191105 15:31:01.622" starttime="20191105 15:31:01.622"></status>
</kw>
<msg timestamp="20191105 15:31:01.623" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191105 15:31:01.623" starttime="20191105 15:30:49.333"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191105 15:31:01.624" starttime="20191105 15:31:01.623"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191105 15:31:01.625" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191105 15:31:01.625" starttime="20191105 15:31:01.624"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191105 15:31:01.626" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191105 15:31:01.626" starttime="20191105 15:31:01.625"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191105 15:31:01.627" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191105 15:31:01.627" starttime="20191105 15:31:01.626"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 15:31:01.629" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 15:31:01.629" starttime="20191105 15:31:01.627"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:31:01.632" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:31:16.320" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:31:16.321" level="INFO">${output} = 2019-11-05 15:31:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191105 15:31:16.321" starttime="20191105 15:31:01.630"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:31:16.322" level="INFO">2019-11-05 15:31:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:31:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:31:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:31:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:31:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:31:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:31:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:31:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:31:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:31:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:31:14 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 15:31:14 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-05 15:31:14 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 15:31:16.323" starttime="20191105 15:31:16.321"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:31:16.323" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:31:16.324" starttime="20191105 15:31:16.323"></status>
</kw>
<status status="PASS" endtime="20191105 15:31:16.325" starttime="20191105 15:31:01.629"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:31:16.328" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:31:28.663" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:31:28.663" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191105 15:31:28.664" starttime="20191105 15:31:16.326"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:31:28.665" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191105 15:31:28.665" starttime="20191105 15:31:28.664"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:31:28.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:31:28.666" starttime="20191105 15:31:28.665"></status>
</kw>
<msg timestamp="20191105 15:31:28.666" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191105 15:31:28.666" starttime="20191105 15:31:16.325"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:31:28.667" starttime="20191105 15:31:28.666"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 15:31:28.668" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 15:31:28.668" starttime="20191105 15:31:28.667"></status>
</kw>
<status status="PASS" endtime="20191105 15:31:28.668" starttime="20191105 15:31:01.624"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 15:31:28.669" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191105 15:31:28.670" starttime="20191105 15:31:28.669"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:31:28.671" starttime="20191105 15:31:28.670"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 15:31:28.671" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191105 15:31:29.861" level="INFO">Read output: Last login: Tue Nov  5 15:30:38 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191105 15:31:29.861" starttime="20191105 15:31:28.671"></status>
</kw>
<status status="PASS" endtime="20191105 15:31:29.861" starttime="20191105 15:31:28.670"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191105 15:31:29.862" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191105 15:31:32.032" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191105 15:31:32.033" starttime="20191105 15:31:29.862"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191105 15:31:32.033" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 15:31:32.132" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191105 15:31:32.133" level="INFO">${startupMsg} = hadoop     510  347  0.0 34473544 203520 ?     Sl   15:31   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191105 15:31:32.133" starttime="20191105 15:31:32.033"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 15:31:32.198" starttime="20191105 15:31:32.133"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 15:31:32.199" starttime="20191105 15:31:32.199"></status>
</kw>
<status status="PASS" endtime="20191105 15:31:32.199" starttime="20191105 15:31:28.668"></status>
</kw>
<status status="PASS" endtime="20191105 15:31:32.200" critical="yes" starttime="20191105 15:30:23.842"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191105 15:31:32.204" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191105 15:31:32.204" starttime="20191105 15:31:32.202"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191105 15:31:32.206" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191105 15:31:32.206" starttime="20191105 15:31:32.204"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 15:31:32.208" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 15:31:32.208" starttime="20191105 15:31:32.207"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:31:32.210" starttime="20191105 15:31:32.209"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 15:31:32.211" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 15:31:33.414" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191105 15:31:33.415" starttime="20191105 15:31:32.211"></status>
</kw>
<status status="PASS" endtime="20191105 15:31:33.415" starttime="20191105 15:31:32.209"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 15:31:33.416" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 15:31:43.587" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191105 15:31:43.588" starttime="20191105 15:31:33.415"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 15:31:43.589" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 15:31:43.697" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191105 15:31:43.698" level="INFO">${shutdownMsg} = hadoop     501  0.0  0.0   9556  1168 ?        Ss   15:31   0:00 bash -c sudo ps aux | grep om
hadoop     503  0.0  0.0   9088   668 ?        S    15:31   0:00 grep om</msg>
<status status="PASS" endtime="20191105 15:31:43.698" starttime="20191105 15:31:43.588"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 15:31:43.763" starttime="20191105 15:31:43.698"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 15:31:43.764" starttime="20191105 15:31:43.763"></status>
</kw>
<status status="PASS" endtime="20191105 15:31:43.764" starttime="20191105 15:31:32.207"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 15:31:43.767" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 15:31:43.767" starttime="20191105 15:31:43.766"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:31:43.769" starttime="20191105 15:31:43.768"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 15:31:43.770" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 15:31:44.974" level="INFO">Read output: Last login: Tue Nov  5 15:31:32 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191105 15:31:44.975" starttime="20191105 15:31:43.769"></status>
</kw>
<status status="PASS" endtime="20191105 15:31:44.975" starttime="20191105 15:31:43.767"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191105 15:31:44.976" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191105 15:31:44.993" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191105 15:31:44.993" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191105 15:31:44.993" starttime="20191105 15:31:44.976"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191105 15:31:44.994" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191105 15:31:44.994" starttime="20191105 15:31:44.993"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191105 15:31:44.995" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191105 15:31:44.996" starttime="20191105 15:31:44.995"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191105 15:31:45.077" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191105 15:31:45.089" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191105 15:31:45.090" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191105 15:31:45.090" starttime="20191105 15:31:44.996"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191105 15:31:45.091" level="INFO">Length is 2</msg>
<msg timestamp="20191105 15:31:45.092" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191105 15:31:45.092" starttime="20191105 15:31:45.090"></status>
</kw>
<msg timestamp="20191105 15:31:45.092" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191105 15:31:45.093" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191105 15:31:45.093" starttime="20191105 15:31:43.765"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:31:45.098" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:31:47.249" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:31:47.249" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 15:31:47.249" starttime="20191105 15:31:45.095"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:31:47.251" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 15:31:47.251" starttime="20191105 15:31:47.250"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:31:47.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:31:47.252" starttime="20191105 15:31:47.252"></status>
</kw>
<msg timestamp="20191105 15:31:47.253" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 15:31:47.253" starttime="20191105 15:31:45.094"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 15:31:47.254" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 15:31:47.254" starttime="20191105 15:31:47.253"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 15:31:47.255" starttime="20191105 15:31:47.254"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 15:31:47.256" starttime="20191105 15:31:47.255"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 15:31:47.257" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 15:31:47.257" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191105 15:31:47.257" starttime="20191105 15:31:47.256"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 15:31:47.258" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191105 15:31:47.258" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 15:31:47.258" starttime="20191105 15:31:47.257"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 15:31:47.259" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191105 15:31:47.259" starttime="20191105 15:31:47.259"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 15:31:47.260" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191105 15:31:47.260" starttime="20191105 15:31:47.260"></status>
</kw>
<msg timestamp="20191105 15:31:47.261" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191105 15:31:47.261" starttime="20191105 15:31:45.093"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191105 15:31:47.264" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191105 15:31:47.264" starttime="20191105 15:31:47.262"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191105 15:31:47.267" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191105 15:31:47.267" starttime="20191105 15:31:47.266"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191105 15:31:47.268" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191105 15:31:47.268" starttime="20191105 15:31:47.267"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:31:47.272" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:31:51.739" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:31:51.740" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191105 15:31:51.740" starttime="20191105 15:31:47.270"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:31:51.741" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 15:31:51.741" starttime="20191105 15:31:51.740"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:31:51.742" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:31:51.742" starttime="20191105 15:31:51.742"></status>
</kw>
<status status="PASS" endtime="20191105 15:31:51.742" starttime="20191105 15:31:47.269"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:31:51.746" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:31:54.082" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:31:54.082" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1572967909441,
  "modificationTime": 1572967911316,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191105 15:31:54.082" starttime="20191105 15:31:51.744"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:31:54.084" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1572967909441,
  "modificationTime": 1572967911316,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103086024912601090,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191105 15:31:54.084" starttime="20191105 15:31:54.083"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:31:54.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:31:54.085" starttime="20191105 15:31:54.084"></status>
</kw>
<msg timestamp="20191105 15:31:54.085" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1572967909441,
  "modificationTime": 1572967911316,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191105 15:31:54.086" starttime="20191105 15:31:51.743"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191105 15:31:54.086" starttime="20191105 15:31:54.086"></status>
</kw>
<status status="PASS" endtime="20191105 15:31:54.087" starttime="20191105 15:31:47.268"></status>
</kw>
<status status="PASS" endtime="20191105 15:31:54.087" starttime="20191105 15:31:47.266"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191105 15:31:54.088" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191105 15:31:54.088" starttime="20191105 15:31:54.087"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191105 15:31:54.089" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191105 15:31:54.089" starttime="20191105 15:31:54.088"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:31:54.093" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:31:58.528" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:31:58.528" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191105 15:31:58.528" starttime="20191105 15:31:54.091"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:31:58.530" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 15:31:58.530" starttime="20191105 15:31:58.529"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:31:58.531" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:31:58.531" starttime="20191105 15:31:58.530"></status>
</kw>
<status status="PASS" endtime="20191105 15:31:58.532" starttime="20191105 15:31:54.090"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:31:58.536" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:32:00.832" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:32:00.832" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1572967916263,
  "modificationTime": 1572967918103,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191105 15:32:00.832" starttime="20191105 15:31:58.534"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:32:00.834" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1572967916263,
  "modificationTime": 1572967918103,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103086025360080900,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191105 15:32:00.834" starttime="20191105 15:32:00.833"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:32:00.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:32:00.835" starttime="20191105 15:32:00.834"></status>
</kw>
<msg timestamp="20191105 15:32:00.836" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1572967916263,
  "modificationTime": 1572967918103,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191105 15:32:00.836" starttime="20191105 15:31:58.532"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:00.837" starttime="20191105 15:32:00.837"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:00.837" starttime="20191105 15:31:54.089"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:00.838" starttime="20191105 15:31:54.087"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191105 15:32:00.839" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191105 15:32:00.839" starttime="20191105 15:32:00.838"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191105 15:32:00.840" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191105 15:32:00.840" starttime="20191105 15:32:00.840"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:32:00.845" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:32:05.552" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:32:05.552" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191105 15:32:05.552" starttime="20191105 15:32:00.843"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:32:05.554" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 15:32:05.554" starttime="20191105 15:32:05.553"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:32:05.555" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:32:05.556" starttime="20191105 15:32:05.555"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:05.556" starttime="20191105 15:32:00.842"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:32:05.562" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:32:07.995" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:32:07.995" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1572967923026,
  "modificationTime": 1572967925121,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191105 15:32:07.995" starttime="20191105 15:32:05.559"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:32:07.997" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1572967923026,
  "modificationTime": 1572967925121,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103086025803366400,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191105 15:32:07.997" starttime="20191105 15:32:07.996"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:32:07.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:32:07.998" starttime="20191105 15:32:07.997"></status>
</kw>
<msg timestamp="20191105 15:32:07.999" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1572967923026,
  "modificationTime": 1572967925121,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191105 15:32:07.999" starttime="20191105 15:32:05.557"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:08.000" starttime="20191105 15:32:07.999"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:08.000" starttime="20191105 15:32:00.841"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:08.000" starttime="20191105 15:32:00.838"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191105 15:32:08.002" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191105 15:32:08.002" starttime="20191105 15:32:08.001"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191105 15:32:08.002" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191105 15:32:08.003" starttime="20191105 15:32:08.002"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:32:08.007" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:32:13.038" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:32:13.038" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191105 15:32:13.038" starttime="20191105 15:32:08.005"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:32:13.040" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 15:32:13.040" starttime="20191105 15:32:13.039"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:32:13.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:32:13.041" starttime="20191105 15:32:13.040"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:13.042" starttime="20191105 15:32:08.004"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:32:13.046" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:32:15.308" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:32:15.308" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1572967930372,
  "modificationTime": 1572967932627,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191105 15:32:15.308" starttime="20191105 15:32:13.044"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:32:15.310" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1572967930372,
  "modificationTime": 1572967932627,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103086026284728320,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191105 15:32:15.310" starttime="20191105 15:32:15.309"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:32:15.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:32:15.311" starttime="20191105 15:32:15.310"></status>
</kw>
<msg timestamp="20191105 15:32:15.311" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1572967930372,
  "modificationTime": 1572967932627,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191105 15:32:15.311" starttime="20191105 15:32:13.042"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:15.311" starttime="20191105 15:32:15.311"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:15.312" starttime="20191105 15:32:08.003"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:15.312" starttime="20191105 15:32:08.000"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191105 15:32:15.313" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191105 15:32:15.313" starttime="20191105 15:32:15.312"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191105 15:32:15.313" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191105 15:32:15.313" starttime="20191105 15:32:15.313"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:32:15.316" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:32:19.460" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:32:19.460" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191105 15:32:19.460" starttime="20191105 15:32:15.315"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:32:19.462" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 15:32:19.462" starttime="20191105 15:32:19.461"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:32:19.463" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:32:19.463" starttime="20191105 15:32:19.462"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:19.464" starttime="20191105 15:32:15.314"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:32:19.469" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:32:21.504" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:32:21.504" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1572967937312,
  "modificationTime": 1572967939049,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191105 15:32:21.504" starttime="20191105 15:32:19.467"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:32:21.505" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1572967937312,
  "modificationTime": 1572967939049,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103086026739613700,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191105 15:32:21.505" starttime="20191105 15:32:21.504"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:32:21.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:32:21.506" starttime="20191105 15:32:21.505"></status>
</kw>
<msg timestamp="20191105 15:32:21.506" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1572967937312,
  "modificationTime": 1572967939049,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191105 15:32:21.506" starttime="20191105 15:32:19.464"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:21.507" starttime="20191105 15:32:21.506"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:21.507" starttime="20191105 15:32:15.313"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:21.507" starttime="20191105 15:32:15.312"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:21.507" starttime="20191105 15:31:47.266"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:21.507" starttime="20191105 15:31:47.265"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 15:32:21.509" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191105 15:32:21.509" starttime="20191105 15:32:21.508"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:21.510" starttime="20191105 15:32:21.509"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 15:32:21.510" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191105 15:32:22.709" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191105 15:32:22.709" starttime="20191105 15:32:21.510"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:22.709" starttime="20191105 15:32:21.509"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191105 15:32:22.710" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191105 15:32:22.725" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191105 15:32:22.725" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191105 15:32:22.725" starttime="20191105 15:32:22.710"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191105 15:32:22.725" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191105 15:32:22.726" starttime="20191105 15:32:22.725"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191105 15:32:22.726" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191105 15:32:22.726" starttime="20191105 15:32:22.726"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191105 15:32:22.802" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191105 15:32:22.812" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191105 15:32:22.812" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191105 15:32:22.812" starttime="20191105 15:32:22.726"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191105 15:32:22.813" level="INFO">Length is 3</msg>
<msg timestamp="20191105 15:32:22.813" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191105 15:32:22.813" starttime="20191105 15:32:22.812"></status>
</kw>
<msg timestamp="20191105 15:32:22.814" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191105 15:32:22.814" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191105 15:32:22.814" starttime="20191105 15:32:21.507"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191105 15:32:22.815" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191105 15:32:22.815" starttime="20191105 15:32:22.814"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:22.816" starttime="20191105 15:31:47.261"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:22.816" starttime="20191105 15:31:47.261"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:22.817" starttime="20191105 15:32:22.816"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 15:32:22.818" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 15:32:22.819" starttime="20191105 15:32:22.818"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:22.821" starttime="20191105 15:32:22.820"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 15:32:22.822" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 15:32:24.025" level="INFO">Read output: Last login: Tue Nov  5 15:31:43 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191105 15:32:24.025" starttime="20191105 15:32:22.821"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:24.025" starttime="20191105 15:32:22.819"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191105 15:32:24.026" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191105 15:32:26.174" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191105 15:32:26.175" starttime="20191105 15:32:24.026"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191105 15:32:26.176" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 15:32:26.273" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191105 15:32:26.273" level="INFO">${startupMsg} = hadoop     576  363  0.0 34478484 227980 ?     Sl   15:32   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191105 15:32:26.274" starttime="20191105 15:32:26.175"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 15:32:26.306" starttime="20191105 15:32:26.274"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:26.307" starttime="20191105 15:32:26.306"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:26.307" starttime="20191105 15:32:22.817"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 15:32:26.308" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 15:32:26.309" starttime="20191105 15:32:26.308"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:26.310" starttime="20191105 15:32:26.309"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 15:32:26.310" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 15:32:27.497" level="INFO">Read output: Last login: Tue Nov  5 15:32:23 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191105 15:32:27.497" starttime="20191105 15:32:26.310"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:27.498" starttime="20191105 15:32:26.309"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191105 15:32:27.499" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191105 15:32:27.514" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191105 15:32:27.514" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191105 15:32:27.514" starttime="20191105 15:32:27.498"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191105 15:32:27.515" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191105 15:32:27.515" starttime="20191105 15:32:27.515"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191105 15:32:27.516" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191105 15:32:27.516" starttime="20191105 15:32:27.516"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191105 15:32:27.596" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191105 15:32:27.607" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191105 15:32:27.608" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191105 15:32:27.608" starttime="20191105 15:32:27.517"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191105 15:32:27.609" level="INFO">Length is 2</msg>
<msg timestamp="20191105 15:32:27.609" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191105 15:32:27.609" starttime="20191105 15:32:27.608"></status>
</kw>
<msg timestamp="20191105 15:32:27.610" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191105 15:32:27.610" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191105 15:32:27.610" starttime="20191105 15:32:26.307"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:27.612" starttime="20191105 15:32:27.610"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191105 15:32:28.613" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191105 15:32:28.613" starttime="20191105 15:32:27.612"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:28.613" starttime="20191105 15:32:26.307"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 15:32:28.615" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 15:32:28.615" starttime="20191105 15:32:28.614"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:28.616" starttime="20191105 15:32:28.615"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 15:32:28.616" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 15:32:29.804" level="INFO">Read output: Last login: Tue Nov  5 15:32:26 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191105 15:32:29.804" starttime="20191105 15:32:28.616"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:29.805" starttime="20191105 15:32:28.615"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191105 15:32:29.806" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191105 15:32:29.821" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191105 15:32:29.822" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191105 15:32:29.822" starttime="20191105 15:32:29.805"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191105 15:32:29.824" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191105 15:32:29.824" starttime="20191105 15:32:29.823"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191105 15:32:29.826" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191105 15:32:29.826" starttime="20191105 15:32:29.825"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191105 15:32:29.904" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191105 15:32:29.913" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191105 15:32:29.914" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191105 15:32:29.914" starttime="20191105 15:32:29.826"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191105 15:32:29.915" level="INFO">Length is 3</msg>
<msg timestamp="20191105 15:32:29.915" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191105 15:32:29.915" starttime="20191105 15:32:29.914"></status>
</kw>
<msg timestamp="20191105 15:32:29.916" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191105 15:32:29.916" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191105 15:32:29.916" starttime="20191105 15:32:28.613"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191105 15:32:29.917" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191105 15:32:29.917" starttime="20191105 15:32:29.916"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:29.917" starttime="20191105 15:32:28.613"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:29.917" starttime="20191105 15:32:26.307"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:29.918" starttime="20191105 15:32:29.918"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:29.919" starttime="20191105 15:32:29.919"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:29.920" critical="yes" starttime="20191105 15:31:32.200"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:32:29.925" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:32:32.046" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:32:32.046" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:32.046" starttime="20191105 15:32:29.923"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:32:32.048" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:32.048" starttime="20191105 15:32:32.047"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:32:32.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:32:32.049" starttime="20191105 15:32:32.048"></status>
</kw>
<msg timestamp="20191105 15:32:32.049" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:32.050" starttime="20191105 15:32:29.922"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 15:32:32.050" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:32.050" starttime="20191105 15:32:32.050"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:32.051" starttime="20191105 15:32:32.051"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:32.052" starttime="20191105 15:32:32.052"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 15:32:32.053" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 15:32:32.053" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:32.053" starttime="20191105 15:32:32.053"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 15:32:32.054" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191105 15:32:32.055" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 15:32:32.055" starttime="20191105 15:32:32.054"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 15:32:32.056" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191105 15:32:32.056" starttime="20191105 15:32:32.055"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 15:32:32.057" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191105 15:32:32.057" starttime="20191105 15:32:32.056"></status>
</kw>
<msg timestamp="20191105 15:32:32.057" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191105 15:32:32.057" starttime="20191105 15:32:29.922"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 15:32:32.059" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191105 15:32:32.059" starttime="20191105 15:32:32.058"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:32.061" starttime="20191105 15:32:32.060"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 15:32:32.062" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191105 15:32:33.269" level="INFO">Read output: Last login: Tue Nov  5 15:32:21 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191105 15:32:33.270" starttime="20191105 15:32:32.061"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:33.270" starttime="20191105 15:32:32.060"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 15:32:33.271" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 15:32:43.454" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191105 15:32:43.454" starttime="20191105 15:32:33.270"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 15:32:43.455" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 15:32:43.521" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191105 15:32:43.521" level="INFO">${shutdownMsg} = hadoop     543  0.0  0.0   9556  1168 ?        Ss   15:32   0:00 bash -c sudo ps aux | grep om
hadoop     545  0.0  0.0   9088   672 ?        S    15:32   0:00 grep om</msg>
<status status="PASS" endtime="20191105 15:32:43.521" starttime="20191105 15:32:43.455"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 15:32:43.586" starttime="20191105 15:32:43.521"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:43.587" starttime="20191105 15:32:43.586"></status>
</kw>
<msg timestamp="20191105 15:32:43.587" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191105 15:32:43.588" starttime="20191105 15:32:32.058"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:32:43.592" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:32:45.707" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:32:45.707" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:45.707" starttime="20191105 15:32:43.589"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:32:45.708" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:45.709" starttime="20191105 15:32:45.708"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:32:45.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:32:45.709" starttime="20191105 15:32:45.709"></status>
</kw>
<msg timestamp="20191105 15:32:45.710" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:45.710" starttime="20191105 15:32:43.588"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 15:32:45.710" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:45.710" starttime="20191105 15:32:45.710"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:45.711" starttime="20191105 15:32:45.711"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:45.711" starttime="20191105 15:32:45.711"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 15:32:45.712" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 15:32:45.712" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:45.712" starttime="20191105 15:32:45.712"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 15:32:45.713" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 15:32:45.713" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 15:32:45.713" starttime="20191105 15:32:45.712"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 15:32:45.714" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 15:32:45.714" starttime="20191105 15:32:45.713"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 15:32:45.714" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 15:32:45.714" starttime="20191105 15:32:45.714"></status>
</kw>
<msg timestamp="20191105 15:32:45.715" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191105 15:32:45.715" starttime="20191105 15:32:43.588"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:45.715" starttime="20191105 15:32:45.715"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191105 15:32:45.717" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191105 15:32:45.717" starttime="20191105 15:32:45.716"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191105 15:32:45.717" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191105 15:32:45.718" starttime="20191105 15:32:45.717"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191105 15:32:45.721" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191105 15:32:45.721" starttime="20191105 15:32:45.719"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 15:32:45.724" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 15:32:45.724" starttime="20191105 15:32:45.722"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:32:45.727" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:32:50.194" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:32:50.194" level="INFO">${output} = 2019-11-05 15:32:48 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 15:32:48 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191105 15:32:50.194" starttime="20191105 15:32:45.725"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:32:50.196" level="INFO">2019-11-05 15:32:48 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 15:32:48 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-05 15:32:48 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 15:32:50.196" starttime="20191105 15:32:50.195"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:32:50.197" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:32:50.197" starttime="20191105 15:32:50.196"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:50.197" starttime="20191105 15:32:45.724"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:32:50.200" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:32:52.156" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:32:52.156" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191105 15:32:52.156" starttime="20191105 15:32:50.198"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:32:52.158" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191105 15:32:52.158" starttime="20191105 15:32:52.157"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:32:52.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:32:52.158" starttime="20191105 15:32:52.158"></status>
</kw>
<msg timestamp="20191105 15:32:52.159" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191105 15:32:52.159" starttime="20191105 15:32:50.197"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:52.159" starttime="20191105 15:32:52.159"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 15:32:52.161" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 15:32:52.161" starttime="20191105 15:32:52.159"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:52.161" starttime="20191105 15:32:45.716"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 15:32:52.162" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191105 15:32:52.162" starttime="20191105 15:32:52.162"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:52.164" starttime="20191105 15:32:52.163"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 15:32:52.165" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191105 15:32:53.366" level="INFO">Read output: Last login: Tue Nov  5 15:32:32 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191105 15:32:53.366" starttime="20191105 15:32:52.164"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:53.367" starttime="20191105 15:32:52.162"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191105 15:32:53.368" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191105 15:32:55.527" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191105 15:32:55.527" starttime="20191105 15:32:53.367"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191105 15:32:55.528" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 15:32:55.625" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191105 15:32:55.625" level="INFO">${startupMsg} = hadoop     596  362  0.0 34482184 261188 ?     Sl   15:32   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191105 15:32:55.626" starttime="20191105 15:32:55.527"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 15:32:55.659" starttime="20191105 15:32:55.626"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:55.660" starttime="20191105 15:32:55.659"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:55.660" starttime="20191105 15:32:52.161"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:55.660" starttime="20191105 15:32:29.922"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:32:55.663" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:32:57.468" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:32:57.468" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:57.468" starttime="20191105 15:32:55.662"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:32:57.469" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:57.469" starttime="20191105 15:32:57.468"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:32:57.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:32:57.470" starttime="20191105 15:32:57.469"></status>
</kw>
<msg timestamp="20191105 15:32:57.470" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:57.470" starttime="20191105 15:32:55.661"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 15:32:57.470" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:57.471" starttime="20191105 15:32:57.470"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:57.471" starttime="20191105 15:32:57.471"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:57.471" starttime="20191105 15:32:57.471"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 15:32:57.472" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 15:32:57.472" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191105 15:32:57.472" starttime="20191105 15:32:57.472"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 15:32:57.473" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191105 15:32:57.473" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 15:32:57.473" starttime="20191105 15:32:57.472"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 15:32:57.473" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 15:32:57.473" starttime="20191105 15:32:57.473"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 15:32:57.474" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191105 15:32:57.474" starttime="20191105 15:32:57.474"></status>
</kw>
<msg timestamp="20191105 15:32:57.474" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191105 15:32:57.474" starttime="20191105 15:32:55.660"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 15:32:57.475" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191105 15:32:57.475" starttime="20191105 15:32:57.475"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:57.477" starttime="20191105 15:32:57.476"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 15:32:57.477" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191105 15:32:58.675" level="INFO">Read output: Last login: Tue Nov  5 15:31:28 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191105 15:32:58.675" starttime="20191105 15:32:57.477"></status>
</kw>
<status status="PASS" endtime="20191105 15:32:58.676" starttime="20191105 15:32:57.476"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 15:32:58.677" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 15:32:59.815" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191105 15:32:59.815" starttime="20191105 15:32:58.676"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 15:32:59.816" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 15:32:59.894" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191105 15:32:59.894" level="INFO">${shutdownMsg} = hadoop    1059  0.0  0.0   9556  1164 ?        Ss   15:32   0:00 bash -c sudo ps aux | grep om
hadoop    1061  0.0  0.0   9088   668 ?        S    15:32   0:00 grep om</msg>
<status status="PASS" endtime="20191105 15:32:59.894" starttime="20191105 15:32:59.816"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 15:32:59.959" starttime="20191105 15:32:59.895"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 15:32:59.960" starttime="20191105 15:32:59.960"></status>
</kw>
<msg timestamp="20191105 15:32:59.960" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191105 15:32:59.960" starttime="20191105 15:32:57.474"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:32:59.963" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:33:12.033" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:33:12.033" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 15:33:12.034" starttime="20191105 15:32:59.961"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:33:12.035" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 15:33:12.035" starttime="20191105 15:33:12.034"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:33:12.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:33:12.036" starttime="20191105 15:33:12.036"></status>
</kw>
<msg timestamp="20191105 15:33:12.037" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 15:33:12.037" starttime="20191105 15:32:59.961"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 15:33:12.038" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 15:33:12.038" starttime="20191105 15:33:12.037"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 15:33:12.039" starttime="20191105 15:33:12.038"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 15:33:12.040" starttime="20191105 15:33:12.039"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 15:33:12.040" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 15:33:12.041" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191105 15:33:12.041" starttime="20191105 15:33:12.040"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 15:33:12.042" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191105 15:33:12.042" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 15:33:12.042" starttime="20191105 15:33:12.041"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 15:33:12.043" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191105 15:33:12.043" starttime="20191105 15:33:12.042"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 15:33:12.043" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191105 15:33:12.044" starttime="20191105 15:33:12.043"></status>
</kw>
<msg timestamp="20191105 15:33:12.044" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191105 15:33:12.044" starttime="20191105 15:32:59.960"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191105 15:33:12.045" starttime="20191105 15:33:12.044"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191105 15:33:12.047" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191105 15:33:12.047" starttime="20191105 15:33:12.046"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191105 15:33:12.048" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191105 15:33:12.048" starttime="20191105 15:33:12.047"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191105 15:33:12.049" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191105 15:33:12.049" starttime="20191105 15:33:12.048"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 15:33:12.051" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 15:33:12.051" starttime="20191105 15:33:12.049"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:33:12.055" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:33:26.676" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:33:26.676" level="INFO">${output} = 2019-11-05 15:33:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191105 15:33:26.676" starttime="20191105 15:33:12.053"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:33:26.677" level="INFO">2019-11-05 15:33:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:33:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:33:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:33:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:33:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:33:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:33:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:33:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:33:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:33:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-05 15:33:24 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-05 15:33:24 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-05 15:33:24 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191105 15:33:26.677" starttime="20191105 15:33:26.676"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:33:26.678" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:33:26.678" starttime="20191105 15:33:26.677"></status>
</kw>
<status status="PASS" endtime="20191105 15:33:26.678" starttime="20191105 15:33:12.052"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 15:33:26.681" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 15:33:40.536" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 15:33:40.537" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191105 15:33:40.537" starttime="20191105 15:33:26.679"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 15:33:40.538" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191105 15:33:40.539" starttime="20191105 15:33:40.538"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 15:33:40.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 15:33:40.540" starttime="20191105 15:33:40.539"></status>
</kw>
<msg timestamp="20191105 15:33:40.540" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191105 15:33:40.540" starttime="20191105 15:33:26.678"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:33:40.541" starttime="20191105 15:33:40.540"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191105 15:33:40.542" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191105 15:33:40.542" starttime="20191105 15:33:40.541"></status>
</kw>
<status status="PASS" endtime="20191105 15:33:40.542" starttime="20191105 15:33:12.045"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 15:33:40.544" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191105 15:33:40.544" starttime="20191105 15:33:40.543"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 15:33:40.546" starttime="20191105 15:33:40.545"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 15:33:40.546" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191105 15:33:43.558" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20191105 15:33:43.558" starttime="20191105 15:33:40.546"></status>
</kw>
<status status="FAIL" endtime="20191105 15:33:43.558" starttime="20191105 15:33:40.544"></status>
</kw>
<status status="FAIL" endtime="20191105 15:33:43.559" starttime="20191105 15:33:40.542"></status>
</kw>
<status status="FAIL" endtime="20191105 15:33:43.559" starttime="20191105 15:32:55.660"></status>
</kw>
<status status="FAIL" endtime="20191105 15:33:43.559" starttime="20191105 15:32:29.921"></status>
</kw>
<status status="FAIL" endtime="20191105 15:33:43.559" critical="yes" starttime="20191105 15:32:29.920">SSHException: No existing session</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191105 15:33:43.560" starttime="20191105 15:30:23.699"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="2">Critical Tests</stat>
<stat fail="1" pass="2">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="1" id="s1" name="ozone-om-ha-testOMHA" pass="2">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
