<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191114 12:02:12.054" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 12:02:12.219" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 12:02:15.283" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 12:02:15.283" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 12:02:15.283" starttime="20191114 12:02:12.218"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 12:02:15.284" level="INFO"></msg>
<status status="PASS" endtime="20191114 12:02:15.285" starttime="20191114 12:02:15.284"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 12:02:15.285" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 12:02:15.286" starttime="20191114 12:02:15.285"></status>
</kw>
<status status="PASS" endtime="20191114 12:02:15.286" starttime="20191114 12:02:12.217"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 12:02:15.292" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 12:02:17.501" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 12:02:17.501" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 12:02:17.501" starttime="20191114 12:02:15.290"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 12:02:17.503" level="INFO"></msg>
<status status="PASS" endtime="20191114 12:02:17.503" starttime="20191114 12:02:17.502"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 12:02:17.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 12:02:17.504" starttime="20191114 12:02:17.503"></status>
</kw>
<status status="PASS" endtime="20191114 12:02:17.505" starttime="20191114 12:02:15.286"></status>
</kw>
<status status="PASS" endtime="20191114 12:02:17.505" starttime="20191114 12:02:12.217"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 12:02:17.507" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191114 12:02:17.507" starttime="20191114 12:02:17.506"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 12:02:17.508" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191114 12:02:17.508" starttime="20191114 12:02:17.507"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 12:02:17.509" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191114 12:02:17.509" starttime="20191114 12:02:17.509"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 12:02:17.512" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 12:02:17.512" starttime="20191114 12:02:17.510"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 12:02:17.516" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 12:02:22.307" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 12:02:22.307" level="INFO">${output} = 2019-11-14 12:02:20 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 12:02:20 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 12:02:22.307" starttime="20191114 12:02:17.514"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 12:02:22.309" level="INFO">2019-11-14 12:02:20 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 12:02:20 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 12:02:20 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 12:02:22.309" starttime="20191114 12:02:22.308"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 12:02:22.309" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 12:02:22.310" starttime="20191114 12:02:22.309"></status>
</kw>
<status status="PASS" endtime="20191114 12:02:22.310" starttime="20191114 12:02:17.512"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 12:02:22.314" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 12:02:24.496" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 12:02:24.496" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191114 12:02:24.496" starttime="20191114 12:02:22.311"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 12:02:24.497" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191114 12:02:24.497" starttime="20191114 12:02:24.497"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 12:02:24.498" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 12:02:24.498" starttime="20191114 12:02:24.498"></status>
</kw>
<msg timestamp="20191114 12:02:24.498" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191114 12:02:24.498" starttime="20191114 12:02:22.310"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:24.499" starttime="20191114 12:02:24.499"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 12:02:24.500" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 12:02:24.500" starttime="20191114 12:02:24.499"></status>
</kw>
<status status="PASS" endtime="20191114 12:02:24.500" starttime="20191114 12:02:17.505"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 12:02:24.503" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 12:02:26.505" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 12:02:26.505" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:26.506" starttime="20191114 12:02:24.501"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 12:02:26.507" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:26.507" starttime="20191114 12:02:26.506"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 12:02:26.508" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 12:02:26.508" starttime="20191114 12:02:26.507"></status>
</kw>
<msg timestamp="20191114 12:02:26.509" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:26.509" starttime="20191114 12:02:24.501"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 12:02:26.509" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:26.509" starttime="20191114 12:02:26.509"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:26.510" starttime="20191114 12:02:26.510"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:26.511" starttime="20191114 12:02:26.511"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 12:02:26.512" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 12:02:26.512" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:26.512" starttime="20191114 12:02:26.511"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 12:02:26.513" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 12:02:26.513" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 12:02:26.513" starttime="20191114 12:02:26.512"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 12:02:26.514" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 12:02:26.514" starttime="20191114 12:02:26.513"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 12:02:26.514" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 12:02:26.514" starttime="20191114 12:02:26.514"></status>
</kw>
<msg timestamp="20191114 12:02:26.515" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 12:02:26.515" starttime="20191114 12:02:24.500"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 12:02:26.516" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 12:02:26.516" starttime="20191114 12:02:26.516"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:26.518" starttime="20191114 12:02:26.517"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 12:02:26.518" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 12:02:27.757" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 12:02:27.757" starttime="20191114 12:02:26.518"></status>
</kw>
<status status="PASS" endtime="20191114 12:02:27.758" starttime="20191114 12:02:26.517"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 12:02:27.759" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 12:02:27.774" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 12:02:27.775" starttime="20191114 12:02:27.758"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 12:02:27.776" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 12:02:27.853" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 12:02:27.853" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 12:02:27.854" starttime="20191114 12:02:27.775"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 12:02:27.969" starttime="20191114 12:02:27.854"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:27.970" starttime="20191114 12:02:27.969"></status>
</kw>
<msg timestamp="20191114 12:02:27.970" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 12:02:27.970" starttime="20191114 12:02:26.515"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 12:02:27.974" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 12:02:29.971" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 12:02:29.971" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:29.971" starttime="20191114 12:02:27.972"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 12:02:29.972" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:29.972" starttime="20191114 12:02:29.972"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 12:02:29.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 12:02:29.973" starttime="20191114 12:02:29.973"></status>
</kw>
<msg timestamp="20191114 12:02:29.973" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:29.973" starttime="20191114 12:02:27.971"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 12:02:29.974" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:29.974" starttime="20191114 12:02:29.974"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:29.975" starttime="20191114 12:02:29.974"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:29.975" starttime="20191114 12:02:29.975"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 12:02:29.976" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 12:02:29.976" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:29.976" starttime="20191114 12:02:29.975"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 12:02:29.976" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 12:02:29.976" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 12:02:29.976" starttime="20191114 12:02:29.976"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 12:02:29.977" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 12:02:29.977" starttime="20191114 12:02:29.977"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 12:02:29.978" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 12:02:29.978" starttime="20191114 12:02:29.977"></status>
</kw>
<msg timestamp="20191114 12:02:29.978" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 12:02:29.978" starttime="20191114 12:02:27.970"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 12:02:29.979" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191114 12:02:29.979" starttime="20191114 12:02:29.978"></status>
</kw>
<status status="FAIL" endtime="20191114 12:02:29.979" critical="yes" starttime="20191114 12:02:12.216">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191114 12:02:29.982" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191114 12:02:29.982" starttime="20191114 12:02:29.980"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191114 12:02:29.983" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191114 12:02:29.983" starttime="20191114 12:02:29.982"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 12:02:29.984" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 12:02:29.984" starttime="20191114 12:02:29.984"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:29.986" starttime="20191114 12:02:29.985"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 12:02:29.986" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 12:02:31.174" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 12:02:31.175" starttime="20191114 12:02:29.986"></status>
</kw>
<status status="PASS" endtime="20191114 12:02:31.175" starttime="20191114 12:02:29.985"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 12:02:31.177" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 12:02:31.193" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 12:02:31.193" starttime="20191114 12:02:31.176"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 12:02:31.194" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 12:02:31.272" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 12:02:31.272" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 12:02:31.272" starttime="20191114 12:02:31.193"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 12:02:31.387" starttime="20191114 12:02:31.272"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:31.388" starttime="20191114 12:02:31.387"></status>
</kw>
<status status="PASS" endtime="20191114 12:02:31.389" starttime="20191114 12:02:29.983"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 12:02:31.391" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 12:02:31.391" starttime="20191114 12:02:31.390"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:31.393" starttime="20191114 12:02:31.392"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 12:02:31.394" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 12:02:32.599" level="INFO">Read output: Last login: Thu Nov 14 12:02:30 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 12:02:32.600" starttime="20191114 12:02:31.393"></status>
</kw>
<status status="PASS" endtime="20191114 12:02:32.600" starttime="20191114 12:02:31.391"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 12:02:32.602" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 12:02:32.617" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 12:02:32.617" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191114 12:02:32.618" starttime="20191114 12:02:32.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 12:02:32.618" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191114 12:02:32.619" starttime="20191114 12:02:32.618"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 12:02:32.620" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191114 12:02:32.620" starttime="20191114 12:02:32.619"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 12:02:32.699" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191114 12:02:32.699" starttime="20191114 12:02:32.620"></status>
</kw>
<status status="FAIL" endtime="20191114 12:02:32.700" starttime="20191114 12:02:31.389"></status>
</kw>
<status status="FAIL" endtime="20191114 12:02:32.700" critical="yes" starttime="20191114 12:02:29.980">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 12:02:32.707" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 12:02:34.583" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 12:02:34.583" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:34.583" starttime="20191114 12:02:32.704"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 12:02:34.584" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:34.585" starttime="20191114 12:02:34.584"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 12:02:34.585" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 12:02:34.585" starttime="20191114 12:02:34.585"></status>
</kw>
<msg timestamp="20191114 12:02:34.586" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:34.586" starttime="20191114 12:02:32.703"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 12:02:34.586" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:34.586" starttime="20191114 12:02:34.586"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:34.587" starttime="20191114 12:02:34.587"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:34.587" starttime="20191114 12:02:34.587"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 12:02:34.588" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 12:02:34.588" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:34.588" starttime="20191114 12:02:34.588"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 12:02:34.589" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 12:02:34.589" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 12:02:34.589" starttime="20191114 12:02:34.588"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 12:02:34.589" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 12:02:34.590" starttime="20191114 12:02:34.589"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 12:02:34.590" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 12:02:34.590" starttime="20191114 12:02:34.590"></status>
</kw>
<msg timestamp="20191114 12:02:34.590" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 12:02:34.590" starttime="20191114 12:02:32.702"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 12:02:34.592" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 12:02:34.592" starttime="20191114 12:02:34.591"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:34.593" starttime="20191114 12:02:34.592"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 12:02:34.593" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 12:02:35.792" level="INFO">Read output: Last login: Thu Nov 14 12:02:26 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 12:02:35.792" starttime="20191114 12:02:34.593"></status>
</kw>
<status status="PASS" endtime="20191114 12:02:35.793" starttime="20191114 12:02:34.592"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 12:02:35.794" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 12:02:35.809" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 12:02:35.810" starttime="20191114 12:02:35.793"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 12:02:35.811" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 12:02:35.888" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 12:02:35.888" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 12:02:35.888" starttime="20191114 12:02:35.810"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 12:02:36.004" starttime="20191114 12:02:35.889"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:36.005" starttime="20191114 12:02:36.004"></status>
</kw>
<msg timestamp="20191114 12:02:36.006" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 12:02:36.006" starttime="20191114 12:02:34.591"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 12:02:36.012" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 12:02:38.094" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 12:02:38.094" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:38.094" starttime="20191114 12:02:36.008"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 12:02:38.096" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:38.096" starttime="20191114 12:02:38.095"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 12:02:38.097" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 12:02:38.098" starttime="20191114 12:02:38.097"></status>
</kw>
<msg timestamp="20191114 12:02:38.098" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:38.099" starttime="20191114 12:02:36.007"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 12:02:38.099" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:38.100" starttime="20191114 12:02:38.099"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:38.101" starttime="20191114 12:02:38.100"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 12:02:38.101" starttime="20191114 12:02:38.101"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 12:02:38.102" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 12:02:38.103" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 12:02:38.103" starttime="20191114 12:02:38.102"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 12:02:38.104" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 12:02:38.104" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 12:02:38.104" starttime="20191114 12:02:38.103"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 12:02:38.105" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 12:02:38.105" starttime="20191114 12:02:38.104"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 12:02:38.106" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 12:02:38.106" starttime="20191114 12:02:38.105"></status>
</kw>
<msg timestamp="20191114 12:02:38.107" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 12:02:38.107" starttime="20191114 12:02:36.006"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 12:02:38.109" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191114 12:02:38.109" starttime="20191114 12:02:38.107"></status>
</kw>
<status status="FAIL" endtime="20191114 12:02:38.109" starttime="20191114 12:02:32.702"></status>
</kw>
<status status="FAIL" endtime="20191114 12:02:38.109" starttime="20191114 12:02:32.702"></status>
</kw>
<status status="FAIL" endtime="20191114 12:02:38.110" critical="yes" starttime="20191114 12:02:32.701">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191114 12:02:38.112" starttime="20191114 12:02:12.056"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
