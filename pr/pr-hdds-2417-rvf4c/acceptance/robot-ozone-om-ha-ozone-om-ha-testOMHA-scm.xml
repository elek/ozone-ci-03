<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191110 22:14:21.186" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:14:21.319" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:14:23.940" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:14:23.940" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191110 22:14:23.940" starttime="20191110 22:14:21.316"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:14:23.941" level="INFO"></msg>
<status status="PASS" endtime="20191110 22:14:23.941" starttime="20191110 22:14:23.940"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:14:23.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:14:23.942" starttime="20191110 22:14:23.941"></status>
</kw>
<status status="PASS" endtime="20191110 22:14:23.942" starttime="20191110 22:14:21.315"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:14:23.948" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:14:26.182" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:14:26.183" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191110 22:14:26.183" starttime="20191110 22:14:23.946"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:14:26.184" level="INFO"></msg>
<status status="PASS" endtime="20191110 22:14:26.184" starttime="20191110 22:14:26.183"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:14:26.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:14:26.185" starttime="20191110 22:14:26.184"></status>
</kw>
<status status="PASS" endtime="20191110 22:14:26.185" starttime="20191110 22:14:23.942"></status>
</kw>
<status status="PASS" endtime="20191110 22:14:26.185" starttime="20191110 22:14:21.314"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 22:14:26.187" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191110 22:14:26.187" starttime="20191110 22:14:26.186"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 22:14:26.188" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191110 22:14:26.188" starttime="20191110 22:14:26.187"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 22:14:26.189" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191110 22:14:26.189" starttime="20191110 22:14:26.188"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:14:26.202" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:14:26.202" starttime="20191110 22:14:26.189"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:14:26.207" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:14:31.090" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:14:31.090" level="INFO">${output} = 2019-11-10 22:14:29 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 22:14:29 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191110 22:14:31.090" starttime="20191110 22:14:26.204"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:14:31.092" level="INFO">2019-11-10 22:14:29 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 22:14:29 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 22:14:29 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 22:14:31.092" starttime="20191110 22:14:31.091"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:14:31.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:14:31.093" starttime="20191110 22:14:31.092"></status>
</kw>
<status status="PASS" endtime="20191110 22:14:31.093" starttime="20191110 22:14:26.203"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:14:31.097" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:14:33.393" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:14:33.393" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191110 22:14:33.394" starttime="20191110 22:14:31.095"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:14:33.395" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191110 22:14:33.396" starttime="20191110 22:14:33.394"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:14:33.397" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:14:33.397" starttime="20191110 22:14:33.396"></status>
</kw>
<msg timestamp="20191110 22:14:33.397" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191110 22:14:33.398" starttime="20191110 22:14:31.094"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:14:33.399" starttime="20191110 22:14:33.398"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:14:33.400" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:14:33.400" starttime="20191110 22:14:33.399"></status>
</kw>
<status status="PASS" endtime="20191110 22:14:33.400" starttime="20191110 22:14:26.186"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:14:33.404" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:14:35.341" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:14:35.342" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:14:35.342" starttime="20191110 22:14:33.402"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:14:35.343" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:14:35.343" starttime="20191110 22:14:35.342"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:14:35.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:14:35.344" starttime="20191110 22:14:35.343"></status>
</kw>
<msg timestamp="20191110 22:14:35.344" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:14:35.344" starttime="20191110 22:14:33.401"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 22:14:35.345" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:14:35.345" starttime="20191110 22:14:35.345"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 22:14:35.347" starttime="20191110 22:14:35.346"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 22:14:35.347" starttime="20191110 22:14:35.347"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 22:14:35.348" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 22:14:35.348" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:14:35.348" starttime="20191110 22:14:35.347"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 22:14:35.349" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191110 22:14:35.349" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 22:14:35.349" starttime="20191110 22:14:35.348"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 22:14:35.350" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191110 22:14:35.350" starttime="20191110 22:14:35.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 22:14:35.350" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191110 22:14:35.351" starttime="20191110 22:14:35.350"></status>
</kw>
<msg timestamp="20191110 22:14:35.351" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191110 22:14:35.351" starttime="20191110 22:14:33.401"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:14:35.353" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191110 22:14:35.353" starttime="20191110 22:14:35.352"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:14:35.354" starttime="20191110 22:14:35.353"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:14:35.355" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:14:36.563" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:14:36.563" starttime="20191110 22:14:35.354"></status>
</kw>
<status status="PASS" endtime="20191110 22:14:36.564" starttime="20191110 22:14:35.353"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 22:14:36.565" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 22:14:46.747" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:14:46.748" starttime="20191110 22:14:36.564"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 22:14:46.749" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:14:46.857" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:14:46.858" level="INFO">${shutdownMsg} = hadoop     458  0.0  0.0   9556  1168 ?        Ss   22:14   0:00 bash -c sudo ps aux | grep om
hadoop     460  0.0  0.0   9088   672 ?        S    22:14   0:00 grep om</msg>
<status status="PASS" endtime="20191110 22:14:46.858" starttime="20191110 22:14:46.748"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:14:46.923" starttime="20191110 22:14:46.858"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:14:46.924" starttime="20191110 22:14:46.924"></status>
</kw>
<msg timestamp="20191110 22:14:46.925" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191110 22:14:46.925" starttime="20191110 22:14:35.351"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:14:46.930" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:14:59.171" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:14:59.172" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:14:59.172" starttime="20191110 22:14:46.926"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:14:59.173" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:14:59.173" starttime="20191110 22:14:59.172"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:14:59.174" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:14:59.174" starttime="20191110 22:14:59.173"></status>
</kw>
<msg timestamp="20191110 22:14:59.174" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:14:59.174" starttime="20191110 22:14:46.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 22:14:59.175" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:14:59.175" starttime="20191110 22:14:59.174"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 22:14:59.175" starttime="20191110 22:14:59.175"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 22:14:59.176" starttime="20191110 22:14:59.176"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 22:14:59.176" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 22:14:59.177" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:14:59.177" starttime="20191110 22:14:59.176"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 22:14:59.177" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191110 22:14:59.177" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 22:14:59.177" starttime="20191110 22:14:59.177"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 22:14:59.178" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191110 22:14:59.178" starttime="20191110 22:14:59.178"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 22:14:59.179" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191110 22:14:59.179" starttime="20191110 22:14:59.178"></status>
</kw>
<msg timestamp="20191110 22:14:59.179" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191110 22:14:59.179" starttime="20191110 22:14:46.925"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191110 22:14:59.180" starttime="20191110 22:14:59.179"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 22:14:59.181" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191110 22:14:59.181" starttime="20191110 22:14:59.180"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 22:14:59.182" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191110 22:14:59.182" starttime="20191110 22:14:59.181"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 22:14:59.182" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191110 22:14:59.182" starttime="20191110 22:14:59.182"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:14:59.184" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:14:59.184" starttime="20191110 22:14:59.183"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:14:59.187" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:15:14.100" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:15:14.100" level="INFO">${output} = 2019-11-10 22:15:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191110 22:15:14.100" starttime="20191110 22:14:59.185"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:15:14.102" level="INFO">2019-11-10 22:15:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:15:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:15:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:15:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:15:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:15:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:15:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:15:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:15:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:15:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:15:12 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 22:15:12 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 22:15:12 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 22:15:14.102" starttime="20191110 22:15:14.101"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:15:14.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:15:14.104" starttime="20191110 22:15:14.102"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:14.104" starttime="20191110 22:14:59.184"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:15:14.108" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:15:26.512" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:15:26.512" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191110 22:15:26.512" starttime="20191110 22:15:14.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:15:26.514" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191110 22:15:26.514" starttime="20191110 22:15:26.513"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:15:26.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:15:26.515" starttime="20191110 22:15:26.514"></status>
</kw>
<msg timestamp="20191110 22:15:26.515" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191110 22:15:26.515" starttime="20191110 22:15:14.105"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:15:26.516" starttime="20191110 22:15:26.515"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:15:26.517" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:15:26.517" starttime="20191110 22:15:26.516"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:26.517" starttime="20191110 22:14:59.180"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:15:26.519" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191110 22:15:26.519" starttime="20191110 22:15:26.518"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:15:26.520" starttime="20191110 22:15:26.520"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:15:26.521" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:15:27.710" level="INFO">Read output: Last login: Sun Nov 10 22:14:35 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:15:27.711" starttime="20191110 22:15:26.521"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:27.711" starttime="20191110 22:15:26.519"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 22:15:27.712" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 22:15:29.903" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:15:29.903" starttime="20191110 22:15:27.712"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 22:15:29.904" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:15:30.002" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:15:30.002" level="INFO">${startupMsg} = hadoop     511  352  0.0 34477388 214740 ?     Sl   22:15   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 22:15:30.002" starttime="20191110 22:15:29.904"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:15:30.067" starttime="20191110 22:15:30.003"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:15:30.069" starttime="20191110 22:15:30.068"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:30.069" starttime="20191110 22:15:26.518"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:30.069" critical="yes" starttime="20191110 22:14:21.313"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191110 22:15:30.076" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191110 22:15:30.076" starttime="20191110 22:15:30.073"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191110 22:15:30.078" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191110 22:15:30.079" starttime="20191110 22:15:30.076"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:15:30.080" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 22:15:30.080" starttime="20191110 22:15:30.080"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:15:30.082" starttime="20191110 22:15:30.081"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:15:30.083" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:15:31.288" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:15:31.288" starttime="20191110 22:15:30.082"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:31.288" starttime="20191110 22:15:30.081"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 22:15:31.289" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 22:15:41.440" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:15:41.440" starttime="20191110 22:15:31.289"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 22:15:41.442" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:15:41.518" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:15:41.519" level="INFO">${shutdownMsg} = hadoop     497  0.0  0.0   9556  1168 ?        Ss   22:15   0:00 bash -c sudo ps aux | grep om
hadoop     499  0.0  0.0   9088   668 ?        S    22:15   0:00 grep om</msg>
<status status="PASS" endtime="20191110 22:15:41.519" starttime="20191110 22:15:41.441"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:15:41.584" starttime="20191110 22:15:41.519"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:15:41.585" starttime="20191110 22:15:41.584"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:41.585" starttime="20191110 22:15:30.079"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:15:41.588" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 22:15:41.588" starttime="20191110 22:15:41.587"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:15:41.590" starttime="20191110 22:15:41.589"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:15:41.591" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:15:42.795" level="INFO">Read output: Last login: Sun Nov 10 22:15:30 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:15:42.796" starttime="20191110 22:15:41.590"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:42.796" starttime="20191110 22:15:41.588"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191110 22:15:42.797" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191110 22:15:42.812" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:15:42.812" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 22:15:42.812" starttime="20191110 22:15:42.796"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191110 22:15:42.813" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 22:15:42.813" starttime="20191110 22:15:42.812"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191110 22:15:42.814" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191110 22:15:42.814" starttime="20191110 22:15:42.813"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191110 22:15:42.894" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191110 22:15:42.907" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191110 22:15:42.908" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191110 22:15:42.908" starttime="20191110 22:15:42.814"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191110 22:15:42.910" level="INFO">Length is 2</msg>
<msg timestamp="20191110 22:15:42.910" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191110 22:15:42.911" starttime="20191110 22:15:42.909"></status>
</kw>
<msg timestamp="20191110 22:15:42.911" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191110 22:15:42.912" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191110 22:15:42.912" starttime="20191110 22:15:41.586"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:15:42.917" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:15:45.093" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:15:45.094" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:15:45.094" starttime="20191110 22:15:42.914"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:15:45.095" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:15:45.095" starttime="20191110 22:15:45.094"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:15:45.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:15:45.096" starttime="20191110 22:15:45.095"></status>
</kw>
<msg timestamp="20191110 22:15:45.097" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:15:45.097" starttime="20191110 22:15:42.913"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 22:15:45.097" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:15:45.097" starttime="20191110 22:15:45.097"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 22:15:45.098" starttime="20191110 22:15:45.098"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 22:15:45.099" starttime="20191110 22:15:45.098"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 22:15:45.099" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 22:15:45.100" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:15:45.100" starttime="20191110 22:15:45.099"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 22:15:45.100" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191110 22:15:45.100" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 22:15:45.100" starttime="20191110 22:15:45.100"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 22:15:45.101" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 22:15:45.101" starttime="20191110 22:15:45.101"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 22:15:45.102" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191110 22:15:45.102" starttime="20191110 22:15:45.101"></status>
</kw>
<msg timestamp="20191110 22:15:45.102" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 22:15:45.102" starttime="20191110 22:15:42.912"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191110 22:15:45.105" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191110 22:15:45.105" starttime="20191110 22:15:45.103"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191110 22:15:45.107" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191110 22:15:45.107" starttime="20191110 22:15:45.107"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191110 22:15:45.108" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191110 22:15:45.108" starttime="20191110 22:15:45.108"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:15:45.112" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:15:49.756" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:15:49.756" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191110 22:15:49.756" starttime="20191110 22:15:45.110"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:15:49.758" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 22:15:49.758" starttime="20191110 22:15:49.757"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:15:49.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:15:49.759" starttime="20191110 22:15:49.758"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:49.759" starttime="20191110 22:15:45.109"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:15:49.764" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:15:52.161" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:15:52.162" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573424147384,
  "modificationTime": 1573424149326,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 22:15:52.162" starttime="20191110 22:15:49.762"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:15:52.163" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573424147384,
  "modificationTime": 1573424149326,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103115924922302460,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191110 22:15:52.163" starttime="20191110 22:15:52.162"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:15:52.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:15:52.164" starttime="20191110 22:15:52.163"></status>
</kw>
<msg timestamp="20191110 22:15:52.164" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573424147384,
  "modificationTime": 1573424149326,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 22:15:52.164" starttime="20191110 22:15:49.760"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191110 22:15:52.165" starttime="20191110 22:15:52.164"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:52.165" starttime="20191110 22:15:45.108"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:52.165" starttime="20191110 22:15:45.106"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191110 22:15:52.166" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191110 22:15:52.166" starttime="20191110 22:15:52.165"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191110 22:15:52.166" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191110 22:15:52.166" starttime="20191110 22:15:52.166"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:15:52.169" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:15:56.643" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:15:56.644" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191110 22:15:56.644" starttime="20191110 22:15:52.168"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:15:56.646" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 22:15:56.646" starttime="20191110 22:15:56.645"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:15:56.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:15:56.648" starttime="20191110 22:15:56.647"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:56.648" starttime="20191110 22:15:52.167"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:15:56.654" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:15:58.950" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:15:58.951" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573424154312,
  "modificationTime": 1573424156224,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 22:15:58.951" starttime="20191110 22:15:56.651"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:15:58.952" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573424154312,
  "modificationTime": 1573424156224,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103115925376860160,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191110 22:15:58.952" starttime="20191110 22:15:58.951"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:15:58.953" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:15:58.953" starttime="20191110 22:15:58.952"></status>
</kw>
<msg timestamp="20191110 22:15:58.953" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573424154312,
  "modificationTime": 1573424156224,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 22:15:58.954" starttime="20191110 22:15:56.649"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191110 22:15:58.954" starttime="20191110 22:15:58.954"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:58.954" starttime="20191110 22:15:52.166"></status>
</kw>
<status status="PASS" endtime="20191110 22:15:58.955" starttime="20191110 22:15:52.165"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191110 22:15:58.956" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191110 22:15:58.956" starttime="20191110 22:15:58.955"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191110 22:15:58.956" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191110 22:15:58.956" starttime="20191110 22:15:58.956"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:15:58.961" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:16:03.394" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:16:03.395" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191110 22:16:03.395" starttime="20191110 22:15:58.959"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:16:03.397" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 22:16:03.397" starttime="20191110 22:16:03.396"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:16:03.398" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:16:03.398" starttime="20191110 22:16:03.397"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:03.399" starttime="20191110 22:15:58.957"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:16:03.405" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:16:05.885" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:16:05.885" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573424161013,
  "modificationTime": 1573424162967,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 22:16:05.886" starttime="20191110 22:16:03.402"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:16:05.887" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573424161013,
  "modificationTime": 1573424162967,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103115925816016900,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191110 22:16:05.887" starttime="20191110 22:16:05.886"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:16:05.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:16:05.888" starttime="20191110 22:16:05.887"></status>
</kw>
<msg timestamp="20191110 22:16:05.888" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573424161013,
  "modificationTime": 1573424162967,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 22:16:05.888" starttime="20191110 22:16:03.399"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:05.889" starttime="20191110 22:16:05.888"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:05.889" starttime="20191110 22:15:58.957"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:05.889" starttime="20191110 22:15:58.955"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191110 22:16:05.890" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191110 22:16:05.890" starttime="20191110 22:16:05.889"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191110 22:16:05.890" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191110 22:16:05.890" starttime="20191110 22:16:05.890"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:16:05.894" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:16:10.385" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:16:10.385" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191110 22:16:10.385" starttime="20191110 22:16:05.892"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:16:10.387" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 22:16:10.388" starttime="20191110 22:16:10.386"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:16:10.389" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:16:10.389" starttime="20191110 22:16:10.388"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:10.390" starttime="20191110 22:16:05.891"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:16:10.395" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:16:12.888" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:16:12.888" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573424168115,
  "modificationTime": 1573424169968,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 22:16:12.889" starttime="20191110 22:16:10.392"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:16:12.890" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573424168115,
  "modificationTime": 1573424169968,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103115926281453570,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191110 22:16:12.891" starttime="20191110 22:16:12.890"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:16:12.892" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:16:12.892" starttime="20191110 22:16:12.891"></status>
</kw>
<msg timestamp="20191110 22:16:12.892" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573424168115,
  "modificationTime": 1573424169968,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 22:16:12.893" starttime="20191110 22:16:10.390"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:12.894" starttime="20191110 22:16:12.893"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:12.894" starttime="20191110 22:16:05.891"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:12.894" starttime="20191110 22:16:05.889"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191110 22:16:12.895" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:16:12.895" starttime="20191110 22:16:12.894"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191110 22:16:12.896" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:16:12.896" starttime="20191110 22:16:12.896"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:16:12.902" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:16:17.553" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:16:17.553" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191110 22:16:17.553" starttime="20191110 22:16:12.899"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:16:17.555" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 22:16:17.555" starttime="20191110 22:16:17.554"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:16:17.556" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:16:17.556" starttime="20191110 22:16:17.555"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:17.557" starttime="20191110 22:16:12.898"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:16:17.562" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:16:20.070" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:16:20.070" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573424174997,
  "modificationTime": 1573424177131,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 22:16:20.070" starttime="20191110 22:16:17.559"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:16:20.072" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573424174997,
  "modificationTime": 1573424177131,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103115926732472320,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191110 22:16:20.072" starttime="20191110 22:16:20.071"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:16:20.073" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:16:20.074" starttime="20191110 22:16:20.073"></status>
</kw>
<msg timestamp="20191110 22:16:20.074" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573424174997,
  "modificationTime": 1573424177131,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191110 22:16:20.074" starttime="20191110 22:16:17.557"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:20.076" starttime="20191110 22:16:20.075"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:20.076" starttime="20191110 22:16:12.897"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:20.076" starttime="20191110 22:16:12.894"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:20.076" starttime="20191110 22:15:45.106"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:20.076" starttime="20191110 22:15:45.105"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:16:20.079" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191110 22:16:20.079" starttime="20191110 22:16:20.078"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:20.081" starttime="20191110 22:16:20.080"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:16:20.082" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:16:21.283" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:16:21.283" starttime="20191110 22:16:20.081"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:21.284" starttime="20191110 22:16:20.079"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191110 22:16:21.285" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191110 22:16:21.300" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:16:21.301" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 22:16:21.301" starttime="20191110 22:16:21.284"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191110 22:16:21.302" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 22:16:21.302" starttime="20191110 22:16:21.301"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191110 22:16:21.303" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191110 22:16:21.303" starttime="20191110 22:16:21.302"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191110 22:16:21.383" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191110 22:16:21.393" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191110 22:16:21.394" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191110 22:16:21.394" starttime="20191110 22:16:21.304"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191110 22:16:21.395" level="INFO">Length is 3</msg>
<msg timestamp="20191110 22:16:21.395" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191110 22:16:21.395" starttime="20191110 22:16:21.394"></status>
</kw>
<msg timestamp="20191110 22:16:21.396" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191110 22:16:21.396" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191110 22:16:21.396" starttime="20191110 22:16:20.077"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191110 22:16:21.397" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191110 22:16:21.398" starttime="20191110 22:16:21.396"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:21.398" starttime="20191110 22:15:45.103"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:21.398" starttime="20191110 22:15:45.103"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:21.399" starttime="20191110 22:16:21.398"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:16:21.401" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 22:16:21.401" starttime="20191110 22:16:21.400"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:21.403" starttime="20191110 22:16:21.403"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:16:21.404" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:16:22.592" level="INFO">Read output: Last login: Sun Nov 10 22:15:41 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:16:22.593" starttime="20191110 22:16:21.404"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:22.593" starttime="20191110 22:16:21.401"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 22:16:22.594" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 22:16:24.773" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:16:24.773" starttime="20191110 22:16:22.594"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 22:16:24.774" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:16:24.872" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:16:24.873" level="INFO">${startupMsg} = hadoop     572  340  0.0 34474032 201332 ?     Sl   22:16   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 22:16:24.873" starttime="20191110 22:16:24.774"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:16:24.938" starttime="20191110 22:16:24.873"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:24.939" starttime="20191110 22:16:24.938"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:24.939" starttime="20191110 22:16:21.399"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:16:24.942" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 22:16:24.942" starttime="20191110 22:16:24.941"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:24.944" starttime="20191110 22:16:24.943"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:16:24.944" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:16:26.146" level="INFO">Read output: Last login: Sun Nov 10 22:16:21 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:16:26.146" starttime="20191110 22:16:24.944"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:26.146" starttime="20191110 22:16:24.942"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191110 22:16:26.147" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191110 22:16:26.162" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:16:26.162" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 22:16:26.162" starttime="20191110 22:16:26.147"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191110 22:16:26.163" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 22:16:26.163" starttime="20191110 22:16:26.162"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191110 22:16:26.164" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191110 22:16:26.164" starttime="20191110 22:16:26.163"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191110 22:16:26.241" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191110 22:16:26.250" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191110 22:16:26.250" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191110 22:16:26.250" starttime="20191110 22:16:26.164"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191110 22:16:26.251" level="INFO">Length is 2</msg>
<msg timestamp="20191110 22:16:26.251" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191110 22:16:26.251" starttime="20191110 22:16:26.251"></status>
</kw>
<msg timestamp="20191110 22:16:26.252" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191110 22:16:26.252" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191110 22:16:26.252" starttime="20191110 22:16:24.940"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:26.253" starttime="20191110 22:16:26.252"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191110 22:16:27.254" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191110 22:16:27.255" starttime="20191110 22:16:26.253"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:27.255" starttime="20191110 22:16:24.940"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:16:27.257" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 22:16:27.258" starttime="20191110 22:16:27.257"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:27.259" starttime="20191110 22:16:27.259"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:16:27.260" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:16:28.459" level="INFO">Read output: Last login: Sun Nov 10 22:16:25 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:16:28.460" starttime="20191110 22:16:27.260"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:28.460" starttime="20191110 22:16:27.258"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191110 22:16:28.462" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191110 22:16:28.488" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:16:28.488" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 22:16:28.488" starttime="20191110 22:16:28.461"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191110 22:16:28.489" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191110 22:16:28.489" starttime="20191110 22:16:28.489"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191110 22:16:28.491" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191110 22:16:28.491" starttime="20191110 22:16:28.490"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191110 22:16:28.540" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191110 22:16:28.552" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191110 22:16:28.553" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191110 22:16:28.553" starttime="20191110 22:16:28.491"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191110 22:16:28.554" level="INFO">Length is 3</msg>
<msg timestamp="20191110 22:16:28.555" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191110 22:16:28.555" starttime="20191110 22:16:28.554"></status>
</kw>
<msg timestamp="20191110 22:16:28.556" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191110 22:16:28.556" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191110 22:16:28.556" starttime="20191110 22:16:27.255"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191110 22:16:28.558" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191110 22:16:28.558" starttime="20191110 22:16:28.556"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:28.558" starttime="20191110 22:16:27.255"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:28.558" starttime="20191110 22:16:24.939"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:28.560" starttime="20191110 22:16:28.558"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:28.561" starttime="20191110 22:16:28.560"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:28.561" critical="yes" starttime="20191110 22:15:30.070"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:16:28.569" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:16:30.694" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:16:30.694" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:16:30.694" starttime="20191110 22:16:28.566"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:16:30.695" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:16:30.696" starttime="20191110 22:16:30.695"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:16:30.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:16:30.696" starttime="20191110 22:16:30.696"></status>
</kw>
<msg timestamp="20191110 22:16:30.697" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:16:30.697" starttime="20191110 22:16:28.565"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 22:16:30.697" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:16:30.698" starttime="20191110 22:16:30.697"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:30.698" starttime="20191110 22:16:30.698"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:30.699" starttime="20191110 22:16:30.698"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 22:16:30.699" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 22:16:30.700" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:16:30.700" starttime="20191110 22:16:30.699"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 22:16:30.700" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191110 22:16:30.701" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 22:16:30.701" starttime="20191110 22:16:30.700"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 22:16:30.701" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 22:16:30.701" starttime="20191110 22:16:30.701"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 22:16:30.702" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191110 22:16:30.702" starttime="20191110 22:16:30.702"></status>
</kw>
<msg timestamp="20191110 22:16:30.702" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 22:16:30.703" starttime="20191110 22:16:28.564"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:16:30.704" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191110 22:16:30.704" starttime="20191110 22:16:30.703"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:30.705" starttime="20191110 22:16:30.705"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:16:30.706" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:16:31.912" level="INFO">Read output: Last login: Sun Nov 10 22:16:20 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:16:31.914" starttime="20191110 22:16:30.706"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:31.915" starttime="20191110 22:16:30.704"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 22:16:31.916" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 22:16:42.090" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:16:42.090" starttime="20191110 22:16:31.915"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 22:16:42.091" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:16:42.200" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:16:42.200" level="INFO">${shutdownMsg} = hadoop     532  0.0  0.0   9556  1168 ?        Ss   22:16   0:00 bash -c sudo ps aux | grep om
hadoop     534  0.0  0.0   9088   672 ?        S    22:16   0:00 grep om</msg>
<status status="PASS" endtime="20191110 22:16:42.200" starttime="20191110 22:16:42.091"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:16:42.234" starttime="20191110 22:16:42.201"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:42.235" starttime="20191110 22:16:42.234"></status>
</kw>
<msg timestamp="20191110 22:16:42.236" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191110 22:16:42.236" starttime="20191110 22:16:30.703"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:16:42.241" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:16:54.425" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:16:54.425" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:16:54.425" starttime="20191110 22:16:42.238"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:16:54.427" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:16:54.427" starttime="20191110 22:16:54.426"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:16:54.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:16:54.428" starttime="20191110 22:16:54.427"></status>
</kw>
<msg timestamp="20191110 22:16:54.428" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:16:54.428" starttime="20191110 22:16:42.237"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 22:16:54.429" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:16:54.429" starttime="20191110 22:16:54.428"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:54.429" starttime="20191110 22:16:54.429"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:54.430" starttime="20191110 22:16:54.430"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 22:16:54.430" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 22:16:54.431" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:16:54.431" starttime="20191110 22:16:54.430"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 22:16:54.431" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191110 22:16:54.431" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 22:16:54.432" starttime="20191110 22:16:54.431"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 22:16:54.432" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191110 22:16:54.432" starttime="20191110 22:16:54.432"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 22:16:54.433" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191110 22:16:54.433" starttime="20191110 22:16:54.432"></status>
</kw>
<msg timestamp="20191110 22:16:54.433" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191110 22:16:54.433" starttime="20191110 22:16:42.236"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191110 22:16:54.434" starttime="20191110 22:16:54.433"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 22:16:54.435" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191110 22:16:54.435" starttime="20191110 22:16:54.435"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 22:16:54.436" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191110 22:16:54.436" starttime="20191110 22:16:54.435"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 22:16:54.437" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191110 22:16:54.437" starttime="20191110 22:16:54.436"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:16:54.438" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:16:54.438" starttime="20191110 22:16:54.437"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:16:54.441" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:16:58.928" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:16:58.928" level="INFO">${output} = 2019-11-10 22:16:57 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 22:16:57 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191110 22:16:58.928" starttime="20191110 22:16:54.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:16:58.931" level="INFO">2019-11-10 22:16:57 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 22:16:57 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 22:16:57 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 22:16:58.933" starttime="20191110 22:16:58.929"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:16:58.936" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:16:58.936" starttime="20191110 22:16:58.934"></status>
</kw>
<status status="PASS" endtime="20191110 22:16:58.937" starttime="20191110 22:16:54.438"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:16:58.941" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:17:01.182" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:17:01.182" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:17:01.182" starttime="20191110 22:16:58.938"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:17:01.183" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:17:01.184" starttime="20191110 22:17:01.183"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:17:01.184" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:17:01.185" starttime="20191110 22:17:01.184"></status>
</kw>
<msg timestamp="20191110 22:17:01.185" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:17:01.185" starttime="20191110 22:16:58.937"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:01.186" starttime="20191110 22:17:01.186"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:17:01.188" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:17:01.189" starttime="20191110 22:17:01.187"></status>
</kw>
<status status="PASS" endtime="20191110 22:17:01.189" starttime="20191110 22:16:54.434"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:17:01.190" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191110 22:17:01.190" starttime="20191110 22:17:01.190"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:01.191" starttime="20191110 22:17:01.191"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:17:01.192" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:17:02.384" level="INFO">Read output: Last login: Sun Nov 10 22:16:30 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:17:02.384" starttime="20191110 22:17:01.192"></status>
</kw>
<status status="PASS" endtime="20191110 22:17:02.385" starttime="20191110 22:17:01.190"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 22:17:02.386" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 22:17:04.574" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:17:04.575" starttime="20191110 22:17:02.385"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 22:17:04.576" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:17:04.683" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:17:04.684" level="INFO">${startupMsg} = hadoop     585  344  0.0 34480360 212708 ?     Sl   22:17   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 22:17:04.684" starttime="20191110 22:17:04.575"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:17:04.717" starttime="20191110 22:17:04.684"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:04.717" starttime="20191110 22:17:04.717"></status>
</kw>
<status status="PASS" endtime="20191110 22:17:04.718" starttime="20191110 22:17:01.189"></status>
</kw>
<status status="PASS" endtime="20191110 22:17:04.718" starttime="20191110 22:16:28.564"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:17:04.721" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:17:06.587" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:17:06.588" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:06.588" starttime="20191110 22:17:04.719"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:17:06.589" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:06.590" starttime="20191110 22:17:06.589"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:17:06.590" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:17:06.591" starttime="20191110 22:17:06.590"></status>
</kw>
<msg timestamp="20191110 22:17:06.591" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:06.591" starttime="20191110 22:17:04.718"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 22:17:06.592" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:06.592" starttime="20191110 22:17:06.591"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:06.593" starttime="20191110 22:17:06.592"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:06.594" starttime="20191110 22:17:06.593"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 22:17:06.594" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 22:17:06.595" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:06.595" starttime="20191110 22:17:06.594"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 22:17:06.595" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191110 22:17:06.596" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 22:17:06.596" starttime="20191110 22:17:06.595"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 22:17:06.596" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191110 22:17:06.596" starttime="20191110 22:17:06.596"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 22:17:06.597" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191110 22:17:06.597" starttime="20191110 22:17:06.597"></status>
</kw>
<msg timestamp="20191110 22:17:06.597" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191110 22:17:06.598" starttime="20191110 22:17:04.718"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:17:06.599" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191110 22:17:06.599" starttime="20191110 22:17:06.599"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:06.601" starttime="20191110 22:17:06.601"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:17:06.602" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:17:07.789" level="INFO">Read output: Last login: Sun Nov 10 22:15:26 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:17:07.789" starttime="20191110 22:17:06.601"></status>
</kw>
<status status="PASS" endtime="20191110 22:17:07.789" starttime="20191110 22:17:06.600"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 22:17:07.791" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 22:17:08.929" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:17:08.930" starttime="20191110 22:17:07.790"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 22:17:08.931" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:17:09.008" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:17:09.009" level="INFO">${shutdownMsg} = hadoop    1072  0.0  0.0   9556  1164 ?        Ss   22:17   0:00 bash -c sudo ps aux | grep om
hadoop    1074  0.0  0.0   9088   668 ?        S    22:17   0:00 grep om</msg>
<status status="PASS" endtime="20191110 22:17:09.009" starttime="20191110 22:17:08.931"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:17:09.074" starttime="20191110 22:17:09.009"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:09.076" starttime="20191110 22:17:09.075"></status>
</kw>
<msg timestamp="20191110 22:17:09.076" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191110 22:17:09.076" starttime="20191110 22:17:06.598"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:17:09.080" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:17:21.280" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:17:21.280" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:21.280" starttime="20191110 22:17:09.078"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:17:21.282" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:21.282" starttime="20191110 22:17:21.281"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:17:21.283" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:17:21.283" starttime="20191110 22:17:21.282"></status>
</kw>
<msg timestamp="20191110 22:17:21.284" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:21.284" starttime="20191110 22:17:09.077"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 22:17:21.285" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:21.285" starttime="20191110 22:17:21.284"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:21.286" starttime="20191110 22:17:21.285"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:21.287" starttime="20191110 22:17:21.286"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 22:17:21.288" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 22:17:21.288" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:21.288" starttime="20191110 22:17:21.287"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 22:17:21.289" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191110 22:17:21.289" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 22:17:21.290" starttime="20191110 22:17:21.289"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 22:17:21.290" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191110 22:17:21.291" starttime="20191110 22:17:21.290"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 22:17:21.291" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191110 22:17:21.292" starttime="20191110 22:17:21.291"></status>
</kw>
<msg timestamp="20191110 22:17:21.292" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191110 22:17:21.292" starttime="20191110 22:17:09.076"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:21.293" starttime="20191110 22:17:21.292"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 22:17:21.295" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191110 22:17:21.295" starttime="20191110 22:17:21.294"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 22:17:21.297" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191110 22:17:21.297" starttime="20191110 22:17:21.296"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 22:17:21.298" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191110 22:17:21.298" starttime="20191110 22:17:21.297"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:17:21.300" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:17:21.300" starttime="20191110 22:17:21.298"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:17:21.305" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:17:35.724" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:17:35.724" level="INFO">${output} = 2019-11-10 22:17:24 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191110 22:17:35.724" starttime="20191110 22:17:21.302"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:17:35.725" level="INFO">2019-11-10 22:17:24 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:17:25 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:17:26 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:17:27 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:17:28 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:17:29 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:17:30 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:17:31 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:17:32 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:17:33 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-10 22:17:34 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 22:17:34 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 22:17:34 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 22:17:35.726" starttime="20191110 22:17:35.725"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:17:35.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:17:35.727" starttime="20191110 22:17:35.726"></status>
</kw>
<status status="PASS" endtime="20191110 22:17:35.727" starttime="20191110 22:17:21.301"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:17:35.731" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:17:48.155" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:17:48.155" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:17:48.156" starttime="20191110 22:17:35.728"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:17:48.157" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:17:48.157" starttime="20191110 22:17:48.156"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:17:48.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:17:48.158" starttime="20191110 22:17:48.158"></status>
</kw>
<msg timestamp="20191110 22:17:48.159" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:17:48.159" starttime="20191110 22:17:35.727"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:48.160" starttime="20191110 22:17:48.159"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:17:48.161" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:17:48.161" starttime="20191110 22:17:48.160"></status>
</kw>
<status status="PASS" endtime="20191110 22:17:48.161" starttime="20191110 22:17:21.294"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:17:48.163" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191110 22:17:48.163" starttime="20191110 22:17:48.162"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:48.164" starttime="20191110 22:17:48.164"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:17:48.165" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:17:49.371" level="INFO">Read output: Last login: Sun Nov 10 22:17:06 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:17:49.371" starttime="20191110 22:17:48.165"></status>
</kw>
<status status="PASS" endtime="20191110 22:17:49.371" starttime="20191110 22:17:48.163"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 22:17:49.373" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 22:17:51.522" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:17:51.523" starttime="20191110 22:17:49.372"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 22:17:51.524" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:17:51.622" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:17:51.622" level="INFO">${startupMsg} = hadoop    1123  335  0.0 34475624 210344 ?     Sl   22:17   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 22:17:51.623" starttime="20191110 22:17:51.523"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:17:51.688" starttime="20191110 22:17:51.623"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:51.690" starttime="20191110 22:17:51.689"></status>
</kw>
<status status="PASS" endtime="20191110 22:17:51.690" starttime="20191110 22:17:48.161"></status>
</kw>
<status status="PASS" endtime="20191110 22:17:51.690" starttime="20191110 22:17:04.718"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:17:51.695" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:17:54.567" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:17:54.567" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:54.567" starttime="20191110 22:17:51.692"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:17:54.569" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:54.569" starttime="20191110 22:17:54.568"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:17:54.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:17:54.570" starttime="20191110 22:17:54.569"></status>
</kw>
<msg timestamp="20191110 22:17:54.571" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:54.571" starttime="20191110 22:17:51.691"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 22:17:54.572" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:54.572" starttime="20191110 22:17:54.571"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:54.573" starttime="20191110 22:17:54.572"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:54.574" starttime="20191110 22:17:54.573"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 22:17:54.575" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 22:17:54.576" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:54.576" starttime="20191110 22:17:54.574"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 22:17:54.577" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191110 22:17:54.577" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 22:17:54.577" starttime="20191110 22:17:54.576"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 22:17:54.578" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191110 22:17:54.578" starttime="20191110 22:17:54.577"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 22:17:54.579" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191110 22:17:54.579" starttime="20191110 22:17:54.578"></status>
</kw>
<msg timestamp="20191110 22:17:54.579" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191110 22:17:54.579" starttime="20191110 22:17:51.691"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:17:54.581" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 22:17:54.581" starttime="20191110 22:17:54.580"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:54.583" starttime="20191110 22:17:54.582"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:17:54.584" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:17:55.789" level="INFO">Read output: Last login: Sun Nov 10 22:16:27 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:17:55.789" starttime="20191110 22:17:54.583"></status>
</kw>
<status status="PASS" endtime="20191110 22:17:55.790" starttime="20191110 22:17:54.581"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 22:17:55.791" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 22:17:56.962" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:17:56.962" starttime="20191110 22:17:55.790"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 22:17:56.963" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:17:57.039" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:17:57.040" level="INFO">${shutdownMsg} = hadoop    1197  0.0  0.0   9556  1168 ?        Ss   22:17   0:00 bash -c sudo ps aux | grep om
hadoop    1199  0.0  0.0   9088   672 ?        S    22:17   0:00 grep om</msg>
<status status="PASS" endtime="20191110 22:17:57.040" starttime="20191110 22:17:56.963"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:17:57.105" starttime="20191110 22:17:57.040"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:57.107" starttime="20191110 22:17:57.106"></status>
</kw>
<msg timestamp="20191110 22:17:57.107" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191110 22:17:57.107" starttime="20191110 22:17:54.580"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:17:57.112" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:17:59.348" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:17:59.349" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:59.349" starttime="20191110 22:17:57.109"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:17:59.351" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:59.351" starttime="20191110 22:17:59.350"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:17:59.352" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:17:59.352" starttime="20191110 22:17:59.351"></status>
</kw>
<msg timestamp="20191110 22:17:59.353" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:59.353" starttime="20191110 22:17:57.108"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 22:17:59.354" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:59.354" starttime="20191110 22:17:59.353"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:59.355" starttime="20191110 22:17:59.354"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:59.356" starttime="20191110 22:17:59.355"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 22:17:59.357" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 22:17:59.357" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:17:59.357" starttime="20191110 22:17:59.356"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 22:17:59.358" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191110 22:17:59.358" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 22:17:59.358" starttime="20191110 22:17:59.357"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 22:17:59.359" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 22:17:59.359" starttime="20191110 22:17:59.359"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 22:17:59.360" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191110 22:17:59.360" starttime="20191110 22:17:59.360"></status>
</kw>
<msg timestamp="20191110 22:17:59.361" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191110 22:17:59.361" starttime="20191110 22:17:57.107"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191110 22:17:59.362" starttime="20191110 22:17:59.361"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 22:17:59.364" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191110 22:17:59.365" starttime="20191110 22:17:59.364"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 22:17:59.366" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191110 22:17:59.366" starttime="20191110 22:17:59.365"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 22:17:59.367" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191110 22:17:59.367" starttime="20191110 22:17:59.366"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:17:59.369" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:17:59.369" starttime="20191110 22:17:59.367"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:17:59.373" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:18:03.981" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:18:03.982" level="INFO">${output} = 2019-11-10 22:18:02 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 22:18:02 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191110 22:18:03.982" starttime="20191110 22:17:59.370"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:18:03.983" level="INFO">2019-11-10 22:18:02 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 22:18:02 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 22:18:02 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 22:18:03.983" starttime="20191110 22:18:03.982"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:18:03.984" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:18:03.984" starttime="20191110 22:18:03.983"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:03.984" starttime="20191110 22:17:59.369"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:18:03.987" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:18:06.209" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:18:06.209" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:18:06.209" starttime="20191110 22:18:03.985"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:18:06.210" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:18:06.211" starttime="20191110 22:18:06.210"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:18:06.211" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:18:06.212" starttime="20191110 22:18:06.211"></status>
</kw>
<msg timestamp="20191110 22:18:06.212" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:18:06.212" starttime="20191110 22:18:03.984"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:06.213" starttime="20191110 22:18:06.213"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:18:06.215" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:18:06.215" starttime="20191110 22:18:06.214"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:06.215" starttime="20191110 22:17:59.362"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:18:06.217" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 22:18:06.217" starttime="20191110 22:18:06.216"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:06.218" starttime="20191110 22:18:06.217"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:18:06.219" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:18:07.423" level="INFO">Read output: Last login: Sun Nov 10 22:17:54 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:18:07.423" starttime="20191110 22:18:06.218"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:07.424" starttime="20191110 22:18:06.217"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 22:18:07.425" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 22:18:09.596" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:18:09.597" starttime="20191110 22:18:07.424"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 22:18:09.597" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:18:09.661" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:18:09.662" level="INFO">${startupMsg} = hadoop    1248  330  0.0 34474828 208008 ?     Sl   22:18   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 22:18:09.662" starttime="20191110 22:18:09.597"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:18:09.727" starttime="20191110 22:18:09.662"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:09.728" starttime="20191110 22:18:09.727"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:09.728" starttime="20191110 22:18:06.215"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:09.728" starttime="20191110 22:17:51.690"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:18:09.731" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:18:11.487" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:18:11.488" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:11.488" starttime="20191110 22:18:09.729"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:18:11.489" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:11.489" starttime="20191110 22:18:11.488"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:18:11.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:18:11.490" starttime="20191110 22:18:11.489"></status>
</kw>
<msg timestamp="20191110 22:18:11.490" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:11.490" starttime="20191110 22:18:09.729"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 22:18:11.491" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:11.491" starttime="20191110 22:18:11.491"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:11.492" starttime="20191110 22:18:11.491"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:11.492" starttime="20191110 22:18:11.492"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 22:18:11.493" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 22:18:11.493" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:11.493" starttime="20191110 22:18:11.493"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 22:18:11.494" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191110 22:18:11.494" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 22:18:11.494" starttime="20191110 22:18:11.493"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 22:18:11.495" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 22:18:11.495" starttime="20191110 22:18:11.494"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 22:18:11.495" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191110 22:18:11.496" starttime="20191110 22:18:11.495"></status>
</kw>
<msg timestamp="20191110 22:18:11.496" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 22:18:11.496" starttime="20191110 22:18:09.728"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:18:11.497" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191110 22:18:11.498" starttime="20191110 22:18:11.497"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:11.499" starttime="20191110 22:18:11.498"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:18:11.499" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:18:12.698" level="INFO">Read output: Last login: Sun Nov 10 22:17:01 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:18:12.698" starttime="20191110 22:18:11.499"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:12.699" starttime="20191110 22:18:11.498"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 22:18:12.700" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 22:18:13.869" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:18:13.870" starttime="20191110 22:18:12.699"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 22:18:13.870" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:18:13.936" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:18:13.936" level="INFO">${shutdownMsg} = hadoop    1123  0.0  0.0   9556  1168 ?        Ss   22:18   0:00 bash -c sudo ps aux | grep om
hadoop    1125  0.0  0.0   9088   672 ?        S    22:18   0:00 grep om</msg>
<status status="PASS" endtime="20191110 22:18:13.936" starttime="20191110 22:18:13.870"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:18:14.001" starttime="20191110 22:18:13.937"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:14.002" starttime="20191110 22:18:14.002"></status>
</kw>
<msg timestamp="20191110 22:18:14.003" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191110 22:18:14.003" starttime="20191110 22:18:11.496"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:18:14.006" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:18:16.164" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:18:16.164" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:16.164" starttime="20191110 22:18:14.004"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:18:16.165" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:16.166" starttime="20191110 22:18:16.165"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:18:16.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:18:16.166" starttime="20191110 22:18:16.166"></status>
</kw>
<msg timestamp="20191110 22:18:16.167" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:16.167" starttime="20191110 22:18:14.003"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 22:18:16.167" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:16.167" starttime="20191110 22:18:16.167"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:16.168" starttime="20191110 22:18:16.167"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:16.168" starttime="20191110 22:18:16.168"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 22:18:16.169" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 22:18:16.169" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:16.169" starttime="20191110 22:18:16.169"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 22:18:16.170" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191110 22:18:16.170" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 22:18:16.170" starttime="20191110 22:18:16.169"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 22:18:16.171" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191110 22:18:16.171" starttime="20191110 22:18:16.170"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 22:18:16.171" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191110 22:18:16.171" starttime="20191110 22:18:16.171"></status>
</kw>
<msg timestamp="20191110 22:18:16.172" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191110 22:18:16.172" starttime="20191110 22:18:14.003"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:16.172" starttime="20191110 22:18:16.172"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 22:18:16.173" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191110 22:18:16.173" starttime="20191110 22:18:16.173"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 22:18:16.174" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191110 22:18:16.174" starttime="20191110 22:18:16.174"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 22:18:16.175" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191110 22:18:16.175" starttime="20191110 22:18:16.174"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:18:16.176" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:18:16.176" starttime="20191110 22:18:16.175"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:18:16.179" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:18:20.807" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:18:20.807" level="INFO">${output} = 2019-11-10 22:18:19 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 22:18:19 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191110 22:18:20.807" starttime="20191110 22:18:16.177"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:18:20.809" level="INFO">2019-11-10 22:18:19 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 22:18:19 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 22:18:19 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 22:18:20.809" starttime="20191110 22:18:20.808"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:18:20.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:18:20.810" starttime="20191110 22:18:20.810"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:20.811" starttime="20191110 22:18:16.177"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:18:20.815" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:18:23.118" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:18:23.118" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:18:23.118" starttime="20191110 22:18:20.812"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:18:23.120" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:18:23.120" starttime="20191110 22:18:23.119"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:18:23.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:18:23.121" starttime="20191110 22:18:23.120"></status>
</kw>
<msg timestamp="20191110 22:18:23.122" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:18:23.122" starttime="20191110 22:18:20.811"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:23.123" starttime="20191110 22:18:23.122"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:18:23.125" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:18:23.126" starttime="20191110 22:18:23.123"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:23.126" starttime="20191110 22:18:16.172"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:18:23.128" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191110 22:18:23.128" starttime="20191110 22:18:23.127"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:23.130" starttime="20191110 22:18:23.129"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:18:23.131" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:18:24.335" level="INFO">Read output: Last login: Sun Nov 10 22:18:11 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:18:24.335" starttime="20191110 22:18:23.130"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:24.336" starttime="20191110 22:18:23.128"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 22:18:24.337" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 22:18:26.516" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:18:26.516" starttime="20191110 22:18:24.336"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 22:18:26.517" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:18:26.615" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:18:26.616" level="INFO">${startupMsg} = hadoop    1174  332  0.0 34476796 198556 ?     Sl   22:18   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 22:18:26.616" starttime="20191110 22:18:26.516"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:18:26.681" starttime="20191110 22:18:26.616"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:26.682" starttime="20191110 22:18:26.682"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:26.683" starttime="20191110 22:18:23.126"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:26.683" starttime="20191110 22:18:09.728"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:18:26.688" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:18:28.682" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:18:28.682" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:28.683" starttime="20191110 22:18:26.685"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:18:28.684" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:28.684" starttime="20191110 22:18:28.683"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:18:28.685" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:18:28.685" starttime="20191110 22:18:28.684"></status>
</kw>
<msg timestamp="20191110 22:18:28.685" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:28.685" starttime="20191110 22:18:26.684"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 22:18:28.686" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:28.686" starttime="20191110 22:18:28.686"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:28.687" starttime="20191110 22:18:28.686"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:28.687" starttime="20191110 22:18:28.687"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 22:18:28.688" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 22:18:28.688" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:28.688" starttime="20191110 22:18:28.688"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 22:18:28.689" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191110 22:18:28.689" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 22:18:28.689" starttime="20191110 22:18:28.688"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 22:18:28.690" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191110 22:18:28.690" starttime="20191110 22:18:28.689"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 22:18:28.691" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191110 22:18:28.691" starttime="20191110 22:18:28.691"></status>
</kw>
<msg timestamp="20191110 22:18:28.691" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191110 22:18:28.692" starttime="20191110 22:18:26.683"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:18:28.693" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 22:18:28.693" starttime="20191110 22:18:28.692"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:28.695" starttime="20191110 22:18:28.694"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:18:28.695" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:18:29.894" level="INFO">Read output: Last login: Sun Nov 10 22:18:06 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:18:29.894" starttime="20191110 22:18:28.695"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:29.895" starttime="20191110 22:18:28.693"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191110 22:18:29.896" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191110 22:18:31.058" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:18:31.058" starttime="20191110 22:18:29.895"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191110 22:18:31.059" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:18:31.169" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:18:31.170" level="INFO">${shutdownMsg} = hadoop    1739  0.0  0.0   9556  1168 ?        Ss   22:18   0:00 bash -c sudo ps aux | grep om
hadoop    1741  0.0  0.0   9088   668 ?        S    22:18   0:00 grep om</msg>
<status status="PASS" endtime="20191110 22:18:31.170" starttime="20191110 22:18:31.059"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:18:31.203" starttime="20191110 22:18:31.170"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:31.205" starttime="20191110 22:18:31.204"></status>
</kw>
<msg timestamp="20191110 22:18:31.205" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191110 22:18:31.205" starttime="20191110 22:18:28.692"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:18:31.209" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:18:33.392" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:18:33.392" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:33.392" starttime="20191110 22:18:31.207"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:18:33.393" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:33.393" starttime="20191110 22:18:33.393"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:18:33.394" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:18:33.394" starttime="20191110 22:18:33.393"></status>
</kw>
<msg timestamp="20191110 22:18:33.394" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:33.394" starttime="20191110 22:18:31.206"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191110 22:18:33.395" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:33.395" starttime="20191110 22:18:33.395"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:33.396" starttime="20191110 22:18:33.395"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:33.396" starttime="20191110 22:18:33.396"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191110 22:18:33.397" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191110 22:18:33.397" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191110 22:18:33.397" starttime="20191110 22:18:33.396"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191110 22:18:33.398" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191110 22:18:33.398" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191110 22:18:33.398" starttime="20191110 22:18:33.397"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191110 22:18:33.398" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191110 22:18:33.398" starttime="20191110 22:18:33.398"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191110 22:18:33.399" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191110 22:18:33.399" starttime="20191110 22:18:33.399"></status>
</kw>
<msg timestamp="20191110 22:18:33.399" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191110 22:18:33.400" starttime="20191110 22:18:31.205"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:33.401" starttime="20191110 22:18:33.400"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191110 22:18:33.403" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191110 22:18:33.403" starttime="20191110 22:18:33.402"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191110 22:18:33.405" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191110 22:18:33.405" starttime="20191110 22:18:33.404"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191110 22:18:33.406" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191110 22:18:33.406" starttime="20191110 22:18:33.405"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:18:33.408" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:18:33.408" starttime="20191110 22:18:33.406"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:18:33.413" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:18:38.132" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:18:38.132" level="INFO">${output} = 2019-11-10 22:18:36 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 22:18:36 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191110 22:18:38.132" starttime="20191110 22:18:33.410"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:18:38.133" level="INFO">2019-11-10 22:18:36 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-10 22:18:36 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-10 22:18:36 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191110 22:18:38.133" starttime="20191110 22:18:38.132"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:18:38.134" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:18:38.134" starttime="20191110 22:18:38.133"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:38.134" starttime="20191110 22:18:33.409"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191110 22:18:38.137" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191110 22:18:40.344" level="INFO">${rc} = 0</msg>
<msg timestamp="20191110 22:18:40.344" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191110 22:18:40.344" starttime="20191110 22:18:38.135"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191110 22:18:40.345" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191110 22:18:40.345" starttime="20191110 22:18:40.344"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191110 22:18:40.346" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191110 22:18:40.346" starttime="20191110 22:18:40.345"></status>
</kw>
<msg timestamp="20191110 22:18:40.346" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
5.txt._COPYING_
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOM...</msg>
<status status="PASS" endtime="20191110 22:18:40.346" starttime="20191110 22:18:38.134"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:40.347" starttime="20191110 22:18:40.346"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191110 22:18:40.347" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191110 22:18:40.348" starttime="20191110 22:18:40.347"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:40.348" starttime="20191110 22:18:33.402"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191110 22:18:40.349" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191110 22:18:40.349" starttime="20191110 22:18:40.349"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:40.350" starttime="20191110 22:18:40.350"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191110 22:18:40.351" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191110 22:18:41.556" level="INFO">Read output: Last login: Sun Nov 10 22:18:28 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191110 22:18:41.557" starttime="20191110 22:18:40.350"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:41.557" starttime="20191110 22:18:40.349"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191110 22:18:41.558" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191110 22:18:43.718" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191110 22:18:43.719" starttime="20191110 22:18:41.558"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191110 22:18:43.720" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191110 22:18:43.818" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191110 22:18:43.818" level="INFO">${startupMsg} = hadoop    1791  231  0.0 34480132 207444 ?     Sl   22:18   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191110 22:18:43.818" starttime="20191110 22:18:43.719"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191110 22:18:43.884" starttime="20191110 22:18:43.819"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191110 22:18:43.885" starttime="20191110 22:18:43.884"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:43.885" starttime="20191110 22:18:40.348"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:43.885" starttime="20191110 22:18:26.683"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:43.885" starttime="20191110 22:16:28.563"></status>
</kw>
<status status="PASS" endtime="20191110 22:18:43.886" critical="yes" starttime="20191110 22:16:28.562"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191110 22:18:43.887" starttime="20191110 22:14:21.187"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
