<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191104 19:23:05.333" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:23:05.480" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:23:08.275" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:23:08.275" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191104 19:23:08.275" starttime="20191104 19:23:05.478"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:23:08.276" level="INFO"></msg>
<status status="PASS" endtime="20191104 19:23:08.276" starttime="20191104 19:23:08.276"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:23:08.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:23:08.277" starttime="20191104 19:23:08.277"></status>
</kw>
<status status="PASS" endtime="20191104 19:23:08.278" starttime="20191104 19:23:05.477"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:23:08.284" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:23:10.522" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:23:10.523" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191104 19:23:10.523" starttime="20191104 19:23:08.282"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:23:10.524" level="INFO"></msg>
<status status="PASS" endtime="20191104 19:23:10.524" starttime="20191104 19:23:10.523"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:23:10.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:23:10.525" starttime="20191104 19:23:10.524"></status>
</kw>
<status status="PASS" endtime="20191104 19:23:10.525" starttime="20191104 19:23:08.278"></status>
</kw>
<status status="PASS" endtime="20191104 19:23:10.525" starttime="20191104 19:23:05.477"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191104 19:23:10.526" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191104 19:23:10.526" starttime="20191104 19:23:10.526"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191104 19:23:10.527" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191104 19:23:10.527" starttime="20191104 19:23:10.527"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191104 19:23:10.528" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191104 19:23:10.528" starttime="20191104 19:23:10.527"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:23:10.529" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:23:10.530" starttime="20191104 19:23:10.528"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:23:10.532" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:23:15.275" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:23:15.275" level="INFO">${output} = 2019-11-04 19:23:13 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 19:23:13 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191104 19:23:15.276" starttime="20191104 19:23:10.530"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:23:15.277" level="INFO">2019-11-04 19:23:13 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 19:23:13 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-04 19:23:13 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:23:15.277" starttime="20191104 19:23:15.276"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:23:15.278" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:23:15.278" starttime="20191104 19:23:15.278"></status>
</kw>
<status status="PASS" endtime="20191104 19:23:15.279" starttime="20191104 19:23:10.530"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:23:15.283" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:23:17.604" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:23:17.604" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191104 19:23:17.604" starttime="20191104 19:23:15.281"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:23:17.606" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191104 19:23:17.606" starttime="20191104 19:23:17.605"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:23:17.607" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:23:17.607" starttime="20191104 19:23:17.606"></status>
</kw>
<msg timestamp="20191104 19:23:17.607" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191104 19:23:17.607" starttime="20191104 19:23:15.279"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:23:17.608" starttime="20191104 19:23:17.608"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:23:17.609" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:23:17.609" starttime="20191104 19:23:17.609"></status>
</kw>
<status status="PASS" endtime="20191104 19:23:17.610" starttime="20191104 19:23:10.525"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:23:17.614" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:23:19.731" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:23:19.731" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:23:19.731" starttime="20191104 19:23:17.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:23:19.733" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:23:19.733" starttime="20191104 19:23:19.732"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:23:19.734" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:23:19.734" starttime="20191104 19:23:19.733"></status>
</kw>
<msg timestamp="20191104 19:23:19.735" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:23:19.735" starttime="20191104 19:23:17.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 19:23:19.736" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:23:19.736" starttime="20191104 19:23:19.735"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 19:23:19.737" starttime="20191104 19:23:19.736"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 19:23:19.738" starttime="20191104 19:23:19.738"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 19:23:19.739" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 19:23:19.739" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:23:19.739" starttime="20191104 19:23:19.738"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 19:23:19.740" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191104 19:23:19.741" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 19:23:19.741" starttime="20191104 19:23:19.740"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 19:23:19.741" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191104 19:23:19.742" starttime="20191104 19:23:19.741"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 19:23:19.742" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191104 19:23:19.742" starttime="20191104 19:23:19.742"></status>
</kw>
<msg timestamp="20191104 19:23:19.743" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191104 19:23:19.743" starttime="20191104 19:23:17.610"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:23:19.745" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191104 19:23:19.745" starttime="20191104 19:23:19.744"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:23:19.747" starttime="20191104 19:23:19.746"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:23:19.748" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:23:20.939" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:23:20.939" starttime="20191104 19:23:19.747"></status>
</kw>
<status status="PASS" endtime="20191104 19:23:20.939" starttime="20191104 19:23:19.745"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191104 19:23:20.941" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191104 19:23:31.119" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:23:31.119" starttime="20191104 19:23:20.940"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191104 19:23:31.121" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:23:31.197" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:23:31.197" level="INFO">${shutdownMsg} = hadoop     457  0.0  0.0   9556  1168 ?        Ss   19:23   0:00 bash -c sudo ps aux | grep om
hadoop     459  0.0  0.0   9088   668 ?        S    19:23   0:00 grep om</msg>
<status status="PASS" endtime="20191104 19:23:31.197" starttime="20191104 19:23:31.120"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:23:31.262" starttime="20191104 19:23:31.198"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:23:31.264" starttime="20191104 19:23:31.263"></status>
</kw>
<msg timestamp="20191104 19:23:31.264" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191104 19:23:31.264" starttime="20191104 19:23:19.743"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:23:31.269" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:23:43.411" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:23:43.411" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:23:43.411" starttime="20191104 19:23:31.266"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:23:43.413" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:23:43.413" starttime="20191104 19:23:43.412"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:23:43.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:23:43.414" starttime="20191104 19:23:43.413"></status>
</kw>
<msg timestamp="20191104 19:23:43.415" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:23:43.415" starttime="20191104 19:23:31.265"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 19:23:43.415" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:23:43.415" starttime="20191104 19:23:43.415"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 19:23:43.416" starttime="20191104 19:23:43.416"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 19:23:43.417" starttime="20191104 19:23:43.416"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 19:23:43.418" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 19:23:43.418" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:23:43.418" starttime="20191104 19:23:43.417"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 19:23:43.419" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191104 19:23:43.419" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 19:23:43.419" starttime="20191104 19:23:43.418"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 19:23:43.420" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191104 19:23:43.420" starttime="20191104 19:23:43.419"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 19:23:43.420" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191104 19:23:43.421" starttime="20191104 19:23:43.420"></status>
</kw>
<msg timestamp="20191104 19:23:43.421" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191104 19:23:43.421" starttime="20191104 19:23:31.264"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191104 19:23:43.422" starttime="20191104 19:23:43.421"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191104 19:23:43.423" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191104 19:23:43.423" starttime="20191104 19:23:43.423"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191104 19:23:43.424" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191104 19:23:43.424" starttime="20191104 19:23:43.424"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191104 19:23:43.425" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191104 19:23:43.425" starttime="20191104 19:23:43.425"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:23:43.427" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:23:43.427" starttime="20191104 19:23:43.426"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:23:43.430" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:23:58.113" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:23:58.113" level="INFO">${output} = 2019-11-04 19:23:46 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191104 19:23:58.113" starttime="20191104 19:23:43.428"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:23:58.115" level="INFO">2019-11-04 19:23:46 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:23:47 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:23:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:23:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:23:50 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:23:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:23:52 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:23:53 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:23:54 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:23:55 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:23:55 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-04 19:23:56 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 19:23:56 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-04 19:23:56 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:23:58.116" starttime="20191104 19:23:58.114"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:23:58.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:23:58.118" starttime="20191104 19:23:58.116"></status>
</kw>
<status status="PASS" endtime="20191104 19:23:58.118" starttime="20191104 19:23:43.428"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:23:58.123" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:24:10.447" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:24:10.447" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191104 19:24:10.447" starttime="20191104 19:23:58.120"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:24:10.449" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191104 19:24:10.449" starttime="20191104 19:24:10.448"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:24:10.450" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:24:10.450" starttime="20191104 19:24:10.449"></status>
</kw>
<msg timestamp="20191104 19:24:10.450" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191104 19:24:10.451" starttime="20191104 19:23:58.119"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:24:10.451" starttime="20191104 19:24:10.451"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:24:10.452" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:24:10.453" starttime="20191104 19:24:10.452"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:10.453" starttime="20191104 19:23:43.422"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:24:10.455" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191104 19:24:10.455" starttime="20191104 19:24:10.454"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:24:10.456" starttime="20191104 19:24:10.455"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:24:10.457" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:24:11.664" level="INFO">Read output: Last login: Mon Nov  4 19:23:19 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:24:11.665" starttime="20191104 19:24:10.457"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:11.665" starttime="20191104 19:24:10.455"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191104 19:24:11.666" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191104 19:24:13.826" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:24:13.826" starttime="20191104 19:24:11.666"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191104 19:24:13.827" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:24:13.924" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:24:13.925" level="INFO">${startupMsg} = hadoop     510  246  0.0 34481484 212384 ?     Sl   19:24   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191104 19:24:13.925" starttime="20191104 19:24:13.826"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:24:13.990" starttime="20191104 19:24:13.926"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:24:13.992" starttime="20191104 19:24:13.991"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:13.992" starttime="20191104 19:24:10.453"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:13.993" critical="yes" starttime="20191104 19:23:05.476"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191104 19:24:13.998" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191104 19:24:13.999" starttime="20191104 19:24:13.996"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191104 19:24:14.000" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191104 19:24:14.001" starttime="20191104 19:24:13.999"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:24:14.002" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191104 19:24:14.002" starttime="20191104 19:24:14.002"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:24:14.004" starttime="20191104 19:24:14.003"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:24:14.005" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:24:15.208" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:24:15.209" starttime="20191104 19:24:14.004"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:15.209" starttime="20191104 19:24:14.003"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191104 19:24:15.210" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191104 19:24:25.387" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:24:25.388" starttime="20191104 19:24:15.209"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191104 19:24:25.389" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:24:25.497" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:24:25.497" level="INFO">${shutdownMsg} = hadoop     435  0.0  0.0   9556  1168 ?        Ss   19:24   0:00 bash -c sudo ps aux | grep om
hadoop     437  0.0  0.0   9088   672 ?        S    19:24   0:00 grep om</msg>
<status status="PASS" endtime="20191104 19:24:25.498" starttime="20191104 19:24:25.388"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:24:25.563" starttime="20191104 19:24:25.498"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:24:25.564" starttime="20191104 19:24:25.563"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:25.564" starttime="20191104 19:24:14.001"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:24:25.566" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191104 19:24:25.566" starttime="20191104 19:24:25.565"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:24:25.567" starttime="20191104 19:24:25.566"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:24:25.567" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:24:26.772" level="INFO">Read output: Last login: Mon Nov  4 19:24:14 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:24:26.772" starttime="20191104 19:24:25.567"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:26.772" starttime="20191104 19:24:25.566"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191104 19:24:26.774" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191104 19:24:26.790" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:24:26.791" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:24:26.791" starttime="20191104 19:24:26.773"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191104 19:24:26.792" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:24:26.793" starttime="20191104 19:24:26.791"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191104 19:24:26.794" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191104 19:24:26.795" starttime="20191104 19:24:26.793"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191104 19:24:26.876" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191104 19:24:26.889" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191104 19:24:26.889" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191104 19:24:26.889" starttime="20191104 19:24:26.795"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191104 19:24:26.891" level="INFO">Length is 2</msg>
<msg timestamp="20191104 19:24:26.891" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191104 19:24:26.891" starttime="20191104 19:24:26.890"></status>
</kw>
<msg timestamp="20191104 19:24:26.892" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191104 19:24:26.892" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191104 19:24:26.892" starttime="20191104 19:24:25.564"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:24:26.897" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:24:28.913" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:24:28.913" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:24:28.913" starttime="20191104 19:24:26.894"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:24:28.914" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:24:28.914" starttime="20191104 19:24:28.913"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:24:28.915" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:24:28.915" starttime="20191104 19:24:28.914"></status>
</kw>
<msg timestamp="20191104 19:24:28.915" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:24:28.915" starttime="20191104 19:24:26.893"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 19:24:28.916" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:24:28.916" starttime="20191104 19:24:28.916"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 19:24:28.917" starttime="20191104 19:24:28.916"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 19:24:28.918" starttime="20191104 19:24:28.917"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 19:24:28.918" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 19:24:28.918" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:24:28.918" starttime="20191104 19:24:28.918"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 19:24:28.919" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191104 19:24:28.919" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 19:24:28.919" starttime="20191104 19:24:28.919"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 19:24:28.920" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191104 19:24:28.920" starttime="20191104 19:24:28.920"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 19:24:28.921" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191104 19:24:28.921" starttime="20191104 19:24:28.920"></status>
</kw>
<msg timestamp="20191104 19:24:28.921" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191104 19:24:28.921" starttime="20191104 19:24:26.892"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191104 19:24:28.924" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191104 19:24:28.924" starttime="20191104 19:24:28.922"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:24:28.926" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191104 19:24:28.926" starttime="20191104 19:24:28.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:24:28.926" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191104 19:24:28.926" starttime="20191104 19:24:28.926"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:24:28.930" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:24:33.844" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:24:33.845" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:24:33.845" starttime="20191104 19:24:28.928"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:24:33.846" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:24:33.846" starttime="20191104 19:24:33.845"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:24:33.847" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:24:33.847" starttime="20191104 19:24:33.846"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:33.847" starttime="20191104 19:24:28.927"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:24:33.851" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:24:36.187" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:24:36.187" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1572895471155,
  "modificationTime": 1572895473440,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:24:36.188" starttime="20191104 19:24:33.849"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:24:36.189" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1572895471155,
  "modificationTime": 1572895473440,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103081277597483000,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:24:36.190" starttime="20191104 19:24:36.188"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:24:36.191" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:24:36.191" starttime="20191104 19:24:36.190"></status>
</kw>
<msg timestamp="20191104 19:24:36.192" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1572895471155,
  "modificationTime": 1572895473440,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:24:36.192" starttime="20191104 19:24:33.847"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:24:36.193" starttime="20191104 19:24:36.192"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:36.193" starttime="20191104 19:24:28.926"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:36.193" starttime="20191104 19:24:28.925"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:24:36.195" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191104 19:24:36.195" starttime="20191104 19:24:36.194"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:24:36.196" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191104 19:24:36.196" starttime="20191104 19:24:36.195"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:24:36.201" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:24:41.179" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:24:41.179" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:24:41.179" starttime="20191104 19:24:36.198"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:24:41.181" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:24:41.181" starttime="20191104 19:24:41.180"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:24:41.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:24:41.183" starttime="20191104 19:24:41.182"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:41.183" starttime="20191104 19:24:36.197"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:24:41.188" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:24:43.486" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:24:43.486" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1572895478487,
  "modificationTime": 1572895480769,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:24:43.486" starttime="20191104 19:24:41.185"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:24:43.488" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1572895478487,
  "modificationTime": 1572895480769,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103081278077206530,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:24:43.488" starttime="20191104 19:24:43.487"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:24:43.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:24:43.489" starttime="20191104 19:24:43.488"></status>
</kw>
<msg timestamp="20191104 19:24:43.490" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1572895478487,
  "modificationTime": 1572895480769,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:24:43.490" starttime="20191104 19:24:41.184"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:24:43.491" starttime="20191104 19:24:43.490"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:43.491" starttime="20191104 19:24:36.196"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:43.491" starttime="20191104 19:24:36.193"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:24:43.493" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191104 19:24:43.493" starttime="20191104 19:24:43.492"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:24:43.493" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191104 19:24:43.493" starttime="20191104 19:24:43.493"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:24:43.497" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:24:48.111" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:24:48.111" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:24:48.111" starttime="20191104 19:24:43.495"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:24:48.113" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:24:48.113" starttime="20191104 19:24:48.112"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:24:48.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:24:48.114" starttime="20191104 19:24:48.113"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:48.115" starttime="20191104 19:24:43.494"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:24:48.121" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:24:50.504" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:24:50.505" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1572895485742,
  "modificationTime": 1572895487689,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:24:50.505" starttime="20191104 19:24:48.118"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:24:50.507" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1572895485742,
  "modificationTime": 1572895487689,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103081278553456640,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:24:50.507" starttime="20191104 19:24:50.506"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:24:50.508" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:24:50.508" starttime="20191104 19:24:50.507"></status>
</kw>
<msg timestamp="20191104 19:24:50.509" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1572895485742,
  "modificationTime": 1572895487689,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:24:50.509" starttime="20191104 19:24:48.115"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:24:50.510" starttime="20191104 19:24:50.509"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:50.510" starttime="20191104 19:24:43.494"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:50.510" starttime="20191104 19:24:43.492"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:24:50.511" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191104 19:24:50.511" starttime="20191104 19:24:50.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:24:50.512" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191104 19:24:50.512" starttime="20191104 19:24:50.511"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:24:50.515" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:24:55.052" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:24:55.052" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:24:55.052" starttime="20191104 19:24:50.513"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:24:55.054" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:24:55.054" starttime="20191104 19:24:55.053"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:24:55.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:24:55.056" starttime="20191104 19:24:55.055"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:55.056" starttime="20191104 19:24:50.513"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:24:55.061" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:24:57.470" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:24:57.470" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1572895492766,
  "modificationTime": 1572895494633,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:24:57.470" starttime="20191104 19:24:55.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:24:57.472" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1572895492766,
  "modificationTime": 1572895494633,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103081279013847040,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:24:57.472" starttime="20191104 19:24:57.471"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:24:57.473" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:24:57.473" starttime="20191104 19:24:57.473"></status>
</kw>
<msg timestamp="20191104 19:24:57.474" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1572895492766,
  "modificationTime": 1572895494633,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:24:57.474" starttime="20191104 19:24:55.056"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:24:57.474" starttime="20191104 19:24:57.474"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:57.475" starttime="20191104 19:24:50.512"></status>
</kw>
<status status="PASS" endtime="20191104 19:24:57.475" starttime="20191104 19:24:50.510"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:24:57.476" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191104 19:24:57.476" starttime="20191104 19:24:57.475"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:24:57.476" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191104 19:24:57.477" starttime="20191104 19:24:57.476"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:24:57.480" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:01.905" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:01.905" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:25:01.905" starttime="20191104 19:24:57.478"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:01.906" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:25:01.907" starttime="20191104 19:25:01.906"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:01.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:01.908" starttime="20191104 19:25:01.907"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:01.908" starttime="20191104 19:24:57.477"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:01.912" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:04.312" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:04.312" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1572895499712,
  "modificationTime": 1572895501504,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:04.313" starttime="20191104 19:25:01.910"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:04.314" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1572895499712,
  "modificationTime": 1572895501504,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103081279469060100,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:25:04.315" starttime="20191104 19:25:04.313"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:04.316" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:04.316" starttime="20191104 19:25:04.315"></status>
</kw>
<msg timestamp="20191104 19:25:04.316" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1572895499712,
  "modificationTime": 1572895501504,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:04.317" starttime="20191104 19:25:01.908"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:25:04.317" starttime="20191104 19:25:04.317"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:04.318" starttime="20191104 19:24:57.477"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:04.318" starttime="20191104 19:24:57.475"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:04.318" starttime="20191104 19:24:28.925"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:04.318" starttime="20191104 19:24:28.924"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:25:04.320" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191104 19:25:04.321" starttime="20191104 19:25:04.320"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:25:04.322" starttime="20191104 19:25:04.322"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:25:04.323" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:25:05.529" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:25:05.529" starttime="20191104 19:25:04.323"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:05.530" starttime="20191104 19:25:04.321"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191104 19:25:05.531" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191104 19:25:05.547" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:25:05.547" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:25:05.547" starttime="20191104 19:25:05.531"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191104 19:25:05.548" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:25:05.548" starttime="20191104 19:25:05.548"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191104 19:25:05.549" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191104 19:25:05.550" starttime="20191104 19:25:05.549"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191104 19:25:05.630" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191104 19:25:05.642" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191104 19:25:05.643" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191104 19:25:05.643" starttime="20191104 19:25:05.550"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191104 19:25:05.644" level="INFO">Length is 2</msg>
<msg timestamp="20191104 19:25:05.644" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191104 19:25:05.645" starttime="20191104 19:25:05.643"></status>
</kw>
<msg timestamp="20191104 19:25:05.645" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191104 19:25:05.646" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191104 19:25:05.646" starttime="20191104 19:25:04.318"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:25:05.647" starttime="20191104 19:25:05.646"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:05.647" starttime="20191104 19:24:28.922"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191104 19:25:05.649" level="INFO">${keyPrefix} = testOMRestart_1</msg>
<status status="PASS" endtime="20191104 19:25:05.649" starttime="20191104 19:25:05.648"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:25:05.654" level="INFO">${tmpKey} = testOMRestart_1_0</msg>
<status status="PASS" endtime="20191104 19:25:05.654" starttime="20191104 19:25:05.652"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:25:05.655" level="INFO">testOMRestart_1_0</msg>
<status status="PASS" endtime="20191104 19:25:05.655" starttime="20191104 19:25:05.654"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:05.659" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:10.146" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:10.146" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:25:10.146" starttime="20191104 19:25:05.657"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:10.148" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:25:10.148" starttime="20191104 19:25:10.147"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:10.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:10.149" starttime="20191104 19:25:10.148"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:10.150" starttime="20191104 19:25:05.656"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:10.154" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:12.504" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:12.504" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1572895507868,
  "modificationTime": 1572895509717,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:12.504" starttime="20191104 19:25:10.152"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:12.505" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1572895507868,
  "modificationTime": 1572895509717,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 8,
      "localID": 103081280003571710,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:25:12.506" starttime="20191104 19:25:12.505"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:12.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:12.507" starttime="20191104 19:25:12.506"></status>
</kw>
<msg timestamp="20191104 19:25:12.507" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1572895507868,
  "modificationTime": 1572895509717,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:12.507" starttime="20191104 19:25:10.150"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:25:12.508" starttime="20191104 19:25:12.507"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:12.508" starttime="20191104 19:25:05.655"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:12.508" starttime="20191104 19:25:05.652"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:25:12.509" level="INFO">${tmpKey} = testOMRestart_1_1</msg>
<status status="PASS" endtime="20191104 19:25:12.509" starttime="20191104 19:25:12.509"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:25:12.510" level="INFO">testOMRestart_1_1</msg>
<status status="PASS" endtime="20191104 19:25:12.510" starttime="20191104 19:25:12.510"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:12.514" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:16.764" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:16.764" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:25:16.764" starttime="20191104 19:25:12.512"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:16.765" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:25:16.765" starttime="20191104 19:25:16.764"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:16.766" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:16.766" starttime="20191104 19:25:16.766"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:16.767" starttime="20191104 19:25:12.511"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:16.770" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:19.278" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:19.279" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1572895514588,
  "modificationTime": 1572895516344,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:19.279" starttime="20191104 19:25:16.768"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:19.281" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1572895514588,
  "modificationTime": 1572895516344,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103081280443908100,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:25:19.281" starttime="20191104 19:25:19.280"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:19.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:19.282" starttime="20191104 19:25:19.281"></status>
</kw>
<msg timestamp="20191104 19:25:19.283" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1572895514588,
  "modificationTime": 1572895516344,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:19.283" starttime="20191104 19:25:16.767"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:25:19.285" starttime="20191104 19:25:19.283"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:19.285" starttime="20191104 19:25:12.510"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:19.285" starttime="20191104 19:25:12.508"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:25:19.286" level="INFO">${tmpKey} = testOMRestart_1_2</msg>
<status status="PASS" endtime="20191104 19:25:19.286" starttime="20191104 19:25:19.286"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:25:19.287" level="INFO">testOMRestart_1_2</msg>
<status status="PASS" endtime="20191104 19:25:19.287" starttime="20191104 19:25:19.287"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:19.292" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:23.881" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:23.882" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:25:23.882" starttime="20191104 19:25:19.290"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:23.883" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:25:23.884" starttime="20191104 19:25:23.883"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:23.885" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:23.885" starttime="20191104 19:25:23.884"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:23.886" starttime="20191104 19:25:19.289"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:23.890" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:26.249" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:26.249" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1572895521615,
  "modificationTime": 1572895523456,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:26.250" starttime="20191104 19:25:23.888"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:26.251" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1572895521615,
  "modificationTime": 1572895523456,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 9,
      "localID": 103081280904495120,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:25:26.251" starttime="20191104 19:25:26.250"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:26.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:26.252" starttime="20191104 19:25:26.251"></status>
</kw>
<msg timestamp="20191104 19:25:26.253" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1572895521615,
  "modificationTime": 1572895523456,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:26.253" starttime="20191104 19:25:23.886"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:25:26.253" starttime="20191104 19:25:26.253"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:26.254" starttime="20191104 19:25:19.288"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:26.254" starttime="20191104 19:25:19.285"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:25:26.255" level="INFO">${tmpKey} = testOMRestart_1_3</msg>
<status status="PASS" endtime="20191104 19:25:26.255" starttime="20191104 19:25:26.254"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:25:26.255" level="INFO">testOMRestart_1_3</msg>
<status status="PASS" endtime="20191104 19:25:26.256" starttime="20191104 19:25:26.255"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:26.260" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:30.867" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:30.867" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:25:30.867" starttime="20191104 19:25:26.258"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:30.869" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:25:30.869" starttime="20191104 19:25:30.868"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:30.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:30.870" starttime="20191104 19:25:30.869"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:30.870" starttime="20191104 19:25:26.257"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:30.874" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:33.118" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:33.118" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1572895528554,
  "modificationTime": 1572895530446,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:33.118" starttime="20191104 19:25:30.872"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:33.120" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1572895528554,
  "modificationTime": 1572895530446,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 10,
      "localID": 103081281359249420,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:25:33.121" starttime="20191104 19:25:33.119"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:33.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:33.123" starttime="20191104 19:25:33.121"></status>
</kw>
<msg timestamp="20191104 19:25:33.123" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1572895528554,
  "modificationTime": 1572895530446,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:33.123" starttime="20191104 19:25:30.870"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:25:33.125" starttime="20191104 19:25:33.124"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:33.125" starttime="20191104 19:25:26.256"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:33.125" starttime="20191104 19:25:26.254"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:25:33.126" level="INFO">${tmpKey} = testOMRestart_1_4</msg>
<status status="PASS" endtime="20191104 19:25:33.127" starttime="20191104 19:25:33.126"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:25:33.127" level="INFO">testOMRestart_1_4</msg>
<status status="PASS" endtime="20191104 19:25:33.128" starttime="20191104 19:25:33.127"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:33.132" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:37.638" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:37.638" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:25:37.638" starttime="20191104 19:25:33.130"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:37.640" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:25:37.640" starttime="20191104 19:25:37.639"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:37.642" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:37.642" starttime="20191104 19:25:37.641"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:37.643" starttime="20191104 19:25:33.129"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:37.650" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:40.054" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:40.054" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1572895535561,
  "modificationTime": 1572895537220,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:40.054" starttime="20191104 19:25:37.646"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:40.056" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1572895535561,
  "modificationTime": 1572895537220,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103081281818460180,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:25:40.056" starttime="20191104 19:25:40.055"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:40.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:40.057" starttime="20191104 19:25:40.056"></status>
</kw>
<msg timestamp="20191104 19:25:40.057" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1572895535561,
  "modificationTime": 1572895537220,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:40.057" starttime="20191104 19:25:37.643"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:25:40.058" starttime="20191104 19:25:40.057"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:40.058" starttime="20191104 19:25:33.128"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:40.058" starttime="20191104 19:25:33.125"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:40.058" starttime="20191104 19:25:05.651"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:40.058" starttime="20191104 19:25:05.650"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:25:40.060" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191104 19:25:40.060" starttime="20191104 19:25:40.059"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:25:40.061" starttime="20191104 19:25:40.061"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:25:40.062" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:25:41.269" level="INFO">Read output: Last login: Mon Nov  4 19:25:04 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:25:41.269" starttime="20191104 19:25:40.062"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:41.270" starttime="20191104 19:25:40.060"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191104 19:25:41.271" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191104 19:25:41.286" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:25:41.287" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:25:41.287" starttime="20191104 19:25:41.270"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191104 19:25:41.288" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:25:41.288" starttime="20191104 19:25:41.287"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191104 19:25:41.289" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191104 19:25:41.289" starttime="20191104 19:25:41.288"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191104 19:25:41.370" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191104 19:25:41.382" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191104 19:25:41.382" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191104 19:25:41.383" starttime="20191104 19:25:41.290"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191104 19:25:41.384" level="INFO">Length is 2</msg>
<msg timestamp="20191104 19:25:41.384" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191104 19:25:41.384" starttime="20191104 19:25:41.383"></status>
</kw>
<msg timestamp="20191104 19:25:41.385" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191104 19:25:41.385" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191104 19:25:41.385" starttime="20191104 19:25:40.058"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:25:41.386" starttime="20191104 19:25:41.385"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:41.386" starttime="20191104 19:25:05.648"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191104 19:25:41.388" level="INFO">${keyPrefix} = testOMRestart_2</msg>
<status status="PASS" endtime="20191104 19:25:41.388" starttime="20191104 19:25:41.387"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:25:41.391" level="INFO">${tmpKey} = testOMRestart_2_0</msg>
<status status="PASS" endtime="20191104 19:25:41.391" starttime="20191104 19:25:41.390"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:25:41.392" level="INFO">testOMRestart_2_0</msg>
<status status="PASS" endtime="20191104 19:25:41.392" starttime="20191104 19:25:41.391"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:41.397" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:45.709" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:45.710" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:25:45.710" starttime="20191104 19:25:41.394"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:45.712" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:25:45.712" starttime="20191104 19:25:45.711"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:45.713" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:45.713" starttime="20191104 19:25:45.712"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:45.713" starttime="20191104 19:25:41.393"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:45.718" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:48.104" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:48.104" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1572895543617,
  "modificationTime": 1572895545308,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:48.106" starttime="20191104 19:25:45.716"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:48.110" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1572895543617,
  "modificationTime": 1572895545308,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 8,
      "localID": 103081282346352660,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:25:48.111" starttime="20191104 19:25:48.108"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:48.112" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:48.112" starttime="20191104 19:25:48.111"></status>
</kw>
<msg timestamp="20191104 19:25:48.113" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1572895543617,
  "modificationTime": 1572895545308,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:48.113" starttime="20191104 19:25:45.714"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:25:48.114" starttime="20191104 19:25:48.114"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:48.115" starttime="20191104 19:25:41.392"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:48.115" starttime="20191104 19:25:41.390"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:25:48.116" level="INFO">${tmpKey} = testOMRestart_2_1</msg>
<status status="PASS" endtime="20191104 19:25:48.116" starttime="20191104 19:25:48.115"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:25:48.117" level="INFO">testOMRestart_2_1</msg>
<status status="PASS" endtime="20191104 19:25:48.117" starttime="20191104 19:25:48.117"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:48.124" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:52.597" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:52.598" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:25:52.598" starttime="20191104 19:25:48.121"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:52.600" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:25:52.600" starttime="20191104 19:25:52.599"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:52.601" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:52.601" starttime="20191104 19:25:52.600"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:52.602" starttime="20191104 19:25:48.120"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:52.606" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:54.768" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:54.769" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1572895550497,
  "modificationTime": 1572895552186,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:54.769" starttime="20191104 19:25:52.604"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:54.770" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1572895550497,
  "modificationTime": 1572895552186,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 2,
      "localID": 103081282797240340,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:25:54.770" starttime="20191104 19:25:54.769"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:54.771" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:54.771" starttime="20191104 19:25:54.770"></status>
</kw>
<msg timestamp="20191104 19:25:54.772" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1572895550497,
  "modificationTime": 1572895552186,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:25:54.772" starttime="20191104 19:25:52.602"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:25:54.772" starttime="20191104 19:25:54.772"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:54.772" starttime="20191104 19:25:48.118"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:54.773" starttime="20191104 19:25:48.115"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:25:54.773" level="INFO">${tmpKey} = testOMRestart_2_2</msg>
<status status="PASS" endtime="20191104 19:25:54.774" starttime="20191104 19:25:54.773"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:25:54.774" level="INFO">testOMRestart_2_2</msg>
<status status="PASS" endtime="20191104 19:25:54.774" starttime="20191104 19:25:54.774"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:54.778" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:25:59.153" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:25:59.153" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:25:59.153" starttime="20191104 19:25:54.776"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:25:59.155" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:25:59.155" starttime="20191104 19:25:59.154"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:25:59.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:25:59.156" starttime="20191104 19:25:59.155"></status>
</kw>
<status status="PASS" endtime="20191104 19:25:59.156" starttime="20191104 19:25:54.775"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:25:59.160" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:01.414" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:01.414" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1572895557074,
  "modificationTime": 1572895558744,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:01.414" starttime="20191104 19:25:59.158"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:01.416" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1572895557074,
  "modificationTime": 1572895558744,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103081283228336140,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:26:01.416" starttime="20191104 19:26:01.415"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:01.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:01.417" starttime="20191104 19:26:01.417"></status>
</kw>
<msg timestamp="20191104 19:26:01.418" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1572895557074,
  "modificationTime": 1572895558744,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:01.418" starttime="20191104 19:25:59.156"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:01.419" starttime="20191104 19:26:01.418"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:01.419" starttime="20191104 19:25:54.774"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:01.419" starttime="20191104 19:25:54.773"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:26:01.420" level="INFO">${tmpKey} = testOMRestart_2_3</msg>
<status status="PASS" endtime="20191104 19:26:01.420" starttime="20191104 19:26:01.419"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:26:01.421" level="INFO">testOMRestart_2_3</msg>
<status status="PASS" endtime="20191104 19:26:01.421" starttime="20191104 19:26:01.420"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:01.426" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:05.689" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:05.689" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:26:05.689" starttime="20191104 19:26:01.424"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:05.691" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:26:05.691" starttime="20191104 19:26:05.690"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:05.692" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:05.692" starttime="20191104 19:26:05.692"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:05.693" starttime="20191104 19:26:01.423"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:05.698" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:08.043" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:08.043" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1572895563506,
  "modificationTime": 1572895565278,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:08.043" starttime="20191104 19:26:05.695"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:08.044" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1572895563506,
  "modificationTime": 1572895565278,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103081283649863700,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:26:08.044" starttime="20191104 19:26:08.044"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:08.045" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:08.045" starttime="20191104 19:26:08.044"></status>
</kw>
<msg timestamp="20191104 19:26:08.045" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1572895563506,
  "modificationTime": 1572895565278,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:08.045" starttime="20191104 19:26:05.693"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:08.046" starttime="20191104 19:26:08.046"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:08.046" starttime="20191104 19:26:01.421"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:08.046" starttime="20191104 19:26:01.419"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:26:08.047" level="INFO">${tmpKey} = testOMRestart_2_4</msg>
<status status="PASS" endtime="20191104 19:26:08.047" starttime="20191104 19:26:08.046"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:26:08.047" level="INFO">testOMRestart_2_4</msg>
<status status="PASS" endtime="20191104 19:26:08.047" starttime="20191104 19:26:08.047"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:08.051" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:12.224" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:12.224" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:26:12.224" starttime="20191104 19:26:08.049"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:12.226" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:26:12.227" starttime="20191104 19:26:12.225"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:12.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:12.228" starttime="20191104 19:26:12.227"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:12.228" starttime="20191104 19:26:08.048"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:12.233" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:14.678" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:14.678" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1572895570275,
  "modificationTime": 1572895571827,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:14.678" starttime="20191104 19:26:12.230"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:14.680" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1572895570275,
  "modificationTime": 1572895571827,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103081284093476880,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:26:14.680" starttime="20191104 19:26:14.679"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:14.681" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:14.681" starttime="20191104 19:26:14.681"></status>
</kw>
<msg timestamp="20191104 19:26:14.682" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1572895570275,
  "modificationTime": 1572895571827,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:14.682" starttime="20191104 19:26:12.229"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:14.683" starttime="20191104 19:26:14.682"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:14.683" starttime="20191104 19:26:08.048"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:14.683" starttime="20191104 19:26:08.046"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:14.683" starttime="20191104 19:25:41.389"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:14.684" starttime="20191104 19:25:41.388"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:26:14.686" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191104 19:26:14.686" starttime="20191104 19:26:14.685"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:14.689" starttime="20191104 19:26:14.687"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:26:14.691" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:26:15.898" level="INFO">Read output: Last login: Mon Nov  4 19:25:40 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:26:15.899" starttime="20191104 19:26:14.690"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:15.899" starttime="20191104 19:26:14.686"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191104 19:26:15.900" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191104 19:26:15.916" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:26:15.916" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:26:15.916" starttime="20191104 19:26:15.900"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191104 19:26:15.917" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:26:15.917" starttime="20191104 19:26:15.916"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191104 19:26:15.918" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191104 19:26:15.918" starttime="20191104 19:26:15.917"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191104 19:26:15.998" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191104 19:26:16.007" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191104 19:26:16.007" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191104 19:26:16.007" starttime="20191104 19:26:15.919"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191104 19:26:16.008" level="INFO">Length is 2</msg>
<msg timestamp="20191104 19:26:16.008" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191104 19:26:16.008" starttime="20191104 19:26:16.008"></status>
</kw>
<msg timestamp="20191104 19:26:16.009" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191104 19:26:16.009" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191104 19:26:16.009" starttime="20191104 19:26:14.684"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:16.010" starttime="20191104 19:26:16.009"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:16.010" starttime="20191104 19:25:41.387"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191104 19:26:16.011" level="INFO">${keyPrefix} = testOMRestart_3</msg>
<status status="PASS" endtime="20191104 19:26:16.011" starttime="20191104 19:26:16.010"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:26:16.012" level="INFO">${tmpKey} = testOMRestart_3_0</msg>
<status status="PASS" endtime="20191104 19:26:16.012" starttime="20191104 19:26:16.012"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:26:16.013" level="INFO">testOMRestart_3_0</msg>
<status status="PASS" endtime="20191104 19:26:16.013" starttime="20191104 19:26:16.012"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:16.016" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_3_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:20.435" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:20.436" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:26:20.436" starttime="20191104 19:26:16.014"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:20.438" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:26:20.438" starttime="20191104 19:26:20.437"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:20.439" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:20.440" starttime="20191104 19:26:20.438"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:20.440" starttime="20191104 19:26:16.014"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:20.444" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_3_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_3_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:22.755" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:22.755" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_0",
  "dataSize": 17540,
  "creationTime": 1572895578262,
  "modificationTime": 1572895579988,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:22.755" starttime="20191104 19:26:20.442"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:22.757" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_0",
  "dataSize": 17540,
  "creationTime": 1572895578262,
  "modificationTime": 1572895579988,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103081284616912910,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:26:22.758" starttime="20191104 19:26:22.756"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:22.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:22.759" starttime="20191104 19:26:22.758"></status>
</kw>
<msg timestamp="20191104 19:26:22.760" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_0",
  "dataSize": 17540,
  "creationTime": 1572895578262,
  "modificationTime": 1572895579988,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:22.760" starttime="20191104 19:26:20.440"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:22.761" starttime="20191104 19:26:22.760"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:22.761" starttime="20191104 19:26:16.013"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:22.761" starttime="20191104 19:26:16.012"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:26:22.763" level="INFO">${tmpKey} = testOMRestart_3_1</msg>
<status status="PASS" endtime="20191104 19:26:22.763" starttime="20191104 19:26:22.762"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:26:22.764" level="INFO">testOMRestart_3_1</msg>
<status status="PASS" endtime="20191104 19:26:22.764" starttime="20191104 19:26:22.763"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:22.770" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_3_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:27.145" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:27.145" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:26:27.145" starttime="20191104 19:26:22.767"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:27.147" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:26:27.148" starttime="20191104 19:26:27.146"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:27.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:27.149" starttime="20191104 19:26:27.148"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:27.149" starttime="20191104 19:26:22.765"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:27.155" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_3_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_3_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:29.526" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:29.526" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_1",
  "dataSize": 17540,
  "creationTime": 1572895584977,
  "modificationTime": 1572895586725,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:29.526" starttime="20191104 19:26:27.152"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:29.528" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_1",
  "dataSize": 17540,
  "creationTime": 1572895584977,
  "modificationTime": 1572895586725,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 8,
      "localID": 103081285056921620,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:26:29.528" starttime="20191104 19:26:29.527"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:29.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:29.529" starttime="20191104 19:26:29.528"></status>
</kw>
<msg timestamp="20191104 19:26:29.530" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_1",
  "dataSize": 17540,
  "creationTime": 1572895584977,
  "modificationTime": 1572895586725,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:29.530" starttime="20191104 19:26:27.150"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:29.531" starttime="20191104 19:26:29.530"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:29.531" starttime="20191104 19:26:22.764"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:29.531" starttime="20191104 19:26:22.761"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:26:29.533" level="INFO">${tmpKey} = testOMRestart_3_2</msg>
<status status="PASS" endtime="20191104 19:26:29.533" starttime="20191104 19:26:29.532"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:26:29.534" level="INFO">testOMRestart_3_2</msg>
<status status="PASS" endtime="20191104 19:26:29.534" starttime="20191104 19:26:29.533"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:29.539" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_3_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:33.809" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:33.809" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:26:33.809" starttime="20191104 19:26:29.537"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:33.811" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:26:33.811" starttime="20191104 19:26:33.810"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:33.813" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:33.813" starttime="20191104 19:26:33.812"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:33.814" starttime="20191104 19:26:29.535"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:33.818" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_3_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_3_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:36.315" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:36.315" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_2",
  "dataSize": 17540,
  "creationTime": 1572895591660,
  "modificationTime": 1572895593396,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:36.315" starttime="20191104 19:26:33.815"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:36.317" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_2",
  "dataSize": 17540,
  "creationTime": 1572895591660,
  "modificationTime": 1572895593396,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103081285494964240,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:26:36.317" starttime="20191104 19:26:36.316"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:36.318" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:36.319" starttime="20191104 19:26:36.318"></status>
</kw>
<msg timestamp="20191104 19:26:36.319" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_2",
  "dataSize": 17540,
  "creationTime": 1572895591660,
  "modificationTime": 1572895593396,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:36.319" starttime="20191104 19:26:33.814"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:36.320" starttime="20191104 19:26:36.320"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:36.320" starttime="20191104 19:26:29.534"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:36.320" starttime="20191104 19:26:29.532"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:26:36.321" level="INFO">${tmpKey} = testOMRestart_3_3</msg>
<status status="PASS" endtime="20191104 19:26:36.321" starttime="20191104 19:26:36.320"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:26:36.321" level="INFO">testOMRestart_3_3</msg>
<status status="PASS" endtime="20191104 19:26:36.322" starttime="20191104 19:26:36.321"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:36.325" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_3_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:40.731" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:40.732" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:26:40.732" starttime="20191104 19:26:36.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:40.734" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:26:40.734" starttime="20191104 19:26:40.733"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:40.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:40.735" starttime="20191104 19:26:40.734"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:40.736" starttime="20191104 19:26:36.322"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:40.741" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_3_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_3_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:43.061" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:43.061" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_3",
  "dataSize": 17540,
  "creationTime": 1572895598456,
  "modificationTime": 1572895600314,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:43.061" starttime="20191104 19:26:40.738"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:43.063" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_3",
  "dataSize": 17540,
  "creationTime": 1572895598456,
  "modificationTime": 1572895600314,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103081285940346900,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:26:43.063" starttime="20191104 19:26:43.062"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:43.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:43.064" starttime="20191104 19:26:43.063"></status>
</kw>
<msg timestamp="20191104 19:26:43.065" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_3",
  "dataSize": 17540,
  "creationTime": 1572895598456,
  "modificationTime": 1572895600314,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:43.065" starttime="20191104 19:26:40.736"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:43.066" starttime="20191104 19:26:43.065"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:43.066" starttime="20191104 19:26:36.322"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:43.066" starttime="20191104 19:26:36.320"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191104 19:26:43.068" level="INFO">${tmpKey} = testOMRestart_3_4</msg>
<status status="PASS" endtime="20191104 19:26:43.068" starttime="20191104 19:26:43.067"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191104 19:26:43.068" level="INFO">testOMRestart_3_4</msg>
<status status="PASS" endtime="20191104 19:26:43.069" starttime="20191104 19:26:43.068"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:43.073" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_3_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:47.391" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:47.392" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191104 19:26:47.392" starttime="20191104 19:26:43.071"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:47.393" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:26:47.393" starttime="20191104 19:26:47.392"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:47.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:47.395" starttime="20191104 19:26:47.394"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:47.395" starttime="20191104 19:26:43.070"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:47.399" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_3_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_3_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:26:49.861" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:26:49.861" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_4",
  "dataSize": 17540,
  "creationTime": 1572895605267,
  "modificationTime": 1572895606974,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:49.862" starttime="20191104 19:26:47.397"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:26:49.864" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_4",
  "dataSize": 17540,
  "creationTime": 1572895605267,
  "modificationTime": 1572895606974,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103081286386712590,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191104 19:26:49.864" starttime="20191104 19:26:49.863"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:26:49.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:26:49.865" starttime="20191104 19:26:49.864"></status>
</kw>
<msg timestamp="20191104 19:26:49.866" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_4",
  "dataSize": 17540,
  "creationTime": 1572895605267,
  "modificationTime": 1572895606974,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191104 19:26:49.866" starttime="20191104 19:26:47.396"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:49.867" starttime="20191104 19:26:49.866"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:49.867" starttime="20191104 19:26:43.069"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:49.867" starttime="20191104 19:26:43.067"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:49.868" starttime="20191104 19:26:16.011"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:49.868" starttime="20191104 19:26:16.011"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:26:49.870" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191104 19:26:49.870" starttime="20191104 19:26:49.869"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:49.872" starttime="20191104 19:26:49.871"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:26:49.874" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:26:51.079" level="INFO">Read output: Last login: Mon Nov  4 19:26:14 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:26:51.079" starttime="20191104 19:26:49.873"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:51.080" starttime="20191104 19:26:49.871"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191104 19:26:51.081" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191104 19:26:51.097" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:26:51.098" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:26:51.098" starttime="20191104 19:26:51.080"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191104 19:26:51.099" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:26:51.100" starttime="20191104 19:26:51.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191104 19:26:51.101" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191104 19:26:51.102" starttime="20191104 19:26:51.100"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191104 19:26:51.184" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191104 19:26:51.196" level="INFO">3 files:
log_0-10
log_11-79
log_inprogress_80</msg>
<msg timestamp="20191104 19:26:51.197" level="INFO">@{logs} = [ log_0-10 | log_11-79 | log_inprogress_80 ]</msg>
<status status="PASS" endtime="20191104 19:26:51.197" starttime="20191104 19:26:51.102"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191104 19:26:51.198" level="INFO">Length is 3</msg>
<msg timestamp="20191104 19:26:51.198" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191104 19:26:51.198" starttime="20191104 19:26:51.197"></status>
</kw>
<msg timestamp="20191104 19:26:51.199" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191104 19:26:51.199" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-79', u'log_inprogress_80'] ]</msg>
<status status="PASS" endtime="20191104 19:26:51.199" starttime="20191104 19:26:49.868"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191104 19:26:51.200" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191104 19:26:51.201" starttime="20191104 19:26:51.200"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:51.201" starttime="20191104 19:26:16.010"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:51.201" starttime="20191104 19:24:28.921"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:51.202" starttime="20191104 19:26:51.201"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:26:51.205" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191104 19:26:51.205" starttime="20191104 19:26:51.204"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:51.207" starttime="20191104 19:26:51.206"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:26:51.208" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:26:52.412" level="INFO">Read output: Last login: Mon Nov  4 19:24:25 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:26:52.413" starttime="20191104 19:26:51.207"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:52.413" starttime="20191104 19:26:51.205"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191104 19:26:52.415" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191104 19:26:54.595" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:26:54.596" starttime="20191104 19:26:52.414"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191104 19:26:54.597" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:26:54.705" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:26:54.705" level="INFO">${startupMsg} = hadoop     510  351  0.0 34476752 208684 ?     Sl   19:26   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191104 19:26:54.705" starttime="20191104 19:26:54.596"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:26:54.739" starttime="20191104 19:26:54.706"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:54.739" starttime="20191104 19:26:54.739"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:54.740" starttime="20191104 19:26:51.203"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:26:54.742" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191104 19:26:54.742" starttime="20191104 19:26:54.742"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:54.744" starttime="20191104 19:26:54.743"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:26:54.745" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:26:55.948" level="INFO">Read output: Last login: Mon Nov  4 19:26:51 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:26:55.948" starttime="20191104 19:26:54.744"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:55.949" starttime="20191104 19:26:54.743"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191104 19:26:55.950" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191104 19:26:55.966" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:26:55.966" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:26:55.967" starttime="20191104 19:26:55.949"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191104 19:26:55.967" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:26:55.968" starttime="20191104 19:26:55.967"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191104 19:26:55.969" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191104 19:26:55.969" starttime="20191104 19:26:55.968"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191104 19:26:56.049" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191104 19:26:56.059" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191104 19:26:56.059" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191104 19:26:56.059" starttime="20191104 19:26:55.969"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191104 19:26:56.060" level="INFO">Length is 2</msg>
<msg timestamp="20191104 19:26:56.061" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191104 19:26:56.061" starttime="20191104 19:26:56.060"></status>
</kw>
<msg timestamp="20191104 19:26:56.061" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191104 19:26:56.062" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191104 19:26:56.062" starttime="20191104 19:26:54.741"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:56.063" starttime="20191104 19:26:56.062"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191104 19:26:57.064" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191104 19:26:57.064" starttime="20191104 19:26:56.063"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:57.065" starttime="20191104 19:26:54.740"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:26:57.067" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191104 19:26:57.067" starttime="20191104 19:26:57.066"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:57.069" starttime="20191104 19:26:57.068"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:26:57.070" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:26:58.258" level="INFO">Read output: Last login: Mon Nov  4 19:26:54 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:26:58.259" starttime="20191104 19:26:57.069"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:58.259" starttime="20191104 19:26:57.068"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191104 19:26:58.260" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191104 19:26:58.276" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:26:58.276" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:26:58.276" starttime="20191104 19:26:58.260"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191104 19:26:58.277" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191104 19:26:58.277" starttime="20191104 19:26:58.276"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191104 19:26:58.279" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191104 19:26:58.279" starttime="20191104 19:26:58.278"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191104 19:26:58.357" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191104 19:26:58.369" level="INFO">3 files:
log_0-10
log_11-79
log_inprogress_80</msg>
<msg timestamp="20191104 19:26:58.369" level="INFO">@{logs} = [ log_0-10 | log_11-79 | log_inprogress_80 ]</msg>
<status status="PASS" endtime="20191104 19:26:58.370" starttime="20191104 19:26:58.279"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191104 19:26:58.371" level="INFO">Length is 3</msg>
<msg timestamp="20191104 19:26:58.371" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191104 19:26:58.371" starttime="20191104 19:26:58.370"></status>
</kw>
<msg timestamp="20191104 19:26:58.372" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191104 19:26:58.372" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-79', u'log_inprogress_80'] ]</msg>
<status status="PASS" endtime="20191104 19:26:58.372" starttime="20191104 19:26:57.065"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191104 19:26:58.373" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191104 19:26:58.374" starttime="20191104 19:26:58.372"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:58.374" starttime="20191104 19:26:57.065"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:58.374" starttime="20191104 19:26:54.740"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:58.375" starttime="20191104 19:26:58.374"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:26:58.376" starttime="20191104 19:26:58.375"></status>
</kw>
<status status="PASS" endtime="20191104 19:26:58.377" critical="yes" starttime="20191104 19:24:13.995"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:26:58.383" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:27:00.508" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:27:00.508" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:00.509" starttime="20191104 19:26:58.380"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:27:00.511" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:00.511" starttime="20191104 19:27:00.510"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:27:00.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:27:00.512" starttime="20191104 19:27:00.511"></status>
</kw>
<msg timestamp="20191104 19:27:00.513" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:00.513" starttime="20191104 19:26:58.380"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 19:27:00.514" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:00.514" starttime="20191104 19:27:00.513"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:00.516" starttime="20191104 19:27:00.514"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:00.517" starttime="20191104 19:27:00.516"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 19:27:00.518" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 19:27:00.518" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:00.518" starttime="20191104 19:27:00.517"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 19:27:00.519" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191104 19:27:00.520" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 19:27:00.520" starttime="20191104 19:27:00.519"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 19:27:00.521" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191104 19:27:00.521" starttime="20191104 19:27:00.520"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 19:27:00.522" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191104 19:27:00.522" starttime="20191104 19:27:00.521"></status>
</kw>
<msg timestamp="20191104 19:27:00.522" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191104 19:27:00.522" starttime="20191104 19:26:58.379"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:27:00.525" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191104 19:27:00.525" starttime="20191104 19:27:00.524"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:00.527" starttime="20191104 19:27:00.526"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:27:00.528" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:27:01.733" level="INFO">Read output: Last login: Mon Nov  4 19:26:50 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:27:01.733" starttime="20191104 19:27:00.527"></status>
</kw>
<status status="PASS" endtime="20191104 19:27:01.734" starttime="20191104 19:27:00.525"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191104 19:27:01.735" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191104 19:27:11.875" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:27:11.875" starttime="20191104 19:27:01.734"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191104 19:27:11.877" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:27:11.985" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:27:11.985" level="INFO">${shutdownMsg} = hadoop     616  0.0  0.0   9556  1168 ?        Ss   19:27   0:00 bash -c sudo ps aux | grep om
hadoop     618  0.0  0.0   9088   672 ?        S    19:27   0:00 grep om</msg>
<status status="PASS" endtime="20191104 19:27:11.985" starttime="20191104 19:27:11.876"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:27:12.051" starttime="20191104 19:27:11.985"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:12.052" starttime="20191104 19:27:12.051"></status>
</kw>
<msg timestamp="20191104 19:27:12.052" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191104 19:27:12.052" starttime="20191104 19:27:00.523"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:27:12.057" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:27:14.284" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:27:14.284" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:14.284" starttime="20191104 19:27:12.054"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:27:14.286" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:14.286" starttime="20191104 19:27:14.285"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:27:14.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:27:14.287" starttime="20191104 19:27:14.286"></status>
</kw>
<msg timestamp="20191104 19:27:14.287" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:14.287" starttime="20191104 19:27:12.053"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 19:27:14.288" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:14.288" starttime="20191104 19:27:14.287"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:14.289" starttime="20191104 19:27:14.288"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:14.289" starttime="20191104 19:27:14.289"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 19:27:14.290" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 19:27:14.290" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:14.290" starttime="20191104 19:27:14.290"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 19:27:14.291" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191104 19:27:14.291" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 19:27:14.291" starttime="20191104 19:27:14.290"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 19:27:14.292" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191104 19:27:14.292" starttime="20191104 19:27:14.292"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 19:27:14.293" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191104 19:27:14.293" starttime="20191104 19:27:14.292"></status>
</kw>
<msg timestamp="20191104 19:27:14.293" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191104 19:27:14.293" starttime="20191104 19:27:12.052"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:14.294" starttime="20191104 19:27:14.293"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191104 19:27:14.295" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191104 19:27:14.296" starttime="20191104 19:27:14.295"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191104 19:27:14.297" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191104 19:27:14.297" starttime="20191104 19:27:14.296"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191104 19:27:14.299" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191104 19:27:14.299" starttime="20191104 19:27:14.298"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:27:14.303" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:27:14.303" starttime="20191104 19:27:14.300"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:27:14.308" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:27:19.026" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:27:19.026" level="INFO">${output} = 2019-11-04 19:27:17 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 19:27:17 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191104 19:27:19.026" starttime="20191104 19:27:14.305"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:27:19.028" level="INFO">2019-11-04 19:27:17 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 19:27:17 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-04 19:27:17 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:27:19.028" starttime="20191104 19:27:19.027"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:27:19.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:27:19.030" starttime="20191104 19:27:19.029"></status>
</kw>
<status status="PASS" endtime="20191104 19:27:19.030" starttime="20191104 19:27:14.303"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:27:19.034" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:27:21.318" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:27:21.318" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOM...</msg>
<status status="PASS" endtime="20191104 19:27:21.318" starttime="20191104 19:27:19.032"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:27:21.320" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4
testOMRestart_3_0
testOMRestart_3_1
testOMRestart_3_2
testOMRestart_3_3
testOMRestart_3_4</msg>
<status status="PASS" endtime="20191104 19:27:21.320" starttime="20191104 19:27:21.319"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:27:21.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:27:21.321" starttime="20191104 19:27:21.320"></status>
</kw>
<msg timestamp="20191104 19:27:21.321" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOM...</msg>
<status status="PASS" endtime="20191104 19:27:21.321" starttime="20191104 19:27:19.030"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:21.322" starttime="20191104 19:27:21.322"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:27:21.324" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:27:21.324" starttime="20191104 19:27:21.323"></status>
</kw>
<status status="PASS" endtime="20191104 19:27:21.324" starttime="20191104 19:27:14.294"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:27:21.326" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191104 19:27:21.326" starttime="20191104 19:27:21.325"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:21.328" starttime="20191104 19:27:21.327"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:27:21.328" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:27:22.515" level="INFO">Read output: Last login: Mon Nov  4 19:27:00 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:27:22.516" starttime="20191104 19:27:21.328"></status>
</kw>
<status status="PASS" endtime="20191104 19:27:22.516" starttime="20191104 19:27:21.326"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191104 19:27:22.517" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191104 19:27:24.708" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:27:24.709" starttime="20191104 19:27:22.517"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191104 19:27:24.710" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:27:24.785" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:27:24.786" level="INFO">${startupMsg} = hadoop     669  343  0.0 34477420 211888 ?     Sl   19:27   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191104 19:27:24.786" starttime="20191104 19:27:24.709"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:27:24.819" starttime="20191104 19:27:24.786"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:24.821" starttime="20191104 19:27:24.820"></status>
</kw>
<status status="PASS" endtime="20191104 19:27:24.821" starttime="20191104 19:27:21.325"></status>
</kw>
<status status="PASS" endtime="20191104 19:27:24.821" starttime="20191104 19:26:58.379"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:27:24.826" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:27:26.825" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:27:26.825" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:26.825" starttime="20191104 19:27:24.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:27:26.827" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:26.827" starttime="20191104 19:27:26.826"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:27:26.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:27:26.828" starttime="20191104 19:27:26.827"></status>
</kw>
<msg timestamp="20191104 19:27:26.829" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:26.829" starttime="20191104 19:27:24.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 19:27:26.830" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:26.830" starttime="20191104 19:27:26.829"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:26.831" starttime="20191104 19:27:26.830"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:26.832" starttime="20191104 19:27:26.831"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 19:27:26.833" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 19:27:26.833" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:26.833" starttime="20191104 19:27:26.832"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 19:27:26.834" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191104 19:27:26.835" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 19:27:26.835" starttime="20191104 19:27:26.834"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 19:27:26.835" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191104 19:27:26.836" starttime="20191104 19:27:26.835"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 19:27:26.836" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191104 19:27:26.836" starttime="20191104 19:27:26.836"></status>
</kw>
<msg timestamp="20191104 19:27:26.837" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191104 19:27:26.837" starttime="20191104 19:27:24.821"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:27:26.839" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191104 19:27:26.839" starttime="20191104 19:27:26.838"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:26.842" starttime="20191104 19:27:26.841"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:27:26.843" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:27:28.042" level="INFO">Read output: Last login: Mon Nov  4 19:26:57 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:27:28.042" starttime="20191104 19:27:26.842"></status>
</kw>
<status status="PASS" endtime="20191104 19:27:28.043" starttime="20191104 19:27:26.839"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191104 19:27:28.044" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191104 19:27:29.215" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:27:29.215" starttime="20191104 19:27:28.043"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191104 19:27:29.216" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:27:29.282" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:27:29.283" level="INFO">${shutdownMsg} = hadoop    1055  0.0  0.0   9556  1168 ?        Ss   19:27   0:00 bash -c sudo ps aux | grep om
hadoop    1057  0.0  0.0   9088   672 ?        S    19:27   0:00 grep om</msg>
<status status="PASS" endtime="20191104 19:27:29.283" starttime="20191104 19:27:29.216"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:27:29.347" starttime="20191104 19:27:29.283"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:29.348" starttime="20191104 19:27:29.348"></status>
</kw>
<msg timestamp="20191104 19:27:29.349" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191104 19:27:29.349" starttime="20191104 19:27:26.837"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:27:29.354" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:27:41.643" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:27:41.643" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:41.643" starttime="20191104 19:27:29.351"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:27:41.644" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:41.644" starttime="20191104 19:27:41.643"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:27:41.645" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:27:41.645" starttime="20191104 19:27:41.644"></status>
</kw>
<msg timestamp="20191104 19:27:41.645" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:41.645" starttime="20191104 19:27:29.350"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 19:27:41.646" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:41.646" starttime="20191104 19:27:41.645"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:41.646" starttime="20191104 19:27:41.646"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:41.647" starttime="20191104 19:27:41.647"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 19:27:41.647" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 19:27:41.648" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:41.648" starttime="20191104 19:27:41.647"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 19:27:41.648" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191104 19:27:41.648" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 19:27:41.649" starttime="20191104 19:27:41.648"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 19:27:41.649" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191104 19:27:41.649" starttime="20191104 19:27:41.649"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 19:27:41.650" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191104 19:27:41.650" starttime="20191104 19:27:41.649"></status>
</kw>
<msg timestamp="20191104 19:27:41.650" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191104 19:27:41.650" starttime="20191104 19:27:29.349"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:41.651" starttime="20191104 19:27:41.650"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191104 19:27:41.652" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191104 19:27:41.652" starttime="20191104 19:27:41.651"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191104 19:27:41.653" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191104 19:27:41.653" starttime="20191104 19:27:41.652"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191104 19:27:41.654" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191104 19:27:41.654" starttime="20191104 19:27:41.654"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:27:41.656" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:27:41.656" starttime="20191104 19:27:41.654"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:27:41.659" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:27:46.163" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:27:46.163" level="INFO">${output} = 2019-11-04 19:27:44 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 19:27:44 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191104 19:27:46.163" starttime="20191104 19:27:41.657"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:27:46.164" level="INFO">2019-11-04 19:27:44 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 19:27:44 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-04 19:27:44 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:27:46.165" starttime="20191104 19:27:46.164"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:27:46.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:27:46.165" starttime="20191104 19:27:46.165"></status>
</kw>
<status status="PASS" endtime="20191104 19:27:46.166" starttime="20191104 19:27:41.656"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:27:46.170" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:27:48.436" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:27:48.437" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_...</msg>
<status status="PASS" endtime="20191104 19:27:48.437" starttime="20191104 19:27:46.167"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:27:48.438" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4
testOMRestart_3_0
testOMRestart_3_1
testOMRestart_3_2
testOMRestart_3_3
testOMRestart_3_4</msg>
<status status="PASS" endtime="20191104 19:27:48.438" starttime="20191104 19:27:48.437"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:27:48.439" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:27:48.439" starttime="20191104 19:27:48.438"></status>
</kw>
<msg timestamp="20191104 19:27:48.439" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_...</msg>
<status status="PASS" endtime="20191104 19:27:48.439" starttime="20191104 19:27:46.166"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:48.440" starttime="20191104 19:27:48.440"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:27:48.441" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:27:48.441" starttime="20191104 19:27:48.440"></status>
</kw>
<status status="PASS" endtime="20191104 19:27:48.442" starttime="20191104 19:27:41.651"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:27:48.443" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191104 19:27:48.443" starttime="20191104 19:27:48.442"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:48.444" starttime="20191104 19:27:48.444"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:27:48.445" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:27:49.650" level="INFO">Read output: Last login: Mon Nov  4 19:27:27 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:27:49.650" starttime="20191104 19:27:48.444"></status>
</kw>
<status status="PASS" endtime="20191104 19:27:49.650" starttime="20191104 19:27:48.443"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191104 19:27:49.651" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191104 19:27:51.801" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:27:51.802" starttime="20191104 19:27:49.651"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191104 19:27:51.803" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:27:51.900" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:27:51.900" level="INFO">${startupMsg} = hadoop    1106  229  0.0 34474260 207356 ?     Sl   19:27   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191104 19:27:51.901" starttime="20191104 19:27:51.802"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:27:51.933" starttime="20191104 19:27:51.901"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:51.934" starttime="20191104 19:27:51.934"></status>
</kw>
<status status="PASS" endtime="20191104 19:27:51.934" starttime="20191104 19:27:48.442"></status>
</kw>
<status status="PASS" endtime="20191104 19:27:51.935" starttime="20191104 19:27:24.821"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:27:51.939" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:27:53.919" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:27:53.920" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:53.920" starttime="20191104 19:27:51.936"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:27:53.922" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:53.922" starttime="20191104 19:27:53.921"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:27:53.923" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:27:53.923" starttime="20191104 19:27:53.922"></status>
</kw>
<msg timestamp="20191104 19:27:53.924" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:53.924" starttime="20191104 19:27:51.936"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 19:27:53.925" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:53.925" starttime="20191104 19:27:53.924"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:53.926" starttime="20191104 19:27:53.925"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:53.927" starttime="20191104 19:27:53.926"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 19:27:53.929" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 19:27:53.929" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:27:53.929" starttime="20191104 19:27:53.927"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 19:27:53.930" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191104 19:27:53.930" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 19:27:53.930" starttime="20191104 19:27:53.929"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 19:27:53.932" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191104 19:27:53.932" starttime="20191104 19:27:53.931"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 19:27:53.932" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191104 19:27:53.933" starttime="20191104 19:27:53.932"></status>
</kw>
<msg timestamp="20191104 19:27:53.933" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191104 19:27:53.933" starttime="20191104 19:27:51.935"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:27:53.935" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191104 19:27:53.935" starttime="20191104 19:27:53.934"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:53.937" starttime="20191104 19:27:53.936"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:27:53.938" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:27:55.126" level="INFO">Read output: Last login: Mon Nov  4 19:24:10 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:27:55.127" starttime="20191104 19:27:53.937"></status>
</kw>
<status status="PASS" endtime="20191104 19:27:55.127" starttime="20191104 19:27:53.936"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191104 19:27:55.128" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191104 19:27:56.297" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:27:56.297" starttime="20191104 19:27:55.128"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191104 19:27:56.298" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:27:56.406" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:27:56.407" level="INFO">${shutdownMsg} = hadoop    1051  0.0  0.0   9556  1168 ?        Ss   19:27   0:00 bash -c sudo ps aux | grep om
hadoop    1053  0.0  0.0   9088   668 ?        S    19:27   0:00 grep om</msg>
<status status="PASS" endtime="20191104 19:27:56.407" starttime="20191104 19:27:56.298"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:27:56.472" starttime="20191104 19:27:56.407"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:27:56.473" starttime="20191104 19:27:56.473"></status>
</kw>
<msg timestamp="20191104 19:27:56.474" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191104 19:27:56.474" starttime="20191104 19:27:53.933"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:27:56.479" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:28:08.692" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:28:08.692" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:08.692" starttime="20191104 19:27:56.476"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:28:08.693" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:08.694" starttime="20191104 19:28:08.693"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:28:08.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:28:08.694" starttime="20191104 19:28:08.694"></status>
</kw>
<msg timestamp="20191104 19:28:08.695" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:08.695" starttime="20191104 19:27:56.475"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 19:28:08.695" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:08.695" starttime="20191104 19:28:08.695"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:08.696" starttime="20191104 19:28:08.696"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:08.697" starttime="20191104 19:28:08.696"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 19:28:08.697" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 19:28:08.697" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:08.697" starttime="20191104 19:28:08.697"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 19:28:08.698" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191104 19:28:08.698" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 19:28:08.698" starttime="20191104 19:28:08.697"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 19:28:08.699" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191104 19:28:08.699" starttime="20191104 19:28:08.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 19:28:08.699" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191104 19:28:08.699" starttime="20191104 19:28:08.699"></status>
</kw>
<msg timestamp="20191104 19:28:08.700" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191104 19:28:08.700" starttime="20191104 19:27:56.474"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:08.700" starttime="20191104 19:28:08.700"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191104 19:28:08.702" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191104 19:28:08.702" starttime="20191104 19:28:08.702"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191104 19:28:08.703" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191104 19:28:08.703" starttime="20191104 19:28:08.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191104 19:28:08.704" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191104 19:28:08.704" starttime="20191104 19:28:08.703"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:28:08.705" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:28:08.705" starttime="20191104 19:28:08.704"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:28:08.711" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:28:23.339" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:28:23.340" level="INFO">${output} = 2019-11-04 19:28:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191104 19:28:23.340" starttime="20191104 19:28:08.707"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:28:23.341" level="INFO">2019-11-04 19:28:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:28:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:28:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:28:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:28:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:28:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:28:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:28:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:28:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:28:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:28:20 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-04 19:28:21 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 19:28:21 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-04 19:28:21 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:28:23.341" starttime="20191104 19:28:23.340"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:28:23.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:28:23.342" starttime="20191104 19:28:23.342"></status>
</kw>
<status status="PASS" endtime="20191104 19:28:23.343" starttime="20191104 19:28:08.705"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:28:23.346" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:28:35.829" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:28:35.829" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestar...</msg>
<status status="PASS" endtime="20191104 19:28:35.829" starttime="20191104 19:28:23.344"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:28:35.831" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4
testOMRestart_3_0
testOMRestart_3_1
testOMRestart_3_2
testOMRestart_3_3
testOMRestart_3_4</msg>
<status status="PASS" endtime="20191104 19:28:35.831" starttime="20191104 19:28:35.830"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:28:35.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:28:35.832" starttime="20191104 19:28:35.832"></status>
</kw>
<msg timestamp="20191104 19:28:35.833" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestar...</msg>
<status status="PASS" endtime="20191104 19:28:35.833" starttime="20191104 19:28:23.343"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:35.834" starttime="20191104 19:28:35.833"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:28:35.835" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:28:35.836" starttime="20191104 19:28:35.834"></status>
</kw>
<status status="PASS" endtime="20191104 19:28:35.836" starttime="20191104 19:28:08.701"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:28:35.838" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191104 19:28:35.838" starttime="20191104 19:28:35.837"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:35.840" starttime="20191104 19:28:35.839"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:28:35.841" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:28:37.048" level="INFO">Read output: Last login: Mon Nov  4 19:27:54 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:28:37.049" starttime="20191104 19:28:35.840"></status>
</kw>
<status status="PASS" endtime="20191104 19:28:37.049" starttime="20191104 19:28:35.838"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191104 19:28:37.050" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191104 19:28:39.220" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:28:39.220" starttime="20191104 19:28:37.050"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191104 19:28:39.222" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:28:39.319" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:28:39.320" level="INFO">${startupMsg} = hadoop    1102  360  0.0 34478976 206792 ?     Sl   19:28   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191104 19:28:39.320" starttime="20191104 19:28:39.221"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:28:39.385" starttime="20191104 19:28:39.320"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:39.386" starttime="20191104 19:28:39.385"></status>
</kw>
<status status="PASS" endtime="20191104 19:28:39.386" starttime="20191104 19:28:35.836"></status>
</kw>
<status status="PASS" endtime="20191104 19:28:39.386" starttime="20191104 19:27:51.935"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:28:39.391" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:28:41.802" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:28:41.803" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:41.803" starttime="20191104 19:28:39.388"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:28:41.804" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:41.805" starttime="20191104 19:28:41.804"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:28:41.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:28:41.806" starttime="20191104 19:28:41.805"></status>
</kw>
<msg timestamp="20191104 19:28:41.806" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:41.806" starttime="20191104 19:28:39.387"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 19:28:41.807" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:41.807" starttime="20191104 19:28:41.807"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:41.808" starttime="20191104 19:28:41.807"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:41.809" starttime="20191104 19:28:41.808"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 19:28:41.810" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 19:28:41.810" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:41.810" starttime="20191104 19:28:41.809"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 19:28:41.811" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191104 19:28:41.811" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 19:28:41.811" starttime="20191104 19:28:41.810"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 19:28:41.812" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191104 19:28:41.812" starttime="20191104 19:28:41.811"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 19:28:41.813" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191104 19:28:41.813" starttime="20191104 19:28:41.812"></status>
</kw>
<msg timestamp="20191104 19:28:41.813" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191104 19:28:41.814" starttime="20191104 19:28:39.387"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:28:41.815" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191104 19:28:41.816" starttime="20191104 19:28:41.815"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:41.817" starttime="20191104 19:28:41.816"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:28:41.818" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:28:43.023" level="INFO">Read output: Last login: Mon Nov  4 19:27:21 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:28:43.023" starttime="20191104 19:28:41.818"></status>
</kw>
<status status="PASS" endtime="20191104 19:28:43.024" starttime="20191104 19:28:41.816"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191104 19:28:43.025" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191104 19:28:44.185" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:28:44.186" starttime="20191104 19:28:43.024"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191104 19:28:44.187" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:28:44.295" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:28:44.296" level="INFO">${shutdownMsg} = hadoop    1189  0.0  0.0   9556  1168 ?        Ss   19:28   0:00 bash -c sudo ps aux | grep om
hadoop    1191  0.0  0.0   9088   672 ?        S    19:28   0:00 grep om</msg>
<status status="PASS" endtime="20191104 19:28:44.296" starttime="20191104 19:28:44.186"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:28:44.361" starttime="20191104 19:28:44.296"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:44.362" starttime="20191104 19:28:44.361"></status>
</kw>
<msg timestamp="20191104 19:28:44.362" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191104 19:28:44.362" starttime="20191104 19:28:41.814"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:28:44.366" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:28:46.393" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:28:46.393" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:46.393" starttime="20191104 19:28:44.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:28:46.395" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:46.395" starttime="20191104 19:28:46.394"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:28:46.396" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:28:46.396" starttime="20191104 19:28:46.395"></status>
</kw>
<msg timestamp="20191104 19:28:46.397" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:46.397" starttime="20191104 19:28:44.363"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 19:28:46.398" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:46.398" starttime="20191104 19:28:46.397"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:46.399" starttime="20191104 19:28:46.398"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:46.399" starttime="20191104 19:28:46.399"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 19:28:46.400" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 19:28:46.401" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:46.401" starttime="20191104 19:28:46.400"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 19:28:46.402" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191104 19:28:46.402" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 19:28:46.402" starttime="20191104 19:28:46.401"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 19:28:46.403" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191104 19:28:46.403" starttime="20191104 19:28:46.402"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 19:28:46.404" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191104 19:28:46.404" starttime="20191104 19:28:46.403"></status>
</kw>
<msg timestamp="20191104 19:28:46.404" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191104 19:28:46.404" starttime="20191104 19:28:44.362"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:46.405" starttime="20191104 19:28:46.405"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191104 19:28:46.407" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191104 19:28:46.407" starttime="20191104 19:28:46.406"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191104 19:28:46.408" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191104 19:28:46.408" starttime="20191104 19:28:46.407"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191104 19:28:46.410" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191104 19:28:46.410" starttime="20191104 19:28:46.409"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:28:46.412" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:28:46.412" starttime="20191104 19:28:46.410"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:28:46.416" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:28:51.048" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:28:51.048" level="INFO">${output} = 2019-11-04 19:28:49 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 19:28:49 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191104 19:28:51.049" starttime="20191104 19:28:46.414"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:28:51.050" level="INFO">2019-11-04 19:28:49 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 19:28:49 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-04 19:28:49 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:28:51.050" starttime="20191104 19:28:51.049"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:28:51.051" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:28:51.052" starttime="20191104 19:28:51.051"></status>
</kw>
<status status="PASS" endtime="20191104 19:28:51.052" starttime="20191104 19:28:46.413"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:28:51.056" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:28:53.327" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:28:53.328" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRest...</msg>
<status status="PASS" endtime="20191104 19:28:53.328" starttime="20191104 19:28:51.054"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:28:53.330" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4
testOMRestart_3_0
testOMRestart_3_1
testOMRestart_3_2
testOMRestart_3_3
testOMRestart_3_4</msg>
<status status="PASS" endtime="20191104 19:28:53.330" starttime="20191104 19:28:53.329"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:28:53.331" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:28:53.331" starttime="20191104 19:28:53.330"></status>
</kw>
<msg timestamp="20191104 19:28:53.332" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRest...</msg>
<status status="PASS" endtime="20191104 19:28:53.332" starttime="20191104 19:28:51.052"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:53.333" starttime="20191104 19:28:53.332"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:28:53.335" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:28:53.335" starttime="20191104 19:28:53.333"></status>
</kw>
<status status="PASS" endtime="20191104 19:28:53.336" starttime="20191104 19:28:46.406"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:28:53.338" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191104 19:28:53.338" starttime="20191104 19:28:53.337"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:53.340" starttime="20191104 19:28:53.339"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:28:53.341" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:28:54.548" level="INFO">Read output: Last login: Mon Nov  4 19:28:42 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:28:54.548" starttime="20191104 19:28:53.340"></status>
</kw>
<status status="PASS" endtime="20191104 19:28:54.549" starttime="20191104 19:28:53.338"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191104 19:28:54.550" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191104 19:28:56.729" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:28:56.730" starttime="20191104 19:28:54.549"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191104 19:28:56.731" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:28:56.838" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:28:56.838" level="INFO">${startupMsg} = hadoop    1240  364  0.0 34476352 207500 ?     Sl   19:28   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191104 19:28:56.838" starttime="20191104 19:28:56.730"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:28:56.903" starttime="20191104 19:28:56.838"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:56.904" starttime="20191104 19:28:56.903"></status>
</kw>
<status status="PASS" endtime="20191104 19:28:56.904" starttime="20191104 19:28:53.336"></status>
</kw>
<status status="PASS" endtime="20191104 19:28:56.905" starttime="20191104 19:28:39.387"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:28:56.909" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:28:58.757" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:28:58.758" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:58.758" starttime="20191104 19:28:56.906"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:28:58.759" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:58.759" starttime="20191104 19:28:58.758"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:28:58.760" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:28:58.760" starttime="20191104 19:28:58.759"></status>
</kw>
<msg timestamp="20191104 19:28:58.760" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:58.760" starttime="20191104 19:28:56.906"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 19:28:58.761" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:58.761" starttime="20191104 19:28:58.760"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:58.761" starttime="20191104 19:28:58.761"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:58.762" starttime="20191104 19:28:58.761"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 19:28:58.762" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 19:28:58.762" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191104 19:28:58.762" starttime="20191104 19:28:58.762"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 19:28:58.763" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191104 19:28:58.763" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 19:28:58.763" starttime="20191104 19:28:58.763"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 19:28:58.764" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191104 19:28:58.764" starttime="20191104 19:28:58.763"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 19:28:58.764" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191104 19:28:58.764" starttime="20191104 19:28:58.764"></status>
</kw>
<msg timestamp="20191104 19:28:58.765" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191104 19:28:58.765" starttime="20191104 19:28:56.905"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:28:58.766" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191104 19:28:58.766" starttime="20191104 19:28:58.765"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:28:58.767" starttime="20191104 19:28:58.767"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:28:58.768" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:28:59.967" level="INFO">Read output: Last login: Mon Nov  4 19:28:36 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:28:59.967" starttime="20191104 19:28:58.768"></status>
</kw>
<status status="PASS" endtime="20191104 19:28:59.967" starttime="20191104 19:28:58.766"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191104 19:28:59.968" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191104 19:29:01.127" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:29:01.127" starttime="20191104 19:28:59.968"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191104 19:29:01.128" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:29:01.226" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:29:01.226" level="INFO">${shutdownMsg} = hadoop    1602  0.0  0.0   9556  1168 ?        Ss   19:29   0:00 bash -c sudo ps aux | grep om
hadoop    1604  0.0  0.0   9088   672 ?        S    19:29   0:00 grep om</msg>
<status status="PASS" endtime="20191104 19:29:01.226" starttime="20191104 19:29:01.127"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:29:01.291" starttime="20191104 19:29:01.227"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:29:01.292" starttime="20191104 19:29:01.292"></status>
</kw>
<msg timestamp="20191104 19:29:01.293" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191104 19:29:01.293" starttime="20191104 19:28:58.765"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:29:01.296" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:29:13.377" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:29:13.378" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:29:13.378" starttime="20191104 19:29:01.294"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:29:13.379" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:29:13.380" starttime="20191104 19:29:13.378"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:29:13.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:29:13.381" starttime="20191104 19:29:13.380"></status>
</kw>
<msg timestamp="20191104 19:29:13.381" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:29:13.381" starttime="20191104 19:29:01.293"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191104 19:29:13.382" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:29:13.382" starttime="20191104 19:29:13.381"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191104 19:29:13.383" starttime="20191104 19:29:13.382"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191104 19:29:13.384" starttime="20191104 19:29:13.383"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191104 19:29:13.384" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191104 19:29:13.385" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191104 19:29:13.385" starttime="20191104 19:29:13.384"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191104 19:29:13.385" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191104 19:29:13.386" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191104 19:29:13.386" starttime="20191104 19:29:13.385"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191104 19:29:13.386" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191104 19:29:13.386" starttime="20191104 19:29:13.386"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191104 19:29:13.387" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191104 19:29:13.387" starttime="20191104 19:29:13.387"></status>
</kw>
<msg timestamp="20191104 19:29:13.388" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191104 19:29:13.388" starttime="20191104 19:29:01.293"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191104 19:29:13.389" starttime="20191104 19:29:13.388"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191104 19:29:13.390" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191104 19:29:13.390" starttime="20191104 19:29:13.389"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191104 19:29:13.391" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191104 19:29:13.391" starttime="20191104 19:29:13.390"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191104 19:29:13.392" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191104 19:29:13.392" starttime="20191104 19:29:13.391"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:29:13.394" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:29:13.394" starttime="20191104 19:29:13.392"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:29:13.398" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:29:27.973" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:29:27.973" level="INFO">${output} = 2019-11-04 19:29:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191104 19:29:27.973" starttime="20191104 19:29:13.395"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:29:27.975" level="INFO">2019-11-04 19:29:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:29:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:29:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:29:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:29:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:29:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:29:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:29:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:29:24 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:29:25 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-04 19:29:26 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-04 19:29:26 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-04 19:29:26 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191104 19:29:27.975" starttime="20191104 19:29:27.974"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:29:27.976" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:29:27.976" starttime="20191104 19:29:27.976"></status>
</kw>
<status status="PASS" endtime="20191104 19:29:27.977" starttime="20191104 19:29:13.394"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191104 19:29:27.981" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191104 19:29:40.262" level="INFO">${rc} = 0</msg>
<msg timestamp="20191104 19:29:40.262" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
te...</msg>
<status status="PASS" endtime="20191104 19:29:40.262" starttime="20191104 19:29:27.978"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191104 19:29:40.263" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4
testOMRestart_3_0
testOMRestart_3_1
testOMRestart_3_2
testOMRestart_3_3
testOMRestart_3_4</msg>
<status status="PASS" endtime="20191104 19:29:40.264" starttime="20191104 19:29:40.263"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191104 19:29:40.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191104 19:29:40.264" starttime="20191104 19:29:40.264"></status>
</kw>
<msg timestamp="20191104 19:29:40.265" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
te...</msg>
<status status="PASS" endtime="20191104 19:29:40.265" starttime="20191104 19:29:27.977"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:29:40.266" starttime="20191104 19:29:40.265"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191104 19:29:40.266" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191104 19:29:40.267" starttime="20191104 19:29:40.266"></status>
</kw>
<status status="PASS" endtime="20191104 19:29:40.267" starttime="20191104 19:29:13.389"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191104 19:29:40.268" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191104 19:29:40.269" starttime="20191104 19:29:40.268"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191104 19:29:40.270" starttime="20191104 19:29:40.269"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191104 19:29:40.271" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191104 19:29:41.460" level="INFO">Read output: Last login: Mon Nov  4 19:28:58 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191104 19:29:41.460" starttime="20191104 19:29:40.270"></status>
</kw>
<status status="PASS" endtime="20191104 19:29:41.461" starttime="20191104 19:29:40.269"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191104 19:29:41.462" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191104 19:29:43.612" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191104 19:29:43.613" starttime="20191104 19:29:41.461"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191104 19:29:43.614" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191104 19:29:43.710" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191104 19:29:43.711" level="INFO">${startupMsg} = hadoop    1654  357  0.0 34481736 228612 ?     Sl   19:29   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191104 19:29:43.711" starttime="20191104 19:29:43.613"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191104 19:29:43.776" starttime="20191104 19:29:43.711"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191104 19:29:43.777" starttime="20191104 19:29:43.776"></status>
</kw>
<status status="PASS" endtime="20191104 19:29:43.777" starttime="20191104 19:29:40.267"></status>
</kw>
<status status="PASS" endtime="20191104 19:29:43.778" starttime="20191104 19:28:56.905"></status>
</kw>
<status status="PASS" endtime="20191104 19:29:43.778" starttime="20191104 19:26:58.378"></status>
</kw>
<status status="PASS" endtime="20191104 19:29:43.778" critical="yes" starttime="20191104 19:26:58.378"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191104 19:29:43.779" starttime="20191104 19:23:05.334"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
