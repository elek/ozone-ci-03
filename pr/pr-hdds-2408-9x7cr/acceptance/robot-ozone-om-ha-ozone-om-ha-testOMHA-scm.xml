<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191106 16:44:35.848" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:44:36.025" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:44:38.734" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:44:38.734" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191106 16:44:38.734" starttime="20191106 16:44:36.023"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:44:38.736" level="INFO"></msg>
<status status="PASS" endtime="20191106 16:44:38.736" starttime="20191106 16:44:38.735"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:44:38.737" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:44:38.737" starttime="20191106 16:44:38.736"></status>
</kw>
<status status="PASS" endtime="20191106 16:44:38.738" starttime="20191106 16:44:36.022"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:44:38.746" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:44:40.863" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:44:40.863" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191106 16:44:40.863" starttime="20191106 16:44:38.743"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:44:40.865" level="INFO"></msg>
<status status="PASS" endtime="20191106 16:44:40.865" starttime="20191106 16:44:40.864"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:44:40.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:44:40.866" starttime="20191106 16:44:40.865"></status>
</kw>
<status status="PASS" endtime="20191106 16:44:40.867" starttime="20191106 16:44:38.738"></status>
</kw>
<status status="PASS" endtime="20191106 16:44:40.867" starttime="20191106 16:44:36.022"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 16:44:40.869" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191106 16:44:40.869" starttime="20191106 16:44:40.868"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 16:44:40.870" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191106 16:44:40.870" starttime="20191106 16:44:40.869"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 16:44:40.871" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191106 16:44:40.871" starttime="20191106 16:44:40.870"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:44:40.885" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:44:40.885" starttime="20191106 16:44:40.871"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:44:40.888" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:44:45.553" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:44:45.553" level="INFO">${output} = 2019-11-06 16:44:43 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 16:44:43 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 16:44:45.554" starttime="20191106 16:44:40.886"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:44:45.555" level="INFO">2019-11-06 16:44:43 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 16:44:43 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 16:44:43 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 16:44:45.556" starttime="20191106 16:44:45.554"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:44:45.557" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:44:45.557" starttime="20191106 16:44:45.556"></status>
</kw>
<status status="PASS" endtime="20191106 16:44:45.557" starttime="20191106 16:44:40.885"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:44:45.561" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:44:47.685" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:44:47.686" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191106 16:44:47.686" starttime="20191106 16:44:45.559"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:44:47.687" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191106 16:44:47.688" starttime="20191106 16:44:47.687"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:44:47.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:44:47.689" starttime="20191106 16:44:47.688"></status>
</kw>
<msg timestamp="20191106 16:44:47.689" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191106 16:44:47.689" starttime="20191106 16:44:45.558"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:44:47.690" starttime="20191106 16:44:47.689"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:44:47.691" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:44:47.691" starttime="20191106 16:44:47.690"></status>
</kw>
<status status="PASS" endtime="20191106 16:44:47.691" starttime="20191106 16:44:40.867"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:44:47.695" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:44:49.607" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:44:49.607" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:44:49.607" starttime="20191106 16:44:47.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:44:49.608" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:44:49.608" starttime="20191106 16:44:49.608"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:44:49.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:44:49.609" starttime="20191106 16:44:49.609"></status>
</kw>
<msg timestamp="20191106 16:44:49.609" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:44:49.610" starttime="20191106 16:44:47.692"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 16:44:49.610" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:44:49.610" starttime="20191106 16:44:49.610"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 16:44:49.611" starttime="20191106 16:44:49.610"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 16:44:49.612" starttime="20191106 16:44:49.611"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 16:44:49.612" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 16:44:49.613" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:44:49.613" starttime="20191106 16:44:49.612"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 16:44:49.613" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 16:44:49.613" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 16:44:49.613" starttime="20191106 16:44:49.613"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 16:44:49.614" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 16:44:49.614" starttime="20191106 16:44:49.614"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 16:44:49.614" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 16:44:49.615" starttime="20191106 16:44:49.614"></status>
</kw>
<msg timestamp="20191106 16:44:49.615" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 16:44:49.615" starttime="20191106 16:44:47.692"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:44:49.616" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 16:44:49.616" starttime="20191106 16:44:49.616"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:44:49.618" starttime="20191106 16:44:49.617"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:44:49.618" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:44:50.859" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:44:50.859" starttime="20191106 16:44:49.618"></status>
</kw>
<status status="PASS" endtime="20191106 16:44:50.860" starttime="20191106 16:44:49.617"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 16:44:50.861" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 16:45:01.047" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:45:01.047" starttime="20191106 16:44:50.860"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 16:45:01.048" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:45:01.114" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:45:01.114" level="INFO">${shutdownMsg} = hadoop     426  0.0  0.0   9556  1168 ?        Ss   16:45   0:00 bash -c sudo ps aux | grep om
hadoop     428  0.0  0.0   9088   668 ?        S    16:45   0:00 grep om</msg>
<status status="PASS" endtime="20191106 16:45:01.114" starttime="20191106 16:45:01.048"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:45:01.179" starttime="20191106 16:45:01.114"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:45:01.180" starttime="20191106 16:45:01.179"></status>
</kw>
<msg timestamp="20191106 16:45:01.180" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 16:45:01.180" starttime="20191106 16:44:49.615"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:45:01.185" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:45:13.636" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:45:13.637" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:45:13.637" starttime="20191106 16:45:01.182"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:45:13.639" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:45:13.639" starttime="20191106 16:45:13.638"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:45:13.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:45:13.640" starttime="20191106 16:45:13.639"></status>
</kw>
<msg timestamp="20191106 16:45:13.641" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:45:13.641" starttime="20191106 16:45:01.181"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 16:45:13.642" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:45:13.642" starttime="20191106 16:45:13.641"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 16:45:13.643" starttime="20191106 16:45:13.642"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 16:45:13.644" starttime="20191106 16:45:13.643"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 16:45:13.645" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 16:45:13.645" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:45:13.645" starttime="20191106 16:45:13.644"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 16:45:13.647" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 16:45:13.647" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 16:45:13.647" starttime="20191106 16:45:13.646"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 16:45:13.648" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 16:45:13.648" starttime="20191106 16:45:13.647"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 16:45:13.649" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 16:45:13.649" starttime="20191106 16:45:13.648"></status>
</kw>
<msg timestamp="20191106 16:45:13.649" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191106 16:45:13.650" starttime="20191106 16:45:01.181"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 16:45:13.651" starttime="20191106 16:45:13.650"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 16:45:13.653" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191106 16:45:13.653" starttime="20191106 16:45:13.652"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 16:45:13.654" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191106 16:45:13.654" starttime="20191106 16:45:13.653"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 16:45:13.655" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191106 16:45:13.655" starttime="20191106 16:45:13.654"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:45:13.658" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:45:13.658" starttime="20191106 16:45:13.656"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:45:13.663" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:45:28.524" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:45:28.524" level="INFO">${output} = 2019-11-06 16:45:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191106 16:45:28.525" starttime="20191106 16:45:13.660"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:45:28.526" level="INFO">2019-11-06 16:45:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:45:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:45:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:45:19 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:45:20 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:45:21 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:45:22 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:45:23 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:45:24 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:45:25 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:45:26 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 16:45:26 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 16:45:26 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 16:45:28.527" starttime="20191106 16:45:28.525"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:45:28.527" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:45:28.528" starttime="20191106 16:45:28.527"></status>
</kw>
<status status="PASS" endtime="20191106 16:45:28.529" starttime="20191106 16:45:13.659"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:45:28.533" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:45:40.844" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:45:40.844" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191106 16:45:40.844" starttime="20191106 16:45:28.530"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:45:40.846" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191106 16:45:40.846" starttime="20191106 16:45:40.845"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:45:40.847" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:45:40.847" starttime="20191106 16:45:40.846"></status>
</kw>
<msg timestamp="20191106 16:45:40.848" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191106 16:45:40.848" starttime="20191106 16:45:28.529"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:45:40.849" starttime="20191106 16:45:40.848"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:45:40.850" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:45:40.850" starttime="20191106 16:45:40.849"></status>
</kw>
<status status="PASS" endtime="20191106 16:45:40.851" starttime="20191106 16:45:13.651"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:45:40.853" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 16:45:40.853" starttime="20191106 16:45:40.852"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:45:40.855" starttime="20191106 16:45:40.854"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:45:40.855" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:45:42.061" level="INFO">Read output: Last login: Wed Nov  6 16:44:49 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:45:42.061" starttime="20191106 16:45:40.855"></status>
</kw>
<status status="PASS" endtime="20191106 16:45:42.062" starttime="20191106 16:45:40.853"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 16:45:42.063" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 16:45:44.232" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:45:44.232" starttime="20191106 16:45:42.062"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 16:45:44.233" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:45:44.297" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:45:44.298" level="INFO">${startupMsg} = hadoop     479  333  0.0 34477468 208452 ?     Sl   16:45   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 16:45:44.298" starttime="20191106 16:45:44.232"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:45:44.363" starttime="20191106 16:45:44.298"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:45:44.364" starttime="20191106 16:45:44.363"></status>
</kw>
<status status="PASS" endtime="20191106 16:45:44.364" starttime="20191106 16:45:40.851"></status>
</kw>
<status status="PASS" endtime="20191106 16:45:44.364" critical="yes" starttime="20191106 16:44:36.021"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191106 16:45:44.367" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191106 16:45:44.367" starttime="20191106 16:45:44.365"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191106 16:45:44.370" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191106 16:45:44.370" starttime="20191106 16:45:44.368"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:45:44.372" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 16:45:44.372" starttime="20191106 16:45:44.371"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:45:44.374" starttime="20191106 16:45:44.373"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:45:44.375" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:45:45.574" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:45:45.574" starttime="20191106 16:45:44.374"></status>
</kw>
<status status="PASS" endtime="20191106 16:45:45.575" starttime="20191106 16:45:44.372"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 16:45:45.575" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 16:45:55.712" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:45:55.712" starttime="20191106 16:45:45.575"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 16:45:55.714" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:45:55.822" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:45:55.823" level="INFO">${shutdownMsg} = hadoop     466  0.0  0.0   9556  1168 ?        Ss   16:45   0:00 bash -c sudo ps aux | grep om
hadoop     468  0.0  0.0   9088   672 ?        S    16:45   0:00 grep om</msg>
<status status="PASS" endtime="20191106 16:45:55.823" starttime="20191106 16:45:55.713"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:45:55.888" starttime="20191106 16:45:55.823"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:45:55.889" starttime="20191106 16:45:55.889"></status>
</kw>
<status status="PASS" endtime="20191106 16:45:55.890" starttime="20191106 16:45:44.370"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:45:55.891" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 16:45:55.891" starttime="20191106 16:45:55.891"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:45:55.893" starttime="20191106 16:45:55.892"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:45:55.894" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:45:57.099" level="INFO">Read output: Last login: Wed Nov  6 16:45:44 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:45:57.099" starttime="20191106 16:45:55.893"></status>
</kw>
<status status="PASS" endtime="20191106 16:45:57.100" starttime="20191106 16:45:55.892"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 16:45:57.101" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 16:45:57.117" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:45:57.117" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 16:45:57.117" starttime="20191106 16:45:57.100"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 16:45:57.119" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 16:45:57.119" starttime="20191106 16:45:57.118"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 16:45:57.120" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191106 16:45:57.120" starttime="20191106 16:45:57.119"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 16:45:57.200" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191106 16:45:57.210" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191106 16:45:57.210" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191106 16:45:57.210" starttime="20191106 16:45:57.121"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191106 16:45:57.211" level="INFO">Length is 2</msg>
<msg timestamp="20191106 16:45:57.212" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191106 16:45:57.212" starttime="20191106 16:45:57.210"></status>
</kw>
<msg timestamp="20191106 16:45:57.212" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191106 16:45:57.212" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191106 16:45:57.212" starttime="20191106 16:45:55.890"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:45:57.216" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:45:59.510" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:45:59.510" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:45:59.510" starttime="20191106 16:45:57.214"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:45:59.512" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:45:59.512" starttime="20191106 16:45:59.511"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:45:59.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:45:59.513" starttime="20191106 16:45:59.512"></status>
</kw>
<msg timestamp="20191106 16:45:59.513" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:45:59.513" starttime="20191106 16:45:57.213"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 16:45:59.514" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:45:59.514" starttime="20191106 16:45:59.514"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 16:45:59.515" starttime="20191106 16:45:59.514"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 16:45:59.516" starttime="20191106 16:45:59.515"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 16:45:59.516" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 16:45:59.516" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:45:59.517" starttime="20191106 16:45:59.516"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 16:45:59.517" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191106 16:45:59.517" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 16:45:59.517" starttime="20191106 16:45:59.517"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 16:45:59.518" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 16:45:59.518" starttime="20191106 16:45:59.518"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 16:45:59.519" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191106 16:45:59.519" starttime="20191106 16:45:59.518"></status>
</kw>
<msg timestamp="20191106 16:45:59.519" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 16:45:59.519" starttime="20191106 16:45:57.212"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191106 16:45:59.522" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191106 16:45:59.522" starttime="20191106 16:45:59.520"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 16:45:59.524" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191106 16:45:59.524" starttime="20191106 16:45:59.523"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 16:45:59.525" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191106 16:45:59.525" starttime="20191106 16:45:59.524"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:45:59.529" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:46:04.070" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:46:04.070" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 16:46:04.070" starttime="20191106 16:45:59.526"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:46:04.072" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 16:46:04.072" starttime="20191106 16:46:04.071"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:46:04.073" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:46:04.073" starttime="20191106 16:46:04.072"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:04.073" starttime="20191106 16:45:59.526"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:46:04.078" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:46:06.495" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:46:06.495" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573058761724,
  "modificationTime": 1573058763648,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 16:46:06.495" starttime="20191106 16:46:04.076"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:46:06.496" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573058761724,
  "modificationTime": 1573058763648,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103091979007950850,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 16:46:06.497" starttime="20191106 16:46:06.496"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:46:06.497" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:46:06.497" starttime="20191106 16:46:06.497"></status>
</kw>
<msg timestamp="20191106 16:46:06.498" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573058761724,
  "modificationTime": 1573058763648,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 16:46:06.498" starttime="20191106 16:46:04.074"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:06.498" starttime="20191106 16:46:06.498"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:06.499" starttime="20191106 16:45:59.525"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:06.499" starttime="20191106 16:45:59.523"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 16:46:06.499" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191106 16:46:06.500" starttime="20191106 16:46:06.499"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 16:46:06.500" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191106 16:46:06.500" starttime="20191106 16:46:06.500"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:46:06.504" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:46:11.338" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:46:11.338" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 16:46:11.338" starttime="20191106 16:46:06.502"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:46:11.339" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 16:46:11.340" starttime="20191106 16:46:11.339"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:46:11.341" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:46:11.341" starttime="20191106 16:46:11.340"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:11.341" starttime="20191106 16:46:06.501"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:46:11.345" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:46:13.841" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:46:13.842" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573058768735,
  "modificationTime": 1573058770929,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 16:46:13.842" starttime="20191106 16:46:11.343"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:46:13.843" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573058768735,
  "modificationTime": 1573058770929,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103091979467751420,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 16:46:13.843" starttime="20191106 16:46:13.842"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:46:13.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:46:13.844" starttime="20191106 16:46:13.844"></status>
</kw>
<msg timestamp="20191106 16:46:13.845" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573058768735,
  "modificationTime": 1573058770929,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 16:46:13.845" starttime="20191106 16:46:11.341"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:13.846" starttime="20191106 16:46:13.845"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:13.846" starttime="20191106 16:46:06.500"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:13.846" starttime="20191106 16:46:06.499"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 16:46:13.847" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191106 16:46:13.847" starttime="20191106 16:46:13.846"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 16:46:13.848" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191106 16:46:13.848" starttime="20191106 16:46:13.847"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:46:13.852" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:46:18.394" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:46:18.394" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 16:46:18.395" starttime="20191106 16:46:13.850"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:46:18.396" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 16:46:18.397" starttime="20191106 16:46:18.395"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:46:18.397" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:46:18.398" starttime="20191106 16:46:18.397"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:18.398" starttime="20191106 16:46:13.849"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:46:18.403" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:46:20.872" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:46:20.873" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573058776122,
  "modificationTime": 1573058777984,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 16:46:20.873" starttime="20191106 16:46:18.401"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:46:20.875" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573058776122,
  "modificationTime": 1573058777984,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103091979951800320,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 16:46:20.875" starttime="20191106 16:46:20.874"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:46:20.876" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:46:20.876" starttime="20191106 16:46:20.875"></status>
</kw>
<msg timestamp="20191106 16:46:20.877" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573058776122,
  "modificationTime": 1573058777984,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 16:46:20.877" starttime="20191106 16:46:18.398"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:20.878" starttime="20191106 16:46:20.877"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:20.878" starttime="20191106 16:46:13.848"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:20.878" starttime="20191106 16:46:13.846"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 16:46:20.880" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191106 16:46:20.880" starttime="20191106 16:46:20.879"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 16:46:20.881" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191106 16:46:20.881" starttime="20191106 16:46:20.880"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:46:20.886" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:46:25.237" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:46:25.238" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 16:46:25.238" starttime="20191106 16:46:20.884"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:46:25.239" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 16:46:25.239" starttime="20191106 16:46:25.238"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:46:25.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:46:25.240" starttime="20191106 16:46:25.240"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:25.241" starttime="20191106 16:46:20.882"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:46:25.245" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:46:27.401" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:46:27.401" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573058783128,
  "modificationTime": 1573058784827,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 16:46:27.401" starttime="20191106 16:46:25.243"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:46:27.403" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573058783128,
  "modificationTime": 1573058784827,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103091980411011070,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 16:46:27.403" starttime="20191106 16:46:27.402"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:46:27.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:46:27.403" starttime="20191106 16:46:27.403"></status>
</kw>
<msg timestamp="20191106 16:46:27.404" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573058783128,
  "modificationTime": 1573058784827,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 16:46:27.404" starttime="20191106 16:46:25.241"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:27.405" starttime="20191106 16:46:27.404"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:27.405" starttime="20191106 16:46:20.881"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:27.405" starttime="20191106 16:46:20.879"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 16:46:27.406" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:46:27.406" starttime="20191106 16:46:27.405"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 16:46:27.406" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:46:27.406" starttime="20191106 16:46:27.406"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:46:27.410" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:46:31.909" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:46:31.909" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191106 16:46:31.909" starttime="20191106 16:46:27.408"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:46:31.911" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 16:46:31.911" starttime="20191106 16:46:31.910"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:46:31.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:46:31.912" starttime="20191106 16:46:31.911"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:31.912" starttime="20191106 16:46:27.407"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:46:31.916" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:46:34.145" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:46:34.145" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573058789638,
  "modificationTime": 1573058791494,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 16:46:34.145" starttime="20191106 16:46:31.914"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:46:34.147" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573058789638,
  "modificationTime": 1573058791494,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103091980837650430,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191106 16:46:34.147" starttime="20191106 16:46:34.146"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:46:34.148" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:46:34.148" starttime="20191106 16:46:34.148"></status>
</kw>
<msg timestamp="20191106 16:46:34.149" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573058789638,
  "modificationTime": 1573058791494,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191106 16:46:34.149" starttime="20191106 16:46:31.912"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:34.150" starttime="20191106 16:46:34.149"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:34.150" starttime="20191106 16:46:27.406"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:34.150" starttime="20191106 16:46:27.405"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:34.151" starttime="20191106 16:45:59.523"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:34.151" starttime="20191106 16:45:59.522"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:46:34.153" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 16:46:34.153" starttime="20191106 16:46:34.152"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:34.155" starttime="20191106 16:46:34.154"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:46:34.156" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:46:35.345" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:46:35.345" starttime="20191106 16:46:34.155"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:35.346" starttime="20191106 16:46:34.153"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 16:46:35.347" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 16:46:35.362" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:46:35.362" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 16:46:35.363" starttime="20191106 16:46:35.346"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 16:46:35.364" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 16:46:35.364" starttime="20191106 16:46:35.363"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 16:46:35.366" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191106 16:46:35.366" starttime="20191106 16:46:35.365"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 16:46:35.447" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191106 16:46:35.460" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191106 16:46:35.460" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191106 16:46:35.460" starttime="20191106 16:46:35.366"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191106 16:46:35.461" level="INFO">Length is 3</msg>
<msg timestamp="20191106 16:46:35.461" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191106 16:46:35.462" starttime="20191106 16:46:35.461"></status>
</kw>
<msg timestamp="20191106 16:46:35.462" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191106 16:46:35.462" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191106 16:46:35.462" starttime="20191106 16:46:34.151"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191106 16:46:35.464" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191106 16:46:35.464" starttime="20191106 16:46:35.463"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:35.464" starttime="20191106 16:45:59.520"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:35.464" starttime="20191106 16:45:59.519"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:35.465" starttime="20191106 16:46:35.465"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:46:35.468" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 16:46:35.468" starttime="20191106 16:46:35.467"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:35.470" starttime="20191106 16:46:35.469"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:46:35.471" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:46:36.675" level="INFO">Read output: Last login: Wed Nov  6 16:45:56 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:46:36.676" starttime="20191106 16:46:35.470"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:36.676" starttime="20191106 16:46:35.468"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 16:46:36.677" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 16:46:38.847" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:46:38.847" starttime="20191106 16:46:36.677"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 16:46:38.848" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:46:38.946" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:46:38.946" level="INFO">${startupMsg} = hadoop     541  349  0.0 34476708 194116 ?     Sl   16:46   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 16:46:38.947" starttime="20191106 16:46:38.848"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:46:39.012" starttime="20191106 16:46:38.947"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:39.013" starttime="20191106 16:46:39.012"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:39.013" starttime="20191106 16:46:35.466"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:46:39.016" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 16:46:39.016" starttime="20191106 16:46:39.015"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:39.017" starttime="20191106 16:46:39.017"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:46:39.018" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:46:40.223" level="INFO">Read output: Last login: Wed Nov  6 16:46:35 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:46:40.223" starttime="20191106 16:46:39.018"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:40.223" starttime="20191106 16:46:39.016"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 16:46:40.224" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 16:46:40.239" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:46:40.239" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 16:46:40.239" starttime="20191106 16:46:40.224"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 16:46:40.240" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 16:46:40.240" starttime="20191106 16:46:40.240"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 16:46:40.242" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191106 16:46:40.242" starttime="20191106 16:46:40.241"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 16:46:40.318" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191106 16:46:40.328" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191106 16:46:40.328" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191106 16:46:40.329" starttime="20191106 16:46:40.242"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191106 16:46:40.329" level="INFO">Length is 2</msg>
<msg timestamp="20191106 16:46:40.330" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191106 16:46:40.330" starttime="20191106 16:46:40.329"></status>
</kw>
<msg timestamp="20191106 16:46:40.330" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191106 16:46:40.330" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191106 16:46:40.331" starttime="20191106 16:46:39.014"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:40.332" starttime="20191106 16:46:40.331"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191106 16:46:41.333" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191106 16:46:41.333" starttime="20191106 16:46:40.332"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:41.333" starttime="20191106 16:46:39.014"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:46:41.335" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 16:46:41.335" starttime="20191106 16:46:41.334"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:41.336" starttime="20191106 16:46:41.336"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:46:41.337" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:46:42.536" level="INFO">Read output: Last login: Wed Nov  6 16:46:39 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:46:42.536" starttime="20191106 16:46:41.336"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:42.537" starttime="20191106 16:46:41.335"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 16:46:42.537" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 16:46:42.553" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:46:42.554" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 16:46:42.554" starttime="20191106 16:46:42.537"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 16:46:42.555" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 16:46:42.555" starttime="20191106 16:46:42.554"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 16:46:42.556" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191106 16:46:42.556" starttime="20191106 16:46:42.555"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 16:46:42.637" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191106 16:46:42.648" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191106 16:46:42.649" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191106 16:46:42.649" starttime="20191106 16:46:42.557"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191106 16:46:42.650" level="INFO">Length is 3</msg>
<msg timestamp="20191106 16:46:42.650" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191106 16:46:42.650" starttime="20191106 16:46:42.649"></status>
</kw>
<msg timestamp="20191106 16:46:42.651" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191106 16:46:42.651" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191106 16:46:42.651" starttime="20191106 16:46:41.333"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191106 16:46:42.652" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191106 16:46:42.652" starttime="20191106 16:46:42.651"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:42.653" starttime="20191106 16:46:41.333"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:42.653" starttime="20191106 16:46:39.014"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:42.654" starttime="20191106 16:46:42.653"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:42.655" starttime="20191106 16:46:42.654"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:42.655" critical="yes" starttime="20191106 16:45:44.364"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:46:42.662" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:46:44.671" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:46:44.671" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:46:44.671" starttime="20191106 16:46:42.659"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:46:44.672" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:46:44.672" starttime="20191106 16:46:44.672"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:46:44.673" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:46:44.673" starttime="20191106 16:46:44.673"></status>
</kw>
<msg timestamp="20191106 16:46:44.673" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:46:44.674" starttime="20191106 16:46:42.658"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 16:46:44.674" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:46:44.674" starttime="20191106 16:46:44.674"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:44.675" starttime="20191106 16:46:44.674"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:44.675" starttime="20191106 16:46:44.675"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 16:46:44.676" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 16:46:44.676" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:46:44.676" starttime="20191106 16:46:44.675"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 16:46:44.677" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191106 16:46:44.677" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 16:46:44.677" starttime="20191106 16:46:44.676"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 16:46:44.678" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 16:46:44.678" starttime="20191106 16:46:44.677"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 16:46:44.678" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191106 16:46:44.678" starttime="20191106 16:46:44.678"></status>
</kw>
<msg timestamp="20191106 16:46:44.679" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 16:46:44.679" starttime="20191106 16:46:42.658"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:46:44.680" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 16:46:44.680" starttime="20191106 16:46:44.679"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:44.681" starttime="20191106 16:46:44.681"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:46:44.682" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:46:45.881" level="INFO">Read output: Last login: Wed Nov  6 16:46:34 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:46:45.884" starttime="20191106 16:46:44.681"></status>
</kw>
<status status="PASS" endtime="20191106 16:46:45.884" starttime="20191106 16:46:44.680"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 16:46:45.885" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 16:46:56.049" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:46:56.052" starttime="20191106 16:46:45.884"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 16:46:56.055" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:46:56.132" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:46:56.132" level="INFO">${shutdownMsg} = hadoop     502  0.0  0.0   9556  1168 ?        Ss   16:46   0:00 bash -c sudo ps aux | grep om
hadoop     504  0.0  0.0   9088   668 ?        S    16:46   0:00 grep om</msg>
<status status="PASS" endtime="20191106 16:46:56.132" starttime="20191106 16:46:56.054"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:46:56.165" starttime="20191106 16:46:56.133"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:56.167" starttime="20191106 16:46:56.166"></status>
</kw>
<msg timestamp="20191106 16:46:56.167" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 16:46:56.167" starttime="20191106 16:46:44.679"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:46:56.171" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:46:58.356" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:46:58.356" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:46:58.357" starttime="20191106 16:46:56.169"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:46:58.359" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:46:58.359" starttime="20191106 16:46:58.357"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:46:58.360" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:46:58.360" starttime="20191106 16:46:58.359"></status>
</kw>
<msg timestamp="20191106 16:46:58.361" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:46:58.361" starttime="20191106 16:46:56.168"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 16:46:58.362" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:46:58.362" starttime="20191106 16:46:58.361"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:58.363" starttime="20191106 16:46:58.362"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:58.364" starttime="20191106 16:46:58.363"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 16:46:58.365" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 16:46:58.365" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:46:58.365" starttime="20191106 16:46:58.364"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 16:46:58.366" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 16:46:58.366" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 16:46:58.366" starttime="20191106 16:46:58.365"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 16:46:58.367" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 16:46:58.367" starttime="20191106 16:46:58.367"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 16:46:58.368" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 16:46:58.369" starttime="20191106 16:46:58.368"></status>
</kw>
<msg timestamp="20191106 16:46:58.369" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191106 16:46:58.369" starttime="20191106 16:46:56.167"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 16:46:58.370" starttime="20191106 16:46:58.370"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 16:46:58.372" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191106 16:46:58.372" starttime="20191106 16:46:58.371"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 16:46:58.373" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191106 16:46:58.374" starttime="20191106 16:46:58.373"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 16:46:58.375" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191106 16:46:58.375" starttime="20191106 16:46:58.374"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:46:58.377" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:46:58.378" starttime="20191106 16:46:58.375"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:46:58.382" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:47:02.913" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:47:02.914" level="INFO">${output} = 2019-11-06 16:47:01 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 16:47:01 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 16:47:02.914" starttime="20191106 16:46:58.379"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:47:02.915" level="INFO">2019-11-06 16:47:01 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 16:47:01 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 16:47:01 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 16:47:02.916" starttime="20191106 16:47:02.915"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:47:02.916" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:47:02.917" starttime="20191106 16:47:02.916"></status>
</kw>
<status status="PASS" endtime="20191106 16:47:02.917" starttime="20191106 16:46:58.378"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:47:02.921" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:47:05.188" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:47:05.188" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:47:05.188" starttime="20191106 16:47:02.918"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:47:05.190" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:47:05.190" starttime="20191106 16:47:05.189"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:47:05.191" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:47:05.191" starttime="20191106 16:47:05.190"></status>
</kw>
<msg timestamp="20191106 16:47:05.191" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:47:05.192" starttime="20191106 16:47:02.917"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:05.193" starttime="20191106 16:47:05.192"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:47:05.195" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:47:05.195" starttime="20191106 16:47:05.193"></status>
</kw>
<status status="PASS" endtime="20191106 16:47:05.195" starttime="20191106 16:46:58.371"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:47:05.198" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 16:47:05.198" starttime="20191106 16:47:05.197"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:05.199" starttime="20191106 16:47:05.198"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:47:05.200" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:47:06.390" level="INFO">Read output: Last login: Wed Nov  6 16:46:44 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:47:06.391" starttime="20191106 16:47:05.200"></status>
</kw>
<status status="PASS" endtime="20191106 16:47:06.391" starttime="20191106 16:47:05.198"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 16:47:06.393" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 16:47:08.572" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:47:08.572" starttime="20191106 16:47:06.392"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 16:47:08.573" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:47:08.639" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:47:08.639" level="INFO">${startupMsg} = hadoop     555  342  0.0 34476568 223220 ?     Sl   16:47   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 16:47:08.639" starttime="20191106 16:47:08.572"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:47:08.704" starttime="20191106 16:47:08.640"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:08.705" starttime="20191106 16:47:08.705"></status>
</kw>
<status status="PASS" endtime="20191106 16:47:08.706" starttime="20191106 16:47:05.196"></status>
</kw>
<status status="PASS" endtime="20191106 16:47:08.706" starttime="20191106 16:46:42.657"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:47:08.710" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:47:10.530" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:47:10.530" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:10.530" starttime="20191106 16:47:08.707"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:47:10.531" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:10.531" starttime="20191106 16:47:10.530"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:47:10.532" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:47:10.532" starttime="20191106 16:47:10.531"></status>
</kw>
<msg timestamp="20191106 16:47:10.532" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:10.532" starttime="20191106 16:47:08.707"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 16:47:10.533" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:10.533" starttime="20191106 16:47:10.533"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:10.534" starttime="20191106 16:47:10.534"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:10.535" starttime="20191106 16:47:10.535"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 16:47:10.536" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 16:47:10.536" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:10.536" starttime="20191106 16:47:10.535"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 16:47:10.537" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 16:47:10.537" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 16:47:10.537" starttime="20191106 16:47:10.537"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 16:47:10.538" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 16:47:10.538" starttime="20191106 16:47:10.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 16:47:10.539" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 16:47:10.539" starttime="20191106 16:47:10.538"></status>
</kw>
<msg timestamp="20191106 16:47:10.539" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 16:47:10.539" starttime="20191106 16:47:08.706"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:47:10.541" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 16:47:10.541" starttime="20191106 16:47:10.541"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:10.543" starttime="20191106 16:47:10.542"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:47:10.543" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:47:11.731" level="INFO">Read output: Last login: Wed Nov  6 16:46:41 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:47:11.732" starttime="20191106 16:47:10.543"></status>
</kw>
<status status="PASS" endtime="20191106 16:47:11.732" starttime="20191106 16:47:10.541"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 16:47:11.733" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 16:47:12.903" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:47:12.903" starttime="20191106 16:47:11.733"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 16:47:12.905" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:47:12.981" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:47:12.981" level="INFO">${shutdownMsg} = hadoop    1082  0.0  0.0   9556  1168 ?        Ss   16:47   0:00 bash -c sudo ps aux | grep om
hadoop    1084  0.0  0.0   9088   668 ?        S    16:47   0:00 grep om</msg>
<status status="PASS" endtime="20191106 16:47:12.981" starttime="20191106 16:47:12.904"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:47:13.047" starttime="20191106 16:47:12.982"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:13.048" starttime="20191106 16:47:13.047"></status>
</kw>
<msg timestamp="20191106 16:47:13.048" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 16:47:13.048" starttime="20191106 16:47:10.540"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:47:13.053" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:47:15.243" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:47:15.243" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:15.243" starttime="20191106 16:47:13.050"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:47:15.244" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:15.244" starttime="20191106 16:47:15.244"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:47:15.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:47:15.245" starttime="20191106 16:47:15.245"></status>
</kw>
<msg timestamp="20191106 16:47:15.246" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:15.246" starttime="20191106 16:47:13.049"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 16:47:15.246" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:15.246" starttime="20191106 16:47:15.246"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:15.247" starttime="20191106 16:47:15.247"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:15.248" starttime="20191106 16:47:15.247"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 16:47:15.248" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 16:47:15.249" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:15.249" starttime="20191106 16:47:15.248"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 16:47:15.249" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 16:47:15.249" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 16:47:15.249" starttime="20191106 16:47:15.249"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 16:47:15.250" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 16:47:15.250" starttime="20191106 16:47:15.250"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 16:47:15.251" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 16:47:15.251" starttime="20191106 16:47:15.250"></status>
</kw>
<msg timestamp="20191106 16:47:15.251" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191106 16:47:15.251" starttime="20191106 16:47:13.049"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:15.252" starttime="20191106 16:47:15.252"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 16:47:15.253" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191106 16:47:15.254" starttime="20191106 16:47:15.253"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 16:47:15.254" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191106 16:47:15.254" starttime="20191106 16:47:15.254"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 16:47:15.255" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191106 16:47:15.255" starttime="20191106 16:47:15.255"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:47:15.257" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:47:15.257" starttime="20191106 16:47:15.256"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:47:15.260" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:47:19.703" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:47:19.703" level="INFO">${output} = 2019-11-06 16:47:18 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 16:47:18 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 16:47:19.703" starttime="20191106 16:47:15.258"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:47:19.705" level="INFO">2019-11-06 16:47:18 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 16:47:18 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 16:47:18 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 16:47:19.705" starttime="20191106 16:47:19.704"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:47:19.707" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:47:19.707" starttime="20191106 16:47:19.706"></status>
</kw>
<status status="PASS" endtime="20191106 16:47:19.707" starttime="20191106 16:47:15.258"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:47:19.712" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:47:22.005" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:47:22.005" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:47:22.006" starttime="20191106 16:47:19.709"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:47:22.007" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:47:22.008" starttime="20191106 16:47:22.006"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:47:22.008" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:47:22.009" starttime="20191106 16:47:22.008"></status>
</kw>
<msg timestamp="20191106 16:47:22.009" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:47:22.009" starttime="20191106 16:47:19.708"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:22.010" starttime="20191106 16:47:22.010"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:47:22.012" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:47:22.012" starttime="20191106 16:47:22.011"></status>
</kw>
<status status="PASS" endtime="20191106 16:47:22.012" starttime="20191106 16:47:15.252"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:47:22.014" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 16:47:22.015" starttime="20191106 16:47:22.013"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:22.016" starttime="20191106 16:47:22.016"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:47:22.017" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:47:23.221" level="INFO">Read output: Last login: Wed Nov  6 16:47:10 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:47:23.222" starttime="20191106 16:47:22.017"></status>
</kw>
<status status="PASS" endtime="20191106 16:47:23.222" starttime="20191106 16:47:22.015"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 16:47:23.223" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 16:47:25.382" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:47:25.382" starttime="20191106 16:47:23.223"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 16:47:25.383" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:47:25.480" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:47:25.480" level="INFO">${startupMsg} = hadoop    1133  382  0.0 34485276 231228 ?     Sl   16:47   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 16:47:25.480" starttime="20191106 16:47:25.383"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:47:25.545" starttime="20191106 16:47:25.481"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:25.546" starttime="20191106 16:47:25.546"></status>
</kw>
<status status="PASS" endtime="20191106 16:47:25.547" starttime="20191106 16:47:22.012"></status>
</kw>
<status status="PASS" endtime="20191106 16:47:25.547" starttime="20191106 16:47:08.706"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:47:25.550" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:47:27.420" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:47:27.421" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:27.421" starttime="20191106 16:47:25.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:47:27.422" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:27.422" starttime="20191106 16:47:27.421"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:47:27.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:47:27.423" starttime="20191106 16:47:27.422"></status>
</kw>
<msg timestamp="20191106 16:47:27.423" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:27.423" starttime="20191106 16:47:25.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 16:47:27.424" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:27.424" starttime="20191106 16:47:27.423"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:27.424" starttime="20191106 16:47:27.424"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:27.425" starttime="20191106 16:47:27.425"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 16:47:27.426" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 16:47:27.427" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:27.427" starttime="20191106 16:47:27.425"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 16:47:27.428" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 16:47:27.428" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 16:47:27.428" starttime="20191106 16:47:27.427"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 16:47:27.429" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 16:47:27.429" starttime="20191106 16:47:27.428"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 16:47:27.430" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 16:47:27.430" starttime="20191106 16:47:27.429"></status>
</kw>
<msg timestamp="20191106 16:47:27.430" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 16:47:27.430" starttime="20191106 16:47:25.547"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:47:27.432" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 16:47:27.432" starttime="20191106 16:47:27.431"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:27.434" starttime="20191106 16:47:27.433"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:47:27.434" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:47:28.632" level="INFO">Read output: Last login: Wed Nov  6 16:45:41 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:47:28.633" starttime="20191106 16:47:27.434"></status>
</kw>
<status status="PASS" endtime="20191106 16:47:28.633" starttime="20191106 16:47:27.432"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 16:47:28.635" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 16:47:29.795" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:47:29.796" starttime="20191106 16:47:28.634"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 16:47:29.797" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:47:29.896" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:47:29.896" level="INFO">${shutdownMsg} = hadoop    1003  0.0  0.0   9556  1168 ?        Ss   16:47   0:00 bash -c sudo ps aux | grep om
hadoop    1005  0.0  0.0   9088   668 ?        S    16:47   0:00 grep om</msg>
<status status="PASS" endtime="20191106 16:47:29.896" starttime="20191106 16:47:29.796"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:47:29.961" starttime="20191106 16:47:29.896"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:29.963" starttime="20191106 16:47:29.962"></status>
</kw>
<msg timestamp="20191106 16:47:29.963" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 16:47:29.963" starttime="20191106 16:47:27.430"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:47:29.968" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:47:42.249" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:47:42.250" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:42.250" starttime="20191106 16:47:29.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:47:42.252" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:42.252" starttime="20191106 16:47:42.251"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:47:42.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:47:42.254" starttime="20191106 16:47:42.253"></status>
</kw>
<msg timestamp="20191106 16:47:42.255" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:42.255" starttime="20191106 16:47:29.964"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 16:47:42.256" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:42.256" starttime="20191106 16:47:42.255"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:42.257" starttime="20191106 16:47:42.256"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:42.259" starttime="20191106 16:47:42.258"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 16:47:42.260" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 16:47:42.260" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:47:42.260" starttime="20191106 16:47:42.259"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 16:47:42.261" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191106 16:47:42.262" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 16:47:42.262" starttime="20191106 16:47:42.261"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 16:47:42.263" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 16:47:42.263" starttime="20191106 16:47:42.262"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 16:47:42.265" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191106 16:47:42.265" starttime="20191106 16:47:42.264"></status>
</kw>
<msg timestamp="20191106 16:47:42.266" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191106 16:47:42.266" starttime="20191106 16:47:29.963"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 16:47:42.267" starttime="20191106 16:47:42.266"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 16:47:42.270" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191106 16:47:42.270" starttime="20191106 16:47:42.270"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 16:47:42.272" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191106 16:47:42.272" starttime="20191106 16:47:42.271"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 16:47:42.273" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191106 16:47:42.273" starttime="20191106 16:47:42.272"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:47:42.276" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:47:42.276" starttime="20191106 16:47:42.273"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:47:42.281" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:47:56.830" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:47:56.830" level="INFO">${output} = 2019-11-06 16:47:45 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191106 16:47:56.830" starttime="20191106 16:47:42.278"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:47:56.832" level="INFO">2019-11-06 16:47:45 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:47:46 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:47:47 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:47:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:47:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:47:50 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:47:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:47:52 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:47:53 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:47:54 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:47:54 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-06 16:47:55 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 16:47:55 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 16:47:55 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 16:47:56.832" starttime="20191106 16:47:56.831"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:47:56.833" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:47:56.833" starttime="20191106 16:47:56.832"></status>
</kw>
<status status="PASS" endtime="20191106 16:47:56.833" starttime="20191106 16:47:42.276"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:47:56.837" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:48:09.266" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:48:09.267" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:48:09.267" starttime="20191106 16:47:56.835"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:48:09.268" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:48:09.268" starttime="20191106 16:48:09.267"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:48:09.269" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:48:09.269" starttime="20191106 16:48:09.268"></status>
</kw>
<msg timestamp="20191106 16:48:09.269" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:48:09.269" starttime="20191106 16:47:56.834"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:09.270" starttime="20191106 16:48:09.270"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:48:09.271" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:48:09.271" starttime="20191106 16:48:09.270"></status>
</kw>
<status status="PASS" endtime="20191106 16:48:09.272" starttime="20191106 16:47:42.268"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:48:09.273" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 16:48:09.273" starttime="20191106 16:48:09.273"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:09.274" starttime="20191106 16:48:09.274"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:48:09.275" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:48:10.464" level="INFO">Read output: Last login: Wed Nov  6 16:47:27 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:48:10.464" starttime="20191106 16:48:09.275"></status>
</kw>
<status status="PASS" endtime="20191106 16:48:10.465" starttime="20191106 16:48:09.273"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 16:48:10.466" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 16:48:12.636" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:48:12.637" starttime="20191106 16:48:10.465"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 16:48:12.638" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:48:12.746" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:48:12.747" level="INFO">${startupMsg} = hadoop    1054  216  0.0 34476724 215304 ?     Sl   16:48   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 16:48:12.747" starttime="20191106 16:48:12.637"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:48:12.780" starttime="20191106 16:48:12.747"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:12.781" starttime="20191106 16:48:12.780"></status>
</kw>
<status status="PASS" endtime="20191106 16:48:12.781" starttime="20191106 16:48:09.272"></status>
</kw>
<status status="PASS" endtime="20191106 16:48:12.781" starttime="20191106 16:47:25.547"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:48:12.785" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:48:15.092" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:48:15.092" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:15.092" starttime="20191106 16:48:12.783"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:48:15.094" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:15.095" starttime="20191106 16:48:15.093"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:48:15.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:48:15.096" starttime="20191106 16:48:15.095"></status>
</kw>
<msg timestamp="20191106 16:48:15.097" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:15.097" starttime="20191106 16:48:12.782"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 16:48:15.098" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:15.098" starttime="20191106 16:48:15.097"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:15.099" starttime="20191106 16:48:15.098"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:15.100" starttime="20191106 16:48:15.099"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 16:48:15.101" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 16:48:15.101" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:15.101" starttime="20191106 16:48:15.100"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 16:48:15.103" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191106 16:48:15.103" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 16:48:15.103" starttime="20191106 16:48:15.102"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 16:48:15.104" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 16:48:15.104" starttime="20191106 16:48:15.103"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 16:48:15.105" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191106 16:48:15.105" starttime="20191106 16:48:15.104"></status>
</kw>
<msg timestamp="20191106 16:48:15.105" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191106 16:48:15.105" starttime="20191106 16:48:12.782"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:48:15.107" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 16:48:15.107" starttime="20191106 16:48:15.106"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:15.109" starttime="20191106 16:48:15.108"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:48:15.109" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:48:16.297" level="INFO">Read output: Last login: Wed Nov  6 16:47:05 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:48:16.298" starttime="20191106 16:48:15.109"></status>
</kw>
<status status="PASS" endtime="20191106 16:48:16.298" starttime="20191106 16:48:15.107"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 16:48:16.299" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 16:48:17.459" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:48:17.460" starttime="20191106 16:48:16.299"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 16:48:17.461" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:48:17.538" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:48:17.538" level="INFO">${shutdownMsg} = hadoop    1055  0.0  0.0   9556  1168 ?        Ss   16:48   0:00 bash -c sudo ps aux | grep om
hadoop    1057  0.0  0.0   9088   668 ?        S    16:48   0:00 grep om</msg>
<status status="PASS" endtime="20191106 16:48:17.538" starttime="20191106 16:48:17.460"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:48:17.604" starttime="20191106 16:48:17.539"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:17.605" starttime="20191106 16:48:17.604"></status>
</kw>
<msg timestamp="20191106 16:48:17.606" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 16:48:17.606" starttime="20191106 16:48:15.106"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:48:17.610" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:48:19.740" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:48:19.740" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:19.740" starttime="20191106 16:48:17.607"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:48:19.741" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:19.741" starttime="20191106 16:48:19.741"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:48:19.742" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:48:19.742" starttime="20191106 16:48:19.742"></status>
</kw>
<msg timestamp="20191106 16:48:19.742" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:19.742" starttime="20191106 16:48:17.607"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 16:48:19.743" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:19.743" starttime="20191106 16:48:19.743"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:19.744" starttime="20191106 16:48:19.743"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:19.744" starttime="20191106 16:48:19.744"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 16:48:19.745" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 16:48:19.745" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:19.745" starttime="20191106 16:48:19.745"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 16:48:19.746" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 16:48:19.746" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 16:48:19.746" starttime="20191106 16:48:19.745"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 16:48:19.746" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 16:48:19.746" starttime="20191106 16:48:19.746"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 16:48:19.747" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 16:48:19.747" starttime="20191106 16:48:19.747"></status>
</kw>
<msg timestamp="20191106 16:48:19.747" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191106 16:48:19.747" starttime="20191106 16:48:17.606"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:19.748" starttime="20191106 16:48:19.748"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 16:48:19.749" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191106 16:48:19.749" starttime="20191106 16:48:19.749"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 16:48:19.750" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191106 16:48:19.750" starttime="20191106 16:48:19.749"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 16:48:19.751" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191106 16:48:19.751" starttime="20191106 16:48:19.750"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:48:19.752" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:48:19.753" starttime="20191106 16:48:19.751"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:48:19.755" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:48:24.345" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:48:24.345" level="INFO">${output} = 2019-11-06 16:48:22 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 16:48:22 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191106 16:48:24.345" starttime="20191106 16:48:19.753"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:48:24.346" level="INFO">2019-11-06 16:48:22 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 16:48:22 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 16:48:22 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 16:48:24.346" starttime="20191106 16:48:24.346"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:48:24.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:48:24.347" starttime="20191106 16:48:24.346"></status>
</kw>
<status status="PASS" endtime="20191106 16:48:24.347" starttime="20191106 16:48:19.753"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:48:24.350" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:48:26.299" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:48:26.299" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:48:26.300" starttime="20191106 16:48:24.348"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:48:26.301" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:48:26.301" starttime="20191106 16:48:26.300"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:48:26.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:48:26.302" starttime="20191106 16:48:26.301"></status>
</kw>
<msg timestamp="20191106 16:48:26.302" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:48:26.302" starttime="20191106 16:48:24.347"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:26.303" starttime="20191106 16:48:26.302"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:48:26.304" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:48:26.304" starttime="20191106 16:48:26.303"></status>
</kw>
<status status="PASS" endtime="20191106 16:48:26.305" starttime="20191106 16:48:19.748"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:48:26.306" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191106 16:48:26.306" starttime="20191106 16:48:26.305"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:26.307" starttime="20191106 16:48:26.307"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:48:26.308" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:48:27.508" level="INFO">Read output: Last login: Wed Nov  6 16:48:15 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:48:27.509" starttime="20191106 16:48:26.308"></status>
</kw>
<status status="PASS" endtime="20191106 16:48:27.509" starttime="20191106 16:48:26.306"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 16:48:27.510" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 16:48:29.690" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:48:29.690" starttime="20191106 16:48:27.510"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 16:48:29.691" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:48:29.799" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:48:29.799" level="INFO">${startupMsg} = hadoop    1106  227  0.0 34479492 209488 ?     Sl   16:48   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 16:48:29.800" starttime="20191106 16:48:29.690"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:48:29.865" starttime="20191106 16:48:29.800"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:29.865" starttime="20191106 16:48:29.865"></status>
</kw>
<status status="PASS" endtime="20191106 16:48:29.866" starttime="20191106 16:48:26.305"></status>
</kw>
<status status="PASS" endtime="20191106 16:48:29.866" starttime="20191106 16:48:12.782"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:48:29.869" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:48:31.797" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:48:31.797" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:31.797" starttime="20191106 16:48:29.867"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:48:31.798" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:31.798" starttime="20191106 16:48:31.798"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:48:31.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:48:31.799" starttime="20191106 16:48:31.799"></status>
</kw>
<msg timestamp="20191106 16:48:31.799" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:31.799" starttime="20191106 16:48:29.866"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 16:48:31.800" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:31.800" starttime="20191106 16:48:31.800"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:31.801" starttime="20191106 16:48:31.800"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:31.801" starttime="20191106 16:48:31.801"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 16:48:31.802" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 16:48:31.802" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:31.802" starttime="20191106 16:48:31.801"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 16:48:31.802" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 16:48:31.803" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 16:48:31.803" starttime="20191106 16:48:31.802"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 16:48:31.803" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 16:48:31.803" starttime="20191106 16:48:31.803"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 16:48:31.804" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 16:48:31.804" starttime="20191106 16:48:31.803"></status>
</kw>
<msg timestamp="20191106 16:48:31.804" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 16:48:31.804" starttime="20191106 16:48:29.866"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:48:31.805" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 16:48:31.806" starttime="20191106 16:48:31.805"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:31.807" starttime="20191106 16:48:31.806"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:48:31.808" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:48:33.006" level="INFO">Read output: Last login: Wed Nov  6 16:48:09 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:48:33.006" starttime="20191106 16:48:31.807"></status>
</kw>
<status status="PASS" endtime="20191106 16:48:33.006" starttime="20191106 16:48:31.806"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 16:48:33.007" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 16:48:34.157" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:48:34.158" starttime="20191106 16:48:33.007"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 16:48:34.159" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:48:34.257" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:48:34.257" level="INFO">${shutdownMsg} = hadoop    1543  0.0  0.0   9556  1168 ?        Ss   16:48   0:00 bash -c sudo ps aux | grep om
hadoop    1545  0.0  0.0   9088   672 ?        S    16:48   0:00 grep om</msg>
<status status="PASS" endtime="20191106 16:48:34.257" starttime="20191106 16:48:34.158"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:48:34.323" starttime="20191106 16:48:34.258"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:34.324" starttime="20191106 16:48:34.323"></status>
</kw>
<msg timestamp="20191106 16:48:34.324" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 16:48:34.324" starttime="20191106 16:48:31.804"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:48:34.328" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:48:46.445" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:48:46.446" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:46.446" starttime="20191106 16:48:34.326"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:48:46.447" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:46.447" starttime="20191106 16:48:46.446"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:48:46.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:48:46.448" starttime="20191106 16:48:46.447"></status>
</kw>
<msg timestamp="20191106 16:48:46.448" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:46.448" starttime="20191106 16:48:34.325"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 16:48:46.449" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:46.449" starttime="20191106 16:48:46.448"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:46.449" starttime="20191106 16:48:46.449"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:46.450" starttime="20191106 16:48:46.450"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 16:48:46.451" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 16:48:46.451" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191106 16:48:46.451" starttime="20191106 16:48:46.450"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 16:48:46.452" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191106 16:48:46.452" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 16:48:46.452" starttime="20191106 16:48:46.451"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 16:48:46.452" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191106 16:48:46.452" starttime="20191106 16:48:46.452"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 16:48:46.453" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191106 16:48:46.453" starttime="20191106 16:48:46.453"></status>
</kw>
<msg timestamp="20191106 16:48:46.453" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191106 16:48:46.453" starttime="20191106 16:48:34.324"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191106 16:48:46.455" starttime="20191106 16:48:46.454"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191106 16:48:46.457" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191106 16:48:46.457" starttime="20191106 16:48:46.456"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191106 16:48:46.458" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191106 16:48:46.458" starttime="20191106 16:48:46.457"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191106 16:48:46.459" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191106 16:48:46.459" starttime="20191106 16:48:46.458"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:48:46.461" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:48:46.461" starttime="20191106 16:48:46.459"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:48:46.465" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:49:00.925" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:49:00.925" level="INFO">${output} = 2019-11-06 16:48:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191106 16:49:00.925" starttime="20191106 16:48:46.462"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:49:00.927" level="INFO">2019-11-06 16:48:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:48:50 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:48:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:48:52 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:48:53 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:48:54 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:48:55 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:48:56 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:48:57 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:48:58 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-06 16:48:59 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-06 16:48:59 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-06 16:48:59 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191106 16:49:00.927" starttime="20191106 16:49:00.926"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:49:00.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:49:00.928" starttime="20191106 16:49:00.927"></status>
</kw>
<status status="PASS" endtime="20191106 16:49:00.928" starttime="20191106 16:48:46.461"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 16:49:00.932" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 16:49:13.270" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 16:49:13.270" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:49:13.270" starttime="20191106 16:49:00.930"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 16:49:13.272" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:49:13.272" starttime="20191106 16:49:13.271"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 16:49:13.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 16:49:13.273" starttime="20191106 16:49:13.272"></status>
</kw>
<msg timestamp="20191106 16:49:13.273" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191106 16:49:13.273" starttime="20191106 16:49:00.929"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:49:13.274" starttime="20191106 16:49:13.274"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191106 16:49:13.275" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191106 16:49:13.275" starttime="20191106 16:49:13.274"></status>
</kw>
<status status="PASS" endtime="20191106 16:49:13.275" starttime="20191106 16:48:46.455"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 16:49:13.277" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 16:49:13.277" starttime="20191106 16:49:13.276"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 16:49:13.278" starttime="20191106 16:49:13.278"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 16:49:13.279" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 16:49:14.485" level="INFO">Read output: Last login: Wed Nov  6 16:48:32 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 16:49:14.485" starttime="20191106 16:49:13.279"></status>
</kw>
<status status="PASS" endtime="20191106 16:49:14.486" starttime="20191106 16:49:13.277"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191106 16:49:14.486" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191106 16:49:16.617" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 16:49:16.618" starttime="20191106 16:49:14.486"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191106 16:49:16.619" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 16:49:16.727" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 16:49:16.728" level="INFO">${startupMsg} = hadoop    1595  238  0.0 34478444 226196 ?     Sl   16:49   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191106 16:49:16.728" starttime="20191106 16:49:16.618"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 16:49:16.793" starttime="20191106 16:49:16.728"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 16:49:16.794" starttime="20191106 16:49:16.793"></status>
</kw>
<status status="PASS" endtime="20191106 16:49:16.794" starttime="20191106 16:49:13.276"></status>
</kw>
<status status="PASS" endtime="20191106 16:49:16.794" starttime="20191106 16:48:29.866"></status>
</kw>
<status status="PASS" endtime="20191106 16:49:16.795" starttime="20191106 16:46:42.657"></status>
</kw>
<status status="PASS" endtime="20191106 16:49:16.795" critical="yes" starttime="20191106 16:46:42.656"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191106 16:49:16.797" starttime="20191106 16:44:35.849"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
