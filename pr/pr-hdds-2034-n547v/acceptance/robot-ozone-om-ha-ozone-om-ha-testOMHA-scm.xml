<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191113 17:30:01.779" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:30:01.942" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:30:04.445" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:30:04.445" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 17:30:04.445" starttime="20191113 17:30:01.940"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:30:04.446" level="INFO"></msg>
<status status="PASS" endtime="20191113 17:30:04.446" starttime="20191113 17:30:04.446"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:30:04.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:30:04.447" starttime="20191113 17:30:04.447"></status>
</kw>
<status status="PASS" endtime="20191113 17:30:04.447" starttime="20191113 17:30:01.940"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:30:04.452" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:30:06.606" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:30:06.606" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191113 17:30:06.606" starttime="20191113 17:30:04.451"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:30:06.608" level="INFO"></msg>
<status status="PASS" endtime="20191113 17:30:06.608" starttime="20191113 17:30:06.607"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:30:06.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:30:06.610" starttime="20191113 17:30:06.609"></status>
</kw>
<status status="PASS" endtime="20191113 17:30:06.610" starttime="20191113 17:30:04.448"></status>
</kw>
<status status="PASS" endtime="20191113 17:30:06.610" starttime="20191113 17:30:01.939"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 17:30:06.612" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191113 17:30:06.613" starttime="20191113 17:30:06.612"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 17:30:06.614" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191113 17:30:06.614" starttime="20191113 17:30:06.613"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 17:30:06.615" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191113 17:30:06.615" starttime="20191113 17:30:06.614"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 17:30:06.617" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 17:30:06.618" starttime="20191113 17:30:06.615"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:30:06.621" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:30:11.392" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:30:11.392" level="INFO">${output} = 2019-11-13 17:30:09 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 17:30:09 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191113 17:30:11.392" starttime="20191113 17:30:06.619"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:30:11.393" level="INFO">2019-11-13 17:30:09 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 17:30:09 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 17:30:09 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 17:30:11.393" starttime="20191113 17:30:11.393"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:30:11.394" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:30:11.394" starttime="20191113 17:30:11.394"></status>
</kw>
<status status="PASS" endtime="20191113 17:30:11.395" starttime="20191113 17:30:06.618"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:30:11.398" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:30:13.517" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:30:13.518" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191113 17:30:13.518" starttime="20191113 17:30:11.396"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:30:13.519" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191113 17:30:13.519" starttime="20191113 17:30:13.518"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:30:13.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:30:13.519" starttime="20191113 17:30:13.519"></status>
</kw>
<msg timestamp="20191113 17:30:13.520" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191113 17:30:13.520" starttime="20191113 17:30:11.395"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:30:13.520" starttime="20191113 17:30:13.520"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 17:30:13.521" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 17:30:13.521" starttime="20191113 17:30:13.521"></status>
</kw>
<status status="PASS" endtime="20191113 17:30:13.521" starttime="20191113 17:30:06.611"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:30:13.524" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:30:15.458" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:30:15.458" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 17:30:15.458" starttime="20191113 17:30:13.522"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:30:15.460" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 17:30:15.460" starttime="20191113 17:30:15.459"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:30:15.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:30:15.461" starttime="20191113 17:30:15.460"></status>
</kw>
<msg timestamp="20191113 17:30:15.461" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 17:30:15.461" starttime="20191113 17:30:13.522"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 17:30:15.461" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191113 17:30:15.462" starttime="20191113 17:30:15.461"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 17:30:15.463" starttime="20191113 17:30:15.462"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 17:30:15.463" starttime="20191113 17:30:15.463"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 17:30:15.464" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 17:30:15.464" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191113 17:30:15.464" starttime="20191113 17:30:15.463"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 17:30:15.464" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191113 17:30:15.464" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 17:30:15.464" starttime="20191113 17:30:15.464"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 17:30:15.465" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 17:30:15.465" starttime="20191113 17:30:15.465"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 17:30:15.465" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191113 17:30:15.465" starttime="20191113 17:30:15.465"></status>
</kw>
<msg timestamp="20191113 17:30:15.466" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191113 17:30:15.466" starttime="20191113 17:30:13.522"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:30:15.467" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 17:30:15.467" starttime="20191113 17:30:15.467"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:30:15.468" starttime="20191113 17:30:15.468"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:30:15.469" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:30:16.679" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:30:16.680" starttime="20191113 17:30:15.468"></status>
</kw>
<status status="PASS" endtime="20191113 17:30:16.680" starttime="20191113 17:30:15.467"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 17:30:16.681" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 17:30:26.806" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 17:30:26.806" starttime="20191113 17:30:16.680"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 17:30:26.807" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 17:30:26.883" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:30:26.883" level="INFO">${shutdownMsg} = hadoop     457  0.0  0.0   9556  1164 ?        Ss   17:30   0:00 bash -c sudo ps aux | grep om
hadoop     459  0.0  0.0   9088   668 ?        S    17:30   0:00 grep om</msg>
<status status="PASS" endtime="20191113 17:30:26.883" starttime="20191113 17:30:26.807"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 17:30:26.916" starttime="20191113 17:30:26.884"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 17:30:26.917" starttime="20191113 17:30:26.916"></status>
</kw>
<msg timestamp="20191113 17:30:26.917" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191113 17:30:26.917" starttime="20191113 17:30:15.466"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:30:26.920" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:30:39.014" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:30:39.014" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 17:30:39.014" starttime="20191113 17:30:26.918"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:30:39.015" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 17:30:39.015" starttime="20191113 17:30:39.015"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:30:39.016" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:30:39.016" starttime="20191113 17:30:39.016"></status>
</kw>
<msg timestamp="20191113 17:30:39.016" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 17:30:39.017" starttime="20191113 17:30:26.918"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191113 17:30:39.017" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191113 17:30:39.017" starttime="20191113 17:30:39.017"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191113 17:30:39.018" starttime="20191113 17:30:39.017"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191113 17:30:39.018" starttime="20191113 17:30:39.018"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191113 17:30:39.019" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191113 17:30:39.019" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191113 17:30:39.019" starttime="20191113 17:30:39.019"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191113 17:30:39.020" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191113 17:30:39.020" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191113 17:30:39.020" starttime="20191113 17:30:39.019"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191113 17:30:39.021" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191113 17:30:39.021" starttime="20191113 17:30:39.020"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191113 17:30:39.021" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191113 17:30:39.021" starttime="20191113 17:30:39.021"></status>
</kw>
<msg timestamp="20191113 17:30:39.022" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191113 17:30:39.022" starttime="20191113 17:30:26.917"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191113 17:30:39.022" starttime="20191113 17:30:39.022"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191113 17:30:39.023" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191113 17:30:39.024" starttime="20191113 17:30:39.023"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191113 17:30:39.024" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191113 17:30:39.024" starttime="20191113 17:30:39.024"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191113 17:30:39.044" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191113 17:30:39.044" starttime="20191113 17:30:39.025"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 17:30:39.046" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 17:30:39.046" starttime="20191113 17:30:39.044"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:30:39.049" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:30:53.681" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:30:53.682" level="INFO">${output} = 2019-11-13 17:30:41 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191113 17:30:53.682" starttime="20191113 17:30:39.047"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:30:53.683" level="INFO">2019-11-13 17:30:41 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:30:42 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:30:43 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:30:44 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:30:45 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:30:46 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:30:47 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:30:48 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:30:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:30:50 INFO  Client:948 - Retrying connect to server: om1/172.18.0.6:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-13 17:30:51 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-13 17:30:51 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-13 17:30:51 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191113 17:30:53.683" starttime="20191113 17:30:53.682"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:30:53.684" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:30:53.685" starttime="20191113 17:30:53.683"></status>
</kw>
<status status="PASS" endtime="20191113 17:30:53.685" starttime="20191113 17:30:39.046"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:30:53.688" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:31:05.837" level="INFO">${rc} = 0</msg>
<msg timestamp="20191113 17:31:05.838" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 17:31:05.838" starttime="20191113 17:30:53.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:31:05.839" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 17:31:05.839" starttime="20191113 17:31:05.838"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:31:05.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191113 17:31:05.840" starttime="20191113 17:31:05.839"></status>
</kw>
<msg timestamp="20191113 17:31:05.840" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191113 17:31:05.840" starttime="20191113 17:30:53.685"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:31:05.840" starttime="20191113 17:31:05.840"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191113 17:31:05.841" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191113 17:31:05.841" starttime="20191113 17:31:05.841"></status>
</kw>
<status status="PASS" endtime="20191113 17:31:05.841" starttime="20191113 17:30:39.022"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:31:05.843" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191113 17:31:05.843" starttime="20191113 17:31:05.842"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:31:05.844" starttime="20191113 17:31:05.843"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:31:05.844" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:31:07.031" level="INFO">Read output: Last login: Wed Nov 13 17:30:15 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:31:07.032" starttime="20191113 17:31:05.844"></status>
</kw>
<status status="PASS" endtime="20191113 17:31:07.032" starttime="20191113 17:31:05.843"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191113 17:31:07.033" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191113 17:31:09.164" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 17:31:09.164" starttime="20191113 17:31:07.032"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191113 17:31:09.165" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 17:31:09.252" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:31:09.252" level="INFO">${startupMsg} = hadoop     510  312  0.0 34483584 229052 ?     Sl   17:31   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191113 17:31:09.252" starttime="20191113 17:31:09.165"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 17:31:09.317" starttime="20191113 17:31:09.253"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 17:31:09.318" starttime="20191113 17:31:09.317"></status>
</kw>
<status status="PASS" endtime="20191113 17:31:09.318" starttime="20191113 17:31:05.842"></status>
</kw>
<status status="PASS" endtime="20191113 17:31:09.318" critical="yes" starttime="20191113 17:30:01.938"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191113 17:31:09.321" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:31:09.321" starttime="20191113 17:31:09.319"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191113 17:31:09.322" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191113 17:31:09.322" starttime="20191113 17:31:09.321"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:31:09.323" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:31:09.323" starttime="20191113 17:31:09.323"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:31:09.324" starttime="20191113 17:31:09.324"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:31:09.325" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:31:10.523" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:31:10.524" starttime="20191113 17:31:09.324"></status>
</kw>
<status status="PASS" endtime="20191113 17:31:10.524" starttime="20191113 17:31:09.323"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191113 17:31:10.525" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191113 17:31:20.667" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191113 17:31:20.668" starttime="20191113 17:31:10.524"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191113 17:31:20.669" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191113 17:31:20.734" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:31:20.734" level="INFO">${shutdownMsg} = hadoop     507  0.0  0.0   9556  1164 ?        Ss   17:31   0:00 bash -c sudo ps aux | grep om
hadoop     509  0.0  0.0   9088   672 ?        S    17:31   0:00 grep om</msg>
<status status="PASS" endtime="20191113 17:31:20.734" starttime="20191113 17:31:20.668"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191113 17:31:20.800" starttime="20191113 17:31:20.735"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191113 17:31:20.801" starttime="20191113 17:31:20.800"></status>
</kw>
<status status="PASS" endtime="20191113 17:31:20.801" starttime="20191113 17:31:09.322"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191113 17:31:20.803" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191113 17:31:20.803" starttime="20191113 17:31:20.802"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191113 17:31:20.804" starttime="20191113 17:31:20.803"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191113 17:31:20.805" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191113 17:31:22.004" level="INFO">Read output: Last login: Wed Nov 13 17:31:09 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191113 17:31:22.005" starttime="20191113 17:31:20.804"></status>
</kw>
<status status="PASS" endtime="20191113 17:31:22.005" starttime="20191113 17:31:20.803"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191113 17:31:22.006" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191113 17:31:22.022" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191113 17:31:22.022" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:31:22.022" starttime="20191113 17:31:22.006"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191113 17:31:22.023" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191113 17:31:22.023" starttime="20191113 17:31:22.022"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191113 17:31:22.024" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191113 17:31:22.024" starttime="20191113 17:31:22.023"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191113 17:31:22.100" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191113 17:31:22.109" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191113 17:31:22.110" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191113 17:31:22.110" starttime="20191113 17:31:22.024"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191113 17:31:22.111" level="INFO">Length is 2</msg>
<msg timestamp="20191113 17:31:22.111" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191113 17:31:22.112" starttime="20191113 17:31:22.110"></status>
</kw>
<msg timestamp="20191113 17:31:22.112" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191113 17:31:22.112" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191113 17:31:22.112" starttime="20191113 17:31:20.801"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:31:22.116" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:31:53.785" level="INFO">${rc} = 255</msg>
<msg timestamp="20191113 17:31:53.785" level="INFO">${output} = Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
jav...</msg>
<status status="PASS" endtime="20191113 17:31:53.785" starttime="20191113 17:31:22.114"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:31:53.787" level="INFO">Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
java.net.ConnectException: Call From 75305a59ba35/172.18.0.7 to om2:9862 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.apache.hadoop.net.NetUtils.wrapWithMessage(NetUtils.java:831)
	at org.apache.hadoop.net.NetUtils.wrapException(NetUtils.java:755)
	at org.apache.hadoop.ipc.Client.getRpcResponse(Client.java:1515)
	at org.apache.hadoop.ipc.Client.call(Client.java:1457)
	at org.apache.hadoop.ipc.Client.call(Client.java:1367)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:228)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:116)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:422)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeMethod(RetryInvocationHandler.java:165)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invoke(RetryInvocationHandler.java:157)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeOnce(RetryInvocationHandler.java:95)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:359)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.submitRequest(OzoneManagerProtocolClientSideTranslatorPB.java:361)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.getServiceInfo(OzoneManagerProtocolClientSideTranslatorPB.java:1252)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.hdds.tracing.TraceAllMethod.invoke(TraceAllMethod.java:66)
	at com.sun.proxy.$Proxy17.getServiceInfo(Unknown Source)
	at org.apache.hadoop.ozone.client.rpc.RpcClient.&lt;init&gt;(RpcClient.java:157)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getClientProtocol(OzoneClientFactory.java:256)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getRpcClient(OzoneClientFactory.java:187)
	at org.apache.hadoop.ozone.admin.om.OMAdmin.createClient(OMAdmin.java:59)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:49)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:32)
	at picocli.CommandLine.execute(CommandLine.java:1173)
	at picocli.CommandLine.access$800(CommandLine.java:141)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1367)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1335)
	at picocli.CommandLine$AbstractParseResultHandler.handleParseResult(CommandLine.java:1243)
	at picocli.CommandLine.parseWithHandlers(CommandLine.java:1526)
	at picocli.CommandLine.parseWithHandler(CommandLine.java:1465)
	at org.apache.hadoop.hdds.cli.GenericCli.execute(GenericCli.java:65)
	at org.apache.hadoop.hdds.cli.GenericCli.run(GenericCli.java:56)
	at org.apache.hadoop.ozone.admin.OzoneAdmin.main(OzoneAdmin.java:66)
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:779)
	at org.apache.hadoop.net.SocketIOWithTimeout.connect(SocketIOWithTimeout.java:206)
	at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:531)
	at org.apache.hadoop.ipc.Client$Connection.setupConnection(Client.java:690)
	at org.apache.hadoop.ipc.Client$Connection.setupIOstreams(Client.java:794)
	at org.apache.hadoop.ipc.Client$Connection.access$3700(Client.java:411)
	at org.apache.hadoop.ipc.Client.getConnection(Client.java:1572)
	at org.apache.hadoop.ipc.Client.call(Client.java:1403)
	... 38 more
Connection refused</msg>
<status status="PASS" endtime="20191113 17:31:53.787" starttime="20191113 17:31:53.786"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:31:53.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191113 17:31:53.789" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191113 17:31:53.789" starttime="20191113 17:31:53.788"></status>
</kw>
<status status="FAIL" endtime="20191113 17:31:53.789" starttime="20191113 17:31:22.113"></status>
</kw>
<status status="FAIL" endtime="20191113 17:31:53.790" starttime="20191113 17:31:22.113"></status>
</kw>
<status status="FAIL" endtime="20191113 17:31:53.790" critical="yes" starttime="20191113 17:31:09.319">255 != 0</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191113 17:31:53.797" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191113 17:32:25.345" level="INFO">${rc} = 255</msg>
<msg timestamp="20191113 17:32:25.346" level="INFO">${output} = Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
jav...</msg>
<status status="PASS" endtime="20191113 17:32:25.346" starttime="20191113 17:31:53.794"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191113 17:32:25.347" level="INFO">Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
java.net.ConnectException: Call From 75305a59ba35/172.18.0.7 to om2:9862 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.apache.hadoop.net.NetUtils.wrapWithMessage(NetUtils.java:831)
	at org.apache.hadoop.net.NetUtils.wrapException(NetUtils.java:755)
	at org.apache.hadoop.ipc.Client.getRpcResponse(Client.java:1515)
	at org.apache.hadoop.ipc.Client.call(Client.java:1457)
	at org.apache.hadoop.ipc.Client.call(Client.java:1367)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:228)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:116)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:422)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeMethod(RetryInvocationHandler.java:165)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invoke(RetryInvocationHandler.java:157)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeOnce(RetryInvocationHandler.java:95)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:359)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.submitRequest(OzoneManagerProtocolClientSideTranslatorPB.java:361)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.getServiceInfo(OzoneManagerProtocolClientSideTranslatorPB.java:1252)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.hdds.tracing.TraceAllMethod.invoke(TraceAllMethod.java:66)
	at com.sun.proxy.$Proxy17.getServiceInfo(Unknown Source)
	at org.apache.hadoop.ozone.client.rpc.RpcClient.&lt;init&gt;(RpcClient.java:157)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getClientProtocol(OzoneClientFactory.java:256)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getRpcClient(OzoneClientFactory.java:187)
	at org.apache.hadoop.ozone.admin.om.OMAdmin.createClient(OMAdmin.java:59)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:49)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:32)
	at picocli.CommandLine.execute(CommandLine.java:1173)
	at picocli.CommandLine.access$800(CommandLine.java:141)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1367)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1335)
	at picocli.CommandLine$AbstractParseResultHandler.handleParseResult(CommandLine.java:1243)
	at picocli.CommandLine.parseWithHandlers(CommandLine.java:1526)
	at picocli.CommandLine.parseWithHandler(CommandLine.java:1465)
	at org.apache.hadoop.hdds.cli.GenericCli.execute(GenericCli.java:65)
	at org.apache.hadoop.hdds.cli.GenericCli.run(GenericCli.java:56)
	at org.apache.hadoop.ozone.admin.OzoneAdmin.main(OzoneAdmin.java:66)
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:779)
	at org.apache.hadoop.net.SocketIOWithTimeout.connect(SocketIOWithTimeout.java:206)
	at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:531)
	at org.apache.hadoop.ipc.Client$Connection.setupConnection(Client.java:690)
	at org.apache.hadoop.ipc.Client$Connection.setupIOstreams(Client.java:794)
	at org.apache.hadoop.ipc.Client$Connection.access$3700(Client.java:411)
	at org.apache.hadoop.ipc.Client.getConnection(Client.java:1572)
	at org.apache.hadoop.ipc.Client.call(Client.java:1403)
	... 38 more
Connection refused</msg>
<status status="PASS" endtime="20191113 17:32:25.347" starttime="20191113 17:32:25.346"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191113 17:32:25.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191113 17:32:25.348" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191113 17:32:25.348" starttime="20191113 17:32:25.347"></status>
</kw>
<status status="FAIL" endtime="20191113 17:32:25.348" starttime="20191113 17:31:53.793"></status>
</kw>
<status status="FAIL" endtime="20191113 17:32:25.348" starttime="20191113 17:31:53.793"></status>
</kw>
<status status="FAIL" endtime="20191113 17:32:25.349" starttime="20191113 17:31:53.792"></status>
</kw>
<status status="FAIL" endtime="20191113 17:32:25.349" starttime="20191113 17:31:53.792"></status>
</kw>
<status status="FAIL" endtime="20191113 17:32:25.349" critical="yes" starttime="20191113 17:31:53.791">255 != 0</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191113 17:32:25.350" starttime="20191113 17:30:01.780"></status>
</suite>
<statistics>
<total>
<stat fail="2" pass="1">Critical Tests</stat>
<stat fail="2" pass="1">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="2" id="s1" name="ozone-om-ha-testOMHA" pass="1">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
