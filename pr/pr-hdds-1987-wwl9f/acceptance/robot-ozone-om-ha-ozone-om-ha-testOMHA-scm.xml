<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191105 16:01:05.517" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 16:01:05.659" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 16:01:15.046" level="INFO">${rc} = 255</msg>
<msg timestamp="20191105 16:01:15.047" level="INFO">${output} = Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191105 16:01:15.047" starttime="20191105 16:01:05.657"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 16:01:15.048" level="INFO">Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191105 16:01:15.048" starttime="20191105 16:01:15.047"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 16:01:15.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191105 16:01:15.050" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191105 16:01:15.053" starttime="20191105 16:01:15.049"></status>
</kw>
<status status="FAIL" endtime="20191105 16:01:15.054" starttime="20191105 16:01:05.656"></status>
</kw>
<status status="FAIL" endtime="20191105 16:01:15.054" starttime="20191105 16:01:05.656"></status>
</kw>
<status status="FAIL" endtime="20191105 16:01:15.054" critical="yes" starttime="20191105 16:01:05.656">255 != 0</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191105 16:01:15.058" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191105 16:01:15.058" starttime="20191105 16:01:15.056"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191105 16:01:15.060" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191105 16:01:15.060" starttime="20191105 16:01:15.058"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 16:01:15.062" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 16:01:15.062" starttime="20191105 16:01:15.061"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 16:01:15.064" starttime="20191105 16:01:15.063"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 16:01:15.064" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 16:01:16.370" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 16:01:16.370" starttime="20191105 16:01:15.064"></status>
</kw>
<status status="PASS" endtime="20191105 16:01:16.371" starttime="20191105 16:01:15.062"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 16:01:16.371" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 16:01:16.386" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 16:01:16.386" starttime="20191105 16:01:16.371"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 16:01:16.387" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 16:01:16.463" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 16:01:16.464" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 16:01:16.464" starttime="20191105 16:01:16.386"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 16:01:16.578" starttime="20191105 16:01:16.464"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 16:01:16.579" starttime="20191105 16:01:16.579"></status>
</kw>
<status status="PASS" endtime="20191105 16:01:16.580" starttime="20191105 16:01:15.061"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 16:01:16.581" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 16:01:16.582" starttime="20191105 16:01:16.581"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 16:01:16.583" starttime="20191105 16:01:16.582"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 16:01:16.584" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 16:01:17.770" level="INFO">Read output: Last login: Tue Nov  5 16:01:15 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 16:01:17.770" starttime="20191105 16:01:16.583"></status>
</kw>
<status status="PASS" endtime="20191105 16:01:17.770" starttime="20191105 16:01:16.582"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191105 16:01:17.771" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191105 16:01:17.785" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 16:01:17.786" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191105 16:01:17.786" starttime="20191105 16:01:17.771"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191105 16:01:17.787" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191105 16:01:17.787" starttime="20191105 16:01:17.786"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191105 16:01:17.788" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191105 16:01:17.788" starttime="20191105 16:01:17.787"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191105 16:01:17.830" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191105 16:01:17.830" starttime="20191105 16:01:17.788"></status>
</kw>
<status status="FAIL" endtime="20191105 16:01:17.830" starttime="20191105 16:01:16.580"></status>
</kw>
<status status="FAIL" endtime="20191105 16:01:17.831" critical="yes" starttime="20191105 16:01:15.055">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 16:01:17.836" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 16:01:20.074" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 16:01:20.074" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 16:01:20.074" starttime="20191105 16:01:17.834"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 16:01:20.075" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 16:01:20.075" starttime="20191105 16:01:20.075"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 16:01:20.076" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 16:01:20.076" starttime="20191105 16:01:20.076"></status>
</kw>
<msg timestamp="20191105 16:01:20.077" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 16:01:20.077" starttime="20191105 16:01:17.833"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 16:01:20.077" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 16:01:20.077" starttime="20191105 16:01:20.077"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 16:01:20.078" starttime="20191105 16:01:20.077"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 16:01:20.078" starttime="20191105 16:01:20.078"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 16:01:20.079" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 16:01:20.079" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191105 16:01:20.079" starttime="20191105 16:01:20.079"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 16:01:20.080" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191105 16:01:20.080" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 16:01:20.080" starttime="20191105 16:01:20.079"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 16:01:20.080" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191105 16:01:20.080" starttime="20191105 16:01:20.080"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 16:01:20.081" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191105 16:01:20.081" starttime="20191105 16:01:20.081"></status>
</kw>
<msg timestamp="20191105 16:01:20.081" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191105 16:01:20.081" starttime="20191105 16:01:17.832"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191105 16:01:20.083" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191105 16:01:20.083" starttime="20191105 16:01:20.082"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191105 16:01:20.084" starttime="20191105 16:01:20.083"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191105 16:01:20.084" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191105 16:01:21.282" level="INFO">Read output: Last login: Tue Nov  5 16:01:16 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191105 16:01:21.283" starttime="20191105 16:01:20.084"></status>
</kw>
<status status="PASS" endtime="20191105 16:01:21.283" starttime="20191105 16:01:20.083"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191105 16:01:21.284" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191105 16:01:21.297" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191105 16:01:21.298" starttime="20191105 16:01:21.283"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191105 16:01:21.298" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191105 16:01:21.375" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191105 16:01:21.375" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191105 16:01:21.375" starttime="20191105 16:01:21.298"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191105 16:01:21.490" starttime="20191105 16:01:21.375"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191105 16:01:21.490" starttime="20191105 16:01:21.490"></status>
</kw>
<msg timestamp="20191105 16:01:21.491" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191105 16:01:21.491" starttime="20191105 16:01:20.081"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191105 16:01:21.494" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191105 16:01:23.478" level="INFO">${rc} = 0</msg>
<msg timestamp="20191105 16:01:23.478" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 16:01:23.478" starttime="20191105 16:01:21.492"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191105 16:01:23.479" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 16:01:23.479" starttime="20191105 16:01:23.478"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191105 16:01:23.479" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191105 16:01:23.480" starttime="20191105 16:01:23.479"></status>
</kw>
<msg timestamp="20191105 16:01:23.480" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 16:01:23.480" starttime="20191105 16:01:21.491"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191105 16:01:23.480" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191105 16:01:23.480" starttime="20191105 16:01:23.480"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191105 16:01:23.481" starttime="20191105 16:01:23.481"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191105 16:01:23.481" starttime="20191105 16:01:23.481"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191105 16:01:23.482" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191105 16:01:23.482" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191105 16:01:23.482" starttime="20191105 16:01:23.482"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191105 16:01:23.483" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191105 16:01:23.483" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191105 16:01:23.483" starttime="20191105 16:01:23.482"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191105 16:01:23.483" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191105 16:01:23.483" starttime="20191105 16:01:23.483"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191105 16:01:23.484" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191105 16:01:23.484" starttime="20191105 16:01:23.484"></status>
</kw>
<msg timestamp="20191105 16:01:23.484" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191105 16:01:23.484" starttime="20191105 16:01:21.491"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191105 16:01:23.485" level="FAIL">OMs did not failover: om2 == om2</msg>
<status status="FAIL" endtime="20191105 16:01:23.485" starttime="20191105 16:01:23.485"></status>
</kw>
<status status="FAIL" endtime="20191105 16:01:23.485" starttime="20191105 16:01:17.832"></status>
</kw>
<status status="FAIL" endtime="20191105 16:01:23.485" starttime="20191105 16:01:17.832"></status>
</kw>
<status status="FAIL" endtime="20191105 16:01:23.486" critical="yes" starttime="20191105 16:01:17.831">OMs did not failover: om2 == om2</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191105 16:01:23.487" starttime="20191105 16:01:05.518"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
