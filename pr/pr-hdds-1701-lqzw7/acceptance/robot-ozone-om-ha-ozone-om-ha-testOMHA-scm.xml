<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191108 08:49:19.984" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:49:20.128" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:49:22.744" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:49:22.745" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191108 08:49:22.745" starttime="20191108 08:49:20.126"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:49:22.746" level="INFO"></msg>
<status status="PASS" endtime="20191108 08:49:22.746" starttime="20191108 08:49:22.745"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:49:22.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:49:22.747" starttime="20191108 08:49:22.746"></status>
</kw>
<status status="PASS" endtime="20191108 08:49:22.747" starttime="20191108 08:49:20.125"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:49:22.752" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:49:24.884" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:49:24.885" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191108 08:49:24.885" starttime="20191108 08:49:22.750"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:49:24.887" level="INFO"></msg>
<status status="PASS" endtime="20191108 08:49:24.887" starttime="20191108 08:49:24.886"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:49:24.888" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:49:24.888" starttime="20191108 08:49:24.887"></status>
</kw>
<status status="PASS" endtime="20191108 08:49:24.888" starttime="20191108 08:49:22.747"></status>
</kw>
<status status="PASS" endtime="20191108 08:49:24.889" starttime="20191108 08:49:20.125"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 08:49:24.891" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191108 08:49:24.891" starttime="20191108 08:49:24.890"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 08:49:24.892" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191108 08:49:24.892" starttime="20191108 08:49:24.891"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 08:49:24.893" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191108 08:49:24.893" starttime="20191108 08:49:24.892"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:49:24.895" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:49:24.896" starttime="20191108 08:49:24.893"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:49:24.900" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:49:29.543" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:49:29.543" level="INFO">${output} = 2019-11-08 08:49:27 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 08:49:27 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191108 08:49:29.543" starttime="20191108 08:49:24.897"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:49:29.545" level="INFO">2019-11-08 08:49:27 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 08:49:27 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 08:49:27 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:49:29.545" starttime="20191108 08:49:29.544"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:49:29.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:49:29.546" starttime="20191108 08:49:29.545"></status>
</kw>
<status status="PASS" endtime="20191108 08:49:29.546" starttime="20191108 08:49:24.896"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:49:29.549" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:49:31.625" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:49:31.625" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191108 08:49:31.625" starttime="20191108 08:49:29.547"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:49:31.626" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191108 08:49:31.626" starttime="20191108 08:49:31.626"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:49:31.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:49:31.627" starttime="20191108 08:49:31.627"></status>
</kw>
<msg timestamp="20191108 08:49:31.627" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191108 08:49:31.628" starttime="20191108 08:49:29.546"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:49:31.628" starttime="20191108 08:49:31.628"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:49:31.629" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:49:31.629" starttime="20191108 08:49:31.628"></status>
</kw>
<status status="PASS" endtime="20191108 08:49:31.629" starttime="20191108 08:49:24.889"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:49:31.632" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:49:33.614" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:49:33.614" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:49:33.614" starttime="20191108 08:49:31.630"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:49:33.615" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:49:33.615" starttime="20191108 08:49:33.615"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:49:33.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:49:33.616" starttime="20191108 08:49:33.616"></status>
</kw>
<msg timestamp="20191108 08:49:33.616" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:49:33.617" starttime="20191108 08:49:31.630"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 08:49:33.617" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:49:33.617" starttime="20191108 08:49:33.617"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 08:49:33.618" starttime="20191108 08:49:33.617"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 08:49:33.619" starttime="20191108 08:49:33.618"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 08:49:33.619" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 08:49:33.619" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:49:33.619" starttime="20191108 08:49:33.619"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 08:49:33.620" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 08:49:33.620" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 08:49:33.620" starttime="20191108 08:49:33.619"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 08:49:33.621" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 08:49:33.621" starttime="20191108 08:49:33.620"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 08:49:33.621" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 08:49:33.621" starttime="20191108 08:49:33.621"></status>
</kw>
<msg timestamp="20191108 08:49:33.622" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 08:49:33.622" starttime="20191108 08:49:31.629"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:49:33.623" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 08:49:33.623" starttime="20191108 08:49:33.622"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:49:33.624" starttime="20191108 08:49:33.623"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:49:33.625" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:49:34.864" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:49:34.865" starttime="20191108 08:49:33.624"></status>
</kw>
<status status="PASS" endtime="20191108 08:49:34.865" starttime="20191108 08:49:33.623"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 08:49:34.866" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 08:49:45.041" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:49:45.041" starttime="20191108 08:49:34.866"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 08:49:45.042" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:49:45.140" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:49:45.141" level="INFO">${shutdownMsg} = hadoop     455  0.0  0.0   9556  1168 ?        Ss   08:49   0:00 bash -c sudo ps aux | grep om
hadoop     457  0.0  0.0   9088   668 ?        S    08:49   0:00 grep om</msg>
<status status="PASS" endtime="20191108 08:49:45.141" starttime="20191108 08:49:45.042"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:49:45.206" starttime="20191108 08:49:45.141"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:49:45.207" starttime="20191108 08:49:45.206"></status>
</kw>
<msg timestamp="20191108 08:49:45.207" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 08:49:45.207" starttime="20191108 08:49:33.622"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:49:45.211" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:49:57.488" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:49:57.488" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:49:57.488" starttime="20191108 08:49:45.209"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:49:57.489" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:49:57.490" starttime="20191108 08:49:57.489"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:49:57.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:49:57.491" starttime="20191108 08:49:57.490"></status>
</kw>
<msg timestamp="20191108 08:49:57.491" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:49:57.491" starttime="20191108 08:49:45.208"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 08:49:57.492" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:49:57.492" starttime="20191108 08:49:57.492"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 08:49:57.493" starttime="20191108 08:49:57.493"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 08:49:57.494" starttime="20191108 08:49:57.493"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 08:49:57.495" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 08:49:57.495" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:49:57.495" starttime="20191108 08:49:57.494"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 08:49:57.496" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191108 08:49:57.496" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 08:49:57.496" starttime="20191108 08:49:57.495"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 08:49:57.497" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 08:49:57.497" starttime="20191108 08:49:57.497"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 08:49:57.498" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191108 08:49:57.498" starttime="20191108 08:49:57.498"></status>
</kw>
<msg timestamp="20191108 08:49:57.499" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191108 08:49:57.499" starttime="20191108 08:49:45.208"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191108 08:49:57.500" starttime="20191108 08:49:57.499"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 08:49:57.501" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191108 08:49:57.501" starttime="20191108 08:49:57.501"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 08:49:57.503" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191108 08:49:57.503" starttime="20191108 08:49:57.502"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 08:49:57.504" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191108 08:49:57.504" starttime="20191108 08:49:57.503"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:49:57.506" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:49:57.506" starttime="20191108 08:49:57.504"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:49:57.509" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:50:12.287" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:50:12.287" level="INFO">${output} = 2019-11-08 08:50:00 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191108 08:50:12.287" starttime="20191108 08:49:57.507"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:50:12.289" level="INFO">2019-11-08 08:50:00 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:50:01 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:50:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:50:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:50:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:50:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:50:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:50:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:50:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:50:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:50:09 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-08 08:50:10 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 08:50:10 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 08:50:10 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:50:12.290" starttime="20191108 08:50:12.288"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:50:12.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:50:12.292" starttime="20191108 08:50:12.290"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:12.292" starttime="20191108 08:49:57.506"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:50:12.296" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:50:24.551" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:50:24.552" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191108 08:50:24.552" starttime="20191108 08:50:12.294"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:50:24.554" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191108 08:50:24.554" starttime="20191108 08:50:24.553"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:50:24.555" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:50:24.555" starttime="20191108 08:50:24.554"></status>
</kw>
<msg timestamp="20191108 08:50:24.556" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191108 08:50:24.556" starttime="20191108 08:50:12.292"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:50:24.557" starttime="20191108 08:50:24.556"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:50:24.558" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:50:24.558" starttime="20191108 08:50:24.557"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:24.558" starttime="20191108 08:49:57.500"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:50:24.560" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 08:50:24.560" starttime="20191108 08:50:24.559"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:50:24.562" starttime="20191108 08:50:24.561"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:50:24.563" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:50:25.752" level="INFO">Read output: Last login: Fri Nov  8 08:49:33 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:50:25.753" starttime="20191108 08:50:24.562"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:25.753" starttime="20191108 08:50:24.561"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 08:50:25.754" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 08:50:27.913" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:50:27.913" starttime="20191108 08:50:25.754"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 08:50:27.914" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:50:28.012" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:50:28.012" level="INFO">${startupMsg} = hadoop     508  346  0.0 34477464 224800 ?     Sl   08:50   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 08:50:28.012" starttime="20191108 08:50:27.914"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:50:28.077" starttime="20191108 08:50:28.012"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:50:28.078" starttime="20191108 08:50:28.077"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:28.078" starttime="20191108 08:50:24.558"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:28.078" critical="yes" starttime="20191108 08:49:20.124"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191108 08:50:28.080" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191108 08:50:28.080" starttime="20191108 08:50:28.079"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191108 08:50:28.082" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191108 08:50:28.082" starttime="20191108 08:50:28.081"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:50:28.083" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 08:50:28.083" starttime="20191108 08:50:28.082"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:50:28.085" starttime="20191108 08:50:28.084"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:50:28.085" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:50:29.283" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:50:29.284" starttime="20191108 08:50:28.085"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:29.284" starttime="20191108 08:50:28.083"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 08:50:29.285" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 08:50:39.462" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:50:39.463" starttime="20191108 08:50:29.285"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 08:50:39.464" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:50:39.572" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:50:39.573" level="INFO">${shutdownMsg} = hadoop     438  0.0  0.0   9556  1168 ?        Ss   08:50   0:00 bash -c sudo ps aux | grep om
hadoop     440  0.0  0.0   9088   668 ?        S    08:50   0:00 grep om</msg>
<status status="PASS" endtime="20191108 08:50:39.573" starttime="20191108 08:50:39.463"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:50:39.606" starttime="20191108 08:50:39.573"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:50:39.607" starttime="20191108 08:50:39.606"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:39.607" starttime="20191108 08:50:28.082"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:50:39.609" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 08:50:39.609" starttime="20191108 08:50:39.608"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:50:39.611" starttime="20191108 08:50:39.610"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:50:39.612" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:50:40.810" level="INFO">Read output: Last login: Fri Nov  8 08:50:28 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:50:40.810" starttime="20191108 08:50:39.611"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:40.811" starttime="20191108 08:50:39.609"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 08:50:40.812" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 08:50:40.837" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:50:40.837" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:50:40.837" starttime="20191108 08:50:40.811"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 08:50:40.838" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:50:40.839" starttime="20191108 08:50:40.838"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 08:50:40.840" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191108 08:50:40.840" starttime="20191108 08:50:40.839"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 08:50:40.889" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191108 08:50:40.899" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191108 08:50:40.899" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191108 08:50:40.899" starttime="20191108 08:50:40.840"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191108 08:50:40.901" level="INFO">Length is 2</msg>
<msg timestamp="20191108 08:50:40.901" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191108 08:50:40.901" starttime="20191108 08:50:40.900"></status>
</kw>
<msg timestamp="20191108 08:50:40.902" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191108 08:50:40.902" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191108 08:50:40.902" starttime="20191108 08:50:39.607"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:50:40.906" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:50:42.855" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:50:42.855" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:50:42.855" starttime="20191108 08:50:40.904"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:50:42.856" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:50:42.856" starttime="20191108 08:50:42.855"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:50:42.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:50:42.857" starttime="20191108 08:50:42.856"></status>
</kw>
<msg timestamp="20191108 08:50:42.857" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:50:42.857" starttime="20191108 08:50:40.903"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 08:50:42.858" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:50:42.858" starttime="20191108 08:50:42.857"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 08:50:42.858" starttime="20191108 08:50:42.858"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 08:50:42.859" starttime="20191108 08:50:42.859"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 08:50:42.860" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 08:50:42.860" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:50:42.860" starttime="20191108 08:50:42.859"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 08:50:42.860" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191108 08:50:42.860" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 08:50:42.861" starttime="20191108 08:50:42.860"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 08:50:42.861" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 08:50:42.861" starttime="20191108 08:50:42.861"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 08:50:42.862" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191108 08:50:42.862" starttime="20191108 08:50:42.861"></status>
</kw>
<msg timestamp="20191108 08:50:42.862" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 08:50:42.862" starttime="20191108 08:50:40.902"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191108 08:50:42.864" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191108 08:50:42.864" starttime="20191108 08:50:42.863"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:50:42.866" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191108 08:50:42.866" starttime="20191108 08:50:42.865"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:50:42.866" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191108 08:50:42.866" starttime="20191108 08:50:42.866"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:50:42.870" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:50:47.018" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:50:47.018" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:50:47.018" starttime="20191108 08:50:42.868"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:50:47.019" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:50:47.019" starttime="20191108 08:50:47.018"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:50:47.020" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:50:47.020" starttime="20191108 08:50:47.020"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:47.021" starttime="20191108 08:50:42.867"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:50:47.025" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:50:49.290" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:50:49.290" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573203044940,
  "modificationTime": 1573203046623,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:50:49.290" starttime="20191108 08:50:47.023"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:50:49.292" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573203044940,
  "modificationTime": 1573203046623,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103101434753122300,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:50:49.292" starttime="20191108 08:50:49.291"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:50:49.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:50:49.293" starttime="20191108 08:50:49.292"></status>
</kw>
<msg timestamp="20191108 08:50:49.294" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573203044940,
  "modificationTime": 1573203046623,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:50:49.294" starttime="20191108 08:50:47.021"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:50:49.295" starttime="20191108 08:50:49.294"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:49.295" starttime="20191108 08:50:42.867"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:49.295" starttime="20191108 08:50:42.865"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:50:49.296" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191108 08:50:49.296" starttime="20191108 08:50:49.296"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:50:49.297" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191108 08:50:49.297" starttime="20191108 08:50:49.297"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:50:49.302" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:50:53.580" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:50:53.581" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:50:53.581" starttime="20191108 08:50:49.299"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:50:53.582" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:50:53.583" starttime="20191108 08:50:53.581"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:50:53.583" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:50:53.583" starttime="20191108 08:50:53.583"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:53.584" starttime="20191108 08:50:49.298"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:50:53.588" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:50:55.861" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:50:55.861" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573203051399,
  "modificationTime": 1573203053164,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:50:55.861" starttime="20191108 08:50:53.586"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:50:55.862" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573203051399,
  "modificationTime": 1573203053164,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103101435176353800,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:50:55.863" starttime="20191108 08:50:55.862"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:50:55.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:50:55.863" starttime="20191108 08:50:55.863"></status>
</kw>
<msg timestamp="20191108 08:50:55.864" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573203051399,
  "modificationTime": 1573203053164,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:50:55.864" starttime="20191108 08:50:53.584"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:50:55.864" starttime="20191108 08:50:55.864"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:55.864" starttime="20191108 08:50:49.297"></status>
</kw>
<status status="PASS" endtime="20191108 08:50:55.864" starttime="20191108 08:50:49.295"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:50:55.865" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191108 08:50:55.865" starttime="20191108 08:50:55.865"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:50:55.866" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191108 08:50:55.866" starttime="20191108 08:50:55.865"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:50:55.869" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:00.130" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:00.130" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:51:00.130" starttime="20191108 08:50:55.867"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:00.131" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:51:00.132" starttime="20191108 08:51:00.131"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:00.132" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:00.132" starttime="20191108 08:51:00.132"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:00.132" starttime="20191108 08:50:55.867"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:00.136" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:02.378" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:02.379" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573203057988,
  "modificationTime": 1573203059722,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:02.379" starttime="20191108 08:51:00.134"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:02.381" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573203057988,
  "modificationTime": 1573203059722,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103101435608236030,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:51:02.381" starttime="20191108 08:51:02.380"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:02.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:02.382" starttime="20191108 08:51:02.381"></status>
</kw>
<msg timestamp="20191108 08:51:02.383" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573203057988,
  "modificationTime": 1573203059722,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:02.383" starttime="20191108 08:51:00.133"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:51:02.384" starttime="20191108 08:51:02.383"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:02.384" starttime="20191108 08:50:55.866"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:02.384" starttime="20191108 08:50:55.865"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:51:02.386" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191108 08:51:02.386" starttime="20191108 08:51:02.385"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:51:02.387" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191108 08:51:02.387" starttime="20191108 08:51:02.386"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:02.392" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:06.769" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:06.770" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:51:06.770" starttime="20191108 08:51:02.389"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:06.771" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:51:06.772" starttime="20191108 08:51:06.771"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:06.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:06.773" starttime="20191108 08:51:06.772"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:06.773" starttime="20191108 08:51:02.388"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:06.778" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:09.006" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:09.006" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573203064446,
  "modificationTime": 1573203066374,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:09.006" starttime="20191108 08:51:06.776"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:09.007" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573203064446,
  "modificationTime": 1573203066374,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103101436031467520,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:51:09.007" starttime="20191108 08:51:09.007"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:09.008" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:09.008" starttime="20191108 08:51:09.008"></status>
</kw>
<msg timestamp="20191108 08:51:09.009" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573203064446,
  "modificationTime": 1573203066374,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:09.009" starttime="20191108 08:51:06.774"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:51:09.009" starttime="20191108 08:51:09.009"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:09.010" starttime="20191108 08:51:02.387"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:09.010" starttime="20191108 08:51:02.384"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:51:09.011" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191108 08:51:09.011" starttime="20191108 08:51:09.010"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:51:09.011" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191108 08:51:09.011" starttime="20191108 08:51:09.011"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:09.015" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:13.216" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:13.216" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:51:13.216" starttime="20191108 08:51:09.013"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:13.218" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:51:13.218" starttime="20191108 08:51:13.217"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:13.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:13.220" starttime="20191108 08:51:13.219"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:13.220" starttime="20191108 08:51:09.012"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:13.226" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:15.485" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:15.485" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573203071160,
  "modificationTime": 1573203072799,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:15.486" starttime="20191108 08:51:13.223"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:15.487" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573203071160,
  "modificationTime": 1573203072799,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 2,
      "localID": 103101436471476220,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:51:15.488" starttime="20191108 08:51:15.486"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:15.488" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:15.489" starttime="20191108 08:51:15.488"></status>
</kw>
<msg timestamp="20191108 08:51:15.489" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573203071160,
  "modificationTime": 1573203072799,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:15.489" starttime="20191108 08:51:13.220"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:51:15.490" starttime="20191108 08:51:15.490"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:15.490" starttime="20191108 08:51:09.012"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:15.490" starttime="20191108 08:51:09.010"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:15.491" starttime="20191108 08:50:42.865"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:15.491" starttime="20191108 08:50:42.864"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:51:15.493" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 08:51:15.493" starttime="20191108 08:51:15.492"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:51:15.495" starttime="20191108 08:51:15.494"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:51:15.496" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:51:16.684" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:51:16.685" starttime="20191108 08:51:15.495"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:16.685" starttime="20191108 08:51:15.493"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 08:51:16.686" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 08:51:16.701" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:51:16.701" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:51:16.702" starttime="20191108 08:51:16.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 08:51:16.702" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:51:16.703" starttime="20191108 08:51:16.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 08:51:16.704" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191108 08:51:16.704" starttime="20191108 08:51:16.703"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 08:51:16.783" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191108 08:51:16.794" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191108 08:51:16.795" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191108 08:51:16.795" starttime="20191108 08:51:16.704"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191108 08:51:16.796" level="INFO">Length is 2</msg>
<msg timestamp="20191108 08:51:16.796" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191108 08:51:16.796" starttime="20191108 08:51:16.795"></status>
</kw>
<msg timestamp="20191108 08:51:16.796" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191108 08:51:16.797" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191108 08:51:16.797" starttime="20191108 08:51:15.491"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:51:16.798" starttime="20191108 08:51:16.797"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:16.798" starttime="20191108 08:50:42.862"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191108 08:51:16.799" level="INFO">${keyPrefix} = testOMRestart_1</msg>
<status status="PASS" endtime="20191108 08:51:16.799" starttime="20191108 08:51:16.798"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:51:16.802" level="INFO">${tmpKey} = testOMRestart_1_0</msg>
<status status="PASS" endtime="20191108 08:51:16.802" starttime="20191108 08:51:16.801"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:51:16.803" level="INFO">testOMRestart_1_0</msg>
<status status="PASS" endtime="20191108 08:51:16.803" starttime="20191108 08:51:16.803"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:16.807" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:20.885" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:20.885" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:51:20.885" starttime="20191108 08:51:16.805"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:20.886" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:51:20.887" starttime="20191108 08:51:20.886"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:20.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:20.887" starttime="20191108 08:51:20.887"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:20.888" starttime="20191108 08:51:16.804"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:20.891" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:23.065" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:23.065" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573203078896,
  "modificationTime": 1573203080469,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:23.066" starttime="20191108 08:51:20.889"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:23.067" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573203078896,
  "modificationTime": 1573203080469,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103101436978462720,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:51:23.067" starttime="20191108 08:51:23.066"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:23.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:23.067" starttime="20191108 08:51:23.067"></status>
</kw>
<msg timestamp="20191108 08:51:23.068" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_0",
  "dataSize": 17540,
  "creationTime": 1573203078896,
  "modificationTime": 1573203080469,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:23.068" starttime="20191108 08:51:20.888"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:51:23.068" starttime="20191108 08:51:23.068"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:23.069" starttime="20191108 08:51:16.803"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:23.069" starttime="20191108 08:51:16.801"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:51:23.069" level="INFO">${tmpKey} = testOMRestart_1_1</msg>
<status status="PASS" endtime="20191108 08:51:23.069" starttime="20191108 08:51:23.069"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:51:23.070" level="INFO">testOMRestart_1_1</msg>
<status status="PASS" endtime="20191108 08:51:23.070" starttime="20191108 08:51:23.070"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:23.073" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:27.289" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:27.289" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:51:27.289" starttime="20191108 08:51:23.071"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:27.291" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:51:27.292" starttime="20191108 08:51:27.290"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:27.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:27.293" starttime="20191108 08:51:27.292"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:27.294" starttime="20191108 08:51:23.071"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:27.298" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:29.520" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:29.520" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573203085241,
  "modificationTime": 1573203086867,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:29.520" starttime="20191108 08:51:27.296"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:29.521" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573203085241,
  "modificationTime": 1573203086867,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103101437394288640,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:51:29.521" starttime="20191108 08:51:29.521"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:29.522" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:29.522" starttime="20191108 08:51:29.521"></status>
</kw>
<msg timestamp="20191108 08:51:29.522" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_1",
  "dataSize": 17540,
  "creationTime": 1573203085241,
  "modificationTime": 1573203086867,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:29.522" starttime="20191108 08:51:27.294"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:51:29.523" starttime="20191108 08:51:29.522"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:29.523" starttime="20191108 08:51:23.070"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:29.524" starttime="20191108 08:51:23.069"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:51:29.524" level="INFO">${tmpKey} = testOMRestart_1_2</msg>
<status status="PASS" endtime="20191108 08:51:29.524" starttime="20191108 08:51:29.524"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:51:29.525" level="INFO">testOMRestart_1_2</msg>
<status status="PASS" endtime="20191108 08:51:29.525" starttime="20191108 08:51:29.525"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:29.528" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:33.444" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:33.444" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:51:33.445" starttime="20191108 08:51:29.526"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:33.446" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:51:33.447" starttime="20191108 08:51:33.445"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:33.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:33.448" starttime="20191108 08:51:33.447"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:33.448" starttime="20191108 08:51:29.526"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:33.453" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:35.652" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:35.652" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573203091559,
  "modificationTime": 1573203093046,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:35.653" starttime="20191108 08:51:33.450"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:35.654" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573203091559,
  "modificationTime": 1573203093046,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 2,
      "localID": 103101437808345100,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:51:35.655" starttime="20191108 08:51:35.654"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:35.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:35.656" starttime="20191108 08:51:35.655"></status>
</kw>
<msg timestamp="20191108 08:51:35.656" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_2",
  "dataSize": 17540,
  "creationTime": 1573203091559,
  "modificationTime": 1573203093046,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:35.656" starttime="20191108 08:51:33.448"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:51:35.657" starttime="20191108 08:51:35.657"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:35.658" starttime="20191108 08:51:29.525"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:35.658" starttime="20191108 08:51:29.524"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:51:35.659" level="INFO">${tmpKey} = testOMRestart_1_3</msg>
<status status="PASS" endtime="20191108 08:51:35.659" starttime="20191108 08:51:35.658"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:51:35.660" level="INFO">testOMRestart_1_3</msg>
<status status="PASS" endtime="20191108 08:51:35.660" starttime="20191108 08:51:35.659"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:35.665" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:39.905" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:39.905" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:51:39.905" starttime="20191108 08:51:35.663"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:39.907" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:51:39.907" starttime="20191108 08:51:39.906"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:39.908" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:39.908" starttime="20191108 08:51:39.907"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:39.909" starttime="20191108 08:51:35.661"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:39.913" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:41.998" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:41.998" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573203097912,
  "modificationTime": 1573203099492,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:41.998" starttime="20191108 08:51:39.911"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:42.000" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573203097912,
  "modificationTime": 1573203099492,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103101438224695310,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:51:42.000" starttime="20191108 08:51:41.999"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:42.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:42.002" starttime="20191108 08:51:42.000"></status>
</kw>
<msg timestamp="20191108 08:51:42.002" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_3",
  "dataSize": 17540,
  "creationTime": 1573203097912,
  "modificationTime": 1573203099492,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:42.002" starttime="20191108 08:51:39.909"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:51:42.003" starttime="20191108 08:51:42.003"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:42.004" starttime="20191108 08:51:35.660"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:42.004" starttime="20191108 08:51:35.658"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:51:42.005" level="INFO">${tmpKey} = testOMRestart_1_4</msg>
<status status="PASS" endtime="20191108 08:51:42.005" starttime="20191108 08:51:42.004"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:51:42.006" level="INFO">testOMRestart_1_4</msg>
<status status="PASS" endtime="20191108 08:51:42.006" starttime="20191108 08:51:42.005"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:42.010" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_1_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:46.716" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:46.717" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:51:46.717" starttime="20191108 08:51:42.008"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:46.718" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:51:46.718" starttime="20191108 08:51:46.717"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:46.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:46.719" starttime="20191108 08:51:46.718"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:46.719" starttime="20191108 08:51:42.007"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:46.724" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_1_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_1_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:48.876" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:48.876" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573203104128,
  "modificationTime": 1573203106291,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:48.876" starttime="20191108 08:51:46.721"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:48.878" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573203104128,
  "modificationTime": 1573203106291,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103101438632067090,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:51:48.878" starttime="20191108 08:51:48.877"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:48.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:48.879" starttime="20191108 08:51:48.879"></status>
</kw>
<msg timestamp="20191108 08:51:48.880" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_1_4",
  "dataSize": 17540,
  "creationTime": 1573203104128,
  "modificationTime": 1573203106291,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:48.880" starttime="20191108 08:51:46.719"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:51:48.881" starttime="20191108 08:51:48.880"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:48.881" starttime="20191108 08:51:42.006"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:48.882" starttime="20191108 08:51:42.004"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:48.882" starttime="20191108 08:51:16.800"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:48.882" starttime="20191108 08:51:16.799"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:51:48.884" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 08:51:48.884" starttime="20191108 08:51:48.883"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:51:48.886" starttime="20191108 08:51:48.885"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:51:48.887" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:51:50.077" level="INFO">Read output: Last login: Fri Nov  8 08:51:15 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:51:50.078" starttime="20191108 08:51:48.887"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:50.078" starttime="20191108 08:51:48.885"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 08:51:50.079" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 08:51:50.094" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:51:50.094" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:51:50.095" starttime="20191108 08:51:50.078"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 08:51:50.095" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:51:50.096" starttime="20191108 08:51:50.095"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 08:51:50.096" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191108 08:51:50.096" starttime="20191108 08:51:50.096"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 08:51:50.176" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191108 08:51:50.187" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191108 08:51:50.188" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191108 08:51:50.188" starttime="20191108 08:51:50.097"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191108 08:51:50.189" level="INFO">Length is 2</msg>
<msg timestamp="20191108 08:51:50.189" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191108 08:51:50.189" starttime="20191108 08:51:50.188"></status>
</kw>
<msg timestamp="20191108 08:51:50.190" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191108 08:51:50.190" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191108 08:51:50.190" starttime="20191108 08:51:48.882"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:51:50.191" starttime="20191108 08:51:50.190"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:50.191" starttime="20191108 08:51:16.798"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191108 08:51:50.193" level="INFO">${keyPrefix} = testOMRestart_2</msg>
<status status="PASS" endtime="20191108 08:51:50.193" starttime="20191108 08:51:50.192"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:51:50.195" level="INFO">${tmpKey} = testOMRestart_2_0</msg>
<status status="PASS" endtime="20191108 08:51:50.195" starttime="20191108 08:51:50.195"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:51:50.196" level="INFO">testOMRestart_2_0</msg>
<status status="PASS" endtime="20191108 08:51:50.196" starttime="20191108 08:51:50.196"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:50.201" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:54.498" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:54.498" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:51:54.498" starttime="20191108 08:51:50.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:54.500" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:51:54.500" starttime="20191108 08:51:54.499"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:54.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:54.501" starttime="20191108 08:51:54.500"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:54.502" starttime="20191108 08:51:50.197"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:54.507" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:51:56.816" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:51:56.816" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573203112221,
  "modificationTime": 1573203114081,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:56.816" starttime="20191108 08:51:54.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:51:56.818" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573203112221,
  "modificationTime": 1573203114081,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 8,
      "localID": 103101439162449940,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:51:56.818" starttime="20191108 08:51:56.817"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:51:56.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:51:56.818" starttime="20191108 08:51:56.818"></status>
</kw>
<msg timestamp="20191108 08:51:56.819" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_0",
  "dataSize": 17540,
  "creationTime": 1573203112221,
  "modificationTime": 1573203114081,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:51:56.819" starttime="20191108 08:51:54.502"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:51:56.819" starttime="20191108 08:51:56.819"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:56.819" starttime="20191108 08:51:50.197"></status>
</kw>
<status status="PASS" endtime="20191108 08:51:56.819" starttime="20191108 08:51:50.194"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:51:56.820" level="INFO">${tmpKey} = testOMRestart_2_1</msg>
<status status="PASS" endtime="20191108 08:51:56.820" starttime="20191108 08:51:56.820"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:51:56.821" level="INFO">testOMRestart_2_1</msg>
<status status="PASS" endtime="20191108 08:51:56.821" starttime="20191108 08:51:56.820"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:51:56.824" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:01.057" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:01.057" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:52:01.057" starttime="20191108 08:51:56.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:01.058" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:52:01.059" starttime="20191108 08:52:01.058"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:01.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:01.059" starttime="20191108 08:52:01.059"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:01.060" starttime="20191108 08:51:56.822"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:01.063" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:03.286" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:03.286" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573203118788,
  "modificationTime": 1573203120644,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:03.286" starttime="20191108 08:52:01.061"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:03.287" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573203118788,
  "modificationTime": 1573203120644,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 9,
      "localID": 103101439592824850,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:52:03.287" starttime="20191108 08:52:03.287"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:03.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:03.288" starttime="20191108 08:52:03.288"></status>
</kw>
<msg timestamp="20191108 08:52:03.288" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_1",
  "dataSize": 17540,
  "creationTime": 1573203118788,
  "modificationTime": 1573203120644,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:03.289" starttime="20191108 08:52:01.060"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:03.289" starttime="20191108 08:52:03.289"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:03.289" starttime="20191108 08:51:56.821"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:03.289" starttime="20191108 08:51:56.820"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:52:03.290" level="INFO">${tmpKey} = testOMRestart_2_2</msg>
<status status="PASS" endtime="20191108 08:52:03.290" starttime="20191108 08:52:03.290"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:52:03.291" level="INFO">testOMRestart_2_2</msg>
<status status="PASS" endtime="20191108 08:52:03.291" starttime="20191108 08:52:03.290"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:03.294" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:07.660" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:07.660" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:52:07.660" starttime="20191108 08:52:03.292"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:07.661" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:52:07.662" starttime="20191108 08:52:07.661"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:07.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:07.663" starttime="20191108 08:52:07.662"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:07.663" starttime="20191108 08:52:03.291"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:07.667" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:09.873" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:09.873" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573203125468,
  "modificationTime": 1573203127247,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:09.874" starttime="20191108 08:52:07.665"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:09.875" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573203125468,
  "modificationTime": 1573203127247,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103101440030539790,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:52:09.875" starttime="20191108 08:52:09.874"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:09.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:09.875" starttime="20191108 08:52:09.875"></status>
</kw>
<msg timestamp="20191108 08:52:09.876" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_2",
  "dataSize": 17540,
  "creationTime": 1573203125468,
  "modificationTime": 1573203127247,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:09.876" starttime="20191108 08:52:07.663"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:09.876" starttime="20191108 08:52:09.876"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:09.876" starttime="20191108 08:52:03.291"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:09.877" starttime="20191108 08:52:03.289"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:52:09.877" level="INFO">${tmpKey} = testOMRestart_2_3</msg>
<status status="PASS" endtime="20191108 08:52:09.877" starttime="20191108 08:52:09.877"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:52:09.878" level="INFO">testOMRestart_2_3</msg>
<status status="PASS" endtime="20191108 08:52:09.878" starttime="20191108 08:52:09.878"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:09.882" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:14.179" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:14.180" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:52:14.180" starttime="20191108 08:52:09.880"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:14.182" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:52:14.182" starttime="20191108 08:52:14.181"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:14.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:14.183" starttime="20191108 08:52:14.182"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:14.183" starttime="20191108 08:52:09.879"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:14.188" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:16.502" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:16.502" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573203132083,
  "modificationTime": 1573203133771,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:16.503" starttime="20191108 08:52:14.186"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:16.504" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573203132083,
  "modificationTime": 1573203133771,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 2,
      "localID": 103101440464125970,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:52:16.504" starttime="20191108 08:52:16.503"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:16.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:16.504" starttime="20191108 08:52:16.504"></status>
</kw>
<msg timestamp="20191108 08:52:16.505" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_3",
  "dataSize": 17540,
  "creationTime": 1573203132083,
  "modificationTime": 1573203133771,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:16.505" starttime="20191108 08:52:14.184"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:16.505" starttime="20191108 08:52:16.505"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:16.506" starttime="20191108 08:52:09.878"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:16.506" starttime="20191108 08:52:09.877"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:52:16.507" level="INFO">${tmpKey} = testOMRestart_2_4</msg>
<status status="PASS" endtime="20191108 08:52:16.507" starttime="20191108 08:52:16.506"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:52:16.513" level="INFO">testOMRestart_2_4</msg>
<status status="PASS" endtime="20191108 08:52:16.513" starttime="20191108 08:52:16.507"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:16.520" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_2_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:20.727" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:20.727" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:52:20.727" starttime="20191108 08:52:16.518"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:20.728" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:52:20.729" starttime="20191108 08:52:20.728"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:20.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:20.730" starttime="20191108 08:52:20.729"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:20.730" starttime="20191108 08:52:16.516"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:20.734" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_2_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_2_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:22.901" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:22.901" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573203138559,
  "modificationTime": 1573203140319,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:22.901" starttime="20191108 08:52:20.732"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:22.902" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573203138559,
  "modificationTime": 1573203140319,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 10,
      "localID": 103101440888471570,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:52:22.902" starttime="20191108 08:52:22.901"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:22.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:22.903" starttime="20191108 08:52:22.902"></status>
</kw>
<msg timestamp="20191108 08:52:22.903" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_2_4",
  "dataSize": 17540,
  "creationTime": 1573203138559,
  "modificationTime": 1573203140319,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:22.903" starttime="20191108 08:52:20.730"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:22.904" starttime="20191108 08:52:22.903"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:22.904" starttime="20191108 08:52:16.514"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:22.904" starttime="20191108 08:52:16.506"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:22.904" starttime="20191108 08:51:50.194"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:22.904" starttime="20191108 08:51:50.193"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:52:22.906" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 08:52:22.906" starttime="20191108 08:52:22.905"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:22.908" starttime="20191108 08:52:22.907"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:52:22.909" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:52:24.114" level="INFO">Read output: Last login: Fri Nov  8 08:51:49 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:52:24.115" starttime="20191108 08:52:22.908"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:24.115" starttime="20191108 08:52:22.906"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 08:52:24.117" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 08:52:24.132" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:52:24.133" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:52:24.133" starttime="20191108 08:52:24.116"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 08:52:24.134" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:52:24.134" starttime="20191108 08:52:24.133"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 08:52:24.135" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191108 08:52:24.135" starttime="20191108 08:52:24.134"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 08:52:24.217" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191108 08:52:24.227" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191108 08:52:24.228" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191108 08:52:24.228" starttime="20191108 08:52:24.136"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191108 08:52:24.229" level="INFO">Length is 2</msg>
<msg timestamp="20191108 08:52:24.229" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191108 08:52:24.229" starttime="20191108 08:52:24.228"></status>
</kw>
<msg timestamp="20191108 08:52:24.230" level="INFO">${numLogsLeader} = 2</msg>
<msg timestamp="20191108 08:52:24.230" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191108 08:52:24.230" starttime="20191108 08:52:22.905"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:24.232" starttime="20191108 08:52:24.231"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:24.232" starttime="20191108 08:51:50.191"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191108 08:52:24.233" level="INFO">${keyPrefix} = testOMRestart_3</msg>
<status status="PASS" endtime="20191108 08:52:24.233" starttime="20191108 08:52:24.232"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:52:24.236" level="INFO">${tmpKey} = testOMRestart_3_0</msg>
<status status="PASS" endtime="20191108 08:52:24.236" starttime="20191108 08:52:24.235"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:52:24.237" level="INFO">testOMRestart_3_0</msg>
<status status="PASS" endtime="20191108 08:52:24.237" starttime="20191108 08:52:24.237"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:24.242" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_3_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:28.280" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:28.280" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:52:28.280" starttime="20191108 08:52:24.240"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:28.282" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:52:28.282" starttime="20191108 08:52:28.281"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:28.283" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:28.283" starttime="20191108 08:52:28.282"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:28.283" starttime="20191108 08:52:24.238"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:28.286" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_3_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_3_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:30.516" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:30.516" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_0",
  "dataSize": 17540,
  "creationTime": 1573203146205,
  "modificationTime": 1573203147873,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:30.516" starttime="20191108 08:52:28.285"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:30.517" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_0",
  "dataSize": 17540,
  "creationTime": 1573203146205,
  "modificationTime": 1573203147873,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103101441389625360,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:52:30.517" starttime="20191108 08:52:30.517"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:30.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:30.518" starttime="20191108 08:52:30.518"></status>
</kw>
<msg timestamp="20191108 08:52:30.518" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_0",
  "dataSize": 17540,
  "creationTime": 1573203146205,
  "modificationTime": 1573203147873,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:30.518" starttime="20191108 08:52:28.283"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:30.519" starttime="20191108 08:52:30.519"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:30.519" starttime="20191108 08:52:24.237"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:30.519" starttime="20191108 08:52:24.235"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:52:30.520" level="INFO">${tmpKey} = testOMRestart_3_1</msg>
<status status="PASS" endtime="20191108 08:52:30.520" starttime="20191108 08:52:30.520"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:52:30.521" level="INFO">testOMRestart_3_1</msg>
<status status="PASS" endtime="20191108 08:52:30.521" starttime="20191108 08:52:30.520"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:30.524" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_3_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:34.656" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:34.657" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:52:34.657" starttime="20191108 08:52:30.522"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:34.659" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:52:34.659" starttime="20191108 08:52:34.658"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:34.660" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:34.660" starttime="20191108 08:52:34.659"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:34.661" starttime="20191108 08:52:30.521"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:34.665" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_3_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_3_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:36.880" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:36.881" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_1",
  "dataSize": 17540,
  "creationTime": 1573203152669,
  "modificationTime": 1573203154241,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:36.881" starttime="20191108 08:52:34.663"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:36.882" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_1",
  "dataSize": 17540,
  "creationTime": 1573203152669,
  "modificationTime": 1573203154241,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103101441813184530,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:52:36.883" starttime="20191108 08:52:36.881"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:36.883" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:36.884" starttime="20191108 08:52:36.883"></status>
</kw>
<msg timestamp="20191108 08:52:36.884" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_1",
  "dataSize": 17540,
  "creationTime": 1573203152669,
  "modificationTime": 1573203154241,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:36.884" starttime="20191108 08:52:34.661"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:36.885" starttime="20191108 08:52:36.885"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:36.886" starttime="20191108 08:52:30.521"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:36.886" starttime="20191108 08:52:30.519"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:52:36.887" level="INFO">${tmpKey} = testOMRestart_3_2</msg>
<status status="PASS" endtime="20191108 08:52:36.887" starttime="20191108 08:52:36.886"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:52:36.888" level="INFO">testOMRestart_3_2</msg>
<status status="PASS" endtime="20191108 08:52:36.888" starttime="20191108 08:52:36.887"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:36.894" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_3_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:40.985" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:40.985" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:52:40.986" starttime="20191108 08:52:36.891"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:40.987" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:52:40.987" starttime="20191108 08:52:40.986"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:40.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:40.989" starttime="20191108 08:52:40.988"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:40.989" starttime="20191108 08:52:36.889"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:40.993" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_3_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_3_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:43.294" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:43.294" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_2",
  "dataSize": 17540,
  "creationTime": 1573203159036,
  "modificationTime": 1573203160579,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:43.294" starttime="20191108 08:52:40.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:43.296" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_2",
  "dataSize": 17540,
  "creationTime": 1573203159036,
  "modificationTime": 1573203160579,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103101442230517780,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:52:43.296" starttime="20191108 08:52:43.295"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:43.296" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:43.297" starttime="20191108 08:52:43.296"></status>
</kw>
<msg timestamp="20191108 08:52:43.297" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_2",
  "dataSize": 17540,
  "creationTime": 1573203159036,
  "modificationTime": 1573203160579,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:43.297" starttime="20191108 08:52:40.990"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:43.298" starttime="20191108 08:52:43.297"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:43.298" starttime="20191108 08:52:36.888"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:43.298" starttime="20191108 08:52:36.886"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:52:43.299" level="INFO">${tmpKey} = testOMRestart_3_3</msg>
<status status="PASS" endtime="20191108 08:52:43.299" starttime="20191108 08:52:43.299"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:52:43.300" level="INFO">testOMRestart_3_3</msg>
<status status="PASS" endtime="20191108 08:52:43.300" starttime="20191108 08:52:43.299"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:43.304" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_3_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:47.424" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:47.424" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:52:47.424" starttime="20191108 08:52:43.302"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:47.426" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:52:47.426" starttime="20191108 08:52:47.425"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:47.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:47.427" starttime="20191108 08:52:47.426"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:47.428" starttime="20191108 08:52:43.301"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:47.433" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_3_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_3_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:49.683" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:49.683" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_3",
  "dataSize": 17540,
  "creationTime": 1573203165384,
  "modificationTime": 1573203167017,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:49.683" starttime="20191108 08:52:47.430"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:49.685" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_3",
  "dataSize": 17540,
  "creationTime": 1573203165384,
  "modificationTime": 1573203167017,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 9,
      "localID": 103101442646540300,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:52:49.685" starttime="20191108 08:52:49.684"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:49.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:49.686" starttime="20191108 08:52:49.685"></status>
</kw>
<msg timestamp="20191108 08:52:49.687" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_3",
  "dataSize": 17540,
  "creationTime": 1573203165384,
  "modificationTime": 1573203167017,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:49.687" starttime="20191108 08:52:47.428"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:49.688" starttime="20191108 08:52:49.687"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:49.688" starttime="20191108 08:52:43.300"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:49.688" starttime="20191108 08:52:43.298"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191108 08:52:49.689" level="INFO">${tmpKey} = testOMRestart_3_4</msg>
<status status="PASS" endtime="20191108 08:52:49.689" starttime="20191108 08:52:49.688"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191108 08:52:49.690" level="INFO">testOMRestart_3_4</msg>
<status status="PASS" endtime="20191108 08:52:49.690" starttime="20191108 08:52:49.690"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:49.695" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_3_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:53.807" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:53.807" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191108 08:52:53.807" starttime="20191108 08:52:49.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:53.809" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:52:53.809" starttime="20191108 08:52:53.808"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:53.811" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:53.812" starttime="20191108 08:52:53.809"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:53.812" starttime="20191108 08:52:49.691"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:52:53.818" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_3_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_3_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:52:56.220" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:52:56.221" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_4",
  "dataSize": 17540,
  "creationTime": 1573203171803,
  "modificationTime": 1573203173392,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:56.221" starttime="20191108 08:52:53.815"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:52:56.222" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_4",
  "dataSize": 17540,
  "creationTime": 1573203171803,
  "modificationTime": 1573203173392,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103101443067215890,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191108 08:52:56.222" starttime="20191108 08:52:56.221"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:52:56.223" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:52:56.224" starttime="20191108 08:52:56.223"></status>
</kw>
<msg timestamp="20191108 08:52:56.224" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_3_4",
  "dataSize": 17540,
  "creationTime": 1573203171803,
  "modificationTime": 1573203173392,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191108 08:52:56.224" starttime="20191108 08:52:53.813"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:56.225" starttime="20191108 08:52:56.224"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:56.225" starttime="20191108 08:52:49.690"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:56.225" starttime="20191108 08:52:49.688"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:56.225" starttime="20191108 08:52:24.235"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:56.226" starttime="20191108 08:52:24.234"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:52:56.227" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 08:52:56.228" starttime="20191108 08:52:56.227"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:56.229" starttime="20191108 08:52:56.228"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:52:56.230" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:52:57.436" level="INFO">Read output: Last login: Fri Nov  8 08:52:23 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:52:57.436" starttime="20191108 08:52:56.230"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:57.436" starttime="20191108 08:52:56.228"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 08:52:57.438" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 08:52:57.452" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:52:57.453" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:52:57.453" starttime="20191108 08:52:57.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 08:52:57.454" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:52:57.454" starttime="20191108 08:52:57.453"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 08:52:57.455" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191108 08:52:57.455" starttime="20191108 08:52:57.454"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 08:52:57.534" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191108 08:52:57.544" level="INFO">3 files:
log_0-10
log_11-78
log_inprogress_79</msg>
<msg timestamp="20191108 08:52:57.544" level="INFO">@{logs} = [ log_0-10 | log_11-78 | log_inprogress_79 ]</msg>
<status status="PASS" endtime="20191108 08:52:57.544" starttime="20191108 08:52:57.456"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191108 08:52:57.546" level="INFO">Length is 3</msg>
<msg timestamp="20191108 08:52:57.546" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191108 08:52:57.546" starttime="20191108 08:52:57.545"></status>
</kw>
<msg timestamp="20191108 08:52:57.547" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191108 08:52:57.547" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-78', u'log_inprogress_79'] ]</msg>
<status status="PASS" endtime="20191108 08:52:57.547" starttime="20191108 08:52:56.226"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191108 08:52:57.548" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191108 08:52:57.549" starttime="20191108 08:52:57.547"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:57.549" starttime="20191108 08:52:24.232"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:57.549" starttime="20191108 08:50:42.862"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:57.550" starttime="20191108 08:52:57.549"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:52:57.552" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 08:52:57.553" starttime="20191108 08:52:57.551"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:52:57.554" starttime="20191108 08:52:57.553"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:52:57.555" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:52:58.742" level="INFO">Read output: Last login: Fri Nov  8 08:50:39 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:52:58.742" starttime="20191108 08:52:57.554"></status>
</kw>
<status status="PASS" endtime="20191108 08:52:58.742" starttime="20191108 08:52:57.553"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 08:52:58.744" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 08:53:00.936" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:53:00.936" starttime="20191108 08:52:58.743"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 08:53:00.937" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:53:01.035" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:53:01.035" level="INFO">${startupMsg} = hadoop     513  338  0.0 34477400 224372 ?     Sl   08:52   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 08:53:01.036" starttime="20191108 08:53:00.936"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:53:01.101" starttime="20191108 08:53:01.036"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:01.102" starttime="20191108 08:53:01.101"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:01.102" starttime="20191108 08:52:57.550"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:53:01.105" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 08:53:01.105" starttime="20191108 08:53:01.104"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:01.107" starttime="20191108 08:53:01.106"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:53:01.107" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:53:02.307" level="INFO">Read output: Last login: Fri Nov  8 08:52:57 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:53:02.307" starttime="20191108 08:53:01.107"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:02.307" starttime="20191108 08:53:01.105"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 08:53:02.308" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 08:53:02.323" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:53:02.323" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:53:02.323" starttime="20191108 08:53:02.308"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 08:53:02.324" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:53:02.324" starttime="20191108 08:53:02.324"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 08:53:02.325" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191108 08:53:02.325" starttime="20191108 08:53:02.324"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 08:53:02.402" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191108 08:53:02.411" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191108 08:53:02.412" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191108 08:53:02.412" starttime="20191108 08:53:02.325"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191108 08:53:02.413" level="INFO">Length is 2</msg>
<msg timestamp="20191108 08:53:02.413" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191108 08:53:02.413" starttime="20191108 08:53:02.412"></status>
</kw>
<msg timestamp="20191108 08:53:02.414" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191108 08:53:02.414" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191108 08:53:02.414" starttime="20191108 08:53:01.103"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:02.416" starttime="20191108 08:53:02.415"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191108 08:53:03.417" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191108 08:53:03.417" starttime="20191108 08:53:02.416"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:03.417" starttime="20191108 08:53:01.103"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:53:03.419" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 08:53:03.419" starttime="20191108 08:53:03.418"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:03.420" starttime="20191108 08:53:03.420"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:53:03.421" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:53:04.608" level="INFO">Read output: Last login: Fri Nov  8 08:53:01 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:53:04.608" starttime="20191108 08:53:03.420"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:04.609" starttime="20191108 08:53:03.419"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191108 08:53:04.609" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191108 08:53:04.624" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:53:04.625" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:53:04.625" starttime="20191108 08:53:04.609"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191108 08:53:04.626" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191108 08:53:04.626" starttime="20191108 08:53:04.625"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191108 08:53:04.627" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191108 08:53:04.627" starttime="20191108 08:53:04.626"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191108 08:53:04.708" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191108 08:53:04.718" level="INFO">3 files:
log_0-10
log_11-78
log_inprogress_79</msg>
<msg timestamp="20191108 08:53:04.719" level="INFO">@{logs} = [ log_0-10 | log_11-78 | log_inprogress_79 ]</msg>
<status status="PASS" endtime="20191108 08:53:04.719" starttime="20191108 08:53:04.627"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191108 08:53:04.720" level="INFO">Length is 3</msg>
<msg timestamp="20191108 08:53:04.721" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191108 08:53:04.721" starttime="20191108 08:53:04.719"></status>
</kw>
<msg timestamp="20191108 08:53:04.722" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191108 08:53:04.722" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-78', u'log_inprogress_79'] ]</msg>
<status status="PASS" endtime="20191108 08:53:04.722" starttime="20191108 08:53:03.417"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191108 08:53:04.723" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191108 08:53:04.724" starttime="20191108 08:53:04.722"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:04.724" starttime="20191108 08:53:03.417"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:04.724" starttime="20191108 08:53:01.103"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:04.725" starttime="20191108 08:53:04.724"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:04.726" starttime="20191108 08:53:04.726"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:04.727" critical="yes" starttime="20191108 08:50:28.078"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:53:04.733" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:53:06.588" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:53:06.589" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:06.589" starttime="20191108 08:53:04.730"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:53:06.590" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:06.590" starttime="20191108 08:53:06.589"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:53:06.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:53:06.591" starttime="20191108 08:53:06.590"></status>
</kw>
<msg timestamp="20191108 08:53:06.591" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:06.591" starttime="20191108 08:53:04.729"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 08:53:06.592" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:06.592" starttime="20191108 08:53:06.591"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:06.592" starttime="20191108 08:53:06.592"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:06.593" starttime="20191108 08:53:06.592"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 08:53:06.593" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 08:53:06.594" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:06.594" starttime="20191108 08:53:06.593"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 08:53:06.594" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191108 08:53:06.594" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 08:53:06.595" starttime="20191108 08:53:06.594"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 08:53:06.595" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 08:53:06.595" starttime="20191108 08:53:06.595"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 08:53:06.596" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191108 08:53:06.596" starttime="20191108 08:53:06.595"></status>
</kw>
<msg timestamp="20191108 08:53:06.596" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 08:53:06.596" starttime="20191108 08:53:04.729"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:53:06.597" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 08:53:06.597" starttime="20191108 08:53:06.597"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:06.599" starttime="20191108 08:53:06.598"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:53:06.599" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:53:07.802" level="INFO">Read output: Last login: Fri Nov  8 08:52:56 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:53:07.803" starttime="20191108 08:53:06.599"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:07.803" starttime="20191108 08:53:06.598"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 08:53:07.804" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 08:53:17.985" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:53:17.985" starttime="20191108 08:53:07.804"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 08:53:17.986" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:53:18.062" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:53:18.062" level="INFO">${shutdownMsg} = hadoop     619  0.0  0.0   9556  1168 ?        Ss   08:53   0:00 bash -c sudo ps aux | grep om
hadoop     621  0.0  0.0   9088   668 ?        S    08:53   0:00 grep om</msg>
<status status="PASS" endtime="20191108 08:53:18.062" starttime="20191108 08:53:17.986"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:53:18.127" starttime="20191108 08:53:18.063"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:18.129" starttime="20191108 08:53:18.128"></status>
</kw>
<msg timestamp="20191108 08:53:18.129" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 08:53:18.129" starttime="20191108 08:53:06.596"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:53:18.133" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:53:20.139" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:53:20.139" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:20.139" starttime="20191108 08:53:18.131"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:53:20.140" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:20.140" starttime="20191108 08:53:20.139"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:53:20.141" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:53:20.141" starttime="20191108 08:53:20.140"></status>
</kw>
<msg timestamp="20191108 08:53:20.141" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:20.141" starttime="20191108 08:53:18.130"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 08:53:20.142" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:20.142" starttime="20191108 08:53:20.141"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:20.142" starttime="20191108 08:53:20.142"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:20.143" starttime="20191108 08:53:20.143"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 08:53:20.144" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 08:53:20.144" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:20.144" starttime="20191108 08:53:20.143"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 08:53:20.145" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 08:53:20.145" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 08:53:20.145" starttime="20191108 08:53:20.144"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 08:53:20.145" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 08:53:20.146" starttime="20191108 08:53:20.145"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 08:53:20.146" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 08:53:20.146" starttime="20191108 08:53:20.146"></status>
</kw>
<msg timestamp="20191108 08:53:20.147" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191108 08:53:20.147" starttime="20191108 08:53:18.129"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:20.148" starttime="20191108 08:53:20.147"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 08:53:20.150" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191108 08:53:20.150" starttime="20191108 08:53:20.149"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 08:53:20.152" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191108 08:53:20.152" starttime="20191108 08:53:20.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 08:53:20.153" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191108 08:53:20.153" starttime="20191108 08:53:20.152"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:53:20.156" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:53:20.156" starttime="20191108 08:53:20.153"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:53:20.160" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:53:24.380" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:53:24.380" level="INFO">${output} = 2019-11-08 08:53:22 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 08:53:22 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191108 08:53:24.380" starttime="20191108 08:53:20.157"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:53:24.382" level="INFO">2019-11-08 08:53:22 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 08:53:22 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 08:53:22 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:53:24.382" starttime="20191108 08:53:24.381"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:53:24.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:53:24.383" starttime="20191108 08:53:24.383"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:24.384" starttime="20191108 08:53:20.156"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:53:24.388" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:53:26.431" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:53:26.431" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
test...</msg>
<status status="PASS" endtime="20191108 08:53:26.431" starttime="20191108 08:53:24.385"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:53:26.432" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4
testOMRestart_3_0
testOMRestart_3_1
testOMRestart_3_2
testOMRestart_3_3
testOMRestart_3_4</msg>
<status status="PASS" endtime="20191108 08:53:26.432" starttime="20191108 08:53:26.431"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:53:26.433" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:53:26.433" starttime="20191108 08:53:26.433"></status>
</kw>
<msg timestamp="20191108 08:53:26.434" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
test...</msg>
<status status="PASS" endtime="20191108 08:53:26.434" starttime="20191108 08:53:24.384"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:26.435" starttime="20191108 08:53:26.434"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:53:26.436" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:53:26.436" starttime="20191108 08:53:26.435"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:26.437" starttime="20191108 08:53:20.148"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:53:26.438" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 08:53:26.438" starttime="20191108 08:53:26.437"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:26.440" starttime="20191108 08:53:26.439"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:53:26.440" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:53:27.630" level="INFO">Read output: Last login: Fri Nov  8 08:53:06 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:53:27.631" starttime="20191108 08:53:26.440"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:27.631" starttime="20191108 08:53:26.438"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 08:53:27.632" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 08:53:29.789" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:53:29.789" starttime="20191108 08:53:27.631"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 08:53:29.790" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:53:29.854" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:53:29.855" level="INFO">${startupMsg} = hadoop     672  385  0.0 34485452 263368 ?     Sl   08:53   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 08:53:29.855" starttime="20191108 08:53:29.789"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:53:29.919" starttime="20191108 08:53:29.855"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:29.920" starttime="20191108 08:53:29.920"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:29.920" starttime="20191108 08:53:26.437"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:29.920" starttime="20191108 08:53:04.729"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:53:29.923" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:53:31.701" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:53:31.701" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:31.702" starttime="20191108 08:53:29.921"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:53:31.703" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:31.703" starttime="20191108 08:53:31.702"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:53:31.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:53:31.704" starttime="20191108 08:53:31.703"></status>
</kw>
<msg timestamp="20191108 08:53:31.704" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:31.704" starttime="20191108 08:53:29.921"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 08:53:31.704" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:31.705" starttime="20191108 08:53:31.704"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:31.705" starttime="20191108 08:53:31.705"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:31.706" starttime="20191108 08:53:31.705"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 08:53:31.706" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 08:53:31.706" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:31.706" starttime="20191108 08:53:31.706"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 08:53:31.707" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 08:53:31.707" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 08:53:31.707" starttime="20191108 08:53:31.707"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 08:53:31.708" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 08:53:31.708" starttime="20191108 08:53:31.707"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 08:53:31.708" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 08:53:31.708" starttime="20191108 08:53:31.708"></status>
</kw>
<msg timestamp="20191108 08:53:31.709" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 08:53:31.709" starttime="20191108 08:53:29.921"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:53:31.710" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 08:53:31.710" starttime="20191108 08:53:31.709"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:31.712" starttime="20191108 08:53:31.712"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:53:31.713" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:53:32.911" level="INFO">Read output: Last login: Fri Nov  8 08:50:24 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:53:32.912" starttime="20191108 08:53:31.713"></status>
</kw>
<status status="PASS" endtime="20191108 08:53:32.912" starttime="20191108 08:53:31.710"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 08:53:32.913" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 08:53:34.050" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:53:34.051" starttime="20191108 08:53:32.912"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 08:53:34.052" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:53:34.147" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:53:34.147" level="INFO">${shutdownMsg} = hadoop    1040  0.0  0.0   9556  1168 ?        Ss   08:53   0:00 bash -c sudo ps aux | grep om
hadoop    1042  0.0  0.0   9088   668 ?        S    08:53   0:00 grep om</msg>
<status status="PASS" endtime="20191108 08:53:34.147" starttime="20191108 08:53:34.051"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:53:34.180" starttime="20191108 08:53:34.148"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:34.182" starttime="20191108 08:53:34.181"></status>
</kw>
<msg timestamp="20191108 08:53:34.182" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 08:53:34.182" starttime="20191108 08:53:31.709"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:53:34.187" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:53:46.348" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:53:46.348" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:46.348" starttime="20191108 08:53:34.184"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:53:46.350" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:46.350" starttime="20191108 08:53:46.349"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:53:46.351" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:53:46.351" starttime="20191108 08:53:46.350"></status>
</kw>
<msg timestamp="20191108 08:53:46.352" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:46.352" starttime="20191108 08:53:34.183"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 08:53:46.353" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:46.353" starttime="20191108 08:53:46.352"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:46.354" starttime="20191108 08:53:46.353"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:46.355" starttime="20191108 08:53:46.354"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 08:53:46.356" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 08:53:46.356" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:53:46.356" starttime="20191108 08:53:46.355"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 08:53:46.357" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191108 08:53:46.357" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 08:53:46.357" starttime="20191108 08:53:46.356"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 08:53:46.358" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 08:53:46.358" starttime="20191108 08:53:46.357"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 08:53:46.359" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191108 08:53:46.359" starttime="20191108 08:53:46.358"></status>
</kw>
<msg timestamp="20191108 08:53:46.359" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191108 08:53:46.360" starttime="20191108 08:53:34.182"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191108 08:53:46.361" starttime="20191108 08:53:46.360"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 08:53:46.362" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191108 08:53:46.362" starttime="20191108 08:53:46.362"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 08:53:46.363" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191108 08:53:46.363" starttime="20191108 08:53:46.363"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 08:53:46.364" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191108 08:53:46.364" starttime="20191108 08:53:46.364"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:53:46.367" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:53:46.367" starttime="20191108 08:53:46.365"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:53:46.370" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:54:00.516" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:54:00.516" level="INFO">${output} = 2019-11-08 08:53:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191108 08:54:00.516" starttime="20191108 08:53:46.368"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:54:00.518" level="INFO">2019-11-08 08:53:49 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:53:50 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:53:51 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:53:52 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:53:53 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:53:54 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:53:55 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:53:56 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:53:57 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:53:58 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:53:58 INFO  RetryInvocationHandler:411 - com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.NotLeaderException): OM:om2 is not the leader. Suggested leader is OM:om3.
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createNotLeaderException(OzoneManagerProtocolServerSideTranslatorPB.java:188)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:176)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:110)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:72)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:100)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:524)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1025)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:876)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:822)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1730)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2682)
, while invoking $Proxy13.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
2019-11-08 08:53:59 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 08:53:59 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 08:53:59 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:54:00.518" starttime="20191108 08:54:00.517"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:54:00.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:54:00.519" starttime="20191108 08:54:00.519"></status>
</kw>
<status status="PASS" endtime="20191108 08:54:00.520" starttime="20191108 08:53:46.367"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:54:00.524" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:54:12.728" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:54:12.728" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
...</msg>
<status status="PASS" endtime="20191108 08:54:12.728" starttime="20191108 08:54:00.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:54:12.730" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4
testOMRestart_3_0
testOMRestart_3_1
testOMRestart_3_2
testOMRestart_3_3
testOMRestart_3_4</msg>
<status status="PASS" endtime="20191108 08:54:12.730" starttime="20191108 08:54:12.729"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:54:12.731" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:54:12.731" starttime="20191108 08:54:12.730"></status>
</kw>
<msg timestamp="20191108 08:54:12.732" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
...</msg>
<status status="PASS" endtime="20191108 08:54:12.732" starttime="20191108 08:54:00.520"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:12.733" starttime="20191108 08:54:12.732"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:54:12.734" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:54:12.734" starttime="20191108 08:54:12.733"></status>
</kw>
<status status="PASS" endtime="20191108 08:54:12.734" starttime="20191108 08:53:46.361"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:54:12.736" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 08:54:12.736" starttime="20191108 08:54:12.735"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:12.739" starttime="20191108 08:54:12.737"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:54:12.740" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:54:13.946" level="INFO">Read output: Last login: Fri Nov  8 08:53:31 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:54:13.947" starttime="20191108 08:54:12.739"></status>
</kw>
<status status="PASS" endtime="20191108 08:54:13.947" starttime="20191108 08:54:12.736"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 08:54:13.948" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 08:54:16.097" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:54:16.098" starttime="20191108 08:54:13.948"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 08:54:16.099" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:54:16.196" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:54:16.197" level="INFO">${startupMsg} = hadoop    1091  357  0.0 34477652 224224 ?     Sl   08:54   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 08:54:16.197" starttime="20191108 08:54:16.098"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:54:16.262" starttime="20191108 08:54:16.197"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:16.263" starttime="20191108 08:54:16.262"></status>
</kw>
<status status="PASS" endtime="20191108 08:54:16.263" starttime="20191108 08:54:12.734"></status>
</kw>
<status status="PASS" endtime="20191108 08:54:16.263" starttime="20191108 08:53:29.920"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:54:16.267" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:54:18.564" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:54:18.564" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:18.564" starttime="20191108 08:54:16.265"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:54:18.566" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:18.566" starttime="20191108 08:54:18.565"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:54:18.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:54:18.566" starttime="20191108 08:54:18.566"></status>
</kw>
<msg timestamp="20191108 08:54:18.567" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:18.567" starttime="20191108 08:54:16.264"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 08:54:18.567" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:18.568" starttime="20191108 08:54:18.567"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:18.568" starttime="20191108 08:54:18.568"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:18.569" starttime="20191108 08:54:18.568"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 08:54:18.570" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 08:54:18.570" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:18.571" starttime="20191108 08:54:18.569"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 08:54:18.571" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191108 08:54:18.572" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 08:54:18.572" starttime="20191108 08:54:18.571"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 08:54:18.572" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 08:54:18.572" starttime="20191108 08:54:18.572"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 08:54:18.573" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191108 08:54:18.573" starttime="20191108 08:54:18.573"></status>
</kw>
<msg timestamp="20191108 08:54:18.574" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 08:54:18.574" starttime="20191108 08:54:16.264"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:54:18.575" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 08:54:18.575" starttime="20191108 08:54:18.574"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:18.576" starttime="20191108 08:54:18.576"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:54:18.577" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:54:19.781" level="INFO">Read output: Last login: Fri Nov  8 08:53:26 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:54:19.782" starttime="20191108 08:54:18.576"></status>
</kw>
<status status="PASS" endtime="20191108 08:54:19.782" starttime="20191108 08:54:18.575"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 08:54:19.783" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 08:54:20.891" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:54:20.892" starttime="20191108 08:54:19.782"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 08:54:20.893" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:54:21.000" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:54:21.001" level="INFO">${shutdownMsg} = hadoop    1169  0.0  0.0   9556  1168 ?        Ss   08:54   0:00 bash -c sudo ps aux | grep om
hadoop    1171  0.0  0.0   9088   668 ?        S    08:54   0:00 grep om</msg>
<status status="PASS" endtime="20191108 08:54:21.001" starttime="20191108 08:54:20.892"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:54:21.034" starttime="20191108 08:54:21.001"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:21.035" starttime="20191108 08:54:21.034"></status>
</kw>
<msg timestamp="20191108 08:54:21.036" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 08:54:21.036" starttime="20191108 08:54:18.574"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:54:21.040" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:54:33.124" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:54:33.124" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:33.124" starttime="20191108 08:54:21.037"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:54:33.126" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:33.127" starttime="20191108 08:54:33.125"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:54:33.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:54:33.128" starttime="20191108 08:54:33.127"></status>
</kw>
<msg timestamp="20191108 08:54:33.128" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:33.129" starttime="20191108 08:54:21.037"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 08:54:33.130" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:33.130" starttime="20191108 08:54:33.129"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:33.131" starttime="20191108 08:54:33.130"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:33.132" starttime="20191108 08:54:33.131"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 08:54:33.133" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 08:54:33.134" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:33.134" starttime="20191108 08:54:33.132"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 08:54:33.135" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 08:54:33.135" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 08:54:33.135" starttime="20191108 08:54:33.134"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 08:54:33.136" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 08:54:33.137" starttime="20191108 08:54:33.136"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 08:54:33.138" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 08:54:33.138" starttime="20191108 08:54:33.137"></status>
</kw>
<msg timestamp="20191108 08:54:33.138" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191108 08:54:33.138" starttime="20191108 08:54:21.036"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:33.139" starttime="20191108 08:54:33.139"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 08:54:33.141" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191108 08:54:33.142" starttime="20191108 08:54:33.141"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 08:54:33.143" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191108 08:54:33.143" starttime="20191108 08:54:33.142"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 08:54:33.144" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191108 08:54:33.144" starttime="20191108 08:54:33.143"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:54:33.146" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:54:33.146" starttime="20191108 08:54:33.144"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:54:33.150" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:54:37.433" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:54:37.433" level="INFO">${output} = 2019-11-08 08:54:35 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 08:54:35 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191108 08:54:37.433" starttime="20191108 08:54:33.147"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:54:37.435" level="INFO">2019-11-08 08:54:35 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 08:54:35 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 08:54:35 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:54:37.435" starttime="20191108 08:54:37.434"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:54:37.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:54:37.436" starttime="20191108 08:54:37.436"></status>
</kw>
<status status="PASS" endtime="20191108 08:54:37.437" starttime="20191108 08:54:33.147"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:54:37.441" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:54:39.552" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:54:39.552" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_...</msg>
<status status="PASS" endtime="20191108 08:54:39.552" starttime="20191108 08:54:37.438"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:54:39.554" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4
testOMRestart_3_0
testOMRestart_3_1
testOMRestart_3_2
testOMRestart_3_3
testOMRestart_3_4</msg>
<status status="PASS" endtime="20191108 08:54:39.554" starttime="20191108 08:54:39.553"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:54:39.555" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:54:39.555" starttime="20191108 08:54:39.554"></status>
</kw>
<msg timestamp="20191108 08:54:39.555" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_...</msg>
<status status="PASS" endtime="20191108 08:54:39.555" starttime="20191108 08:54:37.437"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:39.556" starttime="20191108 08:54:39.556"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:54:39.557" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:54:39.557" starttime="20191108 08:54:39.556"></status>
</kw>
<status status="PASS" endtime="20191108 08:54:39.557" starttime="20191108 08:54:33.139"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:54:39.559" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191108 08:54:39.559" starttime="20191108 08:54:39.558"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:39.560" starttime="20191108 08:54:39.560"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:54:39.561" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:54:40.765" level="INFO">Read output: Last login: Fri Nov  8 08:54:18 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:54:40.766" starttime="20191108 08:54:39.561"></status>
</kw>
<status status="PASS" endtime="20191108 08:54:40.766" starttime="20191108 08:54:39.559"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 08:54:40.767" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 08:54:42.949" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:54:42.950" starttime="20191108 08:54:40.767"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 08:54:42.950" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:54:43.016" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:54:43.016" level="INFO">${startupMsg} = hadoop    1220  356  0.0 34484288 257720 ?     Sl   08:54   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 08:54:43.016" starttime="20191108 08:54:42.950"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:54:43.082" starttime="20191108 08:54:43.017"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:43.082" starttime="20191108 08:54:43.082"></status>
</kw>
<status status="PASS" endtime="20191108 08:54:43.082" starttime="20191108 08:54:39.557"></status>
</kw>
<status status="PASS" endtime="20191108 08:54:43.083" starttime="20191108 08:54:16.264"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:54:43.086" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:54:44.890" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:54:44.890" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:44.890" starttime="20191108 08:54:43.084"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:54:44.891" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:44.891" starttime="20191108 08:54:44.891"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:54:44.892" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:54:44.892" starttime="20191108 08:54:44.892"></status>
</kw>
<msg timestamp="20191108 08:54:44.892" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:44.892" starttime="20191108 08:54:43.083"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 08:54:44.893" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:44.893" starttime="20191108 08:54:44.893"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:44.894" starttime="20191108 08:54:44.893"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:44.894" starttime="20191108 08:54:44.894"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 08:54:44.895" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 08:54:44.895" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:44.895" starttime="20191108 08:54:44.894"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 08:54:44.896" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191108 08:54:44.896" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 08:54:44.896" starttime="20191108 08:54:44.895"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 08:54:44.896" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 08:54:44.896" starttime="20191108 08:54:44.896"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 08:54:44.897" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191108 08:54:44.897" starttime="20191108 08:54:44.896"></status>
</kw>
<msg timestamp="20191108 08:54:44.897" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191108 08:54:44.897" starttime="20191108 08:54:43.083"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:54:44.898" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 08:54:44.898" starttime="20191108 08:54:44.898"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:44.900" starttime="20191108 08:54:44.899"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:54:44.900" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:54:46.098" level="INFO">Read output: Last login: Fri Nov  8 08:54:12 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:54:46.098" starttime="20191108 08:54:44.900"></status>
</kw>
<status status="PASS" endtime="20191108 08:54:46.098" starttime="20191108 08:54:44.899"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 08:54:46.099" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 08:54:47.237" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:54:47.238" starttime="20191108 08:54:46.099"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 08:54:47.238" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:54:47.347" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:54:47.347" level="INFO">${shutdownMsg} = hadoop    1592  0.0  0.0   9556  1168 ?        Ss   08:54   0:00 bash -c sudo ps aux | grep om
hadoop    1594  0.0  0.0   9088   672 ?        S    08:54   0:00 grep om</msg>
<status status="PASS" endtime="20191108 08:54:47.347" starttime="20191108 08:54:47.238"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:54:47.413" starttime="20191108 08:54:47.348"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:47.414" starttime="20191108 08:54:47.413"></status>
</kw>
<msg timestamp="20191108 08:54:47.415" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 08:54:47.415" starttime="20191108 08:54:44.897"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:54:47.420" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:54:59.655" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:54:59.655" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:59.655" starttime="20191108 08:54:47.416"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:54:59.657" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:59.657" starttime="20191108 08:54:59.656"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:54:59.658" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:54:59.658" starttime="20191108 08:54:59.657"></status>
</kw>
<msg timestamp="20191108 08:54:59.658" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:59.658" starttime="20191108 08:54:47.416"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 08:54:59.659" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:59.659" starttime="20191108 08:54:59.659"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:59.660" starttime="20191108 08:54:59.659"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:59.661" starttime="20191108 08:54:59.660"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 08:54:59.661" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 08:54:59.661" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191108 08:54:59.662" starttime="20191108 08:54:59.661"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 08:54:59.662" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191108 08:54:59.662" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 08:54:59.662" starttime="20191108 08:54:59.662"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 08:54:59.663" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191108 08:54:59.663" starttime="20191108 08:54:59.663"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 08:54:59.664" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191108 08:54:59.664" starttime="20191108 08:54:59.664"></status>
</kw>
<msg timestamp="20191108 08:54:59.664" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191108 08:54:59.665" starttime="20191108 08:54:47.415"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191108 08:54:59.665" starttime="20191108 08:54:59.665"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 08:54:59.667" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191108 08:54:59.667" starttime="20191108 08:54:59.666"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 08:54:59.668" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191108 08:54:59.668" starttime="20191108 08:54:59.667"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 08:54:59.669" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191108 08:54:59.669" starttime="20191108 08:54:59.668"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:54:59.670" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:54:59.671" starttime="20191108 08:54:59.669"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:54:59.674" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:55:14.019" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:55:14.020" level="INFO">${output} = 2019-11-08 08:55:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191108 08:55:14.020" starttime="20191108 08:54:59.672"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:55:14.021" level="INFO">2019-11-08 08:55:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:55:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:55:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:55:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:55:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:55:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:55:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:55:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:55:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:55:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.3:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-08 08:55:12 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 08:55:12 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 08:55:12 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:55:14.022" starttime="20191108 08:55:14.020"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:55:14.022" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:55:14.023" starttime="20191108 08:55:14.022"></status>
</kw>
<status status="PASS" endtime="20191108 08:55:14.023" starttime="20191108 08:54:59.671"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:55:14.027" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:55:26.244" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:55:26.245" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOM...</msg>
<status status="PASS" endtime="20191108 08:55:26.245" starttime="20191108 08:55:14.024"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:55:26.246" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4
testOMRestart_3_0
testOMRestart_3_1
testOMRestart_3_2
testOMRestart_3_3
testOMRestart_3_4</msg>
<status status="PASS" endtime="20191108 08:55:26.246" starttime="20191108 08:55:26.245"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:55:26.247" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:55:26.247" starttime="20191108 08:55:26.247"></status>
</kw>
<msg timestamp="20191108 08:55:26.248" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOM...</msg>
<status status="PASS" endtime="20191108 08:55:26.248" starttime="20191108 08:55:14.023"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:55:26.249" starttime="20191108 08:55:26.248"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:55:26.250" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:55:26.250" starttime="20191108 08:55:26.249"></status>
</kw>
<status status="PASS" endtime="20191108 08:55:26.251" starttime="20191108 08:54:59.666"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:55:26.252" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191108 08:55:26.252" starttime="20191108 08:55:26.252"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:55:26.254" starttime="20191108 08:55:26.253"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:55:26.255" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:55:27.455" level="INFO">Read output: Last login: Fri Nov  8 08:54:45 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:55:27.456" starttime="20191108 08:55:26.254"></status>
</kw>
<status status="PASS" endtime="20191108 08:55:27.456" starttime="20191108 08:55:26.253"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 08:55:27.457" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 08:55:29.595" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:55:29.596" starttime="20191108 08:55:27.457"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 08:55:29.596" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:55:29.661" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:55:29.662" level="INFO">${startupMsg} = hadoop    1644  240  0.0 34474816 211116 ?     Sl   08:55   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 08:55:29.662" starttime="20191108 08:55:29.596"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:55:29.727" starttime="20191108 08:55:29.662"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:55:29.728" starttime="20191108 08:55:29.728"></status>
</kw>
<status status="PASS" endtime="20191108 08:55:29.729" starttime="20191108 08:55:26.251"></status>
</kw>
<status status="PASS" endtime="20191108 08:55:29.729" starttime="20191108 08:54:43.083"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:55:29.733" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:55:32.484" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:55:32.484" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 08:55:32.484" starttime="20191108 08:55:29.730"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:55:32.485" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 08:55:32.486" starttime="20191108 08:55:32.485"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:55:32.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:55:32.486" starttime="20191108 08:55:32.486"></status>
</kw>
<msg timestamp="20191108 08:55:32.487" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 08:55:32.487" starttime="20191108 08:55:29.730"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 08:55:32.487" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191108 08:55:32.488" starttime="20191108 08:55:32.487"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 08:55:32.488" starttime="20191108 08:55:32.488"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 08:55:32.489" starttime="20191108 08:55:32.488"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 08:55:32.490" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 08:55:32.490" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191108 08:55:32.490" starttime="20191108 08:55:32.489"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 08:55:32.491" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191108 08:55:32.491" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 08:55:32.491" starttime="20191108 08:55:32.490"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 08:55:32.492" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191108 08:55:32.492" starttime="20191108 08:55:32.492"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 08:55:32.493" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191108 08:55:32.493" starttime="20191108 08:55:32.492"></status>
</kw>
<msg timestamp="20191108 08:55:32.494" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191108 08:55:32.494" starttime="20191108 08:55:29.729"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:55:32.495" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 08:55:32.495" starttime="20191108 08:55:32.495"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:55:32.497" starttime="20191108 08:55:32.496"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:55:32.498" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:55:33.697" level="INFO">Read output: Last login: Fri Nov  8 08:53:03 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:55:33.698" starttime="20191108 08:55:32.497"></status>
</kw>
<status status="PASS" endtime="20191108 08:55:33.698" starttime="20191108 08:55:32.495"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191108 08:55:33.699" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191108 08:55:34.847" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:55:34.847" starttime="20191108 08:55:33.699"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191108 08:55:34.848" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:55:34.914" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:55:34.914" level="INFO">${shutdownMsg} = hadoop    1096  0.0  0.0   9556  1168 ?        Ss   08:55   0:00 bash -c sudo ps aux | grep om
hadoop    1098  0.0  0.0   9088   668 ?        S    08:55   0:00 grep om</msg>
<status status="PASS" endtime="20191108 08:55:34.914" starttime="20191108 08:55:34.848"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:55:34.980" starttime="20191108 08:55:34.915"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:55:34.981" starttime="20191108 08:55:34.981"></status>
</kw>
<msg timestamp="20191108 08:55:34.982" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191108 08:55:34.982" starttime="20191108 08:55:32.494"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:55:34.987" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:55:57.111" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:55:57.111" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:55:57.111" starttime="20191108 08:55:34.984"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:55:57.113" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:55:57.113" starttime="20191108 08:55:57.112"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:55:57.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:55:57.114" starttime="20191108 08:55:57.114"></status>
</kw>
<msg timestamp="20191108 08:55:57.115" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:55:57.115" starttime="20191108 08:55:34.983"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191108 08:55:57.116" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:55:57.116" starttime="20191108 08:55:57.115"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191108 08:55:57.117" starttime="20191108 08:55:57.116"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191108 08:55:57.118" starttime="20191108 08:55:57.117"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191108 08:55:57.118" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191108 08:55:57.119" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191108 08:55:57.119" starttime="20191108 08:55:57.118"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191108 08:55:57.120" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191108 08:55:57.120" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191108 08:55:57.120" starttime="20191108 08:55:57.119"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191108 08:55:57.121" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191108 08:55:57.121" starttime="20191108 08:55:57.120"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191108 08:55:57.121" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191108 08:55:57.122" starttime="20191108 08:55:57.121"></status>
</kw>
<msg timestamp="20191108 08:55:57.122" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191108 08:55:57.122" starttime="20191108 08:55:34.982"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191108 08:55:57.123" starttime="20191108 08:55:57.122"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191108 08:55:57.125" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191108 08:55:57.125" starttime="20191108 08:55:57.124"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191108 08:55:57.126" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191108 08:55:57.126" starttime="20191108 08:55:57.125"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191108 08:55:57.127" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191108 08:55:57.127" starttime="20191108 08:55:57.126"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:55:57.129" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:55:57.129" starttime="20191108 08:55:57.127"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:55:57.133" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:56:01.232" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:56:01.232" level="INFO">${output} = 2019-11-08 08:55:59 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 08:55:59 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191108 08:56:01.233" starttime="20191108 08:55:57.131"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:56:01.234" level="INFO">2019-11-08 08:55:59 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-08 08:55:59 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-08 08:55:59 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191108 08:56:01.235" starttime="20191108 08:56:01.233"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:56:01.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:56:01.236" starttime="20191108 08:56:01.235"></status>
</kw>
<status status="PASS" endtime="20191108 08:56:01.237" starttime="20191108 08:55:57.130"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191108 08:56:01.242" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191108 08:56:03.341" level="INFO">${rc} = 0</msg>
<msg timestamp="20191108 08:56:03.341" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
test...</msg>
<status status="PASS" endtime="20191108 08:56:03.341" starttime="20191108 08:56:01.239"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191108 08:56:03.343" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
testOMRestart_1_0
testOMRestart_1_1
testOMRestart_1_2
testOMRestart_1_3
testOMRestart_1_4
testOMRestart_2_0
testOMRestart_2_1
testOMRestart_2_2
testOMRestart_2_3
testOMRestart_2_4
testOMRestart_3_0
testOMRestart_3_1
testOMRestart_3_2
testOMRestart_3_3
testOMRestart_3_4</msg>
<status status="PASS" endtime="20191108 08:56:03.343" starttime="20191108 08:56:03.342"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 08:56:03.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191108 08:56:03.344" starttime="20191108 08:56:03.343"></status>
</kw>
<msg timestamp="20191108 08:56:03.345" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4
test...</msg>
<status status="PASS" endtime="20191108 08:56:03.345" starttime="20191108 08:56:01.237"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:56:03.346" starttime="20191108 08:56:03.345"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191108 08:56:03.346" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191108 08:56:03.347" starttime="20191108 08:56:03.346"></status>
</kw>
<status status="PASS" endtime="20191108 08:56:03.347" starttime="20191108 08:55:57.123"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191108 08:56:03.348" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191108 08:56:03.348" starttime="20191108 08:56:03.348"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191108 08:56:03.350" starttime="20191108 08:56:03.349"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191108 08:56:03.350" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191108 08:56:04.549" level="INFO">Read output: Last login: Fri Nov  8 08:55:32 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191108 08:56:04.550" starttime="20191108 08:56:03.350"></status>
</kw>
<status status="PASS" endtime="20191108 08:56:04.550" starttime="20191108 08:56:03.349"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191108 08:56:04.551" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191108 08:56:06.710" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191108 08:56:06.710" starttime="20191108 08:56:04.550"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191108 08:56:06.711" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191108 08:56:06.839" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191108 08:56:06.840" level="INFO">${startupMsg} = hadoop    1147  326  0.0 34473508 208336 ?     Sl   08:56   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191108 08:56:06.840" starttime="20191108 08:56:06.711"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191108 08:56:06.905" starttime="20191108 08:56:06.840"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191108 08:56:06.906" starttime="20191108 08:56:06.905"></status>
</kw>
<status status="PASS" endtime="20191108 08:56:06.906" starttime="20191108 08:56:03.347"></status>
</kw>
<status status="PASS" endtime="20191108 08:56:06.906" starttime="20191108 08:55:29.729"></status>
</kw>
<status status="PASS" endtime="20191108 08:56:06.907" starttime="20191108 08:53:04.728"></status>
</kw>
<status status="PASS" endtime="20191108 08:56:06.907" critical="yes" starttime="20191108 08:53:04.728"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191108 08:56:06.909" starttime="20191108 08:49:19.995"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
