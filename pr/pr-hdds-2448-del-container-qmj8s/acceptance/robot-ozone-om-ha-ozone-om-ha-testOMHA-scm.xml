<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191114 22:28:40.907" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:28:41.142" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:28:43.726" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:28:43.726" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 22:28:43.726" starttime="20191114 22:28:41.140"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:28:43.727" level="INFO"></msg>
<status status="PASS" endtime="20191114 22:28:43.727" starttime="20191114 22:28:43.726"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:28:43.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:28:43.728" starttime="20191114 22:28:43.727"></status>
</kw>
<status status="PASS" endtime="20191114 22:28:43.728" starttime="20191114 22:28:41.139"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:28:43.732" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:28:55.681" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:28:55.681" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191114 22:28:55.681" starttime="20191114 22:28:43.731"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:28:55.684" level="INFO"></msg>
<status status="PASS" endtime="20191114 22:28:55.685" starttime="20191114 22:28:55.683"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:28:55.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:28:55.687" starttime="20191114 22:28:55.685"></status>
</kw>
<status status="PASS" endtime="20191114 22:28:55.688" starttime="20191114 22:28:43.728"></status>
</kw>
<status status="PASS" endtime="20191114 22:28:55.688" starttime="20191114 22:28:41.139"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191114 22:28:55.692" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191114 22:28:55.692" starttime="20191114 22:28:55.690"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191114 22:28:55.694" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191114 22:28:55.695" starttime="20191114 22:28:55.693"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191114 22:28:55.696" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191114 22:28:55.697" starttime="20191114 22:28:55.695"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 22:28:55.700" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 22:28:55.701" starttime="20191114 22:28:55.697"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:28:55.706" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:29:00.211" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:29:00.211" level="INFO">${output} = 2019-11-14 22:28:58 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 22:28:58 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191114 22:29:00.211" starttime="20191114 22:28:55.703"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:29:00.212" level="INFO">2019-11-14 22:28:58 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-14 22:28:58 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-14 22:28:58 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191114 22:29:00.212" starttime="20191114 22:29:00.211"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:29:00.213" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:29:00.213" starttime="20191114 22:29:00.212"></status>
</kw>
<status status="PASS" endtime="20191114 22:29:00.213" starttime="20191114 22:28:55.701"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:29:00.216" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:29:02.233" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:29:02.233" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191114 22:29:02.233" starttime="20191114 22:29:00.214"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:29:02.234" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191114 22:29:02.234" starttime="20191114 22:29:02.234"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:29:02.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:29:02.235" starttime="20191114 22:29:02.234"></status>
</kw>
<msg timestamp="20191114 22:29:02.235" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191114 22:29:02.235" starttime="20191114 22:29:00.213"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:02.236" starttime="20191114 22:29:02.236"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191114 22:29:02.237" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191114 22:29:02.237" starttime="20191114 22:29:02.236"></status>
</kw>
<status status="PASS" endtime="20191114 22:29:02.237" starttime="20191114 22:28:55.689"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:29:02.240" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:29:04.076" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:29:04.076" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:04.076" starttime="20191114 22:29:02.238"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:29:04.077" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:04.077" starttime="20191114 22:29:04.076"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:29:04.077" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:29:04.077" starttime="20191114 22:29:04.077"></status>
</kw>
<msg timestamp="20191114 22:29:04.078" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:04.078" starttime="20191114 22:29:02.238"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 22:29:04.078" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:04.078" starttime="20191114 22:29:04.078"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:04.079" starttime="20191114 22:29:04.079"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:04.080" starttime="20191114 22:29:04.079"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 22:29:04.080" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 22:29:04.080" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:04.080" starttime="20191114 22:29:04.080"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 22:29:04.081" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 22:29:04.081" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 22:29:04.081" starttime="20191114 22:29:04.081"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 22:29:04.082" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:29:04.082" starttime="20191114 22:29:04.081"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 22:29:04.082" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 22:29:04.082" starttime="20191114 22:29:04.082"></status>
</kw>
<msg timestamp="20191114 22:29:04.082" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:29:04.082" starttime="20191114 22:29:02.237"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 22:29:04.083" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 22:29:04.084" starttime="20191114 22:29:04.083"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:04.085" starttime="20191114 22:29:04.084"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 22:29:04.085" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 22:29:05.411" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 22:29:05.412" starttime="20191114 22:29:04.085"></status>
</kw>
<status status="PASS" endtime="20191114 22:29:05.412" starttime="20191114 22:29:04.084"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 22:29:05.413" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 22:29:05.427" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 22:29:05.427" starttime="20191114 22:29:05.412"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 22:29:05.428" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 22:29:05.504" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 22:29:05.505" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 22:29:05.505" starttime="20191114 22:29:05.427"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 22:29:05.620" starttime="20191114 22:29:05.505"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:05.621" starttime="20191114 22:29:05.620"></status>
</kw>
<msg timestamp="20191114 22:29:05.621" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 22:29:05.621" starttime="20191114 22:29:04.083"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:29:05.624" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:29:07.462" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:29:07.462" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:07.462" starttime="20191114 22:29:05.622"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:29:07.464" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:07.465" starttime="20191114 22:29:07.463"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:29:07.466" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:29:07.466" starttime="20191114 22:29:07.465"></status>
</kw>
<msg timestamp="20191114 22:29:07.466" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:07.467" starttime="20191114 22:29:05.621"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 22:29:07.467" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:07.468" starttime="20191114 22:29:07.467"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:07.469" starttime="20191114 22:29:07.468"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:07.470" starttime="20191114 22:29:07.469"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 22:29:07.471" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 22:29:07.471" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:07.471" starttime="20191114 22:29:07.470"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 22:29:07.472" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 22:29:07.472" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 22:29:07.472" starttime="20191114 22:29:07.471"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 22:29:07.473" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:29:07.473" starttime="20191114 22:29:07.472"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 22:29:07.474" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 22:29:07.474" starttime="20191114 22:29:07.473"></status>
</kw>
<msg timestamp="20191114 22:29:07.474" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:29:07.474" starttime="20191114 22:29:05.621"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 22:29:07.476" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191114 22:29:07.476" starttime="20191114 22:29:07.475"></status>
</kw>
<status status="FAIL" endtime="20191114 22:29:07.477" critical="yes" starttime="20191114 22:28:41.139">OMs did not failover: om1 == om1</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191114 22:29:07.481" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191114 22:29:07.481" starttime="20191114 22:29:07.478"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191114 22:29:07.483" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191114 22:29:07.483" starttime="20191114 22:29:07.481"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 22:29:07.486" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 22:29:07.486" starttime="20191114 22:29:07.485"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:07.489" starttime="20191114 22:29:07.487"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 22:29:07.490" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 22:29:08.690" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 22:29:08.690" starttime="20191114 22:29:07.489"></status>
</kw>
<status status="PASS" endtime="20191114 22:29:08.691" starttime="20191114 22:29:07.486"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 22:29:08.692" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 22:29:08.706" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 22:29:08.706" starttime="20191114 22:29:08.691"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 22:29:08.707" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 22:29:08.783" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 22:29:08.784" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 22:29:08.784" starttime="20191114 22:29:08.707"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 22:29:08.898" starttime="20191114 22:29:08.784"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:08.899" starttime="20191114 22:29:08.899"></status>
</kw>
<status status="PASS" endtime="20191114 22:29:08.899" starttime="20191114 22:29:07.483"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 22:29:08.900" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191114 22:29:08.900" starttime="20191114 22:29:08.900"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:08.901" starttime="20191114 22:29:08.901"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 22:29:08.902" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191114 22:29:10.088" level="INFO">Read output: Last login: Thu Nov 14 22:29:07 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 22:29:10.089" starttime="20191114 22:29:08.902"></status>
</kw>
<status status="PASS" endtime="20191114 22:29:10.089" starttime="20191114 22:29:08.901"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191114 22:29:10.090" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191114 22:29:10.104" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 22:29:10.104" level="INFO">${gorupId} = </msg>
<status status="PASS" endtime="20191114 22:29:10.104" starttime="20191114 22:29:10.089"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191114 22:29:10.105" level="INFO">Ratis GroupId: </msg>
<status status="PASS" endtime="20191114 22:29:10.105" starttime="20191114 22:29:10.104"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191114 22:29:10.105" level="INFO">${currDir} = /data/metadata/ratis//current/</msg>
<status status="PASS" endtime="20191114 22:29:10.106" starttime="20191114 22:29:10.105"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191114 22:29:10.180" level="FAIL">SSHException: EOF during negotiation</msg>
<status status="FAIL" endtime="20191114 22:29:10.180" starttime="20191114 22:29:10.106"></status>
</kw>
<status status="FAIL" endtime="20191114 22:29:10.181" starttime="20191114 22:29:08.899"></status>
</kw>
<status status="FAIL" endtime="20191114 22:29:10.181" critical="yes" starttime="20191114 22:29:07.477">SSHException: EOF during negotiation</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:29:10.187" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:29:12.015" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:29:12.015" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:12.015" starttime="20191114 22:29:10.185"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:29:12.017" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:12.017" starttime="20191114 22:29:12.016"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:29:12.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:29:12.017" starttime="20191114 22:29:12.017"></status>
</kw>
<msg timestamp="20191114 22:29:12.018" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:12.018" starttime="20191114 22:29:10.184"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 22:29:12.018" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:12.018" starttime="20191114 22:29:12.018"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:12.019" starttime="20191114 22:29:12.019"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:12.019" starttime="20191114 22:29:12.019"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 22:29:12.020" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 22:29:12.020" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:12.020" starttime="20191114 22:29:12.020"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 22:29:12.021" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 22:29:12.021" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 22:29:12.021" starttime="20191114 22:29:12.020"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 22:29:12.021" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:29:12.021" starttime="20191114 22:29:12.021"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 22:29:12.022" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 22:29:12.022" starttime="20191114 22:29:12.022"></status>
</kw>
<msg timestamp="20191114 22:29:12.022" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:29:12.022" starttime="20191114 22:29:10.183"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191114 22:29:12.024" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191114 22:29:12.024" starttime="20191114 22:29:12.023"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:12.025" starttime="20191114 22:29:12.024"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191114 22:29:12.025" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191114 22:29:13.225" level="INFO">Read output: Last login: Thu Nov 14 22:29:04 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
/bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191114 22:29:13.225" starttime="20191114 22:29:12.025"></status>
</kw>
<status status="PASS" endtime="20191114 22:29:13.226" starttime="20191114 22:29:12.024"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191114 22:29:13.226" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191114 22:29:13.241" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191114 22:29:13.241" starttime="20191114 22:29:13.226"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191114 22:29:13.242" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191114 22:29:13.319" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191114 22:29:13.320" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191114 22:29:13.320" starttime="20191114 22:29:13.241"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191114 22:29:13.435" starttime="20191114 22:29:13.321"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:13.437" starttime="20191114 22:29:13.436"></status>
</kw>
<msg timestamp="20191114 22:29:13.437" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191114 22:29:13.437" starttime="20191114 22:29:12.022"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191114 22:29:13.441" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191114 22:29:15.345" level="INFO">${rc} = 0</msg>
<msg timestamp="20191114 22:29:15.345" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:15.345" starttime="20191114 22:29:13.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191114 22:29:15.346" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:15.346" starttime="20191114 22:29:15.346"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191114 22:29:15.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191114 22:29:15.347" starttime="20191114 22:29:15.346"></status>
</kw>
<msg timestamp="20191114 22:29:15.347" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:15.347" starttime="20191114 22:29:13.438"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191114 22:29:15.348" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:15.348" starttime="20191114 22:29:15.348"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:15.348" starttime="20191114 22:29:15.348"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191114 22:29:15.349" starttime="20191114 22:29:15.349"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191114 22:29:15.349" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191114 22:29:15.350" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191114 22:29:15.350" starttime="20191114 22:29:15.349"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191114 22:29:15.350" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191114 22:29:15.350" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191114 22:29:15.350" starttime="20191114 22:29:15.350"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191114 22:29:15.351" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:29:15.351" starttime="20191114 22:29:15.350"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191114 22:29:15.351" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191114 22:29:15.351" starttime="20191114 22:29:15.351"></status>
</kw>
<msg timestamp="20191114 22:29:15.352" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191114 22:29:15.352" starttime="20191114 22:29:13.437"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191114 22:29:15.352" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191114 22:29:15.352" starttime="20191114 22:29:15.352"></status>
</kw>
<status status="FAIL" endtime="20191114 22:29:15.352" starttime="20191114 22:29:10.183"></status>
</kw>
<status status="FAIL" endtime="20191114 22:29:15.353" starttime="20191114 22:29:10.182"></status>
</kw>
<status status="FAIL" endtime="20191114 22:29:15.353" critical="yes" starttime="20191114 22:29:10.182">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191114 22:29:15.354" starttime="20191114 22:28:40.908"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
