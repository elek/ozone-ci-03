<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191111 03:47:25.463" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 03:47:25.632" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 03:47:36.045" level="INFO">${rc} = 255</msg>
<msg timestamp="20191111 03:47:36.045" level="INFO">${output} = Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191111 03:47:36.045" starttime="20191111 03:47:25.630"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 03:47:36.046" level="INFO">Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191111 03:47:36.046" starttime="20191111 03:47:36.045"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 03:47:36.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191111 03:47:36.047" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191111 03:47:36.050" starttime="20191111 03:47:36.046"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:36.050" starttime="20191111 03:47:25.630"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:36.050" starttime="20191111 03:47:25.629"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:36.051" critical="yes" starttime="20191111 03:47:25.629">255 != 0</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191111 03:47:36.053" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191111 03:47:36.053" starttime="20191111 03:47:36.052"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191111 03:47:36.055" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191111 03:47:36.055" starttime="20191111 03:47:36.054"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 03:47:36.056" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 03:47:36.056" starttime="20191111 03:47:36.056"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 03:47:36.057" starttime="20191111 03:47:36.057"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 03:47:36.058" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 03:47:37.431" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191111 03:47:37.432" starttime="20191111 03:47:36.057"></status>
</kw>
<status status="PASS" endtime="20191111 03:47:37.432" starttime="20191111 03:47:36.056"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 03:47:37.433" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 03:47:47.636" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191111 03:47:47.637" starttime="20191111 03:47:37.433"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 03:47:47.638" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 03:47:47.747" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 03:47:47.747" level="INFO">${shutdownMsg} = hadoop     412  0.0  0.0   9556  1168 ?        Ss   03:47   0:00 bash -c sudo ps aux | grep om
hadoop     414  0.0  0.0   9088   668 ?        S    03:47   0:00 grep om</msg>
<status status="PASS" endtime="20191111 03:47:47.747" starttime="20191111 03:47:47.637"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 03:47:47.780" starttime="20191111 03:47:47.748"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 03:47:47.781" starttime="20191111 03:47:47.780"></status>
</kw>
<status status="PASS" endtime="20191111 03:47:47.781" starttime="20191111 03:47:36.055"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 03:47:47.783" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191111 03:47:47.784" starttime="20191111 03:47:47.783"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 03:47:47.785" starttime="20191111 03:47:47.785"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 03:47:47.786" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191111 03:47:48.973" level="INFO">Read output: Last login: Mon Nov 11 03:47:36 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191111 03:47:48.974" starttime="20191111 03:47:47.786"></status>
</kw>
<status status="PASS" endtime="20191111 03:47:48.974" starttime="20191111 03:47:47.784"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191111 03:47:48.975" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191111 03:47:48.990" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191111 03:47:48.991" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 03:47:48.991" starttime="20191111 03:47:48.975"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191111 03:47:48.992" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191111 03:47:48.992" starttime="20191111 03:47:48.991"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191111 03:47:48.993" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191111 03:47:48.993" starttime="20191111 03:47:48.992"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191111 03:47:49.072" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191111 03:47:49.082" level="INFO">0 files:</msg>
<msg timestamp="20191111 03:47:49.082" level="INFO">@{logs} = [ ]</msg>
<status status="PASS" endtime="20191111 03:47:49.082" starttime="20191111 03:47:48.994"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191111 03:47:49.083" level="INFO">Length is 0</msg>
<msg timestamp="20191111 03:47:49.083" level="INFO">${numLogs} = 0</msg>
<status status="PASS" endtime="20191111 03:47:49.083" starttime="20191111 03:47:49.083"></status>
</kw>
<msg timestamp="20191111 03:47:49.084" level="INFO">${numLogsBefore} = 0</msg>
<msg timestamp="20191111 03:47:49.084" level="INFO">@{logsBefore} = [ [] ]</msg>
<status status="PASS" endtime="20191111 03:47:49.084" starttime="20191111 03:47:47.782"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 03:47:49.088" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 03:47:51.351" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 03:47:51.351" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:51.351" starttime="20191111 03:47:49.086"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 03:47:51.352" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:51.352" starttime="20191111 03:47:51.352"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 03:47:51.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 03:47:51.353" starttime="20191111 03:47:51.352"></status>
</kw>
<msg timestamp="20191111 03:47:51.353" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:51.353" starttime="20191111 03:47:49.085"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 03:47:51.354" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:51.354" starttime="20191111 03:47:51.354"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 03:47:51.355" starttime="20191111 03:47:51.354"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 03:47:51.355" starttime="20191111 03:47:51.355"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 03:47:51.356" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 03:47:51.356" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:51.356" starttime="20191111 03:47:51.355"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 03:47:51.356" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 03:47:51.356" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 03:47:51.357" starttime="20191111 03:47:51.356"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 03:47:51.357" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 03:47:51.357" starttime="20191111 03:47:51.357"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 03:47:51.358" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 03:47:51.358" starttime="20191111 03:47:51.357"></status>
</kw>
<msg timestamp="20191111 03:47:51.358" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 03:47:51.358" starttime="20191111 03:47:49.084"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191111 03:47:51.360" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191111 03:47:51.360" starttime="20191111 03:47:51.359"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191111 03:47:51.362" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191111 03:47:51.362" starttime="20191111 03:47:51.361"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191111 03:47:51.363" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191111 03:47:51.363" starttime="20191111 03:47:51.362"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 03:47:51.366" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 03:47:53.489" level="INFO">${rc} = 255</msg>
<msg timestamp="20191111 03:47:53.489" level="INFO">${output} = VOLUME_NOT_FOUND Volume volume1 is not found</msg>
<status status="PASS" endtime="20191111 03:47:53.489" starttime="20191111 03:47:51.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 03:47:53.490" level="INFO">VOLUME_NOT_FOUND Volume volume1 is not found</msg>
<status status="PASS" endtime="20191111 03:47:53.491" starttime="20191111 03:47:53.490"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 03:47:53.491" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191111 03:47:53.492" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191111 03:47:53.492" starttime="20191111 03:47:53.491"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:53.492" starttime="20191111 03:47:51.363"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:53.492" starttime="20191111 03:47:51.363"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:53.493" starttime="20191111 03:47:51.361"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:53.493" starttime="20191111 03:47:51.361"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:53.493" starttime="20191111 03:47:51.360"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:53.493" starttime="20191111 03:47:51.358"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:53.493" starttime="20191111 03:47:51.358"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:53.493" critical="yes" starttime="20191111 03:47:36.051">255 != 0</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 03:47:53.498" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 03:47:55.427" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 03:47:55.427" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:55.427" starttime="20191111 03:47:53.496"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 03:47:55.429" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:55.429" starttime="20191111 03:47:55.428"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 03:47:55.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 03:47:55.429" starttime="20191111 03:47:55.429"></status>
</kw>
<msg timestamp="20191111 03:47:55.430" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:55.430" starttime="20191111 03:47:53.495"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 03:47:55.430" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:55.430" starttime="20191111 03:47:55.430"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 03:47:55.431" starttime="20191111 03:47:55.431"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 03:47:55.431" starttime="20191111 03:47:55.431"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 03:47:55.432" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 03:47:55.432" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:55.432" starttime="20191111 03:47:55.432"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 03:47:55.433" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 03:47:55.433" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 03:47:55.433" starttime="20191111 03:47:55.432"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 03:47:55.434" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 03:47:55.434" starttime="20191111 03:47:55.433"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 03:47:55.434" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 03:47:55.434" starttime="20191111 03:47:55.434"></status>
</kw>
<msg timestamp="20191111 03:47:55.434" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 03:47:55.435" starttime="20191111 03:47:53.495"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191111 03:47:55.436" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191111 03:47:55.436" starttime="20191111 03:47:55.435"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191111 03:47:55.437" starttime="20191111 03:47:55.437"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191111 03:47:55.438" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191111 03:47:56.643" level="INFO">Read output: /bin/bash: Resource temporarily unavailable</msg>
<status status="PASS" endtime="20191111 03:47:56.643" starttime="20191111 03:47:55.437"></status>
</kw>
<status status="PASS" endtime="20191111 03:47:56.644" starttime="20191111 03:47:55.436"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191111 03:47:56.645" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191111 03:47:56.660" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20191111 03:47:56.661" starttime="20191111 03:47:56.644"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191111 03:47:56.661" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191111 03:47:56.739" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20191111 03:47:56.740" level="INFO">${shutdownMsg} = </msg>
<status status="PASS" endtime="20191111 03:47:56.740" starttime="20191111 03:47:56.661"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191111 03:47:56.855" starttime="20191111 03:47:56.740"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191111 03:47:56.856" starttime="20191111 03:47:56.855"></status>
</kw>
<msg timestamp="20191111 03:47:56.856" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191111 03:47:56.856" starttime="20191111 03:47:55.435"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191111 03:47:56.861" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191111 03:47:58.977" level="INFO">${rc} = 0</msg>
<msg timestamp="20191111 03:47:58.977" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:58.977" starttime="20191111 03:47:56.858"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191111 03:47:58.978" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:58.979" starttime="20191111 03:47:58.978"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191111 03:47:58.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191111 03:47:58.979" starttime="20191111 03:47:58.979"></status>
</kw>
<msg timestamp="20191111 03:47:58.980" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:58.980" starttime="20191111 03:47:56.857"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191111 03:47:58.980" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:58.980" starttime="20191111 03:47:58.980"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191111 03:47:58.981" starttime="20191111 03:47:58.980"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191111 03:47:58.981" starttime="20191111 03:47:58.981"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191111 03:47:58.982" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191111 03:47:58.982" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191111 03:47:58.982" starttime="20191111 03:47:58.982"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191111 03:47:58.983" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191111 03:47:58.983" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191111 03:47:58.983" starttime="20191111 03:47:58.982"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191111 03:47:58.983" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191111 03:47:58.984" starttime="20191111 03:47:58.983"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191111 03:47:58.984" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191111 03:47:58.984" starttime="20191111 03:47:58.984"></status>
</kw>
<msg timestamp="20191111 03:47:58.984" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191111 03:47:58.984" starttime="20191111 03:47:56.857"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<msg timestamp="20191111 03:47:58.985" level="FAIL">OMs did not failover: om1 == om1</msg>
<status status="FAIL" endtime="20191111 03:47:58.985" starttime="20191111 03:47:58.985"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:58.985" starttime="20191111 03:47:53.495"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:58.986" starttime="20191111 03:47:53.494"></status>
</kw>
<status status="FAIL" endtime="20191111 03:47:58.986" critical="yes" starttime="20191111 03:47:53.494">OMs did not failover: om1 == om1</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191111 03:47:58.987" starttime="20191111 03:47:25.464"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
