<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191107 03:29:28.343" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:29:28.463" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:29:31.163" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:29:31.163" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191107 03:29:31.163" starttime="20191107 03:29:28.462"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:29:31.165" level="INFO"></msg>
<status status="PASS" endtime="20191107 03:29:31.165" starttime="20191107 03:29:31.164"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:29:31.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:29:31.166" starttime="20191107 03:29:31.165"></status>
</kw>
<status status="PASS" endtime="20191107 03:29:31.166" starttime="20191107 03:29:28.461"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:29:31.173" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:29:33.369" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:29:33.369" level="INFO">${output} = </msg>
<status status="PASS" endtime="20191107 03:29:33.369" starttime="20191107 03:29:31.171"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:29:33.370" level="INFO"></msg>
<status status="PASS" endtime="20191107 03:29:33.370" starttime="20191107 03:29:33.370"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:29:33.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:29:33.371" starttime="20191107 03:29:33.370"></status>
</kw>
<status status="PASS" endtime="20191107 03:29:33.371" starttime="20191107 03:29:31.166"></status>
</kw>
<status status="PASS" endtime="20191107 03:29:33.371" starttime="20191107 03:29:28.461"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 03:29:33.373" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20191107 03:29:33.373" starttime="20191107 03:29:33.372"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 03:29:33.373" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20191107 03:29:33.373" starttime="20191107 03:29:33.373"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 03:29:33.374" level="INFO">${fileName} = 1.txt</msg>
<status status="PASS" endtime="20191107 03:29:33.374" starttime="20191107 03:29:33.374"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:29:33.376" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:29:33.376" starttime="20191107 03:29:33.374"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:29:33.378" level="INFO">Running command 'ozone fs -copyFromLocal 1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:29:38.405" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:29:38.405" level="INFO">${output} = 2019-11-07 03:29:36 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 03:29:36 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 03:29:38.406" starttime="20191107 03:29:33.377"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:29:38.407" level="INFO">2019-11-07 03:29:36 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 03:29:36 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 03:29:36 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 03:29:38.407" starttime="20191107 03:29:38.406"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:29:38.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:29:38.408" starttime="20191107 03:29:38.408"></status>
</kw>
<status status="PASS" endtime="20191107 03:29:38.409" starttime="20191107 03:29:33.376"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:29:38.412" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:29:40.669" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:29:40.669" level="INFO">${output} = 1.txt</msg>
<status status="PASS" endtime="20191107 03:29:40.669" starttime="20191107 03:29:38.410"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:29:40.671" level="INFO">1.txt</msg>
<status status="PASS" endtime="20191107 03:29:40.671" starttime="20191107 03:29:40.670"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:29:40.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:29:40.672" starttime="20191107 03:29:40.671"></status>
</kw>
<msg timestamp="20191107 03:29:40.672" level="INFO">${result} = 1.txt</msg>
<status status="PASS" endtime="20191107 03:29:40.672" starttime="20191107 03:29:38.409"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:29:40.673" starttime="20191107 03:29:40.672"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:29:40.674" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/1.txt"&gt;/opt/hadoop/1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:29:40.674" starttime="20191107 03:29:40.673"></status>
</kw>
<status status="PASS" endtime="20191107 03:29:40.674" starttime="20191107 03:29:33.372"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:29:40.677" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:29:42.573" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:29:42.573" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:29:42.574" starttime="20191107 03:29:40.675"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:29:42.575" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:29:42.576" starttime="20191107 03:29:42.574"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:29:42.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:29:42.577" starttime="20191107 03:29:42.576"></status>
</kw>
<msg timestamp="20191107 03:29:42.577" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:29:42.578" starttime="20191107 03:29:40.675"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 03:29:42.578" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:29:42.579" starttime="20191107 03:29:42.578"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 03:29:42.580" starttime="20191107 03:29:42.579"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 03:29:42.581" starttime="20191107 03:29:42.580"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 03:29:42.582" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 03:29:42.582" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:29:42.582" starttime="20191107 03:29:42.581"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 03:29:42.583" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 03:29:42.583" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 03:29:42.583" starttime="20191107 03:29:42.582"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 03:29:42.584" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 03:29:42.584" starttime="20191107 03:29:42.584"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 03:29:42.585" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 03:29:42.585" starttime="20191107 03:29:42.585"></status>
</kw>
<msg timestamp="20191107 03:29:42.586" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 03:29:42.586" starttime="20191107 03:29:40.674"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:29:42.588" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 03:29:42.588" starttime="20191107 03:29:42.587"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:29:42.590" starttime="20191107 03:29:42.589"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:29:42.590" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:29:43.968" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:29:43.968" starttime="20191107 03:29:42.590"></status>
</kw>
<status status="PASS" endtime="20191107 03:29:43.969" starttime="20191107 03:29:42.588"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 03:29:43.969" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 03:29:54.099" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:29:54.099" starttime="20191107 03:29:43.969"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 03:29:54.100" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:29:54.198" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:29:54.198" level="INFO">${shutdownMsg} = hadoop     459  0.0  0.0   9556  1168 ?        Ss   03:29   0:00 bash -c sudo ps aux | grep om
hadoop     461  0.0  0.0   9088   672 ?        S    03:29   0:00 grep om</msg>
<status status="PASS" endtime="20191107 03:29:54.198" starttime="20191107 03:29:54.100"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:29:54.263" starttime="20191107 03:29:54.199"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:29:54.265" starttime="20191107 03:29:54.264"></status>
</kw>
<msg timestamp="20191107 03:29:54.265" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 03:29:54.265" starttime="20191107 03:29:42.586"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:29:54.269" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:30:06.396" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:30:06.396" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:30:06.396" starttime="20191107 03:29:54.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:30:06.398" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:30:06.398" starttime="20191107 03:30:06.397"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:30:06.398" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:30:06.399" starttime="20191107 03:30:06.398"></status>
</kw>
<msg timestamp="20191107 03:30:06.399" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:30:06.399" starttime="20191107 03:29:54.266"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 03:30:06.400" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:30:06.400" starttime="20191107 03:30:06.399"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 03:30:06.400" starttime="20191107 03:30:06.400"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 03:30:06.401" starttime="20191107 03:30:06.401"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 03:30:06.402" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 03:30:06.402" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:30:06.402" starttime="20191107 03:30:06.401"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 03:30:06.403" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 03:30:06.403" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 03:30:06.403" starttime="20191107 03:30:06.402"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 03:30:06.403" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 03:30:06.403" starttime="20191107 03:30:06.403"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 03:30:06.404" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 03:30:06.404" starttime="20191107 03:30:06.404"></status>
</kw>
<msg timestamp="20191107 03:30:06.404" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191107 03:30:06.404" starttime="20191107 03:29:54.265"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 03:30:06.405" starttime="20191107 03:30:06.405"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 03:30:06.406" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20191107 03:30:06.406" starttime="20191107 03:30:06.406"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 03:30:06.407" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20191107 03:30:06.407" starttime="20191107 03:30:06.407"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 03:30:06.408" level="INFO">${fileName} = 2.txt</msg>
<status status="PASS" endtime="20191107 03:30:06.408" starttime="20191107 03:30:06.408"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:30:06.410" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:30:06.410" starttime="20191107 03:30:06.408"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:30:06.413" level="INFO">Running command 'ozone fs -copyFromLocal 2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:30:21.291" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:30:21.291" level="INFO">${output} = 2019-11-07 03:30:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191107 03:30:21.291" starttime="20191107 03:30:06.411"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:30:21.292" level="INFO">2019-11-07 03:30:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:30:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:30:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:30:12 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:30:13 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:30:14 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:30:15 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:30:16 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:30:17 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:30:18 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:30:19 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 03:30:19 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 03:30:19 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 03:30:21.293" starttime="20191107 03:30:21.292"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:30:21.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:30:21.294" starttime="20191107 03:30:21.293"></status>
</kw>
<status status="PASS" endtime="20191107 03:30:21.294" starttime="20191107 03:30:06.410"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:30:21.297" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:30:33.576" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:30:33.576" level="INFO">${output} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191107 03:30:33.576" starttime="20191107 03:30:21.295"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:30:33.578" level="INFO">1.txt
2.txt</msg>
<status status="PASS" endtime="20191107 03:30:33.578" starttime="20191107 03:30:33.577"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:30:33.579" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:30:33.579" starttime="20191107 03:30:33.578"></status>
</kw>
<msg timestamp="20191107 03:30:33.580" level="INFO">${result} = 1.txt
2.txt</msg>
<status status="PASS" endtime="20191107 03:30:33.580" starttime="20191107 03:30:21.294"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:30:33.580" starttime="20191107 03:30:33.580"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:30:33.582" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/2.txt"&gt;/opt/hadoop/2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:30:33.582" starttime="20191107 03:30:33.580"></status>
</kw>
<status status="PASS" endtime="20191107 03:30:33.582" starttime="20191107 03:30:06.405"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:30:33.584" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 03:30:33.584" starttime="20191107 03:30:33.583"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:30:33.585" starttime="20191107 03:30:33.585"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:30:33.586" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:30:34.774" level="INFO">Read output: Last login: Thu Nov  7 03:29:42 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:30:34.774" starttime="20191107 03:30:33.586"></status>
</kw>
<status status="PASS" endtime="20191107 03:30:34.774" starttime="20191107 03:30:33.584"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 03:30:34.776" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 03:30:36.936" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:30:36.937" starttime="20191107 03:30:34.775"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 03:30:36.938" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:30:37.036" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:30:37.036" level="INFO">${startupMsg} = hadoop     512  337  0.0 34478296 207452 ?     Sl   03:30   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 03:30:37.036" starttime="20191107 03:30:36.937"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:30:37.102" starttime="20191107 03:30:37.037"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:30:37.103" starttime="20191107 03:30:37.102"></status>
</kw>
<status status="PASS" endtime="20191107 03:30:37.103" starttime="20191107 03:30:33.582"></status>
</kw>
<status status="PASS" endtime="20191107 03:30:37.104" critical="yes" starttime="20191107 03:29:28.460"></status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191107 03:30:37.107" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191107 03:30:37.107" starttime="20191107 03:30:37.105"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191107 03:30:37.108" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191107 03:30:37.108" starttime="20191107 03:30:37.107"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:30:37.109" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 03:30:37.109" starttime="20191107 03:30:37.109"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:30:37.111" starttime="20191107 03:30:37.110"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:30:37.111" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:30:38.309" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:30:38.310" starttime="20191107 03:30:37.111"></status>
</kw>
<status status="PASS" endtime="20191107 03:30:38.310" starttime="20191107 03:30:37.109"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 03:30:38.311" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 03:30:48.479" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:30:48.479" starttime="20191107 03:30:38.310"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 03:30:48.481" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:30:48.580" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:30:48.580" level="INFO">${shutdownMsg} = hadoop     503  0.0  0.0   9556  1168 ?        Ss   03:30   0:00 bash -c sudo ps aux | grep om
hadoop     505  0.0  0.0   9088   668 ?        S    03:30   0:00 grep om</msg>
<status status="PASS" endtime="20191107 03:30:48.580" starttime="20191107 03:30:48.480"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:30:48.646" starttime="20191107 03:30:48.581"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:30:48.647" starttime="20191107 03:30:48.646"></status>
</kw>
<status status="PASS" endtime="20191107 03:30:48.648" starttime="20191107 03:30:37.108"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:30:48.650" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 03:30:48.651" starttime="20191107 03:30:48.649"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:30:48.653" starttime="20191107 03:30:48.652"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:30:48.654" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:30:49.842" level="INFO">Read output: Last login: Thu Nov  7 03:30:37 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:30:49.843" starttime="20191107 03:30:48.653"></status>
</kw>
<status status="PASS" endtime="20191107 03:30:49.843" starttime="20191107 03:30:48.651"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 03:30:49.845" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 03:30:49.870" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:30:49.871" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 03:30:49.871" starttime="20191107 03:30:49.844"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 03:30:49.872" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 03:30:49.872" starttime="20191107 03:30:49.871"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 03:30:49.873" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 03:30:49.873" starttime="20191107 03:30:49.873"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 03:30:49.934" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 03:30:49.945" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191107 03:30:49.945" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191107 03:30:49.945" starttime="20191107 03:30:49.874"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 03:30:49.946" level="INFO">Length is 2</msg>
<msg timestamp="20191107 03:30:49.947" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191107 03:30:49.947" starttime="20191107 03:30:49.945"></status>
</kw>
<msg timestamp="20191107 03:30:49.947" level="INFO">${numLogsBefore} = 2</msg>
<msg timestamp="20191107 03:30:49.947" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191107 03:30:49.947" starttime="20191107 03:30:48.648"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:30:49.951" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:31:02.205" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:31:02.205" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:31:02.205" starttime="20191107 03:30:49.949"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:31:02.207" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:31:02.207" starttime="20191107 03:31:02.206"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:31:02.207" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:31:02.208" starttime="20191107 03:31:02.207"></status>
</kw>
<msg timestamp="20191107 03:31:02.208" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:31:02.208" starttime="20191107 03:30:49.948"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 03:31:02.208" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:31:02.209" starttime="20191107 03:31:02.208"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:02.209" starttime="20191107 03:31:02.209"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:02.210" starttime="20191107 03:31:02.209"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 03:31:02.210" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 03:31:02.210" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:31:02.210" starttime="20191107 03:31:02.210"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 03:31:02.211" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 03:31:02.211" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 03:31:02.211" starttime="20191107 03:31:02.211"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 03:31:02.212" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 03:31:02.212" starttime="20191107 03:31:02.211"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 03:31:02.212" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 03:31:02.212" starttime="20191107 03:31:02.212"></status>
</kw>
<msg timestamp="20191107 03:31:02.213" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 03:31:02.213" starttime="20191107 03:30:49.948"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191107 03:31:02.215" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191107 03:31:02.215" starttime="20191107 03:31:02.213"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 03:31:02.217" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191107 03:31:02.217" starttime="20191107 03:31:02.216"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 03:31:02.217" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191107 03:31:02.217" starttime="20191107 03:31:02.217"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:31:02.221" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:31:06.841" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:31:06.841" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 03:31:06.841" starttime="20191107 03:31:02.219"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:31:06.843" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 03:31:06.843" starttime="20191107 03:31:06.842"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:31:06.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:31:06.845" starttime="20191107 03:31:06.844"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:06.845" starttime="20191107 03:31:02.218"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:31:06.851" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:31:09.192" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:31:09.192" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573097464436,
  "modificationTime": 1573097466412,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 03:31:09.192" starttime="20191107 03:31:06.848"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:31:09.194" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573097464436,
  "modificationTime": 1573097466412,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 3,
      "localID": 103094515428818940,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 03:31:09.194" starttime="20191107 03:31:09.193"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:31:09.194" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:31:09.194" starttime="20191107 03:31:09.194"></status>
</kw>
<msg timestamp="20191107 03:31:09.195" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": 1573097464436,
  "modificationTime": 1573097466412,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 03:31:09.195" starttime="20191107 03:31:06.845"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:09.195" starttime="20191107 03:31:09.195"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:09.196" starttime="20191107 03:31:02.217"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:09.196" starttime="20191107 03:31:02.216"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 03:31:09.197" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20191107 03:31:09.197" starttime="20191107 03:31:09.196"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 03:31:09.197" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20191107 03:31:09.197" starttime="20191107 03:31:09.197"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:31:09.201" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:31:14.249" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:31:14.249" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 03:31:14.249" starttime="20191107 03:31:09.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:31:14.251" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 03:31:14.251" starttime="20191107 03:31:14.250"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:31:14.251" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:31:14.252" starttime="20191107 03:31:14.251"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:14.252" starttime="20191107 03:31:09.198"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:31:14.256" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_1 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_1")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:31:16.507" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:31:16.507" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573097471541,
  "modificationTime": 1573097473826,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 03:31:16.507" starttime="20191107 03:31:14.254"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:31:16.508" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573097471541,
  "modificationTime": 1573097473826,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 4,
      "localID": 103094515894714370,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 03:31:16.508" starttime="20191107 03:31:16.508"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:31:16.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:31:16.509" starttime="20191107 03:31:16.509"></status>
</kw>
<msg timestamp="20191107 03:31:16.510" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_1",
  "dataSize": 17540,
  "creationTime": 1573097471541,
  "modificationTime": 1573097473826,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 03:31:16.510" starttime="20191107 03:31:14.252"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:16.510" starttime="20191107 03:31:16.510"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:16.511" starttime="20191107 03:31:09.197"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:16.511" starttime="20191107 03:31:09.196"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 03:31:16.512" level="INFO">${tmpKey} = testOMRestart_0_2</msg>
<status status="PASS" endtime="20191107 03:31:16.512" starttime="20191107 03:31:16.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 03:31:16.512" level="INFO">testOMRestart_0_2</msg>
<status status="PASS" endtime="20191107 03:31:16.512" starttime="20191107 03:31:16.512"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:31:16.516" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_2 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:31:20.985" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:31:20.985" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 03:31:20.985" starttime="20191107 03:31:16.514"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:31:20.987" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 03:31:20.987" starttime="20191107 03:31:20.986"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:31:20.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:31:20.988" starttime="20191107 03:31:20.987"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:20.988" starttime="20191107 03:31:16.513"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:31:20.993" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_2 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_2")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:31:23.346" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:31:23.346" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573097478637,
  "modificationTime": 1573097480580,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 03:31:23.346" starttime="20191107 03:31:20.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:31:23.347" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573097478637,
  "modificationTime": 1573097480580,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 5,
      "localID": 103094516359823360,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 03:31:23.347" starttime="20191107 03:31:23.346"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:31:23.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:31:23.348" starttime="20191107 03:31:23.347"></status>
</kw>
<msg timestamp="20191107 03:31:23.348" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_2",
  "dataSize": 17540,
  "creationTime": 1573097478637,
  "modificationTime": 1573097480580,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 03:31:23.348" starttime="20191107 03:31:20.988"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:23.349" starttime="20191107 03:31:23.348"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:23.349" starttime="20191107 03:31:16.513"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:23.349" starttime="20191107 03:31:16.511"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 03:31:23.350" level="INFO">${tmpKey} = testOMRestart_0_3</msg>
<status status="PASS" endtime="20191107 03:31:23.350" starttime="20191107 03:31:23.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 03:31:23.350" level="INFO">testOMRestart_0_3</msg>
<status status="PASS" endtime="20191107 03:31:23.350" starttime="20191107 03:31:23.350"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:31:23.354" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_3 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:31:27.716" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:31:27.716" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 03:31:27.716" starttime="20191107 03:31:23.352"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:31:27.718" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 03:31:27.718" starttime="20191107 03:31:27.717"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:31:27.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:31:27.719" starttime="20191107 03:31:27.718"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:27.719" starttime="20191107 03:31:23.351"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:31:27.722" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_3 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_3")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:31:30.085" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:31:30.085" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573097485330,
  "modificationTime": 1573097487309,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 03:31:30.085" starttime="20191107 03:31:27.720"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:31:30.086" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573097485330,
  "modificationTime": 1573097487309,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 6,
      "localID": 103094516798455800,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 03:31:30.086" starttime="20191107 03:31:30.086"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:31:30.087" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:31:30.087" starttime="20191107 03:31:30.086"></status>
</kw>
<msg timestamp="20191107 03:31:30.087" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_3",
  "dataSize": 17540,
  "creationTime": 1573097485330,
  "modificationTime": 1573097487309,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 03:31:30.087" starttime="20191107 03:31:27.719"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:30.088" starttime="20191107 03:31:30.088"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:30.088" starttime="20191107 03:31:23.351"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:30.088" starttime="20191107 03:31:23.349"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191107 03:31:30.089" level="INFO">${tmpKey} = testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:31:30.089" starttime="20191107 03:31:30.089"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191107 03:31:30.090" level="INFO">testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:31:30.090" starttime="20191107 03:31:30.089"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:31:30.093" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_4 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:31:34.691" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:31:34.692" level="INFO">${output} = WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-th...</msg>
<status status="PASS" endtime="20191107 03:31:34.692" starttime="20191107 03:31:30.091"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:31:34.693" level="INFO">WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 03:31:34.693" starttime="20191107 03:31:34.692"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:31:34.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:31:34.694" starttime="20191107 03:31:34.693"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:34.695" starttime="20191107 03:31:30.091"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:31:34.701" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_4 | grep -Ev 'Removed|WARN|DEBUG|ERROR|INFO|TRACE' | jq -r '. | select(.name=="testOMRestart_0_4")' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:31:37.084" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:31:37.084" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573097492376,
  "modificationTime": 1573097494283,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 03:31:37.084" starttime="20191107 03:31:34.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:31:37.086" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573097492376,
  "modificationTime": 1573097494283,
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 7,
      "localID": 103094517260288000,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20191107 03:31:37.086" starttime="20191107 03:31:37.085"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:31:37.087" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:31:37.087" starttime="20191107 03:31:37.086"></status>
</kw>
<msg timestamp="20191107 03:31:37.088" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_4",
  "dataSize": 17540,
  "creationTime": 1573097492376,
  "modificationTime": 1573097494283,
  "replicationType": "...</msg>
<status status="PASS" endtime="20191107 03:31:37.088" starttime="20191107 03:31:34.695"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:37.089" starttime="20191107 03:31:37.088"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:37.090" starttime="20191107 03:31:30.090"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:37.090" starttime="20191107 03:31:30.088"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:37.090" starttime="20191107 03:31:02.216"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:37.090" starttime="20191107 03:31:02.215"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${numLogsLeader}</var>
<var>@{logsLeader}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:31:37.092" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 03:31:37.092" starttime="20191107 03:31:37.091"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:37.094" starttime="20191107 03:31:37.093"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:31:37.095" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:31:38.301" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:31:38.301" starttime="20191107 03:31:37.095"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:38.302" starttime="20191107 03:31:37.093"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 03:31:38.303" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 03:31:38.318" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:31:38.318" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 03:31:38.319" starttime="20191107 03:31:38.302"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 03:31:38.319" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 03:31:38.320" starttime="20191107 03:31:38.319"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 03:31:38.321" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 03:31:38.321" starttime="20191107 03:31:38.320"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 03:31:38.402" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 03:31:38.414" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191107 03:31:38.414" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191107 03:31:38.415" starttime="20191107 03:31:38.321"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 03:31:38.416" level="INFO">Length is 3</msg>
<msg timestamp="20191107 03:31:38.416" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191107 03:31:38.416" starttime="20191107 03:31:38.415"></status>
</kw>
<msg timestamp="20191107 03:31:38.417" level="INFO">${numLogsLeader} = 3</msg>
<msg timestamp="20191107 03:31:38.417" level="INFO">@{logsLeader} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191107 03:31:38.417" starttime="20191107 03:31:37.090"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
</arguments>
<msg timestamp="20191107 03:31:38.418" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191107 03:31:38.418" starttime="20191107 03:31:38.417"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:38.418" starttime="20191107 03:31:02.213"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:38.419" starttime="20191107 03:31:02.213"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsLeader} &gt; ${numLogsBefore}</arg>
<arg>Cannot test OM Restart as Ratis did not start new log segment.</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:38.420" starttime="20191107 03:31:38.419"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:31:38.422" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 03:31:38.422" starttime="20191107 03:31:38.421"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:38.424" starttime="20191107 03:31:38.424"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:31:38.425" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:31:39.630" level="INFO">Read output: Last login: Thu Nov  7 03:30:48 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:31:39.630" starttime="20191107 03:31:38.425"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:39.631" starttime="20191107 03:31:38.422"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 03:31:39.632" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 03:31:41.823" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:31:41.823" starttime="20191107 03:31:39.631"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 03:31:41.824" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:31:41.921" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:31:41.922" level="INFO">${startupMsg} = hadoop     578  318  0.0 34474280 203404 ?     Sl   03:31   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 03:31:41.922" starttime="20191107 03:31:41.824"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:31:41.988" starttime="20191107 03:31:41.923"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:41.989" starttime="20191107 03:31:41.988"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:41.989" starttime="20191107 03:31:38.420"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 300 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:31:41.992" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 03:31:41.992" starttime="20191107 03:31:41.991"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:41.993" starttime="20191107 03:31:41.993"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:31:41.994" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:31:43.197" level="INFO">Read output: Last login: Thu Nov  7 03:31:38 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:31:43.197" starttime="20191107 03:31:41.993"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:43.198" starttime="20191107 03:31:41.992"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 03:31:43.198" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 03:31:43.213" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:31:43.214" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 03:31:43.214" starttime="20191107 03:31:43.198"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 03:31:43.215" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 03:31:43.215" starttime="20191107 03:31:43.214"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 03:31:43.216" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 03:31:43.216" starttime="20191107 03:31:43.215"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 03:31:43.295" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 03:31:43.305" level="INFO">2 files:
log_0-10
log_inprogress_11</msg>
<msg timestamp="20191107 03:31:43.305" level="INFO">@{logs} = [ log_0-10 | log_inprogress_11 ]</msg>
<status status="PASS" endtime="20191107 03:31:43.305" starttime="20191107 03:31:43.216"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 03:31:43.306" level="INFO">Length is 2</msg>
<msg timestamp="20191107 03:31:43.306" level="INFO">${numLogs} = 2</msg>
<status status="PASS" endtime="20191107 03:31:43.307" starttime="20191107 03:31:43.306"></status>
</kw>
<msg timestamp="20191107 03:31:43.307" level="INFO">${numLogsAfter} = 2</msg>
<msg timestamp="20191107 03:31:43.307" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_inprogress_11'] ]</msg>
<status status="PASS" endtime="20191107 03:31:43.307" starttime="20191107 03:31:41.990"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:43.308" starttime="20191107 03:31:43.308"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20191107 03:31:44.309" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20191107 03:31:44.310" starttime="20191107 03:31:43.309"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:44.310" starttime="20191107 03:31:41.990"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsAfter}</var>
<var>@{logsAfter}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:31:44.312" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 03:31:44.312" starttime="20191107 03:31:44.311"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:44.313" starttime="20191107 03:31:44.312"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:31:44.314" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:31:45.512" level="INFO">Read output: Last login: Thu Nov  7 03:31:42 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:31:45.513" starttime="20191107 03:31:44.313"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:45.513" starttime="20191107 03:31:44.312"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191107 03:31:45.514" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191107 03:31:45.528" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:31:45.529" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 03:31:45.529" starttime="20191107 03:31:45.513"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191107 03:31:45.529" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191107 03:31:45.530" starttime="20191107 03:31:45.529"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191107 03:31:45.531" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191107 03:31:45.531" starttime="20191107 03:31:45.530"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191107 03:31:45.613" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191107 03:31:45.622" level="INFO">3 files:
log_0-10
log_11-18
log_inprogress_19</msg>
<msg timestamp="20191107 03:31:45.623" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_inprogress_19 ]</msg>
<status status="PASS" endtime="20191107 03:31:45.623" starttime="20191107 03:31:45.531"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191107 03:31:45.624" level="INFO">Length is 3</msg>
<msg timestamp="20191107 03:31:45.624" level="INFO">${numLogs} = 3</msg>
<status status="PASS" endtime="20191107 03:31:45.625" starttime="20191107 03:31:45.623"></status>
</kw>
<msg timestamp="20191107 03:31:45.625" level="INFO">${numLogsAfter} = 3</msg>
<msg timestamp="20191107 03:31:45.625" level="INFO">@{logsAfter} = [ [u'log_0-10', u'log_11-18', u'log_inprogress_19'] ]</msg>
<status status="PASS" endtime="20191107 03:31:45.626" starttime="20191107 03:31:44.310"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
</arguments>
<msg timestamp="20191107 03:31:45.627" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20191107 03:31:45.627" starttime="20191107 03:31:45.626"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:45.627" starttime="20191107 03:31:44.310"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:45.627" starttime="20191107 03:31:41.990"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${numLogsAfter} &gt;= ${numLogsLeader}</arg>
<arg>Restarted OM did not catch up with Leader OM</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:45.629" starttime="20191107 03:31:45.628"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${logsAfter}</arg>
<arg>${logsLeader}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:45.630" starttime="20191107 03:31:45.629"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:45.630" critical="yes" starttime="20191107 03:30:37.104"></status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:31:45.637" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:31:47.684" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:31:47.684" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:31:47.684" starttime="20191107 03:31:45.634"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:31:47.685" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:31:47.685" starttime="20191107 03:31:47.684"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:31:47.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:31:47.686" starttime="20191107 03:31:47.685"></status>
</kw>
<msg timestamp="20191107 03:31:47.686" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:31:47.686" starttime="20191107 03:31:45.634"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 03:31:47.687" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:31:47.687" starttime="20191107 03:31:47.686"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:47.687" starttime="20191107 03:31:47.687"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:47.688" starttime="20191107 03:31:47.687"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 03:31:47.688" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 03:31:47.689" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:31:47.689" starttime="20191107 03:31:47.688"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 03:31:47.689" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 03:31:47.689" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 03:31:47.689" starttime="20191107 03:31:47.689"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 03:31:47.690" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 03:31:47.690" starttime="20191107 03:31:47.690"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 03:31:47.691" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 03:31:47.691" starttime="20191107 03:31:47.690"></status>
</kw>
<msg timestamp="20191107 03:31:47.691" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 03:31:47.691" starttime="20191107 03:31:45.633"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:31:47.692" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 03:31:47.692" starttime="20191107 03:31:47.692"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:47.693" starttime="20191107 03:31:47.693"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:31:47.694" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:31:48.882" level="INFO">Read output: Last login: Thu Nov  7 03:31:37 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:31:48.884" starttime="20191107 03:31:47.694"></status>
</kw>
<status status="PASS" endtime="20191107 03:31:48.884" starttime="20191107 03:31:47.693"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 03:31:48.885" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 03:31:59.052" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:31:59.052" starttime="20191107 03:31:48.885"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 03:31:59.053" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:31:59.128" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:31:59.129" level="INFO">${shutdownMsg} = hadoop     601  0.0  0.0   9556  1168 ?        Ss   03:31   0:00 bash -c sudo ps aux | grep om
hadoop     603  0.0  0.0   9088   668 ?        S    03:31   0:00 grep om</msg>
<status status="PASS" endtime="20191107 03:31:59.129" starttime="20191107 03:31:59.053"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:31:59.162" starttime="20191107 03:31:59.129"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:31:59.163" starttime="20191107 03:31:59.162"></status>
</kw>
<msg timestamp="20191107 03:31:59.163" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 03:31:59.163" starttime="20191107 03:31:47.691"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:31:59.166" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:32:01.184" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:32:01.184" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:01.185" starttime="20191107 03:31:59.164"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:32:01.186" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:01.186" starttime="20191107 03:32:01.185"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:32:01.186" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:32:01.187" starttime="20191107 03:32:01.186"></status>
</kw>
<msg timestamp="20191107 03:32:01.187" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:01.187" starttime="20191107 03:31:59.164"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 03:32:01.189" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:01.189" starttime="20191107 03:32:01.188"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:01.190" starttime="20191107 03:32:01.189"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:01.191" starttime="20191107 03:32:01.190"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 03:32:01.192" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 03:32:01.192" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:01.192" starttime="20191107 03:32:01.191"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 03:32:01.193" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 03:32:01.193" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 03:32:01.193" starttime="20191107 03:32:01.192"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 03:32:01.194" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 03:32:01.194" starttime="20191107 03:32:01.193"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 03:32:01.195" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 03:32:01.195" starttime="20191107 03:32:01.194"></status>
</kw>
<msg timestamp="20191107 03:32:01.195" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191107 03:32:01.196" starttime="20191107 03:31:59.163"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:01.196" starttime="20191107 03:32:01.196"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 03:32:01.198" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20191107 03:32:01.198" starttime="20191107 03:32:01.197"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 03:32:01.199" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20191107 03:32:01.199" starttime="20191107 03:32:01.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 03:32:01.200" level="INFO">${fileName} = 3.txt</msg>
<status status="PASS" endtime="20191107 03:32:01.200" starttime="20191107 03:32:01.199"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:32:01.202" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:32:01.203" starttime="20191107 03:32:01.200"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:32:01.206" level="INFO">Running command 'ozone fs -copyFromLocal 3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:32:05.802" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:32:05.802" level="INFO">${output} = 2019-11-07 03:32:04 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 03:32:04 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 03:32:05.802" starttime="20191107 03:32:01.204"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:32:05.803" level="INFO">2019-11-07 03:32:04 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 03:32:04 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 03:32:04 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 03:32:05.803" starttime="20191107 03:32:05.803"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:32:05.804" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:32:05.804" starttime="20191107 03:32:05.803"></status>
</kw>
<status status="PASS" endtime="20191107 03:32:05.804" starttime="20191107 03:32:01.203"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:32:05.807" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:32:07.921" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:32:07.921" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:32:07.921" starttime="20191107 03:32:05.805"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:32:07.923" level="INFO">1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:32:07.923" starttime="20191107 03:32:07.922"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:32:07.923" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:32:07.923" starttime="20191107 03:32:07.923"></status>
</kw>
<msg timestamp="20191107 03:32:07.924" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
3.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:32:07.924" starttime="20191107 03:32:05.804"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:07.924" starttime="20191107 03:32:07.924"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:32:07.926" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/3.txt"&gt;/opt/hadoop/3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:32:07.926" starttime="20191107 03:32:07.925"></status>
</kw>
<status status="PASS" endtime="20191107 03:32:07.926" starttime="20191107 03:32:01.197"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:32:07.927" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 03:32:07.927" starttime="20191107 03:32:07.927"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:07.928" starttime="20191107 03:32:07.928"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:32:07.929" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:32:09.134" level="INFO">Read output: Last login: Thu Nov  7 03:31:47 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:32:09.135" starttime="20191107 03:32:07.929"></status>
</kw>
<status status="PASS" endtime="20191107 03:32:09.135" starttime="20191107 03:32:07.928"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 03:32:09.137" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 03:32:11.317" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:32:11.318" starttime="20191107 03:32:09.136"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 03:32:11.318" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:32:11.416" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:32:11.416" level="INFO">${startupMsg} = hadoop     654  358  0.0 34482856 223756 ?     Sl   03:32   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 03:32:11.417" starttime="20191107 03:32:11.318"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:32:11.482" starttime="20191107 03:32:11.417"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:11.483" starttime="20191107 03:32:11.482"></status>
</kw>
<status status="PASS" endtime="20191107 03:32:11.483" starttime="20191107 03:32:07.926"></status>
</kw>
<status status="PASS" endtime="20191107 03:32:11.483" starttime="20191107 03:31:45.633"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:32:11.486" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:32:13.275" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:32:13.276" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:13.276" starttime="20191107 03:32:11.484"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:32:13.278" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:13.278" starttime="20191107 03:32:13.277"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:32:13.278" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:32:13.278" starttime="20191107 03:32:13.278"></status>
</kw>
<msg timestamp="20191107 03:32:13.279" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:13.280" starttime="20191107 03:32:11.484"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 03:32:13.283" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:13.283" starttime="20191107 03:32:13.282"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:13.284" starttime="20191107 03:32:13.283"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:13.284" starttime="20191107 03:32:13.284"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 03:32:13.285" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 03:32:13.285" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:13.285" starttime="20191107 03:32:13.285"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 03:32:13.286" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 03:32:13.286" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 03:32:13.286" starttime="20191107 03:32:13.286"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 03:32:13.287" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 03:32:13.287" starttime="20191107 03:32:13.287"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 03:32:13.288" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 03:32:13.288" starttime="20191107 03:32:13.287"></status>
</kw>
<msg timestamp="20191107 03:32:13.288" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 03:32:13.288" starttime="20191107 03:32:11.483"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:32:13.290" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 03:32:13.290" starttime="20191107 03:32:13.290"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:13.292" starttime="20191107 03:32:13.291"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:32:13.293" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:32:14.492" level="INFO">Read output: Last login: Thu Nov  7 03:30:33 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:32:14.492" starttime="20191107 03:32:13.292"></status>
</kw>
<status status="PASS" endtime="20191107 03:32:14.492" starttime="20191107 03:32:13.290"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 03:32:14.493" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 03:32:15.611" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:32:15.612" starttime="20191107 03:32:14.493"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 03:32:15.613" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:32:15.688" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:32:15.689" level="INFO">${shutdownMsg} = hadoop    1104  0.0  0.0   9556  1168 ?        Ss   03:32   0:00 bash -c sudo ps aux | grep om
hadoop    1106  0.0  0.0   9088   672 ?        S    03:32   0:00 grep om</msg>
<status status="PASS" endtime="20191107 03:32:15.689" starttime="20191107 03:32:15.612"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:32:15.722" starttime="20191107 03:32:15.689"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:15.723" starttime="20191107 03:32:15.722"></status>
</kw>
<msg timestamp="20191107 03:32:15.724" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 03:32:15.724" starttime="20191107 03:32:13.289"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:32:15.728" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:32:27.834" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:32:27.834" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:27.834" starttime="20191107 03:32:15.725"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:32:27.835" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:27.835" starttime="20191107 03:32:27.834"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:32:27.836" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:32:27.836" starttime="20191107 03:32:27.835"></status>
</kw>
<msg timestamp="20191107 03:32:27.836" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:27.836" starttime="20191107 03:32:15.725"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 03:32:27.837" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:27.837" starttime="20191107 03:32:27.836"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:27.838" starttime="20191107 03:32:27.837"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:27.838" starttime="20191107 03:32:27.838"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 03:32:27.839" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 03:32:27.839" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:32:27.839" starttime="20191107 03:32:27.839"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 03:32:27.841" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 03:32:27.842" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 03:32:27.842" starttime="20191107 03:32:27.840"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 03:32:27.843" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 03:32:27.844" starttime="20191107 03:32:27.842"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 03:32:27.845" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 03:32:27.845" starttime="20191107 03:32:27.844"></status>
</kw>
<msg timestamp="20191107 03:32:27.846" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191107 03:32:27.846" starttime="20191107 03:32:15.724"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:27.848" starttime="20191107 03:32:27.846"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 03:32:27.850" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20191107 03:32:27.850" starttime="20191107 03:32:27.849"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 03:32:27.852" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20191107 03:32:27.852" starttime="20191107 03:32:27.851"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 03:32:27.853" level="INFO">${fileName} = 4.txt</msg>
<status status="PASS" endtime="20191107 03:32:27.853" starttime="20191107 03:32:27.852"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:32:27.856" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:32:27.856" starttime="20191107 03:32:27.853"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:32:27.860" level="INFO">Running command 'ozone fs -copyFromLocal 4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:32:42.547" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:32:42.547" level="INFO">${output} = 2019-11-07 03:32:30 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191107 03:32:42.547" starttime="20191107 03:32:27.857"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:32:42.549" level="INFO">2019-11-07 03:32:30 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:32:31 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:32:32 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:32:33 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:32:34 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:32:35 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:32:36 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:32:37 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:32:38 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:32:39 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:32:40 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 03:32:40 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 03:32:40 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 03:32:42.549" starttime="20191107 03:32:42.548"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:32:42.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:32:42.550" starttime="20191107 03:32:42.549"></status>
</kw>
<status status="PASS" endtime="20191107 03:32:42.551" starttime="20191107 03:32:27.856"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:32:42.555" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:32:54.923" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:32:54.924" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:32:54.924" starttime="20191107 03:32:42.552"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:32:54.926" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:32:54.926" starttime="20191107 03:32:54.925"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:32:54.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:32:54.927" starttime="20191107 03:32:54.926"></status>
</kw>
<msg timestamp="20191107 03:32:54.928" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:32:54.928" starttime="20191107 03:32:42.551"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:54.929" starttime="20191107 03:32:54.928"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:32:54.930" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/4.txt"&gt;/opt/hadoop/4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:32:54.930" starttime="20191107 03:32:54.929"></status>
</kw>
<status status="PASS" endtime="20191107 03:32:54.930" starttime="20191107 03:32:27.848"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:32:54.932" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 03:32:54.932" starttime="20191107 03:32:54.932"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:54.935" starttime="20191107 03:32:54.934"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:32:54.936" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:32:56.141" level="INFO">Read output: Last login: Thu Nov  7 03:32:13 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:32:56.141" starttime="20191107 03:32:54.935"></status>
</kw>
<status status="PASS" endtime="20191107 03:32:56.142" starttime="20191107 03:32:54.933"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 03:32:56.143" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 03:32:58.282" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:32:58.282" starttime="20191107 03:32:56.142"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 03:32:58.283" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:32:58.371" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:32:58.371" level="INFO">${startupMsg} = hadoop    1155  357  0.0 34476988 225068 ?     Sl   03:32   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 03:32:58.371" starttime="20191107 03:32:58.283"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:32:58.436" starttime="20191107 03:32:58.371"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:32:58.437" starttime="20191107 03:32:58.436"></status>
</kw>
<status status="PASS" endtime="20191107 03:32:58.437" starttime="20191107 03:32:54.931"></status>
</kw>
<status status="PASS" endtime="20191107 03:32:58.437" starttime="20191107 03:32:11.483"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:32:58.440" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:33:01.272" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:33:01.272" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:01.272" starttime="20191107 03:32:58.438"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:33:01.274" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:01.274" starttime="20191107 03:33:01.273"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:33:01.275" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:33:01.275" starttime="20191107 03:33:01.274"></status>
</kw>
<msg timestamp="20191107 03:33:01.275" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:01.275" starttime="20191107 03:32:58.438"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 03:33:01.276" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:01.276" starttime="20191107 03:33:01.275"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:01.276" starttime="20191107 03:33:01.276"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:01.277" starttime="20191107 03:33:01.276"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 03:33:01.278" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 03:33:01.278" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:01.278" starttime="20191107 03:33:01.277"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 03:33:01.279" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 03:33:01.279" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 03:33:01.279" starttime="20191107 03:33:01.278"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 03:33:01.279" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 03:33:01.279" starttime="20191107 03:33:01.279"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 03:33:01.280" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 03:33:01.280" starttime="20191107 03:33:01.279"></status>
</kw>
<msg timestamp="20191107 03:33:01.280" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 03:33:01.280" starttime="20191107 03:32:58.437"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:33:01.281" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 03:33:01.281" starttime="20191107 03:33:01.281"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:01.282" starttime="20191107 03:33:01.282"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:33:01.283" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:33:02.481" level="INFO">Read output: Last login: Thu Nov  7 03:31:44 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:33:02.481" starttime="20191107 03:33:01.282"></status>
</kw>
<status status="PASS" endtime="20191107 03:33:02.482" starttime="20191107 03:33:01.281"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 03:33:02.483" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 03:33:03.640" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:33:03.640" starttime="20191107 03:33:02.482"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 03:33:03.641" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:33:03.706" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:33:03.706" level="INFO">${shutdownMsg} = hadoop    1139  0.0  0.0   9556  1164 ?        Ss   03:33   0:00 bash -c sudo ps aux | grep om
hadoop    1141  0.0  0.0   9088   668 ?        S    03:33   0:00 grep om</msg>
<status status="PASS" endtime="20191107 03:33:03.706" starttime="20191107 03:33:03.641"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:33:03.771" starttime="20191107 03:33:03.707"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:03.772" starttime="20191107 03:33:03.771"></status>
</kw>
<msg timestamp="20191107 03:33:03.772" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 03:33:03.772" starttime="20191107 03:33:01.280"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:33:03.776" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:33:05.838" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:33:05.839" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:05.839" starttime="20191107 03:33:03.774"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:33:05.841" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:05.841" starttime="20191107 03:33:05.840"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:33:05.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:33:05.842" starttime="20191107 03:33:05.841"></status>
</kw>
<msg timestamp="20191107 03:33:05.842" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:05.842" starttime="20191107 03:33:03.773"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 03:33:05.843" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:05.843" starttime="20191107 03:33:05.843"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:05.845" starttime="20191107 03:33:05.844"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:05.845" starttime="20191107 03:33:05.845"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 03:33:05.846" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 03:33:05.846" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:05.846" starttime="20191107 03:33:05.846"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 03:33:05.847" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 03:33:05.847" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 03:33:05.847" starttime="20191107 03:33:05.847"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 03:33:05.848" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 03:33:05.848" starttime="20191107 03:33:05.848"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 03:33:05.849" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 03:33:05.849" starttime="20191107 03:33:05.848"></status>
</kw>
<msg timestamp="20191107 03:33:05.849" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20191107 03:33:05.849" starttime="20191107 03:33:03.773"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:05.850" starttime="20191107 03:33:05.849"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 03:33:05.852" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20191107 03:33:05.852" starttime="20191107 03:33:05.851"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 03:33:05.854" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20191107 03:33:05.854" starttime="20191107 03:33:05.853"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 03:33:05.855" level="INFO">${fileName} = 5.txt</msg>
<status status="PASS" endtime="20191107 03:33:05.855" starttime="20191107 03:33:05.854"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:33:05.857" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:33:05.857" starttime="20191107 03:33:05.856"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:33:05.861" level="INFO">Running command 'ozone fs -copyFromLocal 5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:33:10.259" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:33:10.259" level="INFO">${output} = 2019-11-07 03:33:08 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 03:33:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 03:33:10.259" starttime="20191107 03:33:05.859"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:33:10.261" level="INFO">2019-11-07 03:33:08 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 03:33:08 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 03:33:08 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 03:33:10.261" starttime="20191107 03:33:10.260"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:33:10.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:33:10.262" starttime="20191107 03:33:10.261"></status>
</kw>
<status status="PASS" endtime="20191107 03:33:10.262" starttime="20191107 03:33:05.858"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:33:10.265" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:33:12.640" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:33:12.640" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:33:12.640" starttime="20191107 03:33:10.263"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:33:12.642" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:33:12.642" starttime="20191107 03:33:12.641"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:33:12.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:33:12.644" starttime="20191107 03:33:12.643"></status>
</kw>
<msg timestamp="20191107 03:33:12.644" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
4.txt
5.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:33:12.644" starttime="20191107 03:33:10.262"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:12.645" starttime="20191107 03:33:12.645"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:33:12.647" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/5.txt"&gt;/opt/hadoop/5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:33:12.647" starttime="20191107 03:33:12.646"></status>
</kw>
<status status="PASS" endtime="20191107 03:33:12.647" starttime="20191107 03:33:05.850"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:33:12.649" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191107 03:33:12.649" starttime="20191107 03:33:12.648"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:12.651" starttime="20191107 03:33:12.650"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:33:12.652" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:33:13.858" level="INFO">Read output: Last login: Thu Nov  7 03:33:01 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:33:13.859" starttime="20191107 03:33:12.652"></status>
</kw>
<status status="PASS" endtime="20191107 03:33:13.859" starttime="20191107 03:33:12.650"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 03:33:13.860" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 03:33:16.009" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:33:16.010" starttime="20191107 03:33:13.860"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 03:33:16.010" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:33:16.076" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:33:16.076" level="INFO">${startupMsg} = hadoop    1190  356  0.0 34474820 223612 ?     Sl   03:33   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 03:33:16.076" starttime="20191107 03:33:16.010"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:33:16.141" starttime="20191107 03:33:16.076"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:16.143" starttime="20191107 03:33:16.142"></status>
</kw>
<status status="PASS" endtime="20191107 03:33:16.143" starttime="20191107 03:33:12.647"></status>
</kw>
<status status="PASS" endtime="20191107 03:33:16.143" starttime="20191107 03:32:58.437"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:33:16.147" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:33:18.101" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:33:18.101" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:18.101" starttime="20191107 03:33:16.145"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:33:18.102" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:18.102" starttime="20191107 03:33:18.101"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:33:18.102" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:33:18.103" starttime="20191107 03:33:18.102"></status>
</kw>
<msg timestamp="20191107 03:33:18.103" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:18.103" starttime="20191107 03:33:16.144"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 03:33:18.104" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:18.104" starttime="20191107 03:33:18.103"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:18.104" starttime="20191107 03:33:18.104"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:18.105" starttime="20191107 03:33:18.104"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 03:33:18.105" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 03:33:18.105" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:18.105" starttime="20191107 03:33:18.105"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 03:33:18.106" level="INFO">${split1} = om3 </msg>
<msg timestamp="20191107 03:33:18.106" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 03:33:18.106" starttime="20191107 03:33:18.106"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 03:33:18.107" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 03:33:18.107" starttime="20191107 03:33:18.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 03:33:18.107" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20191107 03:33:18.108" starttime="20191107 03:33:18.107"></status>
</kw>
<msg timestamp="20191107 03:33:18.108" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20191107 03:33:18.108" starttime="20191107 03:33:16.144"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:33:18.109" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 03:33:18.109" starttime="20191107 03:33:18.109"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:18.110" starttime="20191107 03:33:18.110"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:33:18.111" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:33:19.309" level="INFO">Read output: Last login: Thu Nov  7 03:32:08 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:33:19.310" starttime="20191107 03:33:18.110"></status>
</kw>
<status status="PASS" endtime="20191107 03:33:19.310" starttime="20191107 03:33:18.109"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 03:33:19.311" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 03:33:20.442" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:33:20.443" starttime="20191107 03:33:19.311"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 03:33:20.444" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:33:20.521" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:33:20.521" level="INFO">${shutdownMsg} = hadoop    1156  0.0  0.0   9556  1164 ?        Ss   03:33   0:00 bash -c sudo ps aux | grep om
hadoop    1158  0.0  0.0   9088   672 ?        S    03:33   0:00 grep om</msg>
<status status="PASS" endtime="20191107 03:33:20.521" starttime="20191107 03:33:20.443"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:33:20.554" starttime="20191107 03:33:20.522"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:20.556" starttime="20191107 03:33:20.555"></status>
</kw>
<msg timestamp="20191107 03:33:20.557" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 03:33:20.557" starttime="20191107 03:33:18.108"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:33:20.562" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:33:32.761" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:33:32.761" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:32.761" starttime="20191107 03:33:20.559"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:33:32.762" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:32.762" starttime="20191107 03:33:32.762"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:33:32.763" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:33:32.763" starttime="20191107 03:33:32.763"></status>
</kw>
<msg timestamp="20191107 03:33:32.763" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:32.764" starttime="20191107 03:33:20.558"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 03:33:32.764" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:32.764" starttime="20191107 03:33:32.764"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:32.765" starttime="20191107 03:33:32.764"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:32.765" starttime="20191107 03:33:32.765"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 03:33:32.766" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 03:33:32.766" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:32.766" starttime="20191107 03:33:32.765"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 03:33:32.767" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 03:33:32.767" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 03:33:32.767" starttime="20191107 03:33:32.766"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 03:33:32.767" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 03:33:32.767" starttime="20191107 03:33:32.767"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 03:33:32.768" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 03:33:32.768" starttime="20191107 03:33:32.768"></status>
</kw>
<msg timestamp="20191107 03:33:32.768" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20191107 03:33:32.768" starttime="20191107 03:33:20.557"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:32.769" starttime="20191107 03:33:32.769"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 03:33:32.770" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20191107 03:33:32.770" starttime="20191107 03:33:32.770"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 03:33:32.771" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20191107 03:33:32.771" starttime="20191107 03:33:32.771"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 03:33:32.772" level="INFO">${fileName} = 6.txt</msg>
<status status="PASS" endtime="20191107 03:33:32.772" starttime="20191107 03:33:32.772"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:33:32.775" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:33:32.775" starttime="20191107 03:33:32.773"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:33:32.780" level="INFO">Running command 'ozone fs -copyFromLocal 6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:33:36.941" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:33:36.941" level="INFO">${output} = 2019-11-07 03:33:35 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 03:33:35 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019...</msg>
<status status="PASS" endtime="20191107 03:33:36.941" starttime="20191107 03:33:32.777"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:33:36.943" level="INFO">2019-11-07 03:33:35 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 03:33:35 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 03:33:35 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 03:33:36.944" starttime="20191107 03:33:36.942"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:33:36.944" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:33:36.945" starttime="20191107 03:33:36.944"></status>
</kw>
<status status="PASS" endtime="20191107 03:33:36.945" starttime="20191107 03:33:32.776"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:33:36.950" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:33:39.196" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:33:39.196" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:33:39.196" starttime="20191107 03:33:36.947"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:33:39.197" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:33:39.197" starttime="20191107 03:33:39.197"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:33:39.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:33:39.198" starttime="20191107 03:33:39.198"></status>
</kw>
<msg timestamp="20191107 03:33:39.199" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
5.txt
6.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:33:39.199" starttime="20191107 03:33:36.946"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:39.199" starttime="20191107 03:33:39.199"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:33:39.201" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/6.txt"&gt;/opt/hadoop/6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:33:39.201" starttime="20191107 03:33:39.199"></status>
</kw>
<status status="PASS" endtime="20191107 03:33:39.201" starttime="20191107 03:33:32.769"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:33:39.202" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20191107 03:33:39.203" starttime="20191107 03:33:39.202"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:39.204" starttime="20191107 03:33:39.203"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:33:39.204" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:33:40.409" level="INFO">Read output: Last login: Thu Nov  7 03:33:18 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:33:40.410" starttime="20191107 03:33:39.204"></status>
</kw>
<status status="PASS" endtime="20191107 03:33:40.410" starttime="20191107 03:33:39.203"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 03:33:40.411" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 03:33:42.569" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:33:42.569" starttime="20191107 03:33:40.411"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 03:33:42.570" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:33:42.677" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:33:42.678" level="INFO">${startupMsg} = hadoop    1207  346  0.0 34483452 227748 ?     Sl   03:33   0:06 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 03:33:42.678" starttime="20191107 03:33:42.570"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:33:42.711" starttime="20191107 03:33:42.678"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:42.711" starttime="20191107 03:33:42.711"></status>
</kw>
<status status="PASS" endtime="20191107 03:33:42.712" starttime="20191107 03:33:39.201"></status>
</kw>
<status status="PASS" endtime="20191107 03:33:42.712" starttime="20191107 03:33:16.143"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:33:42.715" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:33:44.530" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:33:44.531" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:44.531" starttime="20191107 03:33:42.713"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:33:44.533" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:44.533" starttime="20191107 03:33:44.532"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:33:44.534" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:33:44.534" starttime="20191107 03:33:44.533"></status>
</kw>
<msg timestamp="20191107 03:33:44.535" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:44.535" starttime="20191107 03:33:42.712"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 03:33:44.536" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:44.536" starttime="20191107 03:33:44.535"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:44.537" starttime="20191107 03:33:44.536"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:44.538" starttime="20191107 03:33:44.537"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 03:33:44.539" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 03:33:44.539" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:44.539" starttime="20191107 03:33:44.538"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 03:33:44.540" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191107 03:33:44.540" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 03:33:44.540" starttime="20191107 03:33:44.539"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 03:33:44.541" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 03:33:44.542" starttime="20191107 03:33:44.541"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 03:33:44.543" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191107 03:33:44.543" starttime="20191107 03:33:44.542"></status>
</kw>
<msg timestamp="20191107 03:33:44.543" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191107 03:33:44.544" starttime="20191107 03:33:42.712"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:33:44.546" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 03:33:44.546" starttime="20191107 03:33:44.545"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:44.548" starttime="20191107 03:33:44.547"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:33:44.549" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:33:45.747" level="INFO">Read output: Last login: Thu Nov  7 03:32:55 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:33:45.747" starttime="20191107 03:33:44.548"></status>
</kw>
<status status="PASS" endtime="20191107 03:33:45.748" starttime="20191107 03:33:44.546"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191107 03:33:45.749" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191107 03:33:46.908" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:33:46.908" starttime="20191107 03:33:45.748"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191107 03:33:46.910" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:33:47.008" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:33:47.009" level="INFO">${shutdownMsg} = hadoop    1663  0.0  0.0   9556  1168 ?        Ss   03:33   0:00 bash -c sudo ps aux | grep om
hadoop    1665  0.0  0.0   9088   672 ?        S    03:33   0:00 grep om</msg>
<status status="PASS" endtime="20191107 03:33:47.009" starttime="20191107 03:33:46.909"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:33:47.075" starttime="20191107 03:33:47.009"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:47.076" starttime="20191107 03:33:47.075"></status>
</kw>
<msg timestamp="20191107 03:33:47.077" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191107 03:33:47.077" starttime="20191107 03:33:44.544"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:33:47.082" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:33:59.152" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:33:59.152" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:59.152" starttime="20191107 03:33:47.078"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:33:59.154" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:59.154" starttime="20191107 03:33:59.153"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:33:59.154" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:33:59.154" starttime="20191107 03:33:59.154"></status>
</kw>
<msg timestamp="20191107 03:33:59.155" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:59.155" starttime="20191107 03:33:47.078"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191107 03:33:59.155" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:59.155" starttime="20191107 03:33:59.155"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:59.156" starttime="20191107 03:33:59.156"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:59.157" starttime="20191107 03:33:59.156"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191107 03:33:59.157" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191107 03:33:59.157" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20191107 03:33:59.157" starttime="20191107 03:33:59.157"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191107 03:33:59.158" level="INFO">${split1} = om2 </msg>
<msg timestamp="20191107 03:33:59.158" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191107 03:33:59.158" starttime="20191107 03:33:59.158"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191107 03:33:59.159" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20191107 03:33:59.159" starttime="20191107 03:33:59.158"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191107 03:33:59.159" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20191107 03:33:59.160" starttime="20191107 03:33:59.159"></status>
</kw>
<msg timestamp="20191107 03:33:59.160" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20191107 03:33:59.160" starttime="20191107 03:33:47.077"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20191107 03:33:59.161" starttime="20191107 03:33:59.160"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20191107 03:33:59.162" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20191107 03:33:59.162" starttime="20191107 03:33:59.161"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20191107 03:33:59.163" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20191107 03:33:59.163" starttime="20191107 03:33:59.162"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20191107 03:33:59.163" level="INFO">${fileName} = 7.txt</msg>
<status status="PASS" endtime="20191107 03:33:59.163" starttime="20191107 03:33:59.163"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:33:59.165" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:33:59.165" starttime="20191107 03:33:59.163"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${fileName} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:33:59.168" level="INFO">Running command 'ozone fs -copyFromLocal 7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:34:13.674" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:34:13.674" level="INFO">${output} = 2019-11-07 03:34:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20191107 03:34:13.674" starttime="20191107 03:33:59.166"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:34:13.675" level="INFO">2019-11-07 03:34:02 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:34:03 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:34:04 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:34:05 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:34:06 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:34:07 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:34:08 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:34:09 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:34:10 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:34:11 INFO  Client:948 - Retrying connect to server: om1/172.18.0.5:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2019-11-07 03:34:11 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2019-11-07 03:34:12 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2019-11-07 03:34:12 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil (file:/opt/hadoop/share/ozone/lib/ratis-thirdparty-misc-0.2.0.jar) to field java.nio.Buffer.address
WARNING: Please consider reporting this to the maintainers of org.apache.ratis.thirdparty.com.google.protobuf.UnsafeUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release</msg>
<status status="PASS" endtime="20191107 03:34:13.676" starttime="20191107 03:34:13.675"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:34:13.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:34:13.676" starttime="20191107 03:34:13.676"></status>
</kw>
<status status="PASS" endtime="20191107 03:34:13.677" starttime="20191107 03:33:59.165"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | grep -v WARN | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191107 03:34:13.680" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | grep -v WARN | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20191107 03:34:25.884" level="INFO">${rc} = 0</msg>
<msg timestamp="20191107 03:34:25.884" level="INFO">${output} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:34:25.885" starttime="20191107 03:34:13.678"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191107 03:34:25.886" level="INFO">1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:34:25.886" starttime="20191107 03:34:25.885"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191107 03:34:25.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191107 03:34:25.887" starttime="20191107 03:34:25.886"></status>
</kw>
<msg timestamp="20191107 03:34:25.887" level="INFO">${result} = 1.txt
1.txt._COPYING_
2.txt
2.txt._COPYING_
3.txt
3.txt._COPYING_
4.txt
4.txt._COPYING_
5.txt
6.txt
7.txt
testOMRestart_0_0
testOMRestart_0_1
testOMRestart_0_2
testOMRestart_0_3
testOMRestart_0_4</msg>
<status status="PASS" endtime="20191107 03:34:25.887" starttime="20191107 03:34:13.677"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:34:25.888" starttime="20191107 03:34:25.887"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${fileName}</arg>
</arguments>
<msg timestamp="20191107 03:34:25.889" html="yes" level="INFO">Removed file '&lt;a href="file:///opt/hadoop/7.txt"&gt;/opt/hadoop/7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20191107 03:34:25.889" starttime="20191107 03:34:25.888"></status>
</kw>
<status status="PASS" endtime="20191107 03:34:25.889" starttime="20191107 03:33:59.161"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191107 03:34:25.890" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191107 03:34:25.890" starttime="20191107 03:34:25.890"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191107 03:34:25.892" starttime="20191107 03:34:25.891"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191107 03:34:25.892" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191107 03:34:27.097" level="INFO">Read output: Last login: Thu Nov  7 03:33:44 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191107 03:34:27.097" starttime="20191107 03:34:25.892"></status>
</kw>
<status status="PASS" endtime="20191107 03:34:27.098" starttime="20191107 03:34:25.890"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
</arguments>
<msg timestamp="20191107 03:34:27.099" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20191107 03:34:29.259" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191107 03:34:29.259" starttime="20191107 03:34:27.098"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${startupMsg}</var>
</assign>
<msg timestamp="20191107 03:34:29.260" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191107 03:34:29.325" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191107 03:34:29.326" level="INFO">${startupMsg} = hadoop    1715  387  0.0 34483500 225116 ?     Sl   03:34   0:07 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -D...</msg>
<status status="PASS" endtime="20191107 03:34:29.326" starttime="20191107 03:34:29.260"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191107 03:34:29.391" starttime="20191107 03:34:29.326"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startupMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191107 03:34:29.392" starttime="20191107 03:34:29.391"></status>
</kw>
<status status="PASS" endtime="20191107 03:34:29.392" starttime="20191107 03:34:25.889"></status>
</kw>
<status status="PASS" endtime="20191107 03:34:29.393" starttime="20191107 03:33:42.712"></status>
</kw>
<status status="PASS" endtime="20191107 03:34:29.393" starttime="20191107 03:31:45.632"></status>
</kw>
<status status="PASS" endtime="20191107 03:34:29.393" critical="yes" starttime="20191107 03:31:45.631"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20191107 03:34:29.395" starttime="20191107 03:29:28.343"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-testOMHA" pass="3">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
