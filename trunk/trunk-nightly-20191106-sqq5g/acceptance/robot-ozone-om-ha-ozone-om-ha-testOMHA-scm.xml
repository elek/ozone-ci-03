<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20191106 03:45:33.706" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 03:45:33.878" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 03:45:36.326" level="INFO">${rc} = 255</msg>
<msg timestamp="20191106 03:45:36.326" level="INFO">${output} = Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191106 03:45:36.326" starttime="20191106 03:45:33.876"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 03:45:36.327" level="INFO">Couldn't create RpcClient protocol</msg>
<status status="PASS" endtime="20191106 03:45:36.328" starttime="20191106 03:45:36.327"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 03:45:36.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191106 03:45:36.329" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191106 03:45:36.333" starttime="20191106 03:45:36.328"></status>
</kw>
<status status="FAIL" endtime="20191106 03:45:36.334" starttime="20191106 03:45:33.875"></status>
</kw>
<status status="FAIL" endtime="20191106 03:45:36.334" starttime="20191106 03:45:33.875"></status>
</kw>
<status status="FAIL" endtime="20191106 03:45:36.334" critical="yes" starttime="20191106 03:45:33.874">255 != 0</status>
</test>
<test id="s1-t2" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20191106 03:45:36.338" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20191106 03:45:36.339" starttime="20191106 03:45:36.336"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20191106 03:45:36.341" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20191106 03:45:36.341" starttime="20191106 03:45:36.339"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 03:45:36.343" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 03:45:36.343" starttime="20191106 03:45:36.342"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 03:45:36.345" starttime="20191106 03:45:36.344"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 03:45:36.345" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 03:45:37.229" level="INFO">Read output:</msg>
<status status="PASS" endtime="20191106 03:45:37.230" starttime="20191106 03:45:36.345"></status>
</kw>
<status status="PASS" endtime="20191106 03:45:37.230" starttime="20191106 03:45:36.343"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 03:45:37.231" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 03:45:47.408" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 03:45:47.408" starttime="20191106 03:45:37.231"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 03:45:47.409" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 03:45:47.507" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 03:45:47.508" level="INFO">${shutdownMsg} = hadoop     417  0.0  0.0   9556  1168 ?        Ss   03:45   0:00 bash -c sudo ps aux | grep om
hadoop     419  0.0  0.0   9088   668 ?        S    03:45   0:00 grep om</msg>
<status status="PASS" endtime="20191106 03:45:47.508" starttime="20191106 03:45:47.409"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 03:45:47.573" starttime="20191106 03:45:47.508"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 03:45:47.575" starttime="20191106 03:45:47.574"></status>
</kw>
<status status="PASS" endtime="20191106 03:45:47.575" starttime="20191106 03:45:36.341"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 03:45:47.577" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20191106 03:45:47.577" starttime="20191106 03:45:47.576"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 03:45:47.579" starttime="20191106 03:45:47.578"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 03:45:47.580" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20191106 03:45:48.784" level="INFO">Read output: Last login: Wed Nov  6 03:45:36 2019 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20191106 03:45:48.784" starttime="20191106 03:45:47.579"></status>
</kw>
<status status="PASS" endtime="20191106 03:45:48.785" starttime="20191106 03:45:47.577"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
</arguments>
<assign>
<var>${gorupId}</var>
</assign>
<msg timestamp="20191106 03:45:48.786" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20191106 03:45:48.802" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 03:45:48.802" level="INFO">${gorupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 03:45:48.802" starttime="20191106 03:45:48.785"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${gorupId}</arg>
</arguments>
<msg timestamp="20191106 03:45:48.803" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20191106 03:45:48.803" starttime="20191106 03:45:48.803"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${gorupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20191106 03:45:48.804" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20191106 03:45:48.804" starttime="20191106 03:45:48.804"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20191106 03:45:48.886" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20191106 03:45:48.901" level="INFO">1 file:
log_inprogress_0</msg>
<msg timestamp="20191106 03:45:48.902" level="INFO">@{logs} = [ log_inprogress_0 ]</msg>
<status status="PASS" endtime="20191106 03:45:48.902" starttime="20191106 03:45:48.805"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20191106 03:45:48.903" level="INFO">Length is 1</msg>
<msg timestamp="20191106 03:45:48.904" level="INFO">${numLogs} = 1</msg>
<status status="PASS" endtime="20191106 03:45:48.904" starttime="20191106 03:45:48.902"></status>
</kw>
<msg timestamp="20191106 03:45:48.905" level="INFO">${numLogsBefore} = 1</msg>
<msg timestamp="20191106 03:45:48.905" level="INFO">@{logsBefore} = [ [u'log_inprogress_0'] ]</msg>
<status status="PASS" endtime="20191106 03:45:48.905" starttime="20191106 03:45:47.575"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 03:45:48.912" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 03:45:51.302" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 03:45:51.302" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 03:45:51.302" starttime="20191106 03:45:48.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 03:45:51.304" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 03:45:51.304" starttime="20191106 03:45:51.303"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 03:45:51.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 03:45:51.305" starttime="20191106 03:45:51.304"></status>
</kw>
<msg timestamp="20191106 03:45:51.306" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 03:45:51.306" starttime="20191106 03:45:48.907"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 03:45:51.307" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 03:45:51.307" starttime="20191106 03:45:51.306"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 03:45:51.309" starttime="20191106 03:45:51.307"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 03:45:51.311" starttime="20191106 03:45:51.309"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 03:45:51.312" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 03:45:51.312" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 03:45:51.313" starttime="20191106 03:45:51.311"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 03:45:51.314" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 03:45:51.314" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 03:45:51.314" starttime="20191106 03:45:51.313"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 03:45:51.316" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 03:45:51.316" starttime="20191106 03:45:51.315"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 03:45:51.317" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 03:45:51.318" starttime="20191106 03:45:51.317"></status>
</kw>
<msg timestamp="20191106 03:45:51.318" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 03:45:51.318" starttime="20191106 03:45:48.906"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20191106 03:45:51.324" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20191106 03:45:51.324" starttime="20191106 03:45:51.320"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20191106 03:45:51.327" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20191106 03:45:51.327" starttime="20191106 03:45:51.326"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20191106 03:45:51.328" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20191106 03:45:51.328" starttime="20191106 03:45:51.327"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 03:45:51.332" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 03:45:53.514" level="INFO">${rc} = 255</msg>
<msg timestamp="20191106 03:45:53.514" level="INFO">${output} = VOLUME_NOT_FOUND Volume volume1 is not found</msg>
<status status="PASS" endtime="20191106 03:45:53.514" starttime="20191106 03:45:51.330"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 03:45:53.516" level="INFO">VOLUME_NOT_FOUND Volume volume1 is not found</msg>
<status status="PASS" endtime="20191106 03:45:53.517" starttime="20191106 03:45:53.515"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 03:45:53.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191106 03:45:53.519" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191106 03:45:53.519" starttime="20191106 03:45:53.517"></status>
</kw>
<status status="FAIL" endtime="20191106 03:45:53.519" starttime="20191106 03:45:51.329"></status>
</kw>
<status status="FAIL" endtime="20191106 03:45:53.520" starttime="20191106 03:45:51.328"></status>
</kw>
<status status="FAIL" endtime="20191106 03:45:53.520" starttime="20191106 03:45:51.326"></status>
</kw>
<status status="FAIL" endtime="20191106 03:45:53.520" starttime="20191106 03:45:51.325"></status>
</kw>
<status status="FAIL" endtime="20191106 03:45:53.521" starttime="20191106 03:45:51.324"></status>
</kw>
<status status="FAIL" endtime="20191106 03:45:53.521" starttime="20191106 03:45:51.319"></status>
</kw>
<status status="FAIL" endtime="20191106 03:45:53.521" starttime="20191106 03:45:51.319"></status>
</kw>
<status status="FAIL" endtime="20191106 03:45:53.521" critical="yes" starttime="20191106 03:45:36.335">255 != 0</status>
</test>
<test id="s1-t3" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 03:45:53.528" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 03:45:55.539" level="INFO">${rc} = 0</msg>
<msg timestamp="20191106 03:45:55.539" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 03:45:55.539" starttime="20191106 03:45:53.525"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 03:45:55.541" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 03:45:55.541" starttime="20191106 03:45:55.540"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 03:45:55.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20191106 03:45:55.541" starttime="20191106 03:45:55.541"></status>
</kw>
<msg timestamp="20191106 03:45:55.542" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 03:45:55.542" starttime="20191106 03:45:53.524"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20191106 03:45:55.542" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20191106 03:45:55.542" starttime="20191106 03:45:55.542"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20191106 03:45:55.543" starttime="20191106 03:45:55.542"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20191106 03:45:55.543" starttime="20191106 03:45:55.543"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20191106 03:45:55.544" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20191106 03:45:55.544" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20191106 03:45:55.544" starttime="20191106 03:45:55.544"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20191106 03:45:55.545" level="INFO">${split1} = om1 </msg>
<msg timestamp="20191106 03:45:55.545" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20191106 03:45:55.545" starttime="20191106 03:45:55.544"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20191106 03:45:55.545" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 03:45:55.545" starttime="20191106 03:45:55.545"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20191106 03:45:55.546" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20191106 03:45:55.546" starttime="20191106 03:45:55.546"></status>
</kw>
<msg timestamp="20191106 03:45:55.546" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20191106 03:45:55.546" starttime="20191106 03:45:53.524"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20191106 03:45:55.548" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20191106 03:45:55.548" starttime="20191106 03:45:55.547"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20191106 03:45:55.549" starttime="20191106 03:45:55.548"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20191106 03:45:55.549" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20191106 03:45:56.738" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20191106 03:45:56.739" starttime="20191106 03:45:55.549"></status>
</kw>
<status status="PASS" endtime="20191106 03:45:56.739" starttime="20191106 03:45:55.548"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
</arguments>
<msg timestamp="20191106 03:45:56.740" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20191106 03:46:06.921" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20191106 03:46:06.922" starttime="20191106 03:45:56.740"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
</arguments>
<assign>
<var>${shutdownMsg}</var>
</assign>
<msg timestamp="20191106 03:46:06.923" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20191106 03:46:07.032" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20191106 03:46:07.032" level="INFO">${shutdownMsg} = hadoop     489  0.0  0.0   9556  1168 ?        Ss   03:46   0:00 bash -c sudo ps aux | grep om
hadoop     491  0.0  0.0   9088   668 ?        S    03:46   0:00 grep om</msg>
<status status="PASS" endtime="20191106 03:46:07.032" starttime="20191106 03:46:06.922"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20191106 03:46:07.097" starttime="20191106 03:46:07.033"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${shutdownMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20191106 03:46:07.098" starttime="20191106 03:46:07.098"></status>
</kw>
<msg timestamp="20191106 03:46:07.099" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20191106 03:46:07.099" starttime="20191106 03:45:55.547"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20191106 03:46:07.103" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20191106 03:47:08.750" level="INFO">${rc} = 255</msg>
<msg timestamp="20191106 03:47:08.751" level="INFO">${output} = Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
jav...</msg>
<status status="PASS" endtime="20191106 03:47:08.751" starttime="20191106 03:46:07.101"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20191106 03:47:08.753" level="INFO">Failed to connect to OMs: [nodeId=om1,nodeAddress=om1:9862, nodeId=om3,nodeAddress=om3:9862, nodeId=om2,nodeAddress=om2:9862]. Attempted 6 failovers.
Couldn't create RpcClient protocol exception: 
java.net.ConnectException: Call From 71cd73ca91e3/172.18.0.7 to om2:9862 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.apache.hadoop.net.NetUtils.wrapWithMessage(NetUtils.java:831)
	at org.apache.hadoop.net.NetUtils.wrapException(NetUtils.java:755)
	at org.apache.hadoop.ipc.Client.getRpcResponse(Client.java:1515)
	at org.apache.hadoop.ipc.Client.call(Client.java:1457)
	at org.apache.hadoop.ipc.Client.call(Client.java:1367)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:228)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:116)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:422)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeMethod(RetryInvocationHandler.java:165)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invoke(RetryInvocationHandler.java:157)
	at org.apache.hadoop.io.retry.RetryInvocationHandler$Call.invokeOnce(RetryInvocationHandler.java:95)
	at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:359)
	at com.sun.proxy.$Proxy16.submitRequest(Unknown Source)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.submitRequest(OzoneManagerProtocolClientSideTranslatorPB.java:358)
	at org.apache.hadoop.ozone.om.protocolPB.OzoneManagerProtocolClientSideTranslatorPB.getServiceInfo(OzoneManagerProtocolClientSideTranslatorPB.java:1249)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.hadoop.hdds.tracing.TraceAllMethod.invoke(TraceAllMethod.java:66)
	at com.sun.proxy.$Proxy17.getServiceInfo(Unknown Source)
	at org.apache.hadoop.ozone.client.rpc.RpcClient.&lt;init&gt;(RpcClient.java:156)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getClientProtocol(OzoneClientFactory.java:256)
	at org.apache.hadoop.ozone.client.OzoneClientFactory.getRpcClient(OzoneClientFactory.java:187)
	at org.apache.hadoop.ozone.admin.om.OMAdmin.createClient(OMAdmin.java:59)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:49)
	at org.apache.hadoop.ozone.admin.om.GetServiceRolesSubcommand.call(GetServiceRolesSubcommand.java:32)
	at picocli.CommandLine.execute(CommandLine.java:1173)
	at picocli.CommandLine.access$800(CommandLine.java:141)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1367)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:1335)
	at picocli.CommandLine$AbstractParseResultHandler.handleParseResult(CommandLine.java:1243)
	at picocli.CommandLine.parseWithHandlers(CommandLine.java:1526)
	at picocli.CommandLine.parseWithHandler(CommandLine.java:1465)
	at org.apache.hadoop.hdds.cli.GenericCli.execute(GenericCli.java:65)
	at org.apache.hadoop.hdds.cli.GenericCli.run(GenericCli.java:56)
	at org.apache.hadoop.ozone.admin.OzoneAdmin.main(OzoneAdmin.java:66)
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:779)
	at org.apache.hadoop.net.SocketIOWithTimeout.connect(SocketIOWithTimeout.java:206)
	at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:531)
	at org.apache.hadoop.ipc.Client$Connection.setupConnection(Client.java:690)
	at org.apache.hadoop.ipc.Client$Connection.setupIOstreams(Client.java:794)
	at org.apache.hadoop.ipc.Client$Connection.access$3700(Client.java:411)
	at org.apache.hadoop.ipc.Client.getConnection(Client.java:1572)
	at org.apache.hadoop.ipc.Client.call(Client.java:1403)
	... 38 more
Connection refused</msg>
<status status="PASS" endtime="20191106 03:47:08.753" starttime="20191106 03:47:08.752"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191106 03:47:08.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20191106 03:47:08.755" level="FAIL">255 != 0</msg>
<status status="FAIL" endtime="20191106 03:47:08.755" starttime="20191106 03:47:08.753"></status>
</kw>
<status status="FAIL" endtime="20191106 03:47:08.755" starttime="20191106 03:46:07.100"></status>
</kw>
<status status="FAIL" endtime="20191106 03:47:08.756" starttime="20191106 03:46:07.099"></status>
</kw>
<status status="FAIL" endtime="20191106 03:47:08.756" starttime="20191106 03:45:53.523"></status>
</kw>
<status status="FAIL" endtime="20191106 03:47:08.756" starttime="20191106 03:45:53.523"></status>
</kw>
<status status="FAIL" endtime="20191106 03:47:08.757" critical="yes" starttime="20191106 03:45:53.522">255 != 0</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20191106 03:47:08.758" starttime="20191106 03:45:33.707"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="3" id="s1" name="ozone-om-ha-testOMHA" pass="0">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
